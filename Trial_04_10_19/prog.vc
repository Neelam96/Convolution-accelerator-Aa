// Virtual circuit produced from Aa description by Aa2VC 
// $pipe  acc_mem_request_1 : $uint<32>  $depth 2 
// can point into 
// in scope  top-level
$pipe [acc_mem_request_1] 32 $depth 2 
// $pipe  acc_mem_request_2 : $uint<32>  $depth 2 
// can point into 
// in scope  top-level
$pipe [acc_mem_request_2] 32 $depth 2 
// $pipe  acc_mem_response_1 : $uint<16>  $depth 2 
// can point into 
// in scope  top-level
$pipe [acc_mem_response_1] 16 $depth 2 
// $pipe  acc_mem_response_2 : $uint<16>  $depth 2 
// can point into 
// in scope  top-level
$pipe [acc_mem_response_2] 16 $depth 2 
// $pipe  accelerator_done : $uint<16>  $depth 2 
// can point into 
// in scope  top-level
$pipe [accelerator_done] 16 $depth 2 
// $pipe  env_mem_request_1 : $uint<32>  $depth 5 
// can point into 
// in scope  top-level
$pipe [env_mem_request_1] 32 $depth 5 
// $pipe  env_mem_request_2 : $uint<32>  $depth 8 
// can point into 
// in scope  top-level
$pipe [env_mem_request_2] 32 $depth 8 
// $pipe  env_mem_response_1 : $uint<16>  $depth 2 
// can point into 
// in scope  top-level
$pipe [env_mem_response_1] 16 $depth 2 
// $pipe  env_mem_response_2 : $uint<16>  $depth 2 
// can point into 
// in scope  top-level
$pipe [env_mem_response_2] 16 $depth 2 
// $pipe  filter_fill_request : $uint<32>  $depth 2 
// can point into 
// in scope  top-level
$pipe [filter_fill_request] 32 $depth 2 
// $pipe  filter_response : $uint<16>  $depth 2 
// can point into 
// in scope  top-level
$pipe [filter_response] 16 $depth 2 
// $pipe  read_sums : $uint<16>  $depth 2 
// can point into 
// in scope  top-level
$pipe [read_sums] 16 $depth 2 
// $pipe  start_accelerator : $uint<16>  $depth 2 
// can point into 
// in scope  top-level
$pipe [start_accelerator] 16 $depth 2 
// load store constants for object filter
$constant $W[filter_base_address] : $int<4> := _b0000
$constant $W[filter_start_addr] : $int<6> := _b001000// 8
// load store constants for object ifmaps
$constant $W[ifmaps_base_address] : $int<4> := _b0000
// load store constants for object ifmaps2
$constant $W[ifmaps2_base_address] : $int<4> := _b0000
$constant $W[last_value_J] : $int<5> := _b00100// 4
// load store constants for object mem_array
$constant $W[mem_array_base_address] : $int<7> := _b0000000
$constant $W[read_signal] : $int<1> := _b1// 1
$constant $W[start_accelerator_col] : $int<5> := _b00101// 5
$constant $W[start_accelerator_row] : $int<6> := _b001001// 9
$constant $W[unused_const] : $int<4> := _b0000// 0
$constant $W[write_data_one] : $int<16> := _b0000000000000001// 1
$constant $W[write_data_zero] : $int<16> := _b0000000000000000// 0
$constant $W[write_signal] : $int<1> := _b0// 0
$memoryspace [memory_space_0] 
{
  $capacity 16
  $datawidth 16
  $addrwidth 4
  $maxaccesswidth 16
  // $storage  filter : $array[4][4] $of $uint<16> // memory space index = 0  base address = 0  word size = 16
  // can point into 
  // in scope  top-level
  $object [filter] : $array[16] $of $int<16>
}
$memoryspace [memory_space_1] 
{
  $capacity 16
  $datawidth 16
  $addrwidth 4
  $maxaccesswidth 16
  // $storage  ifmaps : $array[4][4] $of $uint<16> // memory space index = 1  base address = 0  word size = 16
  // can point into 
  // in scope  top-level
  $object [ifmaps] : $array[16] $of $int<16>
}
$memoryspace [memory_space_2] 
{
  $capacity 16
  $datawidth 16
  $addrwidth 4
  $maxaccesswidth 16
  // $storage  ifmaps2 : $array[4][4] $of $uint<16> // memory space index = 2  base address = 0  word size = 16
  // can point into 
  // in scope  top-level
  $object [ifmaps2] : $array[16] $of $int<16>
}
$memoryspace [memory_space_3] 
{
  $capacity 96
  $datawidth 16
  $addrwidth 7
  $maxaccesswidth 16
  // $storage  mem_array : $array[12][8] $of $uint<16> // memory space index = 3  base address = 0  word size = 16
  // can point into 
  // in scope  top-level
  $object [mem_array] : $array[96] $of $int<16>
}
$pipeline $depth 7 $buffering 1 $module [accessMem] 
{
  $in read_write_bar_1:$int<1>
  // can point into 
  row_index:$int<6>
  // can point into 
  col_index:$int<5>
  // can point into 
  write_data_1:$int<16>
  // can point into 
  $out read_data_1:$int<16>
  // can point into 
  // pipe-declarations for block %accessMem
  //  file prog.linked.opt.aa, line 44
  // memory-space 3 is written into.
  // memory-space 3 is read from.
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    // pipelined module
    :|:[assign_stmt_63_to_assign_stmt_78] 
    {
      $T [read_write_bar_1_update_enable] 
      $T [read_write_bar_1_update_enable_out] 
      read_write_bar_1_update_enable &-> (read_write_bar_1_update_enable_out)
      $null &-> (read_write_bar_1_update_enable)
      $T [row_index_update_enable] 
      $T [row_index_update_enable_out] 
      row_index_update_enable &-> (row_index_update_enable_out)
      $null &-> (row_index_update_enable)
      $T [col_index_update_enable] 
      $T [col_index_update_enable_out] 
      col_index_update_enable &-> (col_index_update_enable_out)
      $null &-> (col_index_update_enable)
      $T [write_data_1_update_enable] 
      $T [write_data_1_update_enable_out] 
      write_data_1_update_enable &-> (write_data_1_update_enable_out)
      $null &-> (write_data_1_update_enable)
      $T [read_data_1_update_enable] 
      $T [read_data_1_update_enable_in] 
      $null &-> (read_data_1_update_enable)
      $null <-& (read_data_1_update_enable_in) 
      $null &-> (read_data_1_update_enable)
      read_data_1_update_enable <-& (read_data_1_update_enable_in) 
      // start:  	$guard (read_write_bar_1) t_read_data_11 := mem_array[row_index][col_index]// bits of buffering = 16. 
      //  file prog.linked.opt.aa, line 49
      // Guard expression 
      // read_write_bar_1
      // Source expression
      // mem_array[row_index][col_index]
      $T[array_obj_ref_62_base_address_calculated] 
      $T[array_obj_ref_62_sample_start_] 
      $T[array_obj_ref_62_sample_completed_] 
      $T[array_obj_ref_62_update_start_] 
      $T[array_obj_ref_62_update_completed_] 
      $T[array_obj_ref_62_word_address_calculated] 
      $T[array_obj_ref_62_root_address_calculated] 
      $T[array_obj_ref_62_offset_calculated] 
      $T[array_obj_ref_62_index_resized_0] 
      $T[array_obj_ref_62_index_scaled_0] 
      $T[array_obj_ref_62_index_computed_0] 
      // row_index
      // start: Forward dependencies from row_index to transition array_obj_ref_62_index_computed_0
      array_obj_ref_62_index_computed_0 <-& ($entry)
      // done: Forward dependencies from row_index to transition array_obj_ref_62_index_computed_0
      ;;[array_obj_ref_62_index_resize_0] 
      {
        $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
      }
      array_obj_ref_62_index_computed_0 &-> (array_obj_ref_62_index_resize_0)
      array_obj_ref_62_index_resized_0 <-& (array_obj_ref_62_index_resize_0)
      $T[array_obj_ref_62_index_scale_0_sample_start] 
      $T[array_obj_ref_62_index_scale_0_sample_complete] 
      $T[array_obj_ref_62_index_scale_0_update_start] 
      $T[array_obj_ref_62_index_scale_0_update_complete] 
      ;;[array_obj_ref_62_index_scale_0_Sample] 
      {
        $T [rr] $T [ra] 
      }
      ;;[array_obj_ref_62_index_scale_0_Update] 
      {
        $T [cr] $T [ca] 
      }
      array_obj_ref_62_index_resized_0 &-> (array_obj_ref_62_index_scale_0_sample_start)
      array_obj_ref_62_index_scale_0_sample_start &-> (array_obj_ref_62_index_scale_0_Sample)
      array_obj_ref_62_index_scale_0_sample_complete <-& (array_obj_ref_62_index_scale_0_Sample)
      array_obj_ref_62_index_scale_0_update_start &-> (array_obj_ref_62_index_scale_0_Update)
      array_obj_ref_62_index_scale_0_update_complete <-& (array_obj_ref_62_index_scale_0_Update)
      array_obj_ref_62_index_scaled_0 <-& (array_obj_ref_62_index_scale_0_update_complete)
      row_index_update_enable o<-& (array_obj_ref_62_index_scaled_0 0)
      array_obj_ref_62_index_scale_0_sample_start o<-& (array_obj_ref_62_index_scale_0_sample_complete 1)
      array_obj_ref_62_index_scale_0_update_start o<-& (array_obj_ref_62_index_scale_0_update_complete 0)
      $T[array_obj_ref_62_index_resized_1] 
      $T[array_obj_ref_62_index_scaled_1] 
      $T[array_obj_ref_62_index_computed_1] 
      // col_index
      // start: Forward dependencies from col_index to transition array_obj_ref_62_index_computed_1
      array_obj_ref_62_index_computed_1 <-& ($entry)
      // done: Forward dependencies from col_index to transition array_obj_ref_62_index_computed_1
      ;;[array_obj_ref_62_index_resize_1] 
      {
        $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
      }
      array_obj_ref_62_index_computed_1 &-> (array_obj_ref_62_index_resize_1)
      array_obj_ref_62_index_resized_1 <-& (array_obj_ref_62_index_resize_1)
      ;;[array_obj_ref_62_index_scale_1] 
      {
        $T [scale_rename_req] $T [scale_rename_ack] // rename 
      }
      array_obj_ref_62_index_resized_1 &-> (array_obj_ref_62_index_scale_1)
      array_obj_ref_62_index_scaled_1 <-& (array_obj_ref_62_index_scale_1)
      $T[array_obj_ref_62_partial_sum_1_sample_start] 
      $T[array_obj_ref_62_partial_sum_1_sample_complete] 
      $T[array_obj_ref_62_partial_sum_1_update_start] 
      $T[array_obj_ref_62_partial_sum_1_update_complete] 
      ;;[array_obj_ref_62_partial_sum_1_Sample] 
      {
        $T [rr] $T [ra] 
      }
      ;;[array_obj_ref_62_partial_sum_1_Update] 
      {
        $T [cr] $T [ca] 
      }
      array_obj_ref_62_partial_sum_1_sample_start &-> (array_obj_ref_62_partial_sum_1_Sample)
      array_obj_ref_62_partial_sum_1_sample_complete <-& (array_obj_ref_62_partial_sum_1_Sample)
      array_obj_ref_62_partial_sum_1_update_start &-> (array_obj_ref_62_partial_sum_1_Update)
      array_obj_ref_62_partial_sum_1_update_complete <-& (array_obj_ref_62_partial_sum_1_Update)
      array_obj_ref_62_partial_sum_1_sample_start o<-& (array_obj_ref_62_partial_sum_1_sample_complete 1)
      array_obj_ref_62_partial_sum_1_update_start o<-& (array_obj_ref_62_partial_sum_1_update_complete 0)
      array_obj_ref_62_partial_sum_1_sample_start <-& (array_obj_ref_62_index_scaled_0)
      array_obj_ref_62_partial_sum_1_sample_start <-& (array_obj_ref_62_index_scaled_1)
      array_obj_ref_62_index_scaled_0 o<-& (array_obj_ref_62_partial_sum_1_sample_complete 1)
      col_index_update_enable o<-& (array_obj_ref_62_partial_sum_1_sample_complete 1)
      array_obj_ref_62_offset_calculated <-& (array_obj_ref_62_partial_sum_1_update_complete)
      ;;[array_obj_ref_62_final_index_sum_regn] 
      {
        $T [req] $T [ack] // rename
      }
      array_obj_ref_62_partial_sum_1_update_complete &-> (array_obj_ref_62_final_index_sum_regn)
      array_obj_ref_62_offset_calculated <-& (array_obj_ref_62_final_index_sum_regn)
      ;;[array_obj_ref_62_base_plus_offset] 
      {
        $T [sum_rename_req] $T [sum_rename_ack] // one gets through 
      }
      array_obj_ref_62_offset_calculated &-> (array_obj_ref_62_base_plus_offset)
      array_obj_ref_62_root_address_calculated <-& (array_obj_ref_62_base_plus_offset)
      ;;[array_obj_ref_62_word_addrgen] 
      {
        $T [root_register_req] $T [root_register_ack]
      }
      array_obj_ref_62_root_address_calculated &-> (array_obj_ref_62_word_addrgen)
      array_obj_ref_62_word_address_calculated <-& (array_obj_ref_62_word_addrgen)
      ;;[array_obj_ref_62_Sample] 
      {
        ||[word_access_start] 
        {
          ;;[word_0] 
          {
            $T [rr] $T [ra] 
          }
        }
      }
      ;;[array_obj_ref_62_Update] 
      {
        ||[word_access_complete] 
        {
          ;;[word_0] 
          {
            $T [cr] $T [ca] 
          }
        }
        ;;[array_obj_ref_62_Merge] 
        {
          $T [merge_req] $T [merge_ack]
        }
      }
      array_obj_ref_62_sample_start_ <-& (array_obj_ref_62_word_address_calculated)
      // reenable-joins
      array_obj_ref_62_partial_sum_1_update_start o<-& (array_obj_ref_62_sample_completed_ 0)
      array_obj_ref_62_sample_start_ &-> (array_obj_ref_62_Sample)
      array_obj_ref_62_sample_completed_ <-& (array_obj_ref_62_Sample)
      array_obj_ref_62_sample_completed_ &-> ($null)
      array_obj_ref_62_update_start_ &-> (array_obj_ref_62_Update)
      array_obj_ref_62_update_completed_ <-& (array_obj_ref_62_Update)
      // self-release: 
      array_obj_ref_62_sample_start_ o<-& (array_obj_ref_62_sample_completed_ 1)
      $null &-> (array_obj_ref_62_update_start_)
      array_obj_ref_62_update_start_ o<-& (array_obj_ref_62_update_completed_ 0)
      // Guard dependency for expression array_obj_ref_62 with guard R_read_write_bar_1_58
      array_obj_ref_62_sample_start_ <-& ($entry)
      // RAW reenables for read_write_bar_1
      read_write_bar_1_update_enable o<-& (array_obj_ref_62_sample_completed_ 0)
      // Target expression
      // (as target) t_read_data_11
      // start: WAR dependencies for t_read_data_11
      // done: WAR dependencies for t_read_data_11
      // end:  	$guard (read_write_bar_1) t_read_data_11 := mem_array[row_index][col_index]// bits of buffering = 16. 
      // start:  	$guard (~read_write_bar_1) mem_array[row_index][col_index] := write_data_1// bits of buffering = 16. 
      //  file prog.linked.opt.aa, line 50
      // Guard expression 
      // read_write_bar_1
      // Source expression
      // write_data_1
      // Target expression
      // mem_array[row_index][col_index]
      $T[array_obj_ref_67_sample_start_] 
      $T[array_obj_ref_67_sample_completed_] 
      $T[array_obj_ref_67_update_start_] 
      $T[array_obj_ref_67_update_completed_] 
      $T[array_obj_ref_67_word_address_calculated] 
      $T[array_obj_ref_67_root_address_calculated] 
      $T[array_obj_ref_67_offset_calculated] 
      $T[array_obj_ref_67_index_resized_0] 
      $T[array_obj_ref_67_index_scaled_0] 
      $T[array_obj_ref_67_index_computed_0] 
      // row_index
      // start: Forward dependencies from row_index to transition array_obj_ref_67_index_computed_0
      array_obj_ref_67_index_computed_0 <-& ($entry)
      // done: Forward dependencies from row_index to transition array_obj_ref_67_index_computed_0
      ;;[array_obj_ref_67_index_resize_0] 
      {
        $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
      }
      array_obj_ref_67_index_computed_0 &-> (array_obj_ref_67_index_resize_0)
      array_obj_ref_67_index_resized_0 <-& (array_obj_ref_67_index_resize_0)
      $T[array_obj_ref_67_index_scale_0_sample_start] 
      $T[array_obj_ref_67_index_scale_0_sample_complete] 
      $T[array_obj_ref_67_index_scale_0_update_start] 
      $T[array_obj_ref_67_index_scale_0_update_complete] 
      ;;[array_obj_ref_67_index_scale_0_Sample] 
      {
        $T [rr] $T [ra] 
      }
      ;;[array_obj_ref_67_index_scale_0_Update] 
      {
        $T [cr] $T [ca] 
      }
      array_obj_ref_67_index_resized_0 &-> (array_obj_ref_67_index_scale_0_sample_start)
      array_obj_ref_67_index_scale_0_sample_start &-> (array_obj_ref_67_index_scale_0_Sample)
      array_obj_ref_67_index_scale_0_sample_complete <-& (array_obj_ref_67_index_scale_0_Sample)
      array_obj_ref_67_index_scale_0_update_start &-> (array_obj_ref_67_index_scale_0_Update)
      array_obj_ref_67_index_scale_0_update_complete <-& (array_obj_ref_67_index_scale_0_Update)
      array_obj_ref_67_index_scaled_0 <-& (array_obj_ref_67_index_scale_0_update_complete)
      row_index_update_enable o<-& (array_obj_ref_67_index_scaled_0 0)
      array_obj_ref_67_index_scale_0_sample_start o<-& (array_obj_ref_67_index_scale_0_sample_complete 1)
      array_obj_ref_67_index_scale_0_update_start o<-& (array_obj_ref_67_index_scale_0_update_complete 0)
      $T[array_obj_ref_67_index_resized_1] 
      $T[array_obj_ref_67_index_scaled_1] 
      $T[array_obj_ref_67_index_computed_1] 
      // col_index
      // start: Forward dependencies from col_index to transition array_obj_ref_67_index_computed_1
      array_obj_ref_67_index_computed_1 <-& ($entry)
      // done: Forward dependencies from col_index to transition array_obj_ref_67_index_computed_1
      ;;[array_obj_ref_67_index_resize_1] 
      {
        $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
      }
      array_obj_ref_67_index_computed_1 &-> (array_obj_ref_67_index_resize_1)
      array_obj_ref_67_index_resized_1 <-& (array_obj_ref_67_index_resize_1)
      ;;[array_obj_ref_67_index_scale_1] 
      {
        $T [scale_rename_req] $T [scale_rename_ack] // rename 
      }
      array_obj_ref_67_index_resized_1 &-> (array_obj_ref_67_index_scale_1)
      array_obj_ref_67_index_scaled_1 <-& (array_obj_ref_67_index_scale_1)
      $T[array_obj_ref_67_partial_sum_1_sample_start] 
      $T[array_obj_ref_67_partial_sum_1_sample_complete] 
      $T[array_obj_ref_67_partial_sum_1_update_start] 
      $T[array_obj_ref_67_partial_sum_1_update_complete] 
      ;;[array_obj_ref_67_partial_sum_1_Sample] 
      {
        $T [rr] $T [ra] 
      }
      ;;[array_obj_ref_67_partial_sum_1_Update] 
      {
        $T [cr] $T [ca] 
      }
      array_obj_ref_67_partial_sum_1_sample_start &-> (array_obj_ref_67_partial_sum_1_Sample)
      array_obj_ref_67_partial_sum_1_sample_complete <-& (array_obj_ref_67_partial_sum_1_Sample)
      array_obj_ref_67_partial_sum_1_update_start &-> (array_obj_ref_67_partial_sum_1_Update)
      array_obj_ref_67_partial_sum_1_update_complete <-& (array_obj_ref_67_partial_sum_1_Update)
      array_obj_ref_67_partial_sum_1_sample_start o<-& (array_obj_ref_67_partial_sum_1_sample_complete 1)
      array_obj_ref_67_partial_sum_1_update_start o<-& (array_obj_ref_67_partial_sum_1_update_complete 0)
      array_obj_ref_67_partial_sum_1_sample_start <-& (array_obj_ref_67_index_scaled_0)
      array_obj_ref_67_partial_sum_1_sample_start <-& (array_obj_ref_67_index_scaled_1)
      array_obj_ref_67_index_scaled_0 o<-& (array_obj_ref_67_partial_sum_1_sample_complete 1)
      col_index_update_enable o<-& (array_obj_ref_67_partial_sum_1_sample_complete 1)
      array_obj_ref_67_offset_calculated <-& (array_obj_ref_67_partial_sum_1_update_complete)
      ;;[array_obj_ref_67_final_index_sum_regn] 
      {
        $T [req] $T [ack] // rename
      }
      array_obj_ref_67_partial_sum_1_update_complete &-> (array_obj_ref_67_final_index_sum_regn)
      array_obj_ref_67_offset_calculated <-& (array_obj_ref_67_final_index_sum_regn)
      ;;[array_obj_ref_67_base_plus_offset] 
      {
        $T [sum_rename_req] $T [sum_rename_ack] // one gets through 
      }
      array_obj_ref_67_offset_calculated &-> (array_obj_ref_67_base_plus_offset)
      array_obj_ref_67_root_address_calculated <-& (array_obj_ref_67_base_plus_offset)
      ;;[array_obj_ref_67_word_addrgen] 
      {
        $T [root_register_req] $T [root_register_ack]
      }
      array_obj_ref_67_root_address_calculated &-> (array_obj_ref_67_word_addrgen)
      array_obj_ref_67_word_address_calculated <-& (array_obj_ref_67_word_addrgen)
      ;;[array_obj_ref_67_Sample] 
      {
        ;;[array_obj_ref_67_Split] 
        {
          $T [split_req] $T [split_ack]
        }
        ||[word_access_start] 
        {
          ;;[word_0] 
          {
            $T [rr] $T [ra] 
          }
        }
      }
      ;;[array_obj_ref_67_Update] 
      {
        ||[word_access_complete] 
        {
          ;;[word_0] 
          {
            $T [cr] $T [ca] 
          }
        }
      }
      array_obj_ref_67_sample_start_ <-& (array_obj_ref_67_word_address_calculated)
      // reenable-joins
      array_obj_ref_67_partial_sum_1_update_start o<-& (array_obj_ref_67_sample_completed_ 0)
      array_obj_ref_67_sample_start_ &-> (array_obj_ref_67_Sample)
      array_obj_ref_67_sample_completed_ <-& (array_obj_ref_67_Sample)
      array_obj_ref_67_sample_completed_ &-> ($null)
      array_obj_ref_67_update_start_ &-> (array_obj_ref_67_Update)
      array_obj_ref_67_update_completed_ <-& (array_obj_ref_67_Update)
      // Guard dependency for expression array_obj_ref_67 with guard R_read_write_bar_1_64
      array_obj_ref_67_sample_start_ <-& ($entry)
      // RAW reenables for read_write_bar_1
      read_write_bar_1_update_enable o<-& (array_obj_ref_67_sample_completed_ 0)
      // self-release: 
      array_obj_ref_67_sample_start_ o<-& (array_obj_ref_67_sample_completed_ 1)
      $null &-> (array_obj_ref_67_update_start_)
      array_obj_ref_67_update_start_ o<-& (array_obj_ref_67_update_completed_ 0)
      // start: Forward dependencies from write_data_1 to transition array_obj_ref_67_sample_start_
      array_obj_ref_67_sample_start_ <-& ($entry)
      // done: Forward dependencies from write_data_1 to transition array_obj_ref_67_sample_start_
      // RAW reenables for write_data_1
      write_data_1_update_enable o<-& (array_obj_ref_67_sample_completed_ 0)
      // end:  	$guard (~read_write_bar_1) mem_array[row_index][col_index] := write_data_1// bits of buffering = 16. 
      // start:  	read_write_bar_1_71_delayed_4_0 := read_write_bar_1 $buffering 4// bits of buffering = 4. 
      //  file prog.linked.opt.aa, line 51
      $T[assign_stmt_72_sample_start_] 
      $T[assign_stmt_72_sample_completed_] 
      $T[assign_stmt_72_update_start_] 
      $T[assign_stmt_72_update_completed_] 
      // Source expression
      // read_write_bar_1
      // Target expression
      // (as target) read_write_bar_1_71_delayed_4_0
      // both source and target are implicit: use interlock 
      // Interlock 
      ;;[assign_stmt_72_Sample] 
      {
        $T [req] $T [ack] // interlock-sample.
      }
      ;;[assign_stmt_72_Update] 
      {
        $T [req] $T [ack] // interlock-update.
      }
      assign_stmt_72_sample_start_ &-> (assign_stmt_72_Sample)
      assign_stmt_72_sample_completed_ <-& (assign_stmt_72_Sample)
      assign_stmt_72_sample_completed_ &-> ($null)
      assign_stmt_72_update_start_ &-> (assign_stmt_72_Update)
      assign_stmt_72_update_completed_ <-& (assign_stmt_72_Update)
      // start: Forward dependencies from read_write_bar_1 to transition assign_stmt_72_sample_start_
      assign_stmt_72_sample_start_ <-& ($entry)
      // done: Forward dependencies from read_write_bar_1 to transition assign_stmt_72_sample_start_
      // RAW reenables for read_write_bar_1
      read_write_bar_1_update_enable o<-& (assign_stmt_72_sample_completed_ 0)
      // self-release: 
      assign_stmt_72_sample_start_ o<-& (assign_stmt_72_sample_completed_ 1)
      $null &-> (assign_stmt_72_update_start_)
      assign_stmt_72_update_start_ o<-& (assign_stmt_72_update_completed_ 0)
      // start: WAR dependencies for read_write_bar_1_71_delayed_4_0
      // done: WAR dependencies for read_write_bar_1_71_delayed_4_0
      // end:  	read_write_bar_1_71_delayed_4_0 := read_write_bar_1 $buffering 4// bits of buffering = 4. 
      // start:  	read_data_1 := ( $mux read_write_bar_1_71_delayed_4_0 t_read_data_11  0  ) // bits of buffering = 16. 
      //  file prog.linked.opt.aa, line 52
      // Source expression
      // ( $mux read_write_bar_1_71_delayed_4_0 t_read_data_11  0  ) 
      $T[MUX_77_sample_start_] 
      $T[MUX_77_sample_completed_] 
      $T[MUX_77_update_start_] 
      $T[MUX_77_update_completed_] 
      // read_write_bar_1_71_delayed_4_0
      // t_read_data_11
      // start: Forward dependencies from read_write_bar_1_71_delayed_4_0 to transition MUX_77_sample_start_
      MUX_77_sample_start_ <-& (assign_stmt_72_update_completed_)
      // done: Forward dependencies from read_write_bar_1_71_delayed_4_0 to transition MUX_77_sample_start_
      // start: Forward dependencies from t_read_data_11 to transition MUX_77_sample_start_
      MUX_77_sample_start_ <-& (array_obj_ref_62_update_completed_)
      // done: Forward dependencies from t_read_data_11 to transition MUX_77_sample_start_
      ;;[MUX_77_start] 
      {
        // ternary expression: 
        $T [req] $T [ack] // sample req/ack
      }
      ;;[MUX_77_complete] 
      {
        // ternary expression: 
        $T [req] $T [ack] // update req/ack
      }
      MUX_77_sample_start_ &-> (MUX_77_start)
      MUX_77_sample_completed_ <-& (MUX_77_start)
      MUX_77_sample_completed_ &-> ($null)
      MUX_77_update_start_ &-> (MUX_77_complete)
      MUX_77_update_completed_ <-& (MUX_77_complete)
      // RAW reenables for read_write_bar_1_71_delayed_4_0
      assign_stmt_72_update_start_ o<-& (MUX_77_sample_completed_ 0)
      // RAW reenables for t_read_data_11
      array_obj_ref_62_update_start_ o<-& (MUX_77_sample_completed_ 0)
      // self-release: 
      MUX_77_sample_start_ o<-& (MUX_77_sample_completed_ 1)
      $null &-> (MUX_77_update_start_)
      MUX_77_update_start_ o<-& (MUX_77_update_completed_ 0)
      // Target expression
      // (as target) read_data_1
      // read_data_1
      // write to interface object
      // start: WAR dependencies for read_data_1
      // done: WAR dependencies for read_data_1
      // read_data_1
      // write to interface object
      MUX_77_update_start_ <-& (read_data_1_update_enable)
      // end:  	read_data_1 := ( $mux read_write_bar_1_71_delayed_4_0 t_read_data_11  0  ) // bits of buffering = 16. 
      // load-store dependencies..
      // memory-space  memory_space_3
      //  array_obj_ref_62 load
      //  array_obj_ref_67 store
      $T [array_obj_ref_62_array_obj_ref_67_delay] $delay
      // array_obj_ref_62(load) -> array_obj_ref_67(store)
      array_obj_ref_67_sample_start_ <-& (array_obj_ref_62_array_obj_ref_67_delay)
      array_obj_ref_62_array_obj_ref_67_delay <-& (array_obj_ref_62_sample_completed_)
      // reenable across ring for memory space memory_space_3
      $T[ring_reenable_memory_space_3] 
      // ordered memory-subsystem.
      ring_reenable_memory_space_3 <-& (array_obj_ref_67_sample_completed_)
      array_obj_ref_62_sample_start_ o<-& (ring_reenable_memory_space_3 1)
    }
    ( read_data_1_update_enable_in)
    ( read_write_bar_1_update_enable_out row_index_update_enable_out col_index_update_enable_out write_data_1_update_enable_out)
    $P [read_write_bar_1_update_enable] 
    $P [row_index_update_enable] 
    $P [col_index_update_enable] 
    $P [write_data_1_update_enable] 
    $P [read_data_1_update_enable] 
    $bind read_write_bar_1_update_enable <= assign_stmt_63_to_assign_stmt_78 : read_write_bar_1_update_enable_out
    $bind row_index_update_enable <= assign_stmt_63_to_assign_stmt_78 : row_index_update_enable_out
    $bind col_index_update_enable <= assign_stmt_63_to_assign_stmt_78 : col_index_update_enable_out
    $bind write_data_1_update_enable <= assign_stmt_63_to_assign_stmt_78 : write_data_1_update_enable_out
    $bind read_data_1_update_enable => assign_stmt_63_to_assign_stmt_78 : read_data_1_update_enable_in
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %accessMem
    //  file prog.linked.opt.aa, line 44
    // mem_array[row_index][col_index]
    $constant $W[array_obj_ref_62_resized_base_address] : $int<7> := _b0000000// 0
    $constant $W[array_obj_ref_62_offset_scale_factor_0] : $int<7> := _b0001000// 8
    $constant $W[array_obj_ref_62_offset_scale_factor_1] : $int<7> := _b0000001// 1
    $constant $W[array_obj_ref_62_word_offset_0] : $int<7> := _b0000000// 0
    // mem_array[row_index][col_index]
    $constant $W[array_obj_ref_67_resized_base_address] : $int<7> := _b0000000// 0
    $constant $W[array_obj_ref_67_offset_scale_factor_0] : $int<7> := _b0001000// 8
    $constant $W[array_obj_ref_67_offset_scale_factor_1] : $int<7> := _b0000001// 1
    $constant $W[array_obj_ref_67_word_offset_0] : $int<7> := _b0000000// 0
    // ( $mux read_write_bar_1_71_delayed_4_0 t_read_data_11  0  ) 
    // 0 
    $constant $W[konst_76_wire_constant] : $int<16> := _b0000000000000000// 0
    // 	$guard (read_write_bar_1) t_read_data_11 := mem_array[row_index][col_index]// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 49
    // mem_array[row_index][col_index]
    $intermediate $W[R_row_index_60_resized] : $int<7>
    $intermediate $W[R_row_index_60_scaled] : $int<7>
    $intermediate $W[R_col_index_61_resized] : $int<7>
    $intermediate $W[R_col_index_61_scaled] : $int<7>
    $intermediate $W[array_obj_ref_62_index_partial_sum_1] : $int<7>
    $intermediate $W[array_obj_ref_62_final_offset] : $int<7>
    $intermediate $W[array_obj_ref_62_root_address] : $int<7>
    $W[array_obj_ref_62_word_address_0] : $pointer<memory_space_3>
    $W[array_obj_ref_62_data_0] : $int<16>
    // t_read_data_11
    $W[t_read_data_11_63] : $int<16>
    // 	$guard (~read_write_bar_1) mem_array[row_index][col_index] := write_data_1// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 50
    // mem_array[row_index][col_index]
    $intermediate $W[R_row_index_65_resized] : $int<7>
    $intermediate $W[R_row_index_65_scaled] : $int<7>
    $intermediate $W[R_col_index_66_resized] : $int<7>
    $intermediate $W[R_col_index_66_scaled] : $int<7>
    $intermediate $W[array_obj_ref_67_index_partial_sum_1] : $int<7>
    $intermediate $W[array_obj_ref_67_final_offset] : $int<7>
    $intermediate $W[array_obj_ref_67_root_address] : $int<7>
    $W[array_obj_ref_67_word_address_0] : $pointer<memory_space_3>
    $W[array_obj_ref_67_data_0] : $int<16>
    // 	read_write_bar_1_71_delayed_4_0 := read_write_bar_1 $buffering 4// bits of buffering = 4. 
    //  file prog.linked.opt.aa, line 51
    // read_write_bar_1_71_delayed_4_0
    $W[read_write_bar_1_71_delayed_4_0_72] : $int<1>
    // 	read_data_1 := ( $mux read_write_bar_1_71_delayed_4_0 t_read_data_11  0  ) // bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 52
    // read_data_1
    // 	$guard (read_write_bar_1) t_read_data_11 := mem_array[row_index][col_index]// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 49
    // mem_array[row_index][col_index]
    &/ [array_obj_ref_62_index_0_resize] (row_index) (R_row_index_60_resized) $guard ( read_write_bar_1 ) 
    $flowthrough 
    *[array_obj_ref_62_index_0_scale] (R_row_index_60_resized array_obj_ref_62_offset_scale_factor_0) (R_row_index_60_scaled) $guard ( read_write_bar_1 )   
    $delay array_obj_ref_62_index_0_scale 2
    &/ [array_obj_ref_62_index_1_resize] (col_index) (R_col_index_61_resized) $guard ( read_write_bar_1 ) 
    $flowthrough 
    &/ [array_obj_ref_62_index_1_rename] (R_col_index_61_resized) (R_col_index_61_scaled) $guard ( read_write_bar_1 ) 
    $flowthrough 
    +[array_obj_ref_62_index_sum_1] (R_col_index_61_scaled R_row_index_60_scaled) (array_obj_ref_62_index_partial_sum_1) $guard ( read_write_bar_1 )   
    $delay array_obj_ref_62_index_sum_1 2
    &/ [array_obj_ref_62_index_offset] (array_obj_ref_62_index_partial_sum_1) (array_obj_ref_62_final_offset) $guard ( read_write_bar_1 ) 
    $flowthrough 
    &/ [array_obj_ref_62_root_address_inst] (array_obj_ref_62_final_offset) (array_obj_ref_62_root_address) $guard ( read_write_bar_1 ) 
    $flowthrough 
    &/ [array_obj_ref_62_addr_0] (array_obj_ref_62_root_address) (array_obj_ref_62_word_address_0) $guard ( read_write_bar_1 ) 
    $flowthrough 
    $load [array_obj_ref_62_load_0] $from memory_space_3 (array_obj_ref_62_word_address_0) (array_obj_ref_62_data_0) $guard ( read_write_bar_1 ) 
    $delay array_obj_ref_62_load_0 4
    &/ [array_obj_ref_62_gather_scatter] (array_obj_ref_62_data_0) (t_read_data_11_63) $guard ( read_write_bar_1 ) 
    $flowthrough 
    // 	$guard (~read_write_bar_1) mem_array[row_index][col_index] := write_data_1// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 50
    // mem_array[row_index][col_index]
    &/ [array_obj_ref_67_index_0_resize] (row_index) (R_row_index_65_resized) $guard ( ~ read_write_bar_1 ) 
    $flowthrough 
    *[array_obj_ref_67_index_0_scale] (R_row_index_65_resized array_obj_ref_67_offset_scale_factor_0) (R_row_index_65_scaled) $guard ( ~ read_write_bar_1 )   
    $delay array_obj_ref_67_index_0_scale 2
    &/ [array_obj_ref_67_index_1_resize] (col_index) (R_col_index_66_resized) $guard ( ~ read_write_bar_1 ) 
    $flowthrough 
    &/ [array_obj_ref_67_index_1_rename] (R_col_index_66_resized) (R_col_index_66_scaled) $guard ( ~ read_write_bar_1 ) 
    $flowthrough 
    +[array_obj_ref_67_index_sum_1] (R_col_index_66_scaled R_row_index_65_scaled) (array_obj_ref_67_index_partial_sum_1) $guard ( ~ read_write_bar_1 )   
    $delay array_obj_ref_67_index_sum_1 2
    &/ [array_obj_ref_67_index_offset] (array_obj_ref_67_index_partial_sum_1) (array_obj_ref_67_final_offset) $guard ( ~ read_write_bar_1 ) 
    $flowthrough 
    &/ [array_obj_ref_67_root_address_inst] (array_obj_ref_67_final_offset) (array_obj_ref_67_root_address) $guard ( ~ read_write_bar_1 ) 
    $flowthrough 
    &/ [array_obj_ref_67_addr_0] (array_obj_ref_67_root_address) (array_obj_ref_67_word_address_0) $guard ( ~ read_write_bar_1 ) 
    $flowthrough 
    $store [array_obj_ref_67_store_0] $to memory_space_3 (array_obj_ref_67_word_address_0 array_obj_ref_67_data_0) $guard ( ~ read_write_bar_1 ) 
    $delay array_obj_ref_67_store_0 4
    &/ [array_obj_ref_67_gather_scatter] (write_data_1) (array_obj_ref_67_data_0) $guard ( ~ read_write_bar_1 ) 
    $flowthrough 
    // 	read_write_bar_1_71_delayed_4_0 := read_write_bar_1 $buffering 4// bits of buffering = 4. 
    //  file prog.linked.opt.aa, line 51
    # := [W_read_write_bar_1_71_delayed_4_0_70_inst] (read_write_bar_1) (read_write_bar_1_71_delayed_4_0_72)   
    $buffering  $out W_read_write_bar_1_71_delayed_4_0_70_inst read_write_bar_1_71_delayed_4_0_72 4
    // 	read_data_1 := ( $mux read_write_bar_1_71_delayed_4_0 t_read_data_11  0  ) // bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 52
    // ( $mux read_write_bar_1_71_delayed_4_0 t_read_data_11  0  ) 
    ? [MUX_77_inst] (read_write_bar_1_71_delayed_4_0_72 t_read_data_11_63 konst_76_wire_constant) (read_data_1) 
    $buffering  $out MUX_77_inst read_data_1 1
  }
  // end data-path
  // 	$guard (read_write_bar_1) t_read_data_11 := mem_array[row_index][col_index]// bits of buffering = 16. 
  //  file prog.linked.opt.aa, line 49
  // mem_array[row_index][col_index]
  // row_index
  array_obj_ref_62_index_0_resize <=> (assign_stmt_63_to_assign_stmt_78/array_obj_ref_62_index_resize_0/index_resize_req) (assign_stmt_63_to_assign_stmt_78/array_obj_ref_62_index_resize_0/index_resize_ack)
  array_obj_ref_62_index_0_scale <=> (assign_stmt_63_to_assign_stmt_78/array_obj_ref_62_index_scale_0_Sample/rr assign_stmt_63_to_assign_stmt_78/array_obj_ref_62_index_scale_0_Update/cr) (assign_stmt_63_to_assign_stmt_78/array_obj_ref_62_index_scale_0_Sample/ra assign_stmt_63_to_assign_stmt_78/array_obj_ref_62_index_scale_0_Update/ca)
  // col_index
  array_obj_ref_62_index_1_resize <=> (assign_stmt_63_to_assign_stmt_78/array_obj_ref_62_index_resize_1/index_resize_req) (assign_stmt_63_to_assign_stmt_78/array_obj_ref_62_index_resize_1/index_resize_ack)
  array_obj_ref_62_index_1_rename <=> (assign_stmt_63_to_assign_stmt_78/array_obj_ref_62_index_scale_1/scale_rename_req) (assign_stmt_63_to_assign_stmt_78/array_obj_ref_62_index_scale_1/scale_rename_ack)
  array_obj_ref_62_index_sum_1 <=> (assign_stmt_63_to_assign_stmt_78/array_obj_ref_62_partial_sum_1_Sample/rr assign_stmt_63_to_assign_stmt_78/array_obj_ref_62_partial_sum_1_Update/cr) (assign_stmt_63_to_assign_stmt_78/array_obj_ref_62_partial_sum_1_Sample/ra assign_stmt_63_to_assign_stmt_78/array_obj_ref_62_partial_sum_1_Update/ca)
  array_obj_ref_62_index_offset <=> (assign_stmt_63_to_assign_stmt_78/array_obj_ref_62_final_index_sum_regn/req) (assign_stmt_63_to_assign_stmt_78/array_obj_ref_62_final_index_sum_regn/ack)
  array_obj_ref_62_root_address_inst <=> (assign_stmt_63_to_assign_stmt_78/array_obj_ref_62_base_plus_offset/sum_rename_req) (assign_stmt_63_to_assign_stmt_78/array_obj_ref_62_base_plus_offset/sum_rename_ack)
  array_obj_ref_62_addr_0 <=> (assign_stmt_63_to_assign_stmt_78/array_obj_ref_62_word_addrgen/root_register_req) (assign_stmt_63_to_assign_stmt_78/array_obj_ref_62_word_addrgen/root_register_ack)
  array_obj_ref_62_gather_scatter <=> (assign_stmt_63_to_assign_stmt_78/array_obj_ref_62_Update/array_obj_ref_62_Merge/merge_req) (assign_stmt_63_to_assign_stmt_78/array_obj_ref_62_Update/array_obj_ref_62_Merge/merge_ack)
  array_obj_ref_62_load_0 <=> (assign_stmt_63_to_assign_stmt_78/array_obj_ref_62_Sample/word_access_start/word_0/rr assign_stmt_63_to_assign_stmt_78/array_obj_ref_62_Update/word_access_complete/word_0/cr) (assign_stmt_63_to_assign_stmt_78/array_obj_ref_62_Sample/word_access_start/word_0/ra assign_stmt_63_to_assign_stmt_78/array_obj_ref_62_Update/word_access_complete/word_0/ca)
  // 	$guard (~read_write_bar_1) mem_array[row_index][col_index] := write_data_1// bits of buffering = 16. 
  //  file prog.linked.opt.aa, line 50
  // write_data_1
  // row_index
  array_obj_ref_67_index_0_resize <=> (assign_stmt_63_to_assign_stmt_78/array_obj_ref_67_index_resize_0/index_resize_req) (assign_stmt_63_to_assign_stmt_78/array_obj_ref_67_index_resize_0/index_resize_ack)
  array_obj_ref_67_index_0_scale <=> (assign_stmt_63_to_assign_stmt_78/array_obj_ref_67_index_scale_0_Sample/rr assign_stmt_63_to_assign_stmt_78/array_obj_ref_67_index_scale_0_Update/cr) (assign_stmt_63_to_assign_stmt_78/array_obj_ref_67_index_scale_0_Sample/ra assign_stmt_63_to_assign_stmt_78/array_obj_ref_67_index_scale_0_Update/ca)
  // col_index
  array_obj_ref_67_index_1_resize <=> (assign_stmt_63_to_assign_stmt_78/array_obj_ref_67_index_resize_1/index_resize_req) (assign_stmt_63_to_assign_stmt_78/array_obj_ref_67_index_resize_1/index_resize_ack)
  array_obj_ref_67_index_1_rename <=> (assign_stmt_63_to_assign_stmt_78/array_obj_ref_67_index_scale_1/scale_rename_req) (assign_stmt_63_to_assign_stmt_78/array_obj_ref_67_index_scale_1/scale_rename_ack)
  array_obj_ref_67_index_sum_1 <=> (assign_stmt_63_to_assign_stmt_78/array_obj_ref_67_partial_sum_1_Sample/rr assign_stmt_63_to_assign_stmt_78/array_obj_ref_67_partial_sum_1_Update/cr) (assign_stmt_63_to_assign_stmt_78/array_obj_ref_67_partial_sum_1_Sample/ra assign_stmt_63_to_assign_stmt_78/array_obj_ref_67_partial_sum_1_Update/ca)
  array_obj_ref_67_index_offset <=> (assign_stmt_63_to_assign_stmt_78/array_obj_ref_67_final_index_sum_regn/req) (assign_stmt_63_to_assign_stmt_78/array_obj_ref_67_final_index_sum_regn/ack)
  array_obj_ref_67_root_address_inst <=> (assign_stmt_63_to_assign_stmt_78/array_obj_ref_67_base_plus_offset/sum_rename_req) (assign_stmt_63_to_assign_stmt_78/array_obj_ref_67_base_plus_offset/sum_rename_ack)
  array_obj_ref_67_addr_0 <=> (assign_stmt_63_to_assign_stmt_78/array_obj_ref_67_word_addrgen/root_register_req) (assign_stmt_63_to_assign_stmt_78/array_obj_ref_67_word_addrgen/root_register_ack)
  array_obj_ref_67_gather_scatter <=> (assign_stmt_63_to_assign_stmt_78/array_obj_ref_67_Sample/array_obj_ref_67_Split/split_req) (assign_stmt_63_to_assign_stmt_78/array_obj_ref_67_Sample/array_obj_ref_67_Split/split_ack)
  array_obj_ref_67_store_0 <=> (assign_stmt_63_to_assign_stmt_78/array_obj_ref_67_Sample/word_access_start/word_0/rr assign_stmt_63_to_assign_stmt_78/array_obj_ref_67_Update/word_access_complete/word_0/cr) (assign_stmt_63_to_assign_stmt_78/array_obj_ref_67_Sample/word_access_start/word_0/ra assign_stmt_63_to_assign_stmt_78/array_obj_ref_67_Update/word_access_complete/word_0/ca)
  // 	read_write_bar_1_71_delayed_4_0 := read_write_bar_1 $buffering 4// bits of buffering = 4. 
  //  file prog.linked.opt.aa, line 51
  // read_write_bar_1
  W_read_write_bar_1_71_delayed_4_0_70_inst <=> (assign_stmt_63_to_assign_stmt_78/assign_stmt_72_Sample/req assign_stmt_63_to_assign_stmt_78/assign_stmt_72_Update/req) (assign_stmt_63_to_assign_stmt_78/assign_stmt_72_Sample/ack assign_stmt_63_to_assign_stmt_78/assign_stmt_72_Update/ack)
  // 	read_data_1 := ( $mux read_write_bar_1_71_delayed_4_0 t_read_data_11  0  ) // bits of buffering = 16. 
  //  file prog.linked.opt.aa, line 52
  // read_write_bar_1_71_delayed_4_0
  // t_read_data_11
  // ( $mux read_write_bar_1_71_delayed_4_0 t_read_data_11  0  ) 
  MUX_77_inst <=> (assign_stmt_63_to_assign_stmt_78/MUX_77_start/req assign_stmt_63_to_assign_stmt_78/MUX_77_complete/req) (assign_stmt_63_to_assign_stmt_78/MUX_77_start/ack assign_stmt_63_to_assign_stmt_78/MUX_77_complete/ack)
  $attribute delay => "7"
}
$module [accMemAccessDaemon] 
{
  // pipe-declarations for block %accMemAccessDaemon
  //  file prog.linked.opt.aa, line 55
  // pipe-declarations for block %accMemAccessDaemon%loop
  //  file prog.linked.opt.aa, line 60
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    <>[branch_block_stmt_81] // Branch Block  file prog.linked.opt.aa, line 60
    {
      $P [branch_block_stmt_81__entry__]
      branch_block_stmt_81__entry__ <-| ($entry)
      $P [branch_block_stmt_81__exit__]
      branch_block_stmt_81__exit__ |-> ($exit)
      $P [do_while_stmt_82__entry__] 
      $P [do_while_stmt_82__exit__] 
      // do-while-statement  
      //  file prog.linked.opt.aa, line 62
      <o> [do_while_stmt_82]  $depth 20 $buffering 2 
      {
        $P[do_while_stmt_82__entry__] 
        $P[do_while_stmt_82__exit__] 
        $P[loop_back] 
        $P[condition_done] 
        $P[loop_body_done] 
        $pipeline [do_while_stmt_82_loop_body] 
        {
          // Pipelined!
          $T[back_edge_to_loop_body] 
          $T[first_time_through_loop_body] 
          $T[loop_body_start] 
          $T[condition_evaluated] 
          $transitionmerge [entry_tmerge] (back_edge_to_loop_body first_time_through_loop_body) (loop_body_start)
          $entry <-& (loop_body_start)
          // start:  			cmd_1 := acc_mem_request_1// bits of buffering = 32. 
          //  file prog.linked.opt.aa, line 66
          // Source expression
          // acc_mem_request_1
          $T[RPIPE_acc_mem_request_1_85_sample_start_] 
          $T[RPIPE_acc_mem_request_1_85_sample_completed_] 
          $T[RPIPE_acc_mem_request_1_85_update_start_] 
          $T[RPIPE_acc_mem_request_1_85_update_completed_] 
          ;;[RPIPE_acc_mem_request_1_85_Sample] 
          {
            // pipe read sample
            $T [rr] $T [ra] 
          }
          ;;[RPIPE_acc_mem_request_1_85_Update] 
          {
            // pipe read update
            $T [cr] $T [ca] 
          }
          RPIPE_acc_mem_request_1_85_sample_start_ &-> (RPIPE_acc_mem_request_1_85_Sample)
          RPIPE_acc_mem_request_1_85_sample_completed_ <-& (RPIPE_acc_mem_request_1_85_Sample)
          RPIPE_acc_mem_request_1_85_update_start_ <-& (RPIPE_acc_mem_request_1_85_sample_completed_)
          RPIPE_acc_mem_request_1_85_update_start_ &-> (RPIPE_acc_mem_request_1_85_Update)
          RPIPE_acc_mem_request_1_85_update_completed_ <-& (RPIPE_acc_mem_request_1_85_Update)
          RPIPE_acc_mem_request_1_85_sample_start_ o<-& (RPIPE_acc_mem_request_1_85_update_completed_ 0)
          // Target expression
          // (as target) cmd_1
          // start: WAR dependencies for cmd_1
          // done: WAR dependencies for cmd_1
          // end:  			cmd_1 := acc_mem_request_1// bits of buffering = 32. 
          // start: WAR dependencies for wdata1
          // done: WAR dependencies for wdata1
          // start:  			$volatile wdata1 := ( $slice cmd_1 31 16 ) 
          //  file prog.linked.opt.aa, line 67
          // volatile! 
          // Source expression
          // ( $slice cmd_1 31 16 ) 
          // cmd_1
          // Target expression
          // (as target) wdata1
          // start: WAR dependencies for wdata1
          // done: WAR dependencies for wdata1
          // end:  			$volatile wdata1 := ( $slice cmd_1 31 16 ) 
          // start: WAR dependencies for row_index1
          // done: WAR dependencies for row_index1
          // start:  			$volatile row_index1 := ( $slice cmd_1 15 10 ) 
          //  file prog.linked.opt.aa, line 68
          // volatile! 
          // Source expression
          // ( $slice cmd_1 15 10 ) 
          // cmd_1
          // Target expression
          // (as target) row_index1
          // start: WAR dependencies for row_index1
          // done: WAR dependencies for row_index1
          // end:  			$volatile row_index1 := ( $slice cmd_1 15 10 ) 
          // start: WAR dependencies for col_index1
          // done: WAR dependencies for col_index1
          // start:  			$volatile col_index1 := ( $slice cmd_1 9 5 ) 
          //  file prog.linked.opt.aa, line 69
          // volatile! 
          // Source expression
          // ( $slice cmd_1 9 5 ) 
          // cmd_1
          // Target expression
          // (as target) col_index1
          // start: WAR dependencies for col_index1
          // done: WAR dependencies for col_index1
          // end:  			$volatile col_index1 := ( $slice cmd_1 9 5 ) 
          // start: WAR dependencies for rwbar1
          // done: WAR dependencies for rwbar1
          // start:  			$volatile rwbar1 := ( $slice cmd_1 0 0 ) 
          //  file prog.linked.opt.aa, line 70
          // volatile! 
          // Source expression
          // ( $slice cmd_1 0 0 ) 
          // cmd_1
          // Target expression
          // (as target) rwbar1
          // start: WAR dependencies for rwbar1
          // done: WAR dependencies for rwbar1
          // end:  			$volatile rwbar1 := ( $slice cmd_1 0 0 ) 
          // start: 			$call accessMem (rwbar1 row_index1 col_index1 wdata1 ) (rdata1 ) 
          //  file prog.linked.opt.aa, line 71
          $T[call_stmt_108_sample_start_] 
          $T[call_stmt_108_sample_completed_] 
          $T[call_stmt_108_update_start_] 
          $T[call_stmt_108_update_completed_] 
          // Call input argument 0
          // rwbar1
          // Call input argument 1
          // row_index1
          // Call input argument 2
          // col_index1
          // Call input argument 3
          // wdata1
          // start: Forward dependencies from rwbar1 to transition call_stmt_108_sample_start_
          call_stmt_108_sample_start_ <-& (RPIPE_acc_mem_request_1_85_update_completed_)
          // done: Forward dependencies from rwbar1 to transition call_stmt_108_sample_start_
          // RAW reenables for rwbar1
          RPIPE_acc_mem_request_1_85_update_start_ o<-& (call_stmt_108_sample_completed_ 0)
          // start: Forward dependencies from row_index1 to transition call_stmt_108_sample_start_
          call_stmt_108_sample_start_ <-& (RPIPE_acc_mem_request_1_85_update_completed_)
          // done: Forward dependencies from row_index1 to transition call_stmt_108_sample_start_
          // RAW reenables for row_index1
          RPIPE_acc_mem_request_1_85_update_start_ o<-& (call_stmt_108_sample_completed_ 0)
          // start: Forward dependencies from col_index1 to transition call_stmt_108_sample_start_
          call_stmt_108_sample_start_ <-& (RPIPE_acc_mem_request_1_85_update_completed_)
          // done: Forward dependencies from col_index1 to transition call_stmt_108_sample_start_
          // RAW reenables for col_index1
          RPIPE_acc_mem_request_1_85_update_start_ o<-& (call_stmt_108_sample_completed_ 0)
          // start: Forward dependencies from wdata1 to transition call_stmt_108_sample_start_
          call_stmt_108_sample_start_ <-& (RPIPE_acc_mem_request_1_85_update_completed_)
          // done: Forward dependencies from wdata1 to transition call_stmt_108_sample_start_
          // RAW reenables for wdata1
          RPIPE_acc_mem_request_1_85_update_start_ o<-& (call_stmt_108_sample_completed_ 0)
          ;;[call_stmt_108_Sample] 
          {
            $T [crr] $T [cra] 
          }
          ;;[call_stmt_108_Update] 
          {
            $T [ccr] $T [cca] 
          }
          call_stmt_108_sample_start_ &-> (call_stmt_108_Sample)
          call_stmt_108_sample_completed_ <-& (call_stmt_108_Sample)
          call_stmt_108_sample_completed_ &-> ($null)
          call_stmt_108_update_start_ &-> (call_stmt_108_Update)
          call_stmt_108_update_completed_ <-& (call_stmt_108_Update)
          // Call output argument 0
          // (as target) rdata1
          // self-release: 
          call_stmt_108_sample_start_ o<-& (call_stmt_108_sample_completed_ 1)
          $null &-> (call_stmt_108_update_start_)
          call_stmt_108_update_start_ o<-& (call_stmt_108_update_completed_ 0)
          // start: WAR dependencies for rdata1
          // done: WAR dependencies for rdata1
          // end: 			$call accessMem (rwbar1 row_index1 col_index1 wdata1 ) (rdata1 ) 
          // start:  			acc_mem_response_1 := rdata1// bits of buffering = 16. 
          //  file prog.linked.opt.aa, line 72
          // Source expression
          // rdata1
          // Target expression
          // (as target) acc_mem_response_1
          $T[WPIPE_acc_mem_response_1_109_sample_start_] 
          $T[WPIPE_acc_mem_response_1_109_sample_completed_] 
          $T[WPIPE_acc_mem_response_1_109_update_start_] 
          $T[WPIPE_acc_mem_response_1_109_update_completed_] 
          ;;[WPIPE_acc_mem_response_1_109_Sample] 
          {
            // pipe write sample-start acc_mem_response_1
            $T [req] $T [ack] 
          }
          ;;[WPIPE_acc_mem_response_1_109_Update] 
          {
            // pipe write update (complete) acc_mem_response_1
            $T [req] $T [ack] 
          }
          WPIPE_acc_mem_response_1_109_sample_start_ &-> (WPIPE_acc_mem_response_1_109_Sample)
          WPIPE_acc_mem_response_1_109_sample_completed_ <-& (WPIPE_acc_mem_response_1_109_Sample)
          WPIPE_acc_mem_response_1_109_update_start_ <-& (WPIPE_acc_mem_response_1_109_sample_completed_)
          WPIPE_acc_mem_response_1_109_update_start_ &-> (WPIPE_acc_mem_response_1_109_Update)
          WPIPE_acc_mem_response_1_109_update_completed_ <-& (WPIPE_acc_mem_response_1_109_Update)
          WPIPE_acc_mem_response_1_109_sample_start_ o<-& (WPIPE_acc_mem_response_1_109_update_completed_ 0)
          // start: Forward dependencies from rdata1 to transition WPIPE_acc_mem_response_1_109_sample_start_
          WPIPE_acc_mem_response_1_109_sample_start_ <-& (call_stmt_108_update_completed_)
          // done: Forward dependencies from rdata1 to transition WPIPE_acc_mem_response_1_109_sample_start_
          // RAW reenables for rdata1
          call_stmt_108_update_start_ o<-& (WPIPE_acc_mem_response_1_109_sample_completed_ 0)
          // end:  			acc_mem_response_1 := rdata1// bits of buffering = 16. 
          $T [loop_body_delay_to_condition_start] $delay
          loop_body_start &-> (loop_body_delay_to_condition_start)
          loop_body_delay_to_condition_start &-> (condition_evaluated)
          condition_evaluated &-> ($null)
          // load-store dependencies..
          // memory-space  memory_space_3
          //  call_stmt_108 store
          // reenable across ring for memory space memory_space_3
          // leading and trailing sets are the same... no ring dependency
          // pipe read/write dependencies for pipe acc_mem_request_1
          // read-dependencies for pipe acc_mem_request_1
          // write-dependencies for pipe acc_mem_request_1
          // signal dependencies for acc_mem_request_1
          // pipe read/write dependencies for pipe acc_mem_response_1
          // read-dependencies for pipe acc_mem_response_1
          // write-dependencies for pipe acc_mem_response_1
          // signal dependencies for acc_mem_response_1
        }
        ( first_time_through_loop_body  back_edge_to_loop_body) 
        ( condition_evaluated )
        ;; [loop_exit] 
        {
          $T [ack] 
        }
        ;; [loop_taken] 
        {
          $T [ack] 
        }
        do_while_stmt_82__entry__ <-| ($entry)
        loop_body_done <-| ( do_while_stmt_82_loop_body ) 
        condition_done |-> (loop_exit loop_taken)
        do_while_stmt_82__exit__ |-> ($exit)
        $bind condition_done <= do_while_stmt_82_loop_body : condition_evaluated
        $bind do_while_stmt_82__entry__  => do_while_stmt_82_loop_body : first_time_through_loop_body 
        $bind loop_back  => do_while_stmt_82_loop_body : back_edge_to_loop_body 
        $terminate (loop_exit loop_taken loop_body_done) (loop_back do_while_stmt_82__exit__)
      }
      do_while_stmt_82__entry__ |-> (do_while_stmt_82)
      do_while_stmt_82__exit__ <-| (do_while_stmt_82)
      do_while_stmt_82__entry__ <-| (branch_block_stmt_81__entry__)
      do_while_stmt_82__exit__ |-> (branch_block_stmt_81__exit__)
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %accMemAccessDaemon%loop%
    //  file prog.linked.opt.aa, line 64
    // constant-object-declarations for block %accMemAccessDaemon%loop
    //  file prog.linked.opt.aa, line 60
    // constant-object-declarations for block %accMemAccessDaemon
    //  file prog.linked.opt.aa, line 55
    // constant-declarations for block %accMemAccessDaemon%loop
    //  file prog.linked.opt.aa, line 60
    // do-while statement  
    //  file prog.linked.opt.aa, line 62
    // 1 
    $constant $W[konst_113_wire_constant] : $int<1> := _b1// 1
    // constant-declarations for block %accMemAccessDaemon%loop%
    //  file prog.linked.opt.aa, line 64
    // 			$call accessMem (rwbar1 row_index1 col_index1 wdata1 ) (rdata1 ) 
    //  file prog.linked.opt.aa, line 71
    // block %accMemAccessDaemon%loop
    //  file prog.linked.opt.aa, line 60
    // do-while statement  
    //  file prog.linked.opt.aa, line 62
    // 			cmd_1 := acc_mem_request_1// bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 66
    // cmd_1
    $W[cmd_1_86] : $int<32>
    // 			$volatile wdata1 := ( $slice cmd_1 31 16 ) 
    //  file prog.linked.opt.aa, line 67
    // wdata1
    $W[wdata1_90] : $int<16>
    // 			$volatile row_index1 := ( $slice cmd_1 15 10 ) 
    //  file prog.linked.opt.aa, line 68
    // row_index1
    $W[row_index1_94] : $int<6>
    // 			$volatile col_index1 := ( $slice cmd_1 9 5 ) 
    //  file prog.linked.opt.aa, line 69
    // col_index1
    $W[col_index1_98] : $int<5>
    // 			$volatile rwbar1 := ( $slice cmd_1 0 0 ) 
    //  file prog.linked.opt.aa, line 70
    // rwbar1
    $W[rwbar1_102] : $int<1>
    // 			$call accessMem (rwbar1 row_index1 col_index1 wdata1 ) (rdata1 ) 
    //  file prog.linked.opt.aa, line 71
    // rdata1
    $W[rdata1_108] : $int<16>
    // 			acc_mem_response_1 := rdata1// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 72
    // acc_mem_response_1
    // datapath-instances for block %accMemAccessDaemon%loop
    //  file prog.linked.opt.aa, line 60
    // datapath-instances for do-while  
    //  file prog.linked.opt.aa, line 62
    ==0? [do_while_stmt_82_branch] (konst_113_wire_constant)
    $flowthrough
    // 			cmd_1 := acc_mem_request_1// bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 66
    // acc_mem_request_1
    $ioport $in [RPIPE_acc_mem_request_1_85_inst] (acc_mem_request_1) (cmd_1_86)  $fullrate 
    $buffering $out RPIPE_acc_mem_request_1_85_inst cmd_1_86 1
    // 			$volatile wdata1 := ( $slice cmd_1 31 16 ) 
    //  file prog.linked.opt.aa, line 67
    // ( $slice cmd_1 31 16 ) 
    [:] [slice_89_inst] (cmd_1_86 31 16) (wdata1_90)  $flowthrough
    $delay slice_89_inst 0
    // 			$volatile row_index1 := ( $slice cmd_1 15 10 ) 
    //  file prog.linked.opt.aa, line 68
    // ( $slice cmd_1 15 10 ) 
    [:] [slice_93_inst] (cmd_1_86 15 10) (row_index1_94)  $flowthrough
    $delay slice_93_inst 0
    // 			$volatile col_index1 := ( $slice cmd_1 9 5 ) 
    //  file prog.linked.opt.aa, line 69
    // ( $slice cmd_1 9 5 ) 
    [:] [slice_97_inst] (cmd_1_86 9 5) (col_index1_98)  $flowthrough
    $delay slice_97_inst 0
    // 			$volatile rwbar1 := ( $slice cmd_1 0 0 ) 
    //  file prog.linked.opt.aa, line 70
    // ( $slice cmd_1 0 0 ) 
    [:] [slice_101_inst] (cmd_1_86 0 0) (rwbar1_102)  $flowthrough
    $delay slice_101_inst 0
    // 			$call accessMem (rwbar1 row_index1 col_index1 wdata1 ) (rdata1 ) 
    //  file prog.linked.opt.aa, line 71
    $call [call_stmt_108_call] $module accessMem(rwbar1_102 row_index1_94 col_index1_98 wdata1_90) (rdata1_108)   $fullrate
    $delay call_stmt_108_call 7
    $buffering  $in call_stmt_108_call rwbar1_102 1
    $buffering  $in call_stmt_108_call row_index1_94 1
    $buffering  $in call_stmt_108_call col_index1_98 1
    $buffering  $in call_stmt_108_call wdata1_90 1
    $buffering  $out call_stmt_108_call rdata1_108 1
    // 			acc_mem_response_1 := rdata1// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 72
    // acc_mem_response_1
    $ioport $out [WPIPE_acc_mem_response_1_109_inst]  (rdata1_108) (acc_mem_response_1)  $fullrate 
  }
  // end data-path
  // CP-DP links for do-while  do_while_stmt_82
  //  file prog.linked.opt.aa, line 62
  // 			cmd_1 := acc_mem_request_1// bits of buffering = 32. 
  //  file prog.linked.opt.aa, line 66
  // acc_mem_request_1
  RPIPE_acc_mem_request_1_85_inst <=> (branch_block_stmt_81/do_while_stmt_82/do_while_stmt_82_loop_body/RPIPE_acc_mem_request_1_85_Sample/rr branch_block_stmt_81/do_while_stmt_82/do_while_stmt_82_loop_body/RPIPE_acc_mem_request_1_85_Update/cr) (branch_block_stmt_81/do_while_stmt_82/do_while_stmt_82_loop_body/RPIPE_acc_mem_request_1_85_Sample/ra branch_block_stmt_81/do_while_stmt_82/do_while_stmt_82_loop_body/RPIPE_acc_mem_request_1_85_Update/ca)
  // 			$volatile wdata1 := ( $slice cmd_1 31 16 ) 
  //  file prog.linked.opt.aa, line 67
  // cmd_1
  // 			$volatile row_index1 := ( $slice cmd_1 15 10 ) 
  //  file prog.linked.opt.aa, line 68
  // cmd_1
  // 			$volatile col_index1 := ( $slice cmd_1 9 5 ) 
  //  file prog.linked.opt.aa, line 69
  // cmd_1
  // 			$volatile rwbar1 := ( $slice cmd_1 0 0 ) 
  //  file prog.linked.opt.aa, line 70
  // cmd_1
  // 			$call accessMem (rwbar1 row_index1 col_index1 wdata1 ) (rdata1 ) 
  //  file prog.linked.opt.aa, line 71
  // rwbar1
  // row_index1
  // col_index1
  // wdata1
  call_stmt_108_call <=> (branch_block_stmt_81/do_while_stmt_82/do_while_stmt_82_loop_body/call_stmt_108_Sample/crr branch_block_stmt_81/do_while_stmt_82/do_while_stmt_82_loop_body/call_stmt_108_Update/ccr) (branch_block_stmt_81/do_while_stmt_82/do_while_stmt_82_loop_body/call_stmt_108_Sample/cra branch_block_stmt_81/do_while_stmt_82/do_while_stmt_82_loop_body/call_stmt_108_Update/cca)
  // 			acc_mem_response_1 := rdata1// bits of buffering = 16. 
  //  file prog.linked.opt.aa, line 72
  // rdata1
  // acc_mem_response_1
  WPIPE_acc_mem_response_1_109_inst <=> (branch_block_stmt_81/do_while_stmt_82/do_while_stmt_82_loop_body/WPIPE_acc_mem_response_1_109_Sample/req branch_block_stmt_81/do_while_stmt_82/do_while_stmt_82_loop_body/WPIPE_acc_mem_response_1_109_Update/req) (branch_block_stmt_81/do_while_stmt_82/do_while_stmt_82_loop_body/WPIPE_acc_mem_response_1_109_Sample/ack branch_block_stmt_81/do_while_stmt_82/do_while_stmt_82_loop_body/WPIPE_acc_mem_response_1_109_Update/ack)
  do_while_stmt_82_branch <=> (branch_block_stmt_81/do_while_stmt_82/do_while_stmt_82_loop_body/condition_evaluated) (branch_block_stmt_81/do_while_stmt_82/loop_exit/ack branch_block_stmt_81/do_while_stmt_82/loop_taken/ack)
}
$module [initFilter] 
{
  $in start_row_filter:$int<6>
  // can point into 
  $out filter_initialized:$int<2> := _b01
  // can point into 
  // pipe-declarations for block %initFilter
  //  file prog.linked.opt.aa, line 76
  // pipe-declarations for block %initFilter%loop
  //  file prog.linked.opt.aa, line 81
  // memory-space 0 is written into.
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    <>[branch_block_stmt_120] // Branch Block  file prog.linked.opt.aa, line 81
    {
      $P [branch_block_stmt_120__entry__]
      branch_block_stmt_120__entry__ <-| ($entry)
      $P [branch_block_stmt_120__exit__]
      branch_block_stmt_120__exit__ |-> ($exit)
      $P [do_while_stmt_121__entry__] 
      $P [do_while_stmt_121__exit__] 
      // do-while-statement  
      //  file prog.linked.opt.aa, line 83
      <o> [do_while_stmt_121]  $depth 7 $buffering 2 
      {
        $P[do_while_stmt_121__entry__] 
        $P[do_while_stmt_121__exit__] 
        $P[loop_back] 
        $P[condition_done] 
        $P[loop_body_done] 
        $pipeline [do_while_stmt_121_loop_body] 
        {
          // Pipelined!
          $T[back_edge_to_loop_body] 
          $T[first_time_through_loop_body] 
          $T[loop_body_start] 
          $T[condition_evaluated] 
          $transitionmerge [entry_tmerge] (back_edge_to_loop_body first_time_through_loop_body) (loop_body_start)
          $entry <-& (loop_body_start)
          $T[aggregated_phi_sample_req] 
          $T[aggregated_phi_sample_ack] 
          $T[aggregated_phi_update_req] 
          $T[aggregated_phi_update_ack] 
          // do not loop-back unless all phi's have used up their triggering tokens.
          condition_evaluated <-& (aggregated_phi_update_ack)
          aggregated_phi_sample_req o<-& (aggregated_phi_update_ack 0)
          // start:  PHI statement phi_stmt_123
          // 			$phi ele := 			  ($bitcast ($uint<5>) 0  ) $on   $entry 			  n_ele $on   $loopback 
          // type of target is $uint<5>
          $T[phi_stmt_123_sample_start_] 
          $T[phi_stmt_123_sample_completed_] 
          $T[phi_stmt_123_update_start_] 
          $T[phi_stmt_123_update_completed_] 
          $T[phi_stmt_123_sample_start__ps] 
          phi_stmt_123_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_123_sample_completed__ps] 
          phi_stmt_123_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_123_update_start__ps] 
          phi_stmt_123_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_123_update_completed__ps] 
          phi_stmt_123_update_completed_ <-& (phi_stmt_123_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_123_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_123_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_123_update_start_)
          $T[phi_stmt_123_loopback_trigger] 
          phi_stmt_123_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_123_loopback_sample_req] 
          $T[phi_stmt_123_loopback_sample_req_ps] 
          phi_stmt_123_loopback_sample_req <-& (phi_stmt_123_loopback_sample_req_ps)
          phi_stmt_123_loopback_sample_req &-> ($null)
          $T[phi_stmt_123_entry_trigger] 
          phi_stmt_123_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_123_entry_sample_req] 
          $T[phi_stmt_123_entry_sample_req_ps] 
          phi_stmt_123_entry_sample_req <-& (phi_stmt_123_entry_sample_req_ps)
          phi_stmt_123_entry_sample_req &-> ($null)
          phi_stmt_123_update_start_ o<-& (phi_stmt_123_update_completed_ 0)
          phi_stmt_123_sample_start_ o<-& (phi_stmt_123_sample_completed_ 1)
          $T[phi_stmt_123_merged_reqs] 
          $T[phi_stmt_123_phi_mux_ack] 
          $T[phi_stmt_123_phi_mux_ack_ps] 
          phi_stmt_123_phi_mux_ack_ps <-& (phi_stmt_123_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_123_update_completed_)
          $T[type_cast_126_sample_start__ps] 
          $T[type_cast_126_sample_completed__ps] 
          $T[type_cast_126_update_start__ps] 
          $T[type_cast_126_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[type_cast_126_sample_start_] 
          $T[type_cast_126_sample_completed_] 
          type_cast_126_sample_completed_ <-& (type_cast_126_sample_start_)
          $T[type_cast_126_update_start_] 
          $T [type_cast_126_update_completed_] $delay 
          type_cast_126_update_completed_ <-& (type_cast_126_update_start_)
          // Phi start dependency for implicit/constant alternative.
          type_cast_126_sample_start_ <-& (type_cast_126_sample_start__ps)
          type_cast_126_update_start_ <-& (type_cast_126_update_start__ps)
          // Phi complete dependency.
          type_cast_126_sample_completed__ps <-& (type_cast_126_sample_completed_)
          type_cast_126_update_completed__ps <-& (type_cast_126_update_completed_)
          $T[R_n_ele_127_sample_start__ps] 
          $T[R_n_ele_127_sample_completed__ps] 
          $T[R_n_ele_127_update_start__ps] 
          $T[R_n_ele_127_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_n_ele_127_sample_start_] 
          $T[R_n_ele_127_sample_completed_] 
          $T[R_n_ele_127_update_start_] 
          $T[R_n_ele_127_update_completed_] 
          ;;[R_n_ele_127_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_n_ele_127_sample_start_ &-> (R_n_ele_127_Sample)
          R_n_ele_127_sample_completed_ <-& (R_n_ele_127_Sample)
          ;;[R_n_ele_127_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_n_ele_127_update_start_ &-> (R_n_ele_127_Update)
          R_n_ele_127_update_completed_ <-& (R_n_ele_127_Update)
          // RAW reenables for n_ele
          // Phi start dependency for implicit/constant alternative.
          R_n_ele_127_sample_start_ <-& (R_n_ele_127_sample_start__ps)
          R_n_ele_127_update_start_ <-& (R_n_ele_127_update_start__ps)
          // Phi complete dependency.
          R_n_ele_127_sample_completed__ps <-& (R_n_ele_127_sample_completed_)
          R_n_ele_127_update_completed__ps <-& (R_n_ele_127_update_completed_)
          $phisequencer [ phi_stmt_123_phi_seq] : 
          phi_stmt_123_entry_trigger type_cast_126_sample_start__ps type_cast_126_sample_completed__ps type_cast_126_update_start__ps type_cast_126_update_completed__ps phi_stmt_123_loopback_trigger R_n_ele_127_sample_start__ps R_n_ele_127_sample_completed__ps R_n_ele_127_update_start__ps R_n_ele_127_update_completed__ps :
          phi_stmt_123_sample_start__ps phi_stmt_123_sample_completed__ps phi_stmt_123_update_start__ps phi_stmt_123_update_completed__ps :
          phi_stmt_123_entry_sample_req_ps phi_stmt_123_loopback_sample_req_ps : 
          phi_stmt_123_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_123
          // start:  PHI statement phi_stmt_128
          // 			$phi J := 			  ($bitcast ($uint<5>) 0  ) $on   $entry 			  n_J $on   $loopback 
          // type of target is $uint<5>
          $T[phi_stmt_128_sample_start_] 
          $T[phi_stmt_128_sample_completed_] 
          $T[phi_stmt_128_update_start_] 
          $T[phi_stmt_128_update_completed_] 
          $T[phi_stmt_128_sample_start__ps] 
          phi_stmt_128_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_128_sample_completed__ps] 
          phi_stmt_128_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_128_update_start__ps] 
          phi_stmt_128_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_128_update_completed__ps] 
          phi_stmt_128_update_completed_ <-& (phi_stmt_128_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_128_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_128_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_128_update_start_)
          $T[phi_stmt_128_loopback_trigger] 
          phi_stmt_128_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_128_loopback_sample_req] 
          $T[phi_stmt_128_loopback_sample_req_ps] 
          phi_stmt_128_loopback_sample_req <-& (phi_stmt_128_loopback_sample_req_ps)
          phi_stmt_128_loopback_sample_req &-> ($null)
          $T[phi_stmt_128_entry_trigger] 
          phi_stmt_128_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_128_entry_sample_req] 
          $T[phi_stmt_128_entry_sample_req_ps] 
          phi_stmt_128_entry_sample_req <-& (phi_stmt_128_entry_sample_req_ps)
          phi_stmt_128_entry_sample_req &-> ($null)
          phi_stmt_128_update_start_ o<-& (phi_stmt_128_update_completed_ 0)
          phi_stmt_128_sample_start_ o<-& (phi_stmt_128_sample_completed_ 1)
          $T[phi_stmt_128_merged_reqs] 
          $T[phi_stmt_128_phi_mux_ack] 
          $T[phi_stmt_128_phi_mux_ack_ps] 
          phi_stmt_128_phi_mux_ack_ps <-& (phi_stmt_128_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_128_update_completed_)
          $T[type_cast_131_sample_start__ps] 
          $T[type_cast_131_sample_completed__ps] 
          $T[type_cast_131_update_start__ps] 
          $T[type_cast_131_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[type_cast_131_sample_start_] 
          $T[type_cast_131_sample_completed_] 
          type_cast_131_sample_completed_ <-& (type_cast_131_sample_start_)
          $T[type_cast_131_update_start_] 
          $T [type_cast_131_update_completed_] $delay 
          type_cast_131_update_completed_ <-& (type_cast_131_update_start_)
          // Phi start dependency for implicit/constant alternative.
          type_cast_131_sample_start_ <-& (type_cast_131_sample_start__ps)
          type_cast_131_update_start_ <-& (type_cast_131_update_start__ps)
          // Phi complete dependency.
          type_cast_131_sample_completed__ps <-& (type_cast_131_sample_completed_)
          type_cast_131_update_completed__ps <-& (type_cast_131_update_completed_)
          $T[R_n_J_132_sample_start__ps] 
          $T[R_n_J_132_sample_completed__ps] 
          $T[R_n_J_132_update_start__ps] 
          $T[R_n_J_132_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_n_J_132_sample_start_] 
          $T[R_n_J_132_sample_completed_] 
          $T[R_n_J_132_update_start_] 
          $T[R_n_J_132_update_completed_] 
          ;;[R_n_J_132_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_n_J_132_sample_start_ &-> (R_n_J_132_Sample)
          R_n_J_132_sample_completed_ <-& (R_n_J_132_Sample)
          ;;[R_n_J_132_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_n_J_132_update_start_ &-> (R_n_J_132_Update)
          R_n_J_132_update_completed_ <-& (R_n_J_132_Update)
          // RAW reenables for n_J
          // Phi start dependency for implicit/constant alternative.
          R_n_J_132_sample_start_ <-& (R_n_J_132_sample_start__ps)
          R_n_J_132_update_start_ <-& (R_n_J_132_update_start__ps)
          // Phi complete dependency.
          R_n_J_132_sample_completed__ps <-& (R_n_J_132_sample_completed_)
          R_n_J_132_update_completed__ps <-& (R_n_J_132_update_completed_)
          $phisequencer [ phi_stmt_128_phi_seq] : 
          phi_stmt_128_entry_trigger type_cast_131_sample_start__ps type_cast_131_sample_completed__ps type_cast_131_update_start__ps type_cast_131_update_completed__ps phi_stmt_128_loopback_trigger R_n_J_132_sample_start__ps R_n_J_132_sample_completed__ps R_n_J_132_update_start__ps R_n_J_132_update_completed__ps :
          phi_stmt_128_sample_start__ps phi_stmt_128_sample_completed__ps phi_stmt_128_update_start__ps phi_stmt_128_update_completed__ps :
          phi_stmt_128_entry_sample_req_ps phi_stmt_128_loopback_sample_req_ps : 
          phi_stmt_128_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_128
          // start:  PHI statement phi_stmt_133
          // 			$phi I := 			  ($bitcast ($uint<6>) filter_start_addr ) $on   $entry 			  n_I $on   $loopback 
          // type of target is $uint<6>
          $T[phi_stmt_133_sample_start_] 
          $T[phi_stmt_133_sample_completed_] 
          $T[phi_stmt_133_update_start_] 
          $T[phi_stmt_133_update_completed_] 
          $T[phi_stmt_133_sample_start__ps] 
          phi_stmt_133_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_133_sample_completed__ps] 
          phi_stmt_133_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_133_update_start__ps] 
          phi_stmt_133_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_133_update_completed__ps] 
          phi_stmt_133_update_completed_ <-& (phi_stmt_133_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_133_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_133_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_133_update_start_)
          $T[phi_stmt_133_loopback_trigger] 
          phi_stmt_133_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_133_loopback_sample_req] 
          $T[phi_stmt_133_loopback_sample_req_ps] 
          phi_stmt_133_loopback_sample_req <-& (phi_stmt_133_loopback_sample_req_ps)
          phi_stmt_133_loopback_sample_req &-> ($null)
          $T[phi_stmt_133_entry_trigger] 
          phi_stmt_133_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_133_entry_sample_req] 
          $T[phi_stmt_133_entry_sample_req_ps] 
          phi_stmt_133_entry_sample_req <-& (phi_stmt_133_entry_sample_req_ps)
          phi_stmt_133_entry_sample_req &-> ($null)
          phi_stmt_133_update_start_ o<-& (phi_stmt_133_update_completed_ 0)
          phi_stmt_133_sample_start_ o<-& (phi_stmt_133_sample_completed_ 1)
          $T[phi_stmt_133_merged_reqs] 
          $T[phi_stmt_133_phi_mux_ack] 
          $T[phi_stmt_133_phi_mux_ack_ps] 
          phi_stmt_133_phi_mux_ack_ps <-& (phi_stmt_133_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_133_update_completed_)
          $T[type_cast_136_sample_start__ps] 
          $T[type_cast_136_sample_completed__ps] 
          $T[type_cast_136_update_start__ps] 
          $T[type_cast_136_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[type_cast_136_sample_start_] 
          $T[type_cast_136_sample_completed_] 
          type_cast_136_sample_completed_ <-& (type_cast_136_sample_start_)
          $T[type_cast_136_update_start_] 
          $T [type_cast_136_update_completed_] $delay 
          type_cast_136_update_completed_ <-& (type_cast_136_update_start_)
          // Phi start dependency for implicit/constant alternative.
          type_cast_136_sample_start_ <-& (type_cast_136_sample_start__ps)
          type_cast_136_update_start_ <-& (type_cast_136_update_start__ps)
          // Phi complete dependency.
          type_cast_136_sample_completed__ps <-& (type_cast_136_sample_completed_)
          type_cast_136_update_completed__ps <-& (type_cast_136_update_completed_)
          $T[R_n_I_137_sample_start__ps] 
          $T[R_n_I_137_sample_completed__ps] 
          $T[R_n_I_137_update_start__ps] 
          $T[R_n_I_137_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_n_I_137_sample_start_] 
          $T[R_n_I_137_sample_completed_] 
          $T[R_n_I_137_update_start_] 
          $T[R_n_I_137_update_completed_] 
          ;;[R_n_I_137_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_n_I_137_sample_start_ &-> (R_n_I_137_Sample)
          R_n_I_137_sample_completed_ <-& (R_n_I_137_Sample)
          ;;[R_n_I_137_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_n_I_137_update_start_ &-> (R_n_I_137_Update)
          R_n_I_137_update_completed_ <-& (R_n_I_137_Update)
          // RAW reenables for n_I
          // producer  and  consumer are both determined by PHI statements.
          // Phi start dependency for implicit/constant alternative.
          R_n_I_137_sample_start_ <-& (R_n_I_137_sample_start__ps)
          R_n_I_137_update_start_ <-& (R_n_I_137_update_start__ps)
          // Phi complete dependency.
          R_n_I_137_sample_completed__ps <-& (R_n_I_137_sample_completed_)
          R_n_I_137_update_completed__ps <-& (R_n_I_137_update_completed_)
          $phisequencer [ phi_stmt_133_phi_seq] : 
          phi_stmt_133_entry_trigger type_cast_136_sample_start__ps type_cast_136_sample_completed__ps type_cast_136_update_start__ps type_cast_136_update_completed__ps phi_stmt_133_loopback_trigger R_n_I_137_sample_start__ps R_n_I_137_sample_completed__ps R_n_I_137_update_start__ps R_n_I_137_update_completed__ps :
          phi_stmt_133_sample_start__ps phi_stmt_133_sample_completed__ps phi_stmt_133_update_start__ps phi_stmt_133_update_completed__ps :
          phi_stmt_133_entry_sample_req_ps phi_stmt_133_loopback_sample_req_ps : 
          phi_stmt_133_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_133
          // start: WAR dependencies for n_ele
          // WAR dependency: Read: n_ele before Write: 			$volatile n_ele := (ele + 1 )
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for n_ele
          // start:  			$volatile n_ele := (ele + 1 )
          //  file prog.linked.opt.aa, line 93
          // volatile! 
          // Source expression
          // (ele + 1 )
          // ele
          // Target expression
          // (as target) n_ele
          // start: WAR dependencies for n_ele
          // WAR dependency: Read: n_ele before Write: 			$volatile n_ele := (ele + 1 )
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for n_ele
          // end:  			$volatile n_ele := (ele + 1 )
          // start: WAR dependencies for n_J
          // WAR dependency: Read: n_J before Write: 			$volatile n_J := ( $mux (J <= 2 ) (J + 1 )  ($bitcast ($uint<5>) 0  ) ) 
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for n_J
          // start:  			$volatile n_J := ( $mux (J <= 2 ) (J + 1 )  ($bitcast ($uint<5>) 0  ) ) 
          //  file prog.linked.opt.aa, line 94
          // volatile! 
          // Source expression
          // ( $mux (J <= 2 ) (J + 1 )  ($bitcast ($uint<5>) 0  ) ) 
          // (J <= 2 )
          // J
          // (J + 1 )
          // J
          // Target expression
          // (as target) n_J
          // start: WAR dependencies for n_J
          // WAR dependency: Read: n_J before Write: 			$volatile n_J := ( $mux (J <= 2 ) (J + 1 )  ($bitcast ($uint<5>) 0  ) ) 
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for n_J
          // end:  			$volatile n_J := ( $mux (J <= 2 ) (J + 1 )  ($bitcast ($uint<5>) 0  ) ) 
          // start: WAR dependencies for n_I
          // WAR dependency: Read: n_I before Write: 			$volatile n_I := ( $mux (J == 3 ) ($bitcast ($uint<6>) (I + 1 ) )  I ) 
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for n_I
          // start:  			$volatile n_I := ( $mux (J == 3 ) ($bitcast ($uint<6>) (I + 1 ) )  I ) 
          //  file prog.linked.opt.aa, line 95
          // volatile! 
          // Source expression
          // ( $mux (J == 3 ) ($bitcast ($uint<6>) (I + 1 ) )  I ) 
          // (J == 3 )
          // J
          // ($bitcast ($uint<6>) (I + 1 ) )
          // (I + 1 )
          // I
          // I
          // Target expression
          // (as target) n_I
          // start: WAR dependencies for n_I
          // WAR dependency: Read: n_I before Write: 			$volatile n_I := ( $mux (J == 3 ) ($bitcast ($uint<6>) (I + 1 ) )  I ) 
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for n_I
          // end:  			$volatile n_I := ( $mux (J == 3 ) ($bitcast ($uint<6>) (I + 1 ) )  I ) 
          // start: 			$call accessMem (read_signal I J write_data_zero ) (rdata ) 
          //  file prog.linked.opt.aa, line 96
          $T[call_stmt_171_sample_start_] 
          $T[call_stmt_171_sample_completed_] 
          $T[call_stmt_171_update_start_] 
          $T[call_stmt_171_update_completed_] 
          // Call input argument 0
          // Call input argument 1
          // I
          // Call input argument 2
          // J
          // Call input argument 3
          // start: Forward dependencies from I to transition call_stmt_171_sample_start_
          call_stmt_171_sample_start_ <-& (phi_stmt_133_update_completed_)
          // done: Forward dependencies from I to transition call_stmt_171_sample_start_
          // RAW reenables for I
          phi_stmt_133_update_start_ o<-& (call_stmt_171_sample_completed_ 0)
          // start: Forward dependencies from J to transition call_stmt_171_sample_start_
          call_stmt_171_sample_start_ <-& (phi_stmt_128_update_completed_)
          // done: Forward dependencies from J to transition call_stmt_171_sample_start_
          // RAW reenables for J
          phi_stmt_128_update_start_ o<-& (call_stmt_171_sample_completed_ 0)
          ;;[call_stmt_171_Sample] 
          {
            $T [crr] $T [cra] 
          }
          ;;[call_stmt_171_Update] 
          {
            $T [ccr] $T [cca] 
          }
          call_stmt_171_sample_start_ &-> (call_stmt_171_Sample)
          call_stmt_171_sample_completed_ <-& (call_stmt_171_Sample)
          call_stmt_171_sample_completed_ &-> ($null)
          call_stmt_171_update_start_ &-> (call_stmt_171_Update)
          call_stmt_171_update_completed_ <-& (call_stmt_171_Update)
          // Call output argument 0
          // (as target) rdata
          // self-release: 
          call_stmt_171_sample_start_ o<-& (call_stmt_171_sample_completed_ 1)
          $null &-> (call_stmt_171_update_start_)
          call_stmt_171_update_start_ o<-& (call_stmt_171_update_completed_ 0)
          // start: WAR dependencies for rdata
          // done: WAR dependencies for rdata
          // end: 			$call accessMem (read_signal I J write_data_zero ) (rdata ) 
          // start:  			I_173_delayed_7_0 := I $buffering 7// bits of buffering = 42. 
          //  file prog.linked.opt.aa, line 97
          $T[assign_stmt_174_sample_start_] 
          $T[assign_stmt_174_sample_completed_] 
          $T[assign_stmt_174_update_start_] 
          $T[assign_stmt_174_update_completed_] 
          // Source expression
          // I
          // Target expression
          // (as target) I_173_delayed_7_0
          // both source and target are implicit: use interlock 
          // Interlock 
          ;;[assign_stmt_174_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          ;;[assign_stmt_174_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          assign_stmt_174_sample_start_ &-> (assign_stmt_174_Sample)
          assign_stmt_174_sample_completed_ <-& (assign_stmt_174_Sample)
          assign_stmt_174_sample_completed_ &-> ($null)
          assign_stmt_174_update_start_ &-> (assign_stmt_174_Update)
          assign_stmt_174_update_completed_ <-& (assign_stmt_174_Update)
          // start: Forward dependencies from I to transition assign_stmt_174_sample_start_
          assign_stmt_174_sample_start_ <-& (phi_stmt_133_update_completed_)
          // done: Forward dependencies from I to transition assign_stmt_174_sample_start_
          // RAW reenables for I
          phi_stmt_133_update_start_ o<-& (assign_stmt_174_sample_completed_ 0)
          // self-release: 
          assign_stmt_174_sample_start_ o<-& (assign_stmt_174_sample_completed_ 1)
          $null &-> (assign_stmt_174_update_start_)
          assign_stmt_174_update_start_ o<-& (assign_stmt_174_update_completed_ 0)
          // start: WAR dependencies for I_173_delayed_7_0
          // done: WAR dependencies for I_173_delayed_7_0
          // end:  			I_173_delayed_7_0 := I $buffering 7// bits of buffering = 42. 
          // start:  			J_174_delayed_7_0 := J $buffering 7// bits of buffering = 35. 
          //  file prog.linked.opt.aa, line 98
          $T[assign_stmt_177_sample_start_] 
          $T[assign_stmt_177_sample_completed_] 
          $T[assign_stmt_177_update_start_] 
          $T[assign_stmt_177_update_completed_] 
          // Source expression
          // J
          // Target expression
          // (as target) J_174_delayed_7_0
          // both source and target are implicit: use interlock 
          // Interlock 
          ;;[assign_stmt_177_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          ;;[assign_stmt_177_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          assign_stmt_177_sample_start_ &-> (assign_stmt_177_Sample)
          assign_stmt_177_sample_completed_ <-& (assign_stmt_177_Sample)
          assign_stmt_177_sample_completed_ &-> ($null)
          assign_stmt_177_update_start_ &-> (assign_stmt_177_Update)
          assign_stmt_177_update_completed_ <-& (assign_stmt_177_Update)
          // start: Forward dependencies from J to transition assign_stmt_177_sample_start_
          assign_stmt_177_sample_start_ <-& (phi_stmt_128_update_completed_)
          // done: Forward dependencies from J to transition assign_stmt_177_sample_start_
          // RAW reenables for J
          phi_stmt_128_update_start_ o<-& (assign_stmt_177_sample_completed_ 0)
          // self-release: 
          assign_stmt_177_sample_start_ o<-& (assign_stmt_177_sample_completed_ 1)
          $null &-> (assign_stmt_177_update_start_)
          assign_stmt_177_update_start_ o<-& (assign_stmt_177_update_completed_ 0)
          // start: WAR dependencies for J_174_delayed_7_0
          // done: WAR dependencies for J_174_delayed_7_0
          // end:  			J_174_delayed_7_0 := J $buffering 7// bits of buffering = 35. 
          // start:  			filter[I_173_delayed_7_0][J_174_delayed_7_0] := rdata// bits of buffering = 16. 
          //  file prog.linked.opt.aa, line 99
          // Source expression
          // rdata
          // Target expression
          // filter[I_173_delayed_7_0][J_174_delayed_7_0]
          $T[array_obj_ref_180_sample_start_] 
          $T[array_obj_ref_180_sample_completed_] 
          $T[array_obj_ref_180_update_start_] 
          $T[array_obj_ref_180_update_completed_] 
          $T[array_obj_ref_180_word_address_calculated] 
          $T[array_obj_ref_180_root_address_calculated] 
          $T[array_obj_ref_180_offset_calculated] 
          $T[array_obj_ref_180_index_resized_0] 
          $T[array_obj_ref_180_index_scaled_0] 
          $T[array_obj_ref_180_index_computed_0] 
          // I_173_delayed_7_0
          // start: Forward dependencies from I_173_delayed_7_0 to transition array_obj_ref_180_index_computed_0
          array_obj_ref_180_index_computed_0 <-& (assign_stmt_174_update_completed_)
          // done: Forward dependencies from I_173_delayed_7_0 to transition array_obj_ref_180_index_computed_0
          ;;[array_obj_ref_180_index_resize_0] 
          {
            $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
          }
          array_obj_ref_180_index_computed_0 &-> (array_obj_ref_180_index_resize_0)
          array_obj_ref_180_index_resized_0 <-& (array_obj_ref_180_index_resize_0)
          $T[array_obj_ref_180_index_scale_0_sample_start] 
          $T[array_obj_ref_180_index_scale_0_sample_complete] 
          $T[array_obj_ref_180_index_scale_0_update_start] 
          $T[array_obj_ref_180_index_scale_0_update_complete] 
          ;;[array_obj_ref_180_index_scale_0_Sample] 
          {
            $T [rr] $T [ra] 
          }
          ;;[array_obj_ref_180_index_scale_0_Update] 
          {
            $T [cr] $T [ca] 
          }
          array_obj_ref_180_index_resized_0 &-> (array_obj_ref_180_index_scale_0_sample_start)
          array_obj_ref_180_index_scale_0_sample_start &-> (array_obj_ref_180_index_scale_0_Sample)
          array_obj_ref_180_index_scale_0_sample_complete <-& (array_obj_ref_180_index_scale_0_Sample)
          array_obj_ref_180_index_scale_0_update_start &-> (array_obj_ref_180_index_scale_0_Update)
          array_obj_ref_180_index_scale_0_update_complete <-& (array_obj_ref_180_index_scale_0_Update)
          array_obj_ref_180_index_scaled_0 <-& (array_obj_ref_180_index_scale_0_update_complete)
          assign_stmt_174_update_start_ o<-& (array_obj_ref_180_index_scaled_0 0)
          array_obj_ref_180_index_scale_0_sample_start o<-& (array_obj_ref_180_index_scale_0_sample_complete 1)
          array_obj_ref_180_index_scale_0_update_start o<-& (array_obj_ref_180_index_scale_0_update_complete 0)
          $T[array_obj_ref_180_index_resized_1] 
          $T[array_obj_ref_180_index_scaled_1] 
          $T[array_obj_ref_180_index_computed_1] 
          // J_174_delayed_7_0
          // start: Forward dependencies from J_174_delayed_7_0 to transition array_obj_ref_180_index_computed_1
          array_obj_ref_180_index_computed_1 <-& (assign_stmt_177_update_completed_)
          // done: Forward dependencies from J_174_delayed_7_0 to transition array_obj_ref_180_index_computed_1
          ;;[array_obj_ref_180_index_resize_1] 
          {
            $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
          }
          array_obj_ref_180_index_computed_1 &-> (array_obj_ref_180_index_resize_1)
          array_obj_ref_180_index_resized_1 <-& (array_obj_ref_180_index_resize_1)
          ;;[array_obj_ref_180_index_scale_1] 
          {
            $T [scale_rename_req] $T [scale_rename_ack] // rename 
          }
          array_obj_ref_180_index_resized_1 &-> (array_obj_ref_180_index_scale_1)
          array_obj_ref_180_index_scaled_1 <-& (array_obj_ref_180_index_scale_1)
          $T[array_obj_ref_180_partial_sum_1_sample_start] 
          $T[array_obj_ref_180_partial_sum_1_sample_complete] 
          $T[array_obj_ref_180_partial_sum_1_update_start] 
          $T[array_obj_ref_180_partial_sum_1_update_complete] 
          ;;[array_obj_ref_180_partial_sum_1_Sample] 
          {
            $T [rr] $T [ra] 
          }
          ;;[array_obj_ref_180_partial_sum_1_Update] 
          {
            $T [cr] $T [ca] 
          }
          array_obj_ref_180_partial_sum_1_sample_start &-> (array_obj_ref_180_partial_sum_1_Sample)
          array_obj_ref_180_partial_sum_1_sample_complete <-& (array_obj_ref_180_partial_sum_1_Sample)
          array_obj_ref_180_partial_sum_1_update_start &-> (array_obj_ref_180_partial_sum_1_Update)
          array_obj_ref_180_partial_sum_1_update_complete <-& (array_obj_ref_180_partial_sum_1_Update)
          array_obj_ref_180_partial_sum_1_sample_start o<-& (array_obj_ref_180_partial_sum_1_sample_complete 1)
          array_obj_ref_180_partial_sum_1_update_start o<-& (array_obj_ref_180_partial_sum_1_update_complete 0)
          array_obj_ref_180_partial_sum_1_sample_start <-& (array_obj_ref_180_index_scaled_0)
          array_obj_ref_180_partial_sum_1_sample_start <-& (array_obj_ref_180_index_scaled_1)
          array_obj_ref_180_index_scaled_0 o<-& (array_obj_ref_180_partial_sum_1_sample_complete 1)
          assign_stmt_177_update_start_ o<-& (array_obj_ref_180_partial_sum_1_sample_complete 1)
          array_obj_ref_180_offset_calculated <-& (array_obj_ref_180_partial_sum_1_update_complete)
          ;;[array_obj_ref_180_final_index_sum_regn] 
          {
            $T [req] $T [ack] // rename
          }
          array_obj_ref_180_partial_sum_1_update_complete &-> (array_obj_ref_180_final_index_sum_regn)
          array_obj_ref_180_offset_calculated <-& (array_obj_ref_180_final_index_sum_regn)
          ;;[array_obj_ref_180_base_plus_offset] 
          {
            $T [sum_rename_req] $T [sum_rename_ack] // one gets through 
          }
          array_obj_ref_180_offset_calculated &-> (array_obj_ref_180_base_plus_offset)
          array_obj_ref_180_root_address_calculated <-& (array_obj_ref_180_base_plus_offset)
          ;;[array_obj_ref_180_word_addrgen] 
          {
            $T [root_register_req] $T [root_register_ack]
          }
          array_obj_ref_180_root_address_calculated &-> (array_obj_ref_180_word_addrgen)
          array_obj_ref_180_word_address_calculated <-& (array_obj_ref_180_word_addrgen)
          ;;[array_obj_ref_180_Sample] 
          {
            ;;[array_obj_ref_180_Split] 
            {
              $T [split_req] $T [split_ack]
            }
            ||[word_access_start] 
            {
              ;;[word_0] 
              {
                $T [rr] $T [ra] 
              }
            }
          }
          ;;[array_obj_ref_180_Update] 
          {
            ||[word_access_complete] 
            {
              ;;[word_0] 
              {
                $T [cr] $T [ca] 
              }
            }
          }
          array_obj_ref_180_sample_start_ <-& (array_obj_ref_180_word_address_calculated)
          // reenable-joins
          array_obj_ref_180_partial_sum_1_update_start o<-& (array_obj_ref_180_sample_completed_ 0)
          array_obj_ref_180_sample_start_ &-> (array_obj_ref_180_Sample)
          array_obj_ref_180_sample_completed_ <-& (array_obj_ref_180_Sample)
          array_obj_ref_180_sample_completed_ &-> ($null)
          array_obj_ref_180_update_start_ &-> (array_obj_ref_180_Update)
          array_obj_ref_180_update_completed_ <-& (array_obj_ref_180_Update)
          // self-release: 
          array_obj_ref_180_sample_start_ o<-& (array_obj_ref_180_sample_completed_ 1)
          $null &-> (array_obj_ref_180_update_start_)
          array_obj_ref_180_update_start_ o<-& (array_obj_ref_180_update_completed_ 0)
          // start: Forward dependencies from rdata to transition array_obj_ref_180_sample_start_
          array_obj_ref_180_sample_start_ <-& (call_stmt_171_update_completed_)
          // done: Forward dependencies from rdata to transition array_obj_ref_180_sample_start_
          // RAW reenables for rdata
          call_stmt_171_update_start_ o<-& (array_obj_ref_180_sample_completed_ 0)
          // end:  			filter[I_173_delayed_7_0][J_174_delayed_7_0] := rdata// bits of buffering = 16. 
          // (ele < 15 )
          // ele
          $T [loop_body_delay_to_condition_start] $delay
          loop_body_start &-> (loop_body_delay_to_condition_start)
          loop_body_delay_to_condition_start &-> (condition_evaluated)
          // start: Forward dependencies from (ele < 15 ) to transition condition_evaluated
          condition_evaluated <-& (phi_stmt_123_update_completed_)
          // done: Forward dependencies from (ele < 15 ) to transition condition_evaluated
          condition_evaluated &-> ($null)
          // load-store dependencies..
          // memory-space  memory_space_3
          //  call_stmt_171 store
          // reenable across ring for memory space memory_space_3
          // leading and trailing sets are the same... no ring dependency
          // memory-space  memory_space_0
          //  array_obj_ref_180 store
          // reenable across ring for memory space memory_space_0
          // leading and trailing sets are the same... no ring dependency
        }
        ( first_time_through_loop_body  back_edge_to_loop_body) 
        ( condition_evaluated )
        ;; [loop_exit] 
        {
          $T [ack] 
        }
        ;; [loop_taken] 
        {
          $T [ack] 
        }
        do_while_stmt_121__entry__ <-| ($entry)
        loop_body_done <-| ( do_while_stmt_121_loop_body ) 
        condition_done |-> (loop_exit loop_taken)
        do_while_stmt_121__exit__ |-> ($exit)
        $bind condition_done <= do_while_stmt_121_loop_body : condition_evaluated
        $bind do_while_stmt_121__entry__  => do_while_stmt_121_loop_body : first_time_through_loop_body 
        $bind loop_back  => do_while_stmt_121_loop_body : back_edge_to_loop_body 
        $terminate (loop_exit loop_taken loop_body_done) (loop_back do_while_stmt_121__exit__)
      }
      do_while_stmt_121__entry__ |-> (do_while_stmt_121)
      do_while_stmt_121__exit__ <-| (do_while_stmt_121)
      do_while_stmt_121__entry__ <-| (branch_block_stmt_120__entry__)
      do_while_stmt_121__exit__ |-> (branch_block_stmt_120__exit__)
    }
    ::[assign_stmt_191] 
    {
      // start:  	filter_initialized := ($bitcast ($uint<2>) 1  )// bits of buffering = 2. 
      //  file prog.linked.opt.aa, line 102
      // constant! 
      // filter_initialized
      // write to interface object
      // end:  	filter_initialized := ($bitcast ($uint<2>) 1  )// bits of buffering = 2. 
      // load-store dependencies..
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %initFilter%loop%
    //  file prog.linked.opt.aa, line 85
    // constant-object-declarations for block %initFilter%loop
    //  file prog.linked.opt.aa, line 81
    // constant-object-declarations for block %initFilter
    //  file prog.linked.opt.aa, line 76
    // constant-declarations for block %initFilter%loop
    //  file prog.linked.opt.aa, line 81
    // do-while statement  
    //  file prog.linked.opt.aa, line 83
    // 15 
    $constant $W[konst_185_wire_constant] : $int<5> := _b01111// 15
    // constant-declarations for block %initFilter%loop%
    //  file prog.linked.opt.aa, line 85
    // constant-declarations for phi:  			$phi ele := 			  ($bitcast ($uint<5>) 0  ) $on   $entry 			  n_ele $on   $loopback 
    // type of target is $uint<5>
    //  file prog.linked.opt.aa, line 86
    // ($bitcast ($uint<5>) 0  )
    $constant $W[type_cast_126_wire_constant] : $int<5> := _b00000// 0
    // constant-declarations for phi:  			$phi J := 			  ($bitcast ($uint<5>) 0  ) $on   $entry 			  n_J $on   $loopback 
    // type of target is $uint<5>
    //  file prog.linked.opt.aa, line 88
    // ($bitcast ($uint<5>) 0  )
    $constant $W[type_cast_131_wire_constant] : $int<5> := _b00000// 0
    // constant-declarations for phi:  			$phi I := 			  ($bitcast ($uint<6>) filter_start_addr ) $on   $entry 			  n_I $on   $loopback 
    // type of target is $uint<6>
    //  file prog.linked.opt.aa, line 90
    // ($bitcast ($uint<6>) filter_start_addr )
    $constant $W[type_cast_136_wire_constant] : $int<6> := _b001000// 8
    // 1 
    $constant $W[konst_141_wire_constant] : $int<5> := _b00001// 1
    // ( $mux (J <= 2 ) (J + 1 )  ($bitcast ($uint<5>) 0  ) ) 
    // 2 
    $constant $W[konst_146_wire_constant] : $int<5> := _b00010// 2
    // 1 
    $constant $W[konst_149_wire_constant] : $int<5> := _b00001// 1
    // ($bitcast ($uint<5>) 0  )
    $constant $W[type_cast_152_wire_constant] : $int<5> := _b00000// 0
    // ( $mux (J == 3 ) ($bitcast ($uint<6>) (I + 1 ) )  I ) 
    // 3 
    $constant $W[konst_157_wire_constant] : $int<5> := _b00011// 3
    // 1 
    $constant $W[konst_160_wire_constant] : $int<6> := _b000001// 1
    // 			$call accessMem (read_signal I J write_data_zero ) (rdata ) 
    //  file prog.linked.opt.aa, line 96
    // read_signal
    $constant $W[R_read_signal_166_wire_constant] : $int<1> := _b1// 1
    // write_data_zero
    $constant $W[R_write_data_zero_169_wire_constant] : $int<16> := _b0000000000000000// 0
    // filter[I_173_delayed_7_0][J_174_delayed_7_0]
    $constant $W[array_obj_ref_180_resized_base_address] : $int<4> := _b0000// 0
    $constant $W[array_obj_ref_180_offset_scale_factor_0] : $int<4> := _b0100// 4
    $constant $W[array_obj_ref_180_offset_scale_factor_1] : $int<4> := _b0001// 1
    $constant $W[array_obj_ref_180_word_offset_0] : $int<4> := _b0000// 0
    // 	filter_initialized := ($bitcast ($uint<2>) 1  )// bits of buffering = 2. 
    //  file prog.linked.opt.aa, line 102
    // block %initFilter%loop
    //  file prog.linked.opt.aa, line 81
    // do-while statement  
    //  file prog.linked.opt.aa, line 83
    // (ele < 15 )
    $intermediate $W[ULT_u5_u1_186_wire] : $int<1>
    // merge-statement  
    //  file prog.linked.opt.aa, line 85
    // 			$phi ele := 			  ($bitcast ($uint<5>) 0  ) $on   $entry 			  n_ele $on   $loopback 
    // type of target is $uint<5>
    //  file prog.linked.opt.aa, line 86
    $W[n_ele_143_127_buffered] : $int<5>
    // ele
    $W[ele_123] : $int<5>
    // 			$phi J := 			  ($bitcast ($uint<5>) 0  ) $on   $entry 			  n_J $on   $loopback 
    // type of target is $uint<5>
    //  file prog.linked.opt.aa, line 88
    $W[n_J_154_132_buffered] : $int<5>
    // J
    $W[J_128] : $int<5>
    // 			$phi I := 			  ($bitcast ($uint<6>) filter_start_addr ) $on   $entry 			  n_I $on   $loopback 
    // type of target is $uint<6>
    //  file prog.linked.opt.aa, line 90
    $W[n_I_165_137_buffered] : $int<6>
    // I
    $W[I_133] : $int<6>
    // 			$volatile n_ele := (ele + 1 )
    //  file prog.linked.opt.aa, line 93
    // n_ele
    $W[n_ele_143] : $int<5>
    // 			$volatile n_J := ( $mux (J <= 2 ) (J + 1 )  ($bitcast ($uint<5>) 0  ) ) 
    //  file prog.linked.opt.aa, line 94
    // (J <= 2 )
    $intermediate $W[ULE_u5_u1_147_wire] : $int<1>
    // (J + 1 )
    $intermediate $W[ADD_u5_u5_150_wire] : $int<5>
    // n_J
    $W[n_J_154] : $int<5>
    // 			$volatile n_I := ( $mux (J == 3 ) ($bitcast ($uint<6>) (I + 1 ) )  I ) 
    //  file prog.linked.opt.aa, line 95
    // (J == 3 )
    $intermediate $W[EQ_u5_u1_158_wire] : $int<1>
    // (I + 1 )
    $intermediate $W[ADD_u6_u6_161_wire] : $int<6>
    // ($bitcast ($uint<6>) (I + 1 ) )
    $intermediate $W[type_cast_162_wire] : $int<6>
    // n_I
    $W[n_I_165] : $int<6>
    // 			$call accessMem (read_signal I J write_data_zero ) (rdata ) 
    //  file prog.linked.opt.aa, line 96
    // rdata
    $W[rdata_171] : $int<16>
    // 			I_173_delayed_7_0 := I $buffering 7// bits of buffering = 42. 
    //  file prog.linked.opt.aa, line 97
    // I_173_delayed_7_0
    $W[I_173_delayed_7_0_174] : $int<6>
    // 			J_174_delayed_7_0 := J $buffering 7// bits of buffering = 35. 
    //  file prog.linked.opt.aa, line 98
    // J_174_delayed_7_0
    $W[J_174_delayed_7_0_177] : $int<5>
    // 			filter[I_173_delayed_7_0][J_174_delayed_7_0] := rdata// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 99
    // filter[I_173_delayed_7_0][J_174_delayed_7_0]
    $intermediate $W[R_I_173_delayed_7_0_178_resized] : $int<4>
    $intermediate $W[R_I_173_delayed_7_0_178_scaled] : $int<4>
    $intermediate $W[R_J_174_delayed_7_0_179_resized] : $int<4>
    $intermediate $W[R_J_174_delayed_7_0_179_scaled] : $int<4>
    $intermediate $W[array_obj_ref_180_index_partial_sum_1] : $int<4>
    $intermediate $W[array_obj_ref_180_final_offset] : $int<4>
    $intermediate $W[array_obj_ref_180_root_address] : $int<4>
    $W[array_obj_ref_180_word_address_0] : $pointer<memory_space_0>
    $W[array_obj_ref_180_data_0] : $int<16>
    // datapath-instances for block %initFilter%loop
    //  file prog.linked.opt.aa, line 81
    // datapath-instances for do-while  
    //  file prog.linked.opt.aa, line 83
    // (ele < 15 )
    <[ULT_u5_u1_186_inst] (ele_123 konst_185_wire_constant) (ULT_u5_u1_186_wire)   $flowthrough 
    $delay ULT_u5_u1_186_inst 0
    ==0? [do_while_stmt_121_branch] (ULT_u5_u1_186_wire)
    $flowthrough
    // data-path instances for merge  
    //  file prog.linked.opt.aa, line 85
    // 			$phi ele := 			  ($bitcast ($uint<5>) 0  ) $on   $entry 			  n_ele $on   $loopback 
    // type of target is $uint<5>
    //  file prog.linked.opt.aa, line 86
    # := [n_ele_143_127_buf] (n_ele_143) (n_ele_143_127_buffered)    $fullrate
    $buffering $out n_ele_143_127_buf n_ele_143_127_buffered  1
    # $phi [phi_stmt_123] (type_cast_126_wire_constant n_ele_143_127_buffered) ( ele_123 ) $fullrate
    // $buffering  $out phi_stmt_123 ele_123 2
    // 			$phi J := 			  ($bitcast ($uint<5>) 0  ) $on   $entry 			  n_J $on   $loopback 
    // type of target is $uint<5>
    //  file prog.linked.opt.aa, line 88
    # := [n_J_154_132_buf] (n_J_154) (n_J_154_132_buffered)    $fullrate
    $buffering $out n_J_154_132_buf n_J_154_132_buffered  1
    # $phi [phi_stmt_128] (type_cast_131_wire_constant n_J_154_132_buffered) ( J_128 ) $fullrate
    // $buffering  $out phi_stmt_128 J_128 2
    // 			$phi I := 			  ($bitcast ($uint<6>) filter_start_addr ) $on   $entry 			  n_I $on   $loopback 
    // type of target is $uint<6>
    //  file prog.linked.opt.aa, line 90
    # := [n_I_165_137_buf] (n_I_165) (n_I_165_137_buffered)    $fullrate
    $buffering $out n_I_165_137_buf n_I_165_137_buffered  1
    # $phi [phi_stmt_133] (type_cast_136_wire_constant n_I_165_137_buffered) ( I_133 ) $fullrate
    // $buffering  $out phi_stmt_133 I_133 2
    // 			$volatile n_ele := (ele + 1 )
    //  file prog.linked.opt.aa, line 93
    // (ele + 1 )
    +[ADD_u5_u5_142_inst] (ele_123 konst_141_wire_constant) (n_ele_143)   $flowthrough 
    $delay ADD_u5_u5_142_inst 0
    // 			$volatile n_J := ( $mux (J <= 2 ) (J + 1 )  ($bitcast ($uint<5>) 0  ) ) 
    //  file prog.linked.opt.aa, line 94
    // (J <= 2 )
    <=[ULE_u5_u1_147_inst] (J_128 konst_146_wire_constant) (ULE_u5_u1_147_wire)   $flowthrough 
    $delay ULE_u5_u1_147_inst 0
    // (J + 1 )
    +[ADD_u5_u5_150_inst] (J_128 konst_149_wire_constant) (ADD_u5_u5_150_wire)   $flowthrough 
    $delay ADD_u5_u5_150_inst 0
    // ( $mux (J <= 2 ) (J + 1 )  ($bitcast ($uint<5>) 0  ) ) 
    ? [MUX_153_inst] (ULE_u5_u1_147_wire ADD_u5_u5_150_wire type_cast_152_wire_constant) (n_J_154)  $flowthrough
    // 			$volatile n_I := ( $mux (J == 3 ) ($bitcast ($uint<6>) (I + 1 ) )  I ) 
    //  file prog.linked.opt.aa, line 95
    // (J == 3 )
    ==[EQ_u5_u1_158_inst] (J_128 konst_157_wire_constant) (EQ_u5_u1_158_wire)   $flowthrough 
    $delay EQ_u5_u1_158_inst 0
    // (I + 1 )
    +[ADD_u6_u6_161_inst] (I_133 konst_160_wire_constant) (ADD_u6_u6_161_wire)   $flowthrough 
    $delay ADD_u6_u6_161_inst 0
    // ($bitcast ($uint<6>) (I + 1 ) )
    # := [type_cast_162_inst] (ADD_u6_u6_161_wire) (type_cast_162_wire)   $flowthrough
    $delay type_cast_162_inst 0
    // ( $mux (J == 3 ) ($bitcast ($uint<6>) (I + 1 ) )  I ) 
    ? [MUX_164_inst] (EQ_u5_u1_158_wire type_cast_162_wire I_133) (n_I_165)  $flowthrough
    // 			$call accessMem (read_signal I J write_data_zero ) (rdata ) 
    //  file prog.linked.opt.aa, line 96
    $call [call_stmt_171_call] $module accessMem(R_read_signal_166_wire_constant I_133 J_128 R_write_data_zero_169_wire_constant) (rdata_171)   $fullrate
    $delay call_stmt_171_call 7
    $buffering  $in call_stmt_171_call R_read_signal_166_wire_constant 1
    $buffering  $in call_stmt_171_call I_133 1
    $buffering  $in call_stmt_171_call J_128 1
    $buffering  $in call_stmt_171_call R_write_data_zero_169_wire_constant 1
    $buffering  $out call_stmt_171_call rdata_171 1
    // 			I_173_delayed_7_0 := I $buffering 7// bits of buffering = 42. 
    //  file prog.linked.opt.aa, line 97
    # := [W_I_173_delayed_7_0_172_inst] (I_133) (I_173_delayed_7_0_174)    $fullrate
    $buffering  $out W_I_173_delayed_7_0_172_inst I_173_delayed_7_0_174 7
    // 			J_174_delayed_7_0 := J $buffering 7// bits of buffering = 35. 
    //  file prog.linked.opt.aa, line 98
    # := [W_J_174_delayed_7_0_175_inst] (J_128) (J_174_delayed_7_0_177)    $fullrate
    $buffering  $out W_J_174_delayed_7_0_175_inst J_174_delayed_7_0_177 7
    // 			filter[I_173_delayed_7_0][J_174_delayed_7_0] := rdata// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 99
    // filter[I_173_delayed_7_0][J_174_delayed_7_0]
    &/ [array_obj_ref_180_index_0_resize] (I_173_delayed_7_0_174) (R_I_173_delayed_7_0_178_resized) 
    $flowthrough 
    *[array_obj_ref_180_index_0_scale] (R_I_173_delayed_7_0_178_resized array_obj_ref_180_offset_scale_factor_0) (R_I_173_delayed_7_0_178_scaled)    $fullrate
    $buffering  $in array_obj_ref_180_index_0_scale R_I_173_delayed_7_0_178_resized 2
    $buffering  $in array_obj_ref_180_index_0_scale array_obj_ref_180_offset_scale_factor_0 2
    $buffering  $out array_obj_ref_180_index_0_scale R_I_173_delayed_7_0_178_scaled 2
    $delay array_obj_ref_180_index_0_scale 2
    &/ [array_obj_ref_180_index_1_resize] (J_174_delayed_7_0_177) (R_J_174_delayed_7_0_179_resized) 
    $flowthrough 
    &/ [array_obj_ref_180_index_1_rename] (R_J_174_delayed_7_0_179_resized) (R_J_174_delayed_7_0_179_scaled) 
    $flowthrough 
    +[array_obj_ref_180_index_sum_1] (R_J_174_delayed_7_0_179_scaled R_I_173_delayed_7_0_178_scaled) (array_obj_ref_180_index_partial_sum_1)    $fullrate
    $buffering  $in array_obj_ref_180_index_sum_1 R_J_174_delayed_7_0_179_scaled 2
    $buffering  $in array_obj_ref_180_index_sum_1 R_I_173_delayed_7_0_178_scaled 2
    $buffering  $out array_obj_ref_180_index_sum_1 array_obj_ref_180_index_partial_sum_1 2
    $delay array_obj_ref_180_index_sum_1 2
    &/ [array_obj_ref_180_index_offset] (array_obj_ref_180_index_partial_sum_1) (array_obj_ref_180_final_offset) 
    $flowthrough 
    &/ [array_obj_ref_180_root_address_inst] (array_obj_ref_180_final_offset) (array_obj_ref_180_root_address) 
    $flowthrough 
    &/ [array_obj_ref_180_addr_0] (array_obj_ref_180_root_address) (array_obj_ref_180_word_address_0) 
    $flowthrough 
    $store [array_obj_ref_180_store_0] $to memory_space_0 (array_obj_ref_180_word_address_0 array_obj_ref_180_data_0) 
    $buffering  $in array_obj_ref_180_store_0 array_obj_ref_180_word_address_0 2
    $buffering  $in array_obj_ref_180_store_0 array_obj_ref_180_data_0 2
    $delay array_obj_ref_180_store_0 4
    &/ [array_obj_ref_180_gather_scatter] (rdata_171) (array_obj_ref_180_data_0) 
    $flowthrough 
  }
  // end data-path
  // CP-DP links for do-while  do_while_stmt_121
  //  file prog.linked.opt.aa, line 83
  phi_stmt_123 <=> (branch_block_stmt_120/do_while_stmt_121/do_while_stmt_121_loop_body/phi_stmt_123_entry_sample_req branch_block_stmt_120/do_while_stmt_121/do_while_stmt_121_loop_body/phi_stmt_123_loopback_sample_req) (branch_block_stmt_120/do_while_stmt_121/do_while_stmt_121_loop_body/phi_stmt_123_phi_mux_ack)
  n_ele_143_127_buf <=> (branch_block_stmt_120/do_while_stmt_121/do_while_stmt_121_loop_body/R_n_ele_127_Sample/req branch_block_stmt_120/do_while_stmt_121/do_while_stmt_121_loop_body/R_n_ele_127_Update/req) (branch_block_stmt_120/do_while_stmt_121/do_while_stmt_121_loop_body/R_n_ele_127_Sample/ack branch_block_stmt_120/do_while_stmt_121/do_while_stmt_121_loop_body/R_n_ele_127_Update/ack)
  phi_stmt_128 <=> (branch_block_stmt_120/do_while_stmt_121/do_while_stmt_121_loop_body/phi_stmt_128_entry_sample_req branch_block_stmt_120/do_while_stmt_121/do_while_stmt_121_loop_body/phi_stmt_128_loopback_sample_req) (branch_block_stmt_120/do_while_stmt_121/do_while_stmt_121_loop_body/phi_stmt_128_phi_mux_ack)
  n_J_154_132_buf <=> (branch_block_stmt_120/do_while_stmt_121/do_while_stmt_121_loop_body/R_n_J_132_Sample/req branch_block_stmt_120/do_while_stmt_121/do_while_stmt_121_loop_body/R_n_J_132_Update/req) (branch_block_stmt_120/do_while_stmt_121/do_while_stmt_121_loop_body/R_n_J_132_Sample/ack branch_block_stmt_120/do_while_stmt_121/do_while_stmt_121_loop_body/R_n_J_132_Update/ack)
  phi_stmt_133 <=> (branch_block_stmt_120/do_while_stmt_121/do_while_stmt_121_loop_body/phi_stmt_133_entry_sample_req branch_block_stmt_120/do_while_stmt_121/do_while_stmt_121_loop_body/phi_stmt_133_loopback_sample_req) (branch_block_stmt_120/do_while_stmt_121/do_while_stmt_121_loop_body/phi_stmt_133_phi_mux_ack)
  n_I_165_137_buf <=> (branch_block_stmt_120/do_while_stmt_121/do_while_stmt_121_loop_body/R_n_I_137_Sample/req branch_block_stmt_120/do_while_stmt_121/do_while_stmt_121_loop_body/R_n_I_137_Update/req) (branch_block_stmt_120/do_while_stmt_121/do_while_stmt_121_loop_body/R_n_I_137_Sample/ack branch_block_stmt_120/do_while_stmt_121/do_while_stmt_121_loop_body/R_n_I_137_Update/ack)
  // 			$volatile n_ele := (ele + 1 )
  //  file prog.linked.opt.aa, line 93
  // (ele + 1 )
  // ele
  // 			$volatile n_J := ( $mux (J <= 2 ) (J + 1 )  ($bitcast ($uint<5>) 0  ) ) 
  //  file prog.linked.opt.aa, line 94
  // (J <= 2 )
  // J
  // (J + 1 )
  // J
  // ( $mux (J <= 2 ) (J + 1 )  ($bitcast ($uint<5>) 0  ) ) 
  // 			$volatile n_I := ( $mux (J == 3 ) ($bitcast ($uint<6>) (I + 1 ) )  I ) 
  //  file prog.linked.opt.aa, line 95
  // (J == 3 )
  // J
  // (I + 1 )
  // I
  // I
  // ( $mux (J == 3 ) ($bitcast ($uint<6>) (I + 1 ) )  I ) 
  // 			$call accessMem (read_signal I J write_data_zero ) (rdata ) 
  //  file prog.linked.opt.aa, line 96
  // I
  // J
  call_stmt_171_call <=> (branch_block_stmt_120/do_while_stmt_121/do_while_stmt_121_loop_body/call_stmt_171_Sample/crr branch_block_stmt_120/do_while_stmt_121/do_while_stmt_121_loop_body/call_stmt_171_Update/ccr) (branch_block_stmt_120/do_while_stmt_121/do_while_stmt_121_loop_body/call_stmt_171_Sample/cra branch_block_stmt_120/do_while_stmt_121/do_while_stmt_121_loop_body/call_stmt_171_Update/cca)
  // 			I_173_delayed_7_0 := I $buffering 7// bits of buffering = 42. 
  //  file prog.linked.opt.aa, line 97
  // I
  W_I_173_delayed_7_0_172_inst <=> (branch_block_stmt_120/do_while_stmt_121/do_while_stmt_121_loop_body/assign_stmt_174_Sample/req branch_block_stmt_120/do_while_stmt_121/do_while_stmt_121_loop_body/assign_stmt_174_Update/req) (branch_block_stmt_120/do_while_stmt_121/do_while_stmt_121_loop_body/assign_stmt_174_Sample/ack branch_block_stmt_120/do_while_stmt_121/do_while_stmt_121_loop_body/assign_stmt_174_Update/ack)
  // 			J_174_delayed_7_0 := J $buffering 7// bits of buffering = 35. 
  //  file prog.linked.opt.aa, line 98
  // J
  W_J_174_delayed_7_0_175_inst <=> (branch_block_stmt_120/do_while_stmt_121/do_while_stmt_121_loop_body/assign_stmt_177_Sample/req branch_block_stmt_120/do_while_stmt_121/do_while_stmt_121_loop_body/assign_stmt_177_Update/req) (branch_block_stmt_120/do_while_stmt_121/do_while_stmt_121_loop_body/assign_stmt_177_Sample/ack branch_block_stmt_120/do_while_stmt_121/do_while_stmt_121_loop_body/assign_stmt_177_Update/ack)
  // 			filter[I_173_delayed_7_0][J_174_delayed_7_0] := rdata// bits of buffering = 16. 
  //  file prog.linked.opt.aa, line 99
  // rdata
  // I_173_delayed_7_0
  array_obj_ref_180_index_0_resize <=> (branch_block_stmt_120/do_while_stmt_121/do_while_stmt_121_loop_body/array_obj_ref_180_index_resize_0/index_resize_req) (branch_block_stmt_120/do_while_stmt_121/do_while_stmt_121_loop_body/array_obj_ref_180_index_resize_0/index_resize_ack)
  array_obj_ref_180_index_0_scale <=> (branch_block_stmt_120/do_while_stmt_121/do_while_stmt_121_loop_body/array_obj_ref_180_index_scale_0_Sample/rr branch_block_stmt_120/do_while_stmt_121/do_while_stmt_121_loop_body/array_obj_ref_180_index_scale_0_Update/cr) (branch_block_stmt_120/do_while_stmt_121/do_while_stmt_121_loop_body/array_obj_ref_180_index_scale_0_Sample/ra branch_block_stmt_120/do_while_stmt_121/do_while_stmt_121_loop_body/array_obj_ref_180_index_scale_0_Update/ca)
  // J_174_delayed_7_0
  array_obj_ref_180_index_1_resize <=> (branch_block_stmt_120/do_while_stmt_121/do_while_stmt_121_loop_body/array_obj_ref_180_index_resize_1/index_resize_req) (branch_block_stmt_120/do_while_stmt_121/do_while_stmt_121_loop_body/array_obj_ref_180_index_resize_1/index_resize_ack)
  array_obj_ref_180_index_1_rename <=> (branch_block_stmt_120/do_while_stmt_121/do_while_stmt_121_loop_body/array_obj_ref_180_index_scale_1/scale_rename_req) (branch_block_stmt_120/do_while_stmt_121/do_while_stmt_121_loop_body/array_obj_ref_180_index_scale_1/scale_rename_ack)
  array_obj_ref_180_index_sum_1 <=> (branch_block_stmt_120/do_while_stmt_121/do_while_stmt_121_loop_body/array_obj_ref_180_partial_sum_1_Sample/rr branch_block_stmt_120/do_while_stmt_121/do_while_stmt_121_loop_body/array_obj_ref_180_partial_sum_1_Update/cr) (branch_block_stmt_120/do_while_stmt_121/do_while_stmt_121_loop_body/array_obj_ref_180_partial_sum_1_Sample/ra branch_block_stmt_120/do_while_stmt_121/do_while_stmt_121_loop_body/array_obj_ref_180_partial_sum_1_Update/ca)
  array_obj_ref_180_index_offset <=> (branch_block_stmt_120/do_while_stmt_121/do_while_stmt_121_loop_body/array_obj_ref_180_final_index_sum_regn/req) (branch_block_stmt_120/do_while_stmt_121/do_while_stmt_121_loop_body/array_obj_ref_180_final_index_sum_regn/ack)
  array_obj_ref_180_root_address_inst <=> (branch_block_stmt_120/do_while_stmt_121/do_while_stmt_121_loop_body/array_obj_ref_180_base_plus_offset/sum_rename_req) (branch_block_stmt_120/do_while_stmt_121/do_while_stmt_121_loop_body/array_obj_ref_180_base_plus_offset/sum_rename_ack)
  array_obj_ref_180_addr_0 <=> (branch_block_stmt_120/do_while_stmt_121/do_while_stmt_121_loop_body/array_obj_ref_180_word_addrgen/root_register_req) (branch_block_stmt_120/do_while_stmt_121/do_while_stmt_121_loop_body/array_obj_ref_180_word_addrgen/root_register_ack)
  array_obj_ref_180_gather_scatter <=> (branch_block_stmt_120/do_while_stmt_121/do_while_stmt_121_loop_body/array_obj_ref_180_Sample/array_obj_ref_180_Split/split_req) (branch_block_stmt_120/do_while_stmt_121/do_while_stmt_121_loop_body/array_obj_ref_180_Sample/array_obj_ref_180_Split/split_ack)
  array_obj_ref_180_store_0 <=> (branch_block_stmt_120/do_while_stmt_121/do_while_stmt_121_loop_body/array_obj_ref_180_Sample/word_access_start/word_0/rr branch_block_stmt_120/do_while_stmt_121/do_while_stmt_121_loop_body/array_obj_ref_180_Update/word_access_complete/word_0/cr) (branch_block_stmt_120/do_while_stmt_121/do_while_stmt_121_loop_body/array_obj_ref_180_Sample/word_access_start/word_0/ra branch_block_stmt_120/do_while_stmt_121/do_while_stmt_121_loop_body/array_obj_ref_180_Update/word_access_complete/word_0/ca)
  // (ele < 15 )
  // ele
  do_while_stmt_121_branch <=> (branch_block_stmt_120/do_while_stmt_121/do_while_stmt_121_loop_body/condition_evaluated) (branch_block_stmt_120/do_while_stmt_121/loop_exit/ack branch_block_stmt_120/do_while_stmt_121/loop_taken/ack)
}
$module [initIfMaps] 
{
  $in start:$int<1>
  // can point into 
  I:$int<6>
  // can point into 
  J:$int<5>
  // can point into 
  col_to_be_replaced:$int<2>
  // can point into 
  $out finished:$int<2> := _b01
  // can point into 
  // pipe-declarations for block %initIfMaps
  //  file prog.linked.opt.aa, line 104
  // memory-space 2 is written into.
  // memory-space 1 is written into.
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    ::[assign_stmt_208_to_assign_stmt_577] 
    {
      // start: WAR dependencies for checkJZero
      // ignored out-of-scope w_root  J : $uint<5> 
      // done: WAR dependencies for checkJZero
      // start:  	$volatile checkJZero := ( $mux (J == 0 ) ($bitcast ($uint<1>) 0  )  ($bitcast ($uint<1>) 1  ) ) 
      //  file prog.linked.opt.aa, line 109
      // volatile! 
      // Source expression
      // ( $mux (J == 0 ) ($bitcast ($uint<1>) 0  )  ($bitcast ($uint<1>) 1  ) ) 
      // (J == 0 )
      // J
      // Target expression
      // (as target) checkJZero
      // start: WAR dependencies for checkJZero
      // ignored out-of-scope w_root  J : $uint<5> 
      // done: WAR dependencies for checkJZero
      // end:  	$volatile checkJZero := ( $mux (J == 0 ) ($bitcast ($uint<1>) 0  )  ($bitcast ($uint<1>) 1  ) ) 
      // start:  	rowI := ($bitcast ($uint<6>) I )// bits of buffering = 6. 
      //  file prog.linked.opt.aa, line 110
      // Source expression
      // ($bitcast ($uint<6>) I )
      $T[type_cast_211_sample_start_] 
      $T[type_cast_211_sample_completed_] 
      $T[type_cast_211_update_start_] 
      $T[type_cast_211_update_completed_] 
      // I
      // start: Forward dependencies from I to transition type_cast_211_sample_start_
      // done: Forward dependencies from I to transition type_cast_211_sample_start_
      ;;[type_cast_211_Sample] 
      {
        // unary expression 
        $T [rr] $T [ra] // (split) unary operation
      }
      ;;[type_cast_211_Update] 
      {
        // unary expression 
        $T [cr] $T [ca] //(split) unary operation
      }
      type_cast_211_sample_start_ &-> (type_cast_211_Sample)
      type_cast_211_sample_completed_ <-& (type_cast_211_Sample)
      type_cast_211_sample_completed_ &-> ($null)
      type_cast_211_update_start_ &-> (type_cast_211_Update)
      type_cast_211_update_completed_ <-& (type_cast_211_Update)
      // Target expression
      // (as target) rowI
      // start: WAR dependencies for rowI
      // done: WAR dependencies for rowI
      // end:  	rowI := ($bitcast ($uint<6>) I )// bits of buffering = 6. 
      // start:  	rowI_1 := ($bitcast ($uint<6>) (I + 1 ) )// bits of buffering = 6. 
      //  file prog.linked.opt.aa, line 111
      // Source expression
      // ($bitcast ($uint<6>) (I + 1 ) )
      $T[type_cast_217_sample_start_] 
      $T[type_cast_217_sample_completed_] 
      $T[type_cast_217_update_start_] 
      $T[type_cast_217_update_completed_] 
      // (I + 1 )
      // I
      // start: Forward dependencies from (I + 1 ) to transition type_cast_217_sample_start_
      // done: Forward dependencies from (I + 1 ) to transition type_cast_217_sample_start_
      ;;[type_cast_217_Sample] 
      {
        // unary expression 
        $T [rr] $T [ra] // (split) unary operation
      }
      ;;[type_cast_217_Update] 
      {
        // unary expression 
        $T [cr] $T [ca] //(split) unary operation
      }
      type_cast_217_sample_start_ &-> (type_cast_217_Sample)
      type_cast_217_sample_completed_ <-& (type_cast_217_Sample)
      type_cast_217_sample_completed_ &-> ($null)
      type_cast_217_update_start_ &-> (type_cast_217_Update)
      type_cast_217_update_completed_ <-& (type_cast_217_Update)
      // Target expression
      // (as target) rowI_1
      // start: WAR dependencies for rowI_1
      // done: WAR dependencies for rowI_1
      // end:  	rowI_1 := ($bitcast ($uint<6>) (I + 1 ) )// bits of buffering = 6. 
      // start:  	rowI_2 := ($bitcast ($uint<6>) (I + 2 ) )// bits of buffering = 6. 
      //  file prog.linked.opt.aa, line 112
      // Source expression
      // ($bitcast ($uint<6>) (I + 2 ) )
      $T[type_cast_223_sample_start_] 
      $T[type_cast_223_sample_completed_] 
      $T[type_cast_223_update_start_] 
      $T[type_cast_223_update_completed_] 
      // (I + 2 )
      // I
      // start: Forward dependencies from (I + 2 ) to transition type_cast_223_sample_start_
      // done: Forward dependencies from (I + 2 ) to transition type_cast_223_sample_start_
      ;;[type_cast_223_Sample] 
      {
        // unary expression 
        $T [rr] $T [ra] // (split) unary operation
      }
      ;;[type_cast_223_Update] 
      {
        // unary expression 
        $T [cr] $T [ca] //(split) unary operation
      }
      type_cast_223_sample_start_ &-> (type_cast_223_Sample)
      type_cast_223_sample_completed_ <-& (type_cast_223_Sample)
      type_cast_223_sample_completed_ &-> ($null)
      type_cast_223_update_start_ &-> (type_cast_223_Update)
      type_cast_223_update_completed_ <-& (type_cast_223_Update)
      // Target expression
      // (as target) rowI_2
      // start: WAR dependencies for rowI_2
      // done: WAR dependencies for rowI_2
      // end:  	rowI_2 := ($bitcast ($uint<6>) (I + 2 ) )// bits of buffering = 6. 
      // start:  	rowI_3 := ($bitcast ($uint<6>) (I + 3 ) )// bits of buffering = 6. 
      //  file prog.linked.opt.aa, line 113
      // Source expression
      // ($bitcast ($uint<6>) (I + 3 ) )
      $T[type_cast_229_sample_start_] 
      $T[type_cast_229_sample_completed_] 
      $T[type_cast_229_update_start_] 
      $T[type_cast_229_update_completed_] 
      // (I + 3 )
      // I
      // start: Forward dependencies from (I + 3 ) to transition type_cast_229_sample_start_
      // done: Forward dependencies from (I + 3 ) to transition type_cast_229_sample_start_
      ;;[type_cast_229_Sample] 
      {
        // unary expression 
        $T [rr] $T [ra] // (split) unary operation
      }
      ;;[type_cast_229_Update] 
      {
        // unary expression 
        $T [cr] $T [ca] //(split) unary operation
      }
      type_cast_229_sample_start_ &-> (type_cast_229_Sample)
      type_cast_229_sample_completed_ <-& (type_cast_229_Sample)
      type_cast_229_sample_completed_ &-> ($null)
      type_cast_229_update_start_ &-> (type_cast_229_Update)
      type_cast_229_update_completed_ <-& (type_cast_229_Update)
      // Target expression
      // (as target) rowI_3
      // start: WAR dependencies for rowI_3
      // done: WAR dependencies for rowI_3
      // end:  	rowI_3 := ($bitcast ($uint<6>) (I + 3 ) )// bits of buffering = 6. 
      // start:  	rowI_4 := ($bitcast ($uint<6>) (I + 4 ) )// bits of buffering = 6. 
      //  file prog.linked.opt.aa, line 114
      // Source expression
      // ($bitcast ($uint<6>) (I + 4 ) )
      $T[type_cast_235_sample_start_] 
      $T[type_cast_235_sample_completed_] 
      $T[type_cast_235_update_start_] 
      $T[type_cast_235_update_completed_] 
      // (I + 4 )
      // I
      // start: Forward dependencies from (I + 4 ) to transition type_cast_235_sample_start_
      // done: Forward dependencies from (I + 4 ) to transition type_cast_235_sample_start_
      ;;[type_cast_235_Sample] 
      {
        // unary expression 
        $T [rr] $T [ra] // (split) unary operation
      }
      ;;[type_cast_235_Update] 
      {
        // unary expression 
        $T [cr] $T [ca] //(split) unary operation
      }
      type_cast_235_sample_start_ &-> (type_cast_235_Sample)
      type_cast_235_sample_completed_ <-& (type_cast_235_Sample)
      type_cast_235_sample_completed_ &-> ($null)
      type_cast_235_update_start_ &-> (type_cast_235_Update)
      type_cast_235_update_completed_ <-& (type_cast_235_Update)
      // Target expression
      // (as target) rowI_4
      // start: WAR dependencies for rowI_4
      // done: WAR dependencies for rowI_4
      // end:  	rowI_4 := ($bitcast ($uint<6>) (I + 4 ) )// bits of buffering = 6. 
      // start:  	col0 := ($bitcast ($uint<5>) 0  )// bits of buffering = 5. 
      //  file prog.linked.opt.aa, line 115
      // constant! 
      // end:  	col0 := ($bitcast ($uint<5>) 0  )// bits of buffering = 5. 
      // start:  	col1 := ($bitcast ($uint<5>) 1  )// bits of buffering = 5. 
      //  file prog.linked.opt.aa, line 116
      // constant! 
      // end:  	col1 := ($bitcast ($uint<5>) 1  )// bits of buffering = 5. 
      // start:  	col2 := ($bitcast ($uint<5>) 2  )// bits of buffering = 5. 
      //  file prog.linked.opt.aa, line 117
      // constant! 
      // end:  	col2 := ($bitcast ($uint<5>) 2  )// bits of buffering = 5. 
      // start: 	$guard (~checkJZero) $call accessMem (read_signal rowI col0 write_data_zero ) (rdata_I00 ) 
      //  file prog.linked.opt.aa, line 118
      $T[call_stmt_255_sample_start_] 
      $T[call_stmt_255_sample_completed_] 
      $T[call_stmt_255_update_start_] 
      $T[call_stmt_255_update_completed_] 
      // Guard expression
      // checkJZero
      // start: Forward dependencies from checkJZero to transition call_stmt_255_sample_start_
      // done: Forward dependencies from checkJZero to transition call_stmt_255_sample_start_
      // Call input argument 0
      // Call input argument 1
      // rowI
      // Call input argument 2
      // Call input argument 3
      // start: Forward dependencies from rowI to transition call_stmt_255_sample_start_
      call_stmt_255_sample_start_ <-& (type_cast_211_update_completed_)
      // done: Forward dependencies from rowI to transition call_stmt_255_sample_start_
      ;;[call_stmt_255_Sample] 
      {
        $T [crr] $T [cra] 
      }
      ;;[call_stmt_255_Update] 
      {
        $T [ccr] $T [cca] 
      }
      call_stmt_255_sample_start_ &-> (call_stmt_255_Sample)
      call_stmt_255_sample_completed_ <-& (call_stmt_255_Sample)
      call_stmt_255_sample_completed_ &-> ($null)
      call_stmt_255_update_start_ &-> (call_stmt_255_Update)
      call_stmt_255_update_completed_ <-& (call_stmt_255_Update)
      // Call output argument 0
      // (as target) rdata_I00
      // start: WAR dependencies for rdata_I00
      // done: WAR dependencies for rdata_I00
      // end: 	$guard (~checkJZero) $call accessMem (read_signal rowI col0 write_data_zero ) (rdata_I00 ) 
      // start:  	$guard (~checkJZero) ifmaps[0 ][0 ] := rdata_I00// bits of buffering = 16. 
      //  file prog.linked.opt.aa, line 119
      // Guard expression 
      // checkJZero
      // Source expression
      // rdata_I00
      // Target expression
      // ifmaps[0 ][0 ]
      $T[array_obj_ref_259_sample_start_] 
      $T[array_obj_ref_259_sample_completed_] 
      $T[array_obj_ref_259_update_start_] 
      $T[array_obj_ref_259_update_completed_] 
      $T[array_obj_ref_259_word_address_calculated] 
      $T[array_obj_ref_259_root_address_calculated] 
      array_obj_ref_259_word_address_calculated <-& (array_obj_ref_259_root_address_calculated)
      ;;[array_obj_ref_259_Sample] 
      {
        ;;[array_obj_ref_259_Split] 
        {
          $T [split_req] $T [split_ack]
        }
        ||[word_access_start] 
        {
          ;;[word_0] 
          {
            $T [rr] $T [ra] 
          }
        }
      }
      ;;[array_obj_ref_259_Update] 
      {
        ||[word_access_complete] 
        {
          ;;[word_0] 
          {
            $T [cr] $T [ca] 
          }
        }
      }
      array_obj_ref_259_sample_start_ <-& (array_obj_ref_259_word_address_calculated)
      array_obj_ref_259_sample_start_ &-> (array_obj_ref_259_Sample)
      array_obj_ref_259_sample_completed_ <-& (array_obj_ref_259_Sample)
      array_obj_ref_259_sample_completed_ &-> ($null)
      array_obj_ref_259_update_start_ &-> (array_obj_ref_259_Update)
      array_obj_ref_259_update_completed_ <-& (array_obj_ref_259_Update)
      // Guard dependency for expression array_obj_ref_259 with guard R_checkJZero_256
      // root J of guard-expression not in visited elements.
      // start: Forward dependencies from rdata_I00 to transition array_obj_ref_259_sample_start_
      array_obj_ref_259_sample_start_ <-& (call_stmt_255_update_completed_)
      // done: Forward dependencies from rdata_I00 to transition array_obj_ref_259_sample_start_
      // end:  	$guard (~checkJZero) ifmaps[0 ][0 ] := rdata_I00// bits of buffering = 16. 
      // start: 	$guard (~checkJZero) $call accessMem (read_signal rowI col1 write_data_zero ) (rdata_I01 ) 
      //  file prog.linked.opt.aa, line 120
      $T[call_stmt_268_sample_start_] 
      $T[call_stmt_268_sample_completed_] 
      $T[call_stmt_268_update_start_] 
      $T[call_stmt_268_update_completed_] 
      // Guard expression
      // checkJZero
      // start: Forward dependencies from checkJZero to transition call_stmt_268_sample_start_
      // done: Forward dependencies from checkJZero to transition call_stmt_268_sample_start_
      // Call input argument 0
      // Call input argument 1
      // rowI
      // Call input argument 2
      // Call input argument 3
      // start: Forward dependencies from rowI to transition call_stmt_268_sample_start_
      call_stmt_268_sample_start_ <-& (type_cast_211_update_completed_)
      // done: Forward dependencies from rowI to transition call_stmt_268_sample_start_
      ;;[call_stmt_268_Sample] 
      {
        $T [crr] $T [cra] 
      }
      ;;[call_stmt_268_Update] 
      {
        $T [ccr] $T [cca] 
      }
      call_stmt_268_sample_start_ &-> (call_stmt_268_Sample)
      call_stmt_268_sample_completed_ <-& (call_stmt_268_Sample)
      call_stmt_268_sample_completed_ &-> ($null)
      call_stmt_268_update_start_ &-> (call_stmt_268_Update)
      call_stmt_268_update_completed_ <-& (call_stmt_268_Update)
      // Call output argument 0
      // (as target) rdata_I01
      // start: WAR dependencies for rdata_I01
      // done: WAR dependencies for rdata_I01
      // end: 	$guard (~checkJZero) $call accessMem (read_signal rowI col1 write_data_zero ) (rdata_I01 ) 
      // start:  	$guard (~checkJZero) ifmaps[0 ][1 ] := rdata_I01// bits of buffering = 16. 
      //  file prog.linked.opt.aa, line 121
      // Guard expression 
      // checkJZero
      // Source expression
      // rdata_I01
      // Target expression
      // ifmaps[0 ][1 ]
      $T[array_obj_ref_272_sample_start_] 
      $T[array_obj_ref_272_sample_completed_] 
      $T[array_obj_ref_272_update_start_] 
      $T[array_obj_ref_272_update_completed_] 
      $T[array_obj_ref_272_word_address_calculated] 
      $T[array_obj_ref_272_root_address_calculated] 
      array_obj_ref_272_word_address_calculated <-& (array_obj_ref_272_root_address_calculated)
      ;;[array_obj_ref_272_Sample] 
      {
        ;;[array_obj_ref_272_Split] 
        {
          $T [split_req] $T [split_ack]
        }
        ||[word_access_start] 
        {
          ;;[word_0] 
          {
            $T [rr] $T [ra] 
          }
        }
      }
      ;;[array_obj_ref_272_Update] 
      {
        ||[word_access_complete] 
        {
          ;;[word_0] 
          {
            $T [cr] $T [ca] 
          }
        }
      }
      array_obj_ref_272_sample_start_ <-& (array_obj_ref_272_word_address_calculated)
      array_obj_ref_272_sample_start_ &-> (array_obj_ref_272_Sample)
      array_obj_ref_272_sample_completed_ <-& (array_obj_ref_272_Sample)
      array_obj_ref_272_sample_completed_ &-> ($null)
      array_obj_ref_272_update_start_ &-> (array_obj_ref_272_Update)
      array_obj_ref_272_update_completed_ <-& (array_obj_ref_272_Update)
      // Guard dependency for expression array_obj_ref_272 with guard R_checkJZero_269
      // root J of guard-expression not in visited elements.
      // start: Forward dependencies from rdata_I01 to transition array_obj_ref_272_sample_start_
      array_obj_ref_272_sample_start_ <-& (call_stmt_268_update_completed_)
      // done: Forward dependencies from rdata_I01 to transition array_obj_ref_272_sample_start_
      // end:  	$guard (~checkJZero) ifmaps[0 ][1 ] := rdata_I01// bits of buffering = 16. 
      // start: 	$guard (~checkJZero) $call accessMem (read_signal rowI col2 write_data_zero ) (rdata_I02 ) 
      //  file prog.linked.opt.aa, line 122
      $T[call_stmt_281_sample_start_] 
      $T[call_stmt_281_sample_completed_] 
      $T[call_stmt_281_update_start_] 
      $T[call_stmt_281_update_completed_] 
      // Guard expression
      // checkJZero
      // start: Forward dependencies from checkJZero to transition call_stmt_281_sample_start_
      // done: Forward dependencies from checkJZero to transition call_stmt_281_sample_start_
      // Call input argument 0
      // Call input argument 1
      // rowI
      // Call input argument 2
      // Call input argument 3
      // start: Forward dependencies from rowI to transition call_stmt_281_sample_start_
      call_stmt_281_sample_start_ <-& (type_cast_211_update_completed_)
      // done: Forward dependencies from rowI to transition call_stmt_281_sample_start_
      ;;[call_stmt_281_Sample] 
      {
        $T [crr] $T [cra] 
      }
      ;;[call_stmt_281_Update] 
      {
        $T [ccr] $T [cca] 
      }
      call_stmt_281_sample_start_ &-> (call_stmt_281_Sample)
      call_stmt_281_sample_completed_ <-& (call_stmt_281_Sample)
      call_stmt_281_sample_completed_ &-> ($null)
      call_stmt_281_update_start_ &-> (call_stmt_281_Update)
      call_stmt_281_update_completed_ <-& (call_stmt_281_Update)
      // Call output argument 0
      // (as target) rdata_I02
      // start: WAR dependencies for rdata_I02
      // done: WAR dependencies for rdata_I02
      // end: 	$guard (~checkJZero) $call accessMem (read_signal rowI col2 write_data_zero ) (rdata_I02 ) 
      // start:  	$guard (~checkJZero) ifmaps[0 ][2 ] := rdata_I02// bits of buffering = 16. 
      //  file prog.linked.opt.aa, line 123
      // Guard expression 
      // checkJZero
      // Source expression
      // rdata_I02
      // Target expression
      // ifmaps[0 ][2 ]
      $T[array_obj_ref_285_sample_start_] 
      $T[array_obj_ref_285_sample_completed_] 
      $T[array_obj_ref_285_update_start_] 
      $T[array_obj_ref_285_update_completed_] 
      $T[array_obj_ref_285_word_address_calculated] 
      $T[array_obj_ref_285_root_address_calculated] 
      array_obj_ref_285_word_address_calculated <-& (array_obj_ref_285_root_address_calculated)
      ;;[array_obj_ref_285_Sample] 
      {
        ;;[array_obj_ref_285_Split] 
        {
          $T [split_req] $T [split_ack]
        }
        ||[word_access_start] 
        {
          ;;[word_0] 
          {
            $T [rr] $T [ra] 
          }
        }
      }
      ;;[array_obj_ref_285_Update] 
      {
        ||[word_access_complete] 
        {
          ;;[word_0] 
          {
            $T [cr] $T [ca] 
          }
        }
      }
      array_obj_ref_285_sample_start_ <-& (array_obj_ref_285_word_address_calculated)
      array_obj_ref_285_sample_start_ &-> (array_obj_ref_285_Sample)
      array_obj_ref_285_sample_completed_ <-& (array_obj_ref_285_Sample)
      array_obj_ref_285_sample_completed_ &-> ($null)
      array_obj_ref_285_update_start_ &-> (array_obj_ref_285_Update)
      array_obj_ref_285_update_completed_ <-& (array_obj_ref_285_Update)
      // Guard dependency for expression array_obj_ref_285 with guard R_checkJZero_282
      // root J of guard-expression not in visited elements.
      // start: Forward dependencies from rdata_I02 to transition array_obj_ref_285_sample_start_
      array_obj_ref_285_sample_start_ <-& (call_stmt_281_update_completed_)
      // done: Forward dependencies from rdata_I02 to transition array_obj_ref_285_sample_start_
      // end:  	$guard (~checkJZero) ifmaps[0 ][2 ] := rdata_I02// bits of buffering = 16. 
      // start: 	$guard (~checkJZero) $call accessMem (read_signal rowI_1 col0 write_data_zero ) (rdata_I10 ) 
      //  file prog.linked.opt.aa, line 124
      $T[call_stmt_294_sample_start_] 
      $T[call_stmt_294_sample_completed_] 
      $T[call_stmt_294_update_start_] 
      $T[call_stmt_294_update_completed_] 
      // Guard expression
      // checkJZero
      // start: Forward dependencies from checkJZero to transition call_stmt_294_sample_start_
      // done: Forward dependencies from checkJZero to transition call_stmt_294_sample_start_
      // Call input argument 0
      // Call input argument 1
      // rowI_1
      // Call input argument 2
      // Call input argument 3
      // start: Forward dependencies from rowI_1 to transition call_stmt_294_sample_start_
      call_stmt_294_sample_start_ <-& (type_cast_217_update_completed_)
      // done: Forward dependencies from rowI_1 to transition call_stmt_294_sample_start_
      ;;[call_stmt_294_Sample] 
      {
        $T [crr] $T [cra] 
      }
      ;;[call_stmt_294_Update] 
      {
        $T [ccr] $T [cca] 
      }
      call_stmt_294_sample_start_ &-> (call_stmt_294_Sample)
      call_stmt_294_sample_completed_ <-& (call_stmt_294_Sample)
      call_stmt_294_sample_completed_ &-> ($null)
      call_stmt_294_update_start_ &-> (call_stmt_294_Update)
      call_stmt_294_update_completed_ <-& (call_stmt_294_Update)
      // Call output argument 0
      // (as target) rdata_I10
      // start: WAR dependencies for rdata_I10
      // done: WAR dependencies for rdata_I10
      // end: 	$guard (~checkJZero) $call accessMem (read_signal rowI_1 col0 write_data_zero ) (rdata_I10 ) 
      // start:  	$guard (~checkJZero) ifmaps[1 ][0 ] := rdata_I10// bits of buffering = 16. 
      //  file prog.linked.opt.aa, line 125
      // Guard expression 
      // checkJZero
      // Source expression
      // rdata_I10
      // Target expression
      // ifmaps[1 ][0 ]
      $T[array_obj_ref_298_sample_start_] 
      $T[array_obj_ref_298_sample_completed_] 
      $T[array_obj_ref_298_update_start_] 
      $T[array_obj_ref_298_update_completed_] 
      $T[array_obj_ref_298_word_address_calculated] 
      $T[array_obj_ref_298_root_address_calculated] 
      array_obj_ref_298_word_address_calculated <-& (array_obj_ref_298_root_address_calculated)
      ;;[array_obj_ref_298_Sample] 
      {
        ;;[array_obj_ref_298_Split] 
        {
          $T [split_req] $T [split_ack]
        }
        ||[word_access_start] 
        {
          ;;[word_0] 
          {
            $T [rr] $T [ra] 
          }
        }
      }
      ;;[array_obj_ref_298_Update] 
      {
        ||[word_access_complete] 
        {
          ;;[word_0] 
          {
            $T [cr] $T [ca] 
          }
        }
      }
      array_obj_ref_298_sample_start_ <-& (array_obj_ref_298_word_address_calculated)
      array_obj_ref_298_sample_start_ &-> (array_obj_ref_298_Sample)
      array_obj_ref_298_sample_completed_ <-& (array_obj_ref_298_Sample)
      array_obj_ref_298_sample_completed_ &-> ($null)
      array_obj_ref_298_update_start_ &-> (array_obj_ref_298_Update)
      array_obj_ref_298_update_completed_ <-& (array_obj_ref_298_Update)
      // Guard dependency for expression array_obj_ref_298 with guard R_checkJZero_295
      // root J of guard-expression not in visited elements.
      // start: Forward dependencies from rdata_I10 to transition array_obj_ref_298_sample_start_
      array_obj_ref_298_sample_start_ <-& (call_stmt_294_update_completed_)
      // done: Forward dependencies from rdata_I10 to transition array_obj_ref_298_sample_start_
      // end:  	$guard (~checkJZero) ifmaps[1 ][0 ] := rdata_I10// bits of buffering = 16. 
      // start:  	$guard (~checkJZero) ifmaps2[0 ][0 ] := rdata_I10// bits of buffering = 16. 
      //  file prog.linked.opt.aa, line 126
      // Guard expression 
      // checkJZero
      // Source expression
      // rdata_I10
      // Target expression
      // ifmaps2[0 ][0 ]
      $T[array_obj_ref_304_sample_start_] 
      $T[array_obj_ref_304_sample_completed_] 
      $T[array_obj_ref_304_update_start_] 
      $T[array_obj_ref_304_update_completed_] 
      $T[array_obj_ref_304_word_address_calculated] 
      $T[array_obj_ref_304_root_address_calculated] 
      array_obj_ref_304_word_address_calculated <-& (array_obj_ref_304_root_address_calculated)
      ;;[array_obj_ref_304_Sample] 
      {
        ;;[array_obj_ref_304_Split] 
        {
          $T [split_req] $T [split_ack]
        }
        ||[word_access_start] 
        {
          ;;[word_0] 
          {
            $T [rr] $T [ra] 
          }
        }
      }
      ;;[array_obj_ref_304_Update] 
      {
        ||[word_access_complete] 
        {
          ;;[word_0] 
          {
            $T [cr] $T [ca] 
          }
        }
      }
      array_obj_ref_304_sample_start_ <-& (array_obj_ref_304_word_address_calculated)
      array_obj_ref_304_sample_start_ &-> (array_obj_ref_304_Sample)
      array_obj_ref_304_sample_completed_ <-& (array_obj_ref_304_Sample)
      array_obj_ref_304_sample_completed_ &-> ($null)
      array_obj_ref_304_update_start_ &-> (array_obj_ref_304_Update)
      array_obj_ref_304_update_completed_ <-& (array_obj_ref_304_Update)
      // Guard dependency for expression array_obj_ref_304 with guard R_checkJZero_301
      // root J of guard-expression not in visited elements.
      // start: Forward dependencies from rdata_I10 to transition array_obj_ref_304_sample_start_
      array_obj_ref_304_sample_start_ <-& (call_stmt_294_update_completed_)
      // done: Forward dependencies from rdata_I10 to transition array_obj_ref_304_sample_start_
      // end:  	$guard (~checkJZero) ifmaps2[0 ][0 ] := rdata_I10// bits of buffering = 16. 
      // start: 	$guard (~checkJZero) $call accessMem (read_signal rowI_1 col1 write_data_zero ) (rdata_I11 ) 
      //  file prog.linked.opt.aa, line 127
      $T[call_stmt_313_sample_start_] 
      $T[call_stmt_313_sample_completed_] 
      $T[call_stmt_313_update_start_] 
      $T[call_stmt_313_update_completed_] 
      // Guard expression
      // checkJZero
      // start: Forward dependencies from checkJZero to transition call_stmt_313_sample_start_
      // done: Forward dependencies from checkJZero to transition call_stmt_313_sample_start_
      // Call input argument 0
      // Call input argument 1
      // rowI_1
      // Call input argument 2
      // Call input argument 3
      // start: Forward dependencies from rowI_1 to transition call_stmt_313_sample_start_
      call_stmt_313_sample_start_ <-& (type_cast_217_update_completed_)
      // done: Forward dependencies from rowI_1 to transition call_stmt_313_sample_start_
      ;;[call_stmt_313_Sample] 
      {
        $T [crr] $T [cra] 
      }
      ;;[call_stmt_313_Update] 
      {
        $T [ccr] $T [cca] 
      }
      call_stmt_313_sample_start_ &-> (call_stmt_313_Sample)
      call_stmt_313_sample_completed_ <-& (call_stmt_313_Sample)
      call_stmt_313_sample_completed_ &-> ($null)
      call_stmt_313_update_start_ &-> (call_stmt_313_Update)
      call_stmt_313_update_completed_ <-& (call_stmt_313_Update)
      // Call output argument 0
      // (as target) rdata_I11
      // start: WAR dependencies for rdata_I11
      // done: WAR dependencies for rdata_I11
      // end: 	$guard (~checkJZero) $call accessMem (read_signal rowI_1 col1 write_data_zero ) (rdata_I11 ) 
      // start:  	$guard (~checkJZero) ifmaps[1 ][1 ] := rdata_I11// bits of buffering = 16. 
      //  file prog.linked.opt.aa, line 128
      // Guard expression 
      // checkJZero
      // Source expression
      // rdata_I11
      // Target expression
      // ifmaps[1 ][1 ]
      $T[array_obj_ref_317_sample_start_] 
      $T[array_obj_ref_317_sample_completed_] 
      $T[array_obj_ref_317_update_start_] 
      $T[array_obj_ref_317_update_completed_] 
      $T[array_obj_ref_317_word_address_calculated] 
      $T[array_obj_ref_317_root_address_calculated] 
      array_obj_ref_317_word_address_calculated <-& (array_obj_ref_317_root_address_calculated)
      ;;[array_obj_ref_317_Sample] 
      {
        ;;[array_obj_ref_317_Split] 
        {
          $T [split_req] $T [split_ack]
        }
        ||[word_access_start] 
        {
          ;;[word_0] 
          {
            $T [rr] $T [ra] 
          }
        }
      }
      ;;[array_obj_ref_317_Update] 
      {
        ||[word_access_complete] 
        {
          ;;[word_0] 
          {
            $T [cr] $T [ca] 
          }
        }
      }
      array_obj_ref_317_sample_start_ <-& (array_obj_ref_317_word_address_calculated)
      array_obj_ref_317_sample_start_ &-> (array_obj_ref_317_Sample)
      array_obj_ref_317_sample_completed_ <-& (array_obj_ref_317_Sample)
      array_obj_ref_317_sample_completed_ &-> ($null)
      array_obj_ref_317_update_start_ &-> (array_obj_ref_317_Update)
      array_obj_ref_317_update_completed_ <-& (array_obj_ref_317_Update)
      // Guard dependency for expression array_obj_ref_317 with guard R_checkJZero_314
      // root J of guard-expression not in visited elements.
      // start: Forward dependencies from rdata_I11 to transition array_obj_ref_317_sample_start_
      array_obj_ref_317_sample_start_ <-& (call_stmt_313_update_completed_)
      // done: Forward dependencies from rdata_I11 to transition array_obj_ref_317_sample_start_
      // end:  	$guard (~checkJZero) ifmaps[1 ][1 ] := rdata_I11// bits of buffering = 16. 
      // start:  	$guard (~checkJZero) ifmaps2[0 ][1 ] := rdata_I11// bits of buffering = 16. 
      //  file prog.linked.opt.aa, line 129
      // Guard expression 
      // checkJZero
      // Source expression
      // rdata_I11
      // Target expression
      // ifmaps2[0 ][1 ]
      $T[array_obj_ref_323_sample_start_] 
      $T[array_obj_ref_323_sample_completed_] 
      $T[array_obj_ref_323_update_start_] 
      $T[array_obj_ref_323_update_completed_] 
      $T[array_obj_ref_323_word_address_calculated] 
      $T[array_obj_ref_323_root_address_calculated] 
      array_obj_ref_323_word_address_calculated <-& (array_obj_ref_323_root_address_calculated)
      ;;[array_obj_ref_323_Sample] 
      {
        ;;[array_obj_ref_323_Split] 
        {
          $T [split_req] $T [split_ack]
        }
        ||[word_access_start] 
        {
          ;;[word_0] 
          {
            $T [rr] $T [ra] 
          }
        }
      }
      ;;[array_obj_ref_323_Update] 
      {
        ||[word_access_complete] 
        {
          ;;[word_0] 
          {
            $T [cr] $T [ca] 
          }
        }
      }
      array_obj_ref_323_sample_start_ <-& (array_obj_ref_323_word_address_calculated)
      array_obj_ref_323_sample_start_ &-> (array_obj_ref_323_Sample)
      array_obj_ref_323_sample_completed_ <-& (array_obj_ref_323_Sample)
      array_obj_ref_323_sample_completed_ &-> ($null)
      array_obj_ref_323_update_start_ &-> (array_obj_ref_323_Update)
      array_obj_ref_323_update_completed_ <-& (array_obj_ref_323_Update)
      // Guard dependency for expression array_obj_ref_323 with guard R_checkJZero_320
      // root J of guard-expression not in visited elements.
      // start: Forward dependencies from rdata_I11 to transition array_obj_ref_323_sample_start_
      array_obj_ref_323_sample_start_ <-& (call_stmt_313_update_completed_)
      // done: Forward dependencies from rdata_I11 to transition array_obj_ref_323_sample_start_
      // end:  	$guard (~checkJZero) ifmaps2[0 ][1 ] := rdata_I11// bits of buffering = 16. 
      // start: 	$guard (~checkJZero) $call accessMem (read_signal rowI_1 col2 write_data_zero ) (rdata_I12 ) 
      //  file prog.linked.opt.aa, line 130
      $T[call_stmt_332_sample_start_] 
      $T[call_stmt_332_sample_completed_] 
      $T[call_stmt_332_update_start_] 
      $T[call_stmt_332_update_completed_] 
      // Guard expression
      // checkJZero
      // start: Forward dependencies from checkJZero to transition call_stmt_332_sample_start_
      // done: Forward dependencies from checkJZero to transition call_stmt_332_sample_start_
      // Call input argument 0
      // Call input argument 1
      // rowI_1
      // Call input argument 2
      // Call input argument 3
      // start: Forward dependencies from rowI_1 to transition call_stmt_332_sample_start_
      call_stmt_332_sample_start_ <-& (type_cast_217_update_completed_)
      // done: Forward dependencies from rowI_1 to transition call_stmt_332_sample_start_
      ;;[call_stmt_332_Sample] 
      {
        $T [crr] $T [cra] 
      }
      ;;[call_stmt_332_Update] 
      {
        $T [ccr] $T [cca] 
      }
      call_stmt_332_sample_start_ &-> (call_stmt_332_Sample)
      call_stmt_332_sample_completed_ <-& (call_stmt_332_Sample)
      call_stmt_332_sample_completed_ &-> ($null)
      call_stmt_332_update_start_ &-> (call_stmt_332_Update)
      call_stmt_332_update_completed_ <-& (call_stmt_332_Update)
      // Call output argument 0
      // (as target) rdata_I12
      // start: WAR dependencies for rdata_I12
      // done: WAR dependencies for rdata_I12
      // end: 	$guard (~checkJZero) $call accessMem (read_signal rowI_1 col2 write_data_zero ) (rdata_I12 ) 
      // start:  	$guard (~checkJZero) ifmaps[1 ][2 ] := rdata_I12// bits of buffering = 16. 
      //  file prog.linked.opt.aa, line 131
      // Guard expression 
      // checkJZero
      // Source expression
      // rdata_I12
      // Target expression
      // ifmaps[1 ][2 ]
      $T[array_obj_ref_336_sample_start_] 
      $T[array_obj_ref_336_sample_completed_] 
      $T[array_obj_ref_336_update_start_] 
      $T[array_obj_ref_336_update_completed_] 
      $T[array_obj_ref_336_word_address_calculated] 
      $T[array_obj_ref_336_root_address_calculated] 
      array_obj_ref_336_word_address_calculated <-& (array_obj_ref_336_root_address_calculated)
      ;;[array_obj_ref_336_Sample] 
      {
        ;;[array_obj_ref_336_Split] 
        {
          $T [split_req] $T [split_ack]
        }
        ||[word_access_start] 
        {
          ;;[word_0] 
          {
            $T [rr] $T [ra] 
          }
        }
      }
      ;;[array_obj_ref_336_Update] 
      {
        ||[word_access_complete] 
        {
          ;;[word_0] 
          {
            $T [cr] $T [ca] 
          }
        }
      }
      array_obj_ref_336_sample_start_ <-& (array_obj_ref_336_word_address_calculated)
      array_obj_ref_336_sample_start_ &-> (array_obj_ref_336_Sample)
      array_obj_ref_336_sample_completed_ <-& (array_obj_ref_336_Sample)
      array_obj_ref_336_sample_completed_ &-> ($null)
      array_obj_ref_336_update_start_ &-> (array_obj_ref_336_Update)
      array_obj_ref_336_update_completed_ <-& (array_obj_ref_336_Update)
      // Guard dependency for expression array_obj_ref_336 with guard R_checkJZero_333
      // root J of guard-expression not in visited elements.
      // start: Forward dependencies from rdata_I12 to transition array_obj_ref_336_sample_start_
      array_obj_ref_336_sample_start_ <-& (call_stmt_332_update_completed_)
      // done: Forward dependencies from rdata_I12 to transition array_obj_ref_336_sample_start_
      // end:  	$guard (~checkJZero) ifmaps[1 ][2 ] := rdata_I12// bits of buffering = 16. 
      // start:  	$guard (~checkJZero) ifmaps2[0 ][2 ] := rdata_I12// bits of buffering = 16. 
      //  file prog.linked.opt.aa, line 132
      // Guard expression 
      // checkJZero
      // Source expression
      // rdata_I12
      // Target expression
      // ifmaps2[0 ][2 ]
      $T[array_obj_ref_342_sample_start_] 
      $T[array_obj_ref_342_sample_completed_] 
      $T[array_obj_ref_342_update_start_] 
      $T[array_obj_ref_342_update_completed_] 
      $T[array_obj_ref_342_word_address_calculated] 
      $T[array_obj_ref_342_root_address_calculated] 
      array_obj_ref_342_word_address_calculated <-& (array_obj_ref_342_root_address_calculated)
      ;;[array_obj_ref_342_Sample] 
      {
        ;;[array_obj_ref_342_Split] 
        {
          $T [split_req] $T [split_ack]
        }
        ||[word_access_start] 
        {
          ;;[word_0] 
          {
            $T [rr] $T [ra] 
          }
        }
      }
      ;;[array_obj_ref_342_Update] 
      {
        ||[word_access_complete] 
        {
          ;;[word_0] 
          {
            $T [cr] $T [ca] 
          }
        }
      }
      array_obj_ref_342_sample_start_ <-& (array_obj_ref_342_word_address_calculated)
      array_obj_ref_342_sample_start_ &-> (array_obj_ref_342_Sample)
      array_obj_ref_342_sample_completed_ <-& (array_obj_ref_342_Sample)
      array_obj_ref_342_sample_completed_ &-> ($null)
      array_obj_ref_342_update_start_ &-> (array_obj_ref_342_Update)
      array_obj_ref_342_update_completed_ <-& (array_obj_ref_342_Update)
      // Guard dependency for expression array_obj_ref_342 with guard R_checkJZero_339
      // root J of guard-expression not in visited elements.
      // start: Forward dependencies from rdata_I12 to transition array_obj_ref_342_sample_start_
      array_obj_ref_342_sample_start_ <-& (call_stmt_332_update_completed_)
      // done: Forward dependencies from rdata_I12 to transition array_obj_ref_342_sample_start_
      // end:  	$guard (~checkJZero) ifmaps2[0 ][2 ] := rdata_I12// bits of buffering = 16. 
      // start: 	$guard (~checkJZero) $call accessMem (read_signal rowI_2 col0 write_data_zero ) (rdata_I20 ) 
      //  file prog.linked.opt.aa, line 133
      $T[call_stmt_351_sample_start_] 
      $T[call_stmt_351_sample_completed_] 
      $T[call_stmt_351_update_start_] 
      $T[call_stmt_351_update_completed_] 
      // Guard expression
      // checkJZero
      // start: Forward dependencies from checkJZero to transition call_stmt_351_sample_start_
      // done: Forward dependencies from checkJZero to transition call_stmt_351_sample_start_
      // Call input argument 0
      // Call input argument 1
      // rowI_2
      // Call input argument 2
      // Call input argument 3
      // start: Forward dependencies from rowI_2 to transition call_stmt_351_sample_start_
      call_stmt_351_sample_start_ <-& (type_cast_223_update_completed_)
      // done: Forward dependencies from rowI_2 to transition call_stmt_351_sample_start_
      ;;[call_stmt_351_Sample] 
      {
        $T [crr] $T [cra] 
      }
      ;;[call_stmt_351_Update] 
      {
        $T [ccr] $T [cca] 
      }
      call_stmt_351_sample_start_ &-> (call_stmt_351_Sample)
      call_stmt_351_sample_completed_ <-& (call_stmt_351_Sample)
      call_stmt_351_sample_completed_ &-> ($null)
      call_stmt_351_update_start_ &-> (call_stmt_351_Update)
      call_stmt_351_update_completed_ <-& (call_stmt_351_Update)
      // Call output argument 0
      // (as target) rdata_I20
      // start: WAR dependencies for rdata_I20
      // done: WAR dependencies for rdata_I20
      // end: 	$guard (~checkJZero) $call accessMem (read_signal rowI_2 col0 write_data_zero ) (rdata_I20 ) 
      // start:  	$guard (~checkJZero) ifmaps[2 ][0 ] := rdata_I20// bits of buffering = 16. 
      //  file prog.linked.opt.aa, line 134
      // Guard expression 
      // checkJZero
      // Source expression
      // rdata_I20
      // Target expression
      // ifmaps[2 ][0 ]
      $T[array_obj_ref_355_sample_start_] 
      $T[array_obj_ref_355_sample_completed_] 
      $T[array_obj_ref_355_update_start_] 
      $T[array_obj_ref_355_update_completed_] 
      $T[array_obj_ref_355_word_address_calculated] 
      $T[array_obj_ref_355_root_address_calculated] 
      array_obj_ref_355_word_address_calculated <-& (array_obj_ref_355_root_address_calculated)
      ;;[array_obj_ref_355_Sample] 
      {
        ;;[array_obj_ref_355_Split] 
        {
          $T [split_req] $T [split_ack]
        }
        ||[word_access_start] 
        {
          ;;[word_0] 
          {
            $T [rr] $T [ra] 
          }
        }
      }
      ;;[array_obj_ref_355_Update] 
      {
        ||[word_access_complete] 
        {
          ;;[word_0] 
          {
            $T [cr] $T [ca] 
          }
        }
      }
      array_obj_ref_355_sample_start_ <-& (array_obj_ref_355_word_address_calculated)
      array_obj_ref_355_sample_start_ &-> (array_obj_ref_355_Sample)
      array_obj_ref_355_sample_completed_ <-& (array_obj_ref_355_Sample)
      array_obj_ref_355_sample_completed_ &-> ($null)
      array_obj_ref_355_update_start_ &-> (array_obj_ref_355_Update)
      array_obj_ref_355_update_completed_ <-& (array_obj_ref_355_Update)
      // Guard dependency for expression array_obj_ref_355 with guard R_checkJZero_352
      // root J of guard-expression not in visited elements.
      // start: Forward dependencies from rdata_I20 to transition array_obj_ref_355_sample_start_
      array_obj_ref_355_sample_start_ <-& (call_stmt_351_update_completed_)
      // done: Forward dependencies from rdata_I20 to transition array_obj_ref_355_sample_start_
      // end:  	$guard (~checkJZero) ifmaps[2 ][0 ] := rdata_I20// bits of buffering = 16. 
      // start:  	$guard (~checkJZero) ifmaps2[1 ][0 ] := rdata_I20// bits of buffering = 16. 
      //  file prog.linked.opt.aa, line 135
      // Guard expression 
      // checkJZero
      // Source expression
      // rdata_I20
      // Target expression
      // ifmaps2[1 ][0 ]
      $T[array_obj_ref_361_sample_start_] 
      $T[array_obj_ref_361_sample_completed_] 
      $T[array_obj_ref_361_update_start_] 
      $T[array_obj_ref_361_update_completed_] 
      $T[array_obj_ref_361_word_address_calculated] 
      $T[array_obj_ref_361_root_address_calculated] 
      array_obj_ref_361_word_address_calculated <-& (array_obj_ref_361_root_address_calculated)
      ;;[array_obj_ref_361_Sample] 
      {
        ;;[array_obj_ref_361_Split] 
        {
          $T [split_req] $T [split_ack]
        }
        ||[word_access_start] 
        {
          ;;[word_0] 
          {
            $T [rr] $T [ra] 
          }
        }
      }
      ;;[array_obj_ref_361_Update] 
      {
        ||[word_access_complete] 
        {
          ;;[word_0] 
          {
            $T [cr] $T [ca] 
          }
        }
      }
      array_obj_ref_361_sample_start_ <-& (array_obj_ref_361_word_address_calculated)
      array_obj_ref_361_sample_start_ &-> (array_obj_ref_361_Sample)
      array_obj_ref_361_sample_completed_ <-& (array_obj_ref_361_Sample)
      array_obj_ref_361_sample_completed_ &-> ($null)
      array_obj_ref_361_update_start_ &-> (array_obj_ref_361_Update)
      array_obj_ref_361_update_completed_ <-& (array_obj_ref_361_Update)
      // Guard dependency for expression array_obj_ref_361 with guard R_checkJZero_358
      // root J of guard-expression not in visited elements.
      // start: Forward dependencies from rdata_I20 to transition array_obj_ref_361_sample_start_
      array_obj_ref_361_sample_start_ <-& (call_stmt_351_update_completed_)
      // done: Forward dependencies from rdata_I20 to transition array_obj_ref_361_sample_start_
      // end:  	$guard (~checkJZero) ifmaps2[1 ][0 ] := rdata_I20// bits of buffering = 16. 
      // start: 	$guard (~checkJZero) $call accessMem (read_signal rowI_2 col1 write_data_zero ) (rdata_I21 ) 
      //  file prog.linked.opt.aa, line 136
      $T[call_stmt_370_sample_start_] 
      $T[call_stmt_370_sample_completed_] 
      $T[call_stmt_370_update_start_] 
      $T[call_stmt_370_update_completed_] 
      // Guard expression
      // checkJZero
      // start: Forward dependencies from checkJZero to transition call_stmt_370_sample_start_
      // done: Forward dependencies from checkJZero to transition call_stmt_370_sample_start_
      // Call input argument 0
      // Call input argument 1
      // rowI_2
      // Call input argument 2
      // Call input argument 3
      // start: Forward dependencies from rowI_2 to transition call_stmt_370_sample_start_
      call_stmt_370_sample_start_ <-& (type_cast_223_update_completed_)
      // done: Forward dependencies from rowI_2 to transition call_stmt_370_sample_start_
      ;;[call_stmt_370_Sample] 
      {
        $T [crr] $T [cra] 
      }
      ;;[call_stmt_370_Update] 
      {
        $T [ccr] $T [cca] 
      }
      call_stmt_370_sample_start_ &-> (call_stmt_370_Sample)
      call_stmt_370_sample_completed_ <-& (call_stmt_370_Sample)
      call_stmt_370_sample_completed_ &-> ($null)
      call_stmt_370_update_start_ &-> (call_stmt_370_Update)
      call_stmt_370_update_completed_ <-& (call_stmt_370_Update)
      // Call output argument 0
      // (as target) rdata_I21
      // start: WAR dependencies for rdata_I21
      // done: WAR dependencies for rdata_I21
      // end: 	$guard (~checkJZero) $call accessMem (read_signal rowI_2 col1 write_data_zero ) (rdata_I21 ) 
      // start:  	$guard (~checkJZero) ifmaps[2 ][1 ] := rdata_I21// bits of buffering = 16. 
      //  file prog.linked.opt.aa, line 137
      // Guard expression 
      // checkJZero
      // Source expression
      // rdata_I21
      // Target expression
      // ifmaps[2 ][1 ]
      $T[array_obj_ref_374_sample_start_] 
      $T[array_obj_ref_374_sample_completed_] 
      $T[array_obj_ref_374_update_start_] 
      $T[array_obj_ref_374_update_completed_] 
      $T[array_obj_ref_374_word_address_calculated] 
      $T[array_obj_ref_374_root_address_calculated] 
      array_obj_ref_374_word_address_calculated <-& (array_obj_ref_374_root_address_calculated)
      ;;[array_obj_ref_374_Sample] 
      {
        ;;[array_obj_ref_374_Split] 
        {
          $T [split_req] $T [split_ack]
        }
        ||[word_access_start] 
        {
          ;;[word_0] 
          {
            $T [rr] $T [ra] 
          }
        }
      }
      ;;[array_obj_ref_374_Update] 
      {
        ||[word_access_complete] 
        {
          ;;[word_0] 
          {
            $T [cr] $T [ca] 
          }
        }
      }
      array_obj_ref_374_sample_start_ <-& (array_obj_ref_374_word_address_calculated)
      array_obj_ref_374_sample_start_ &-> (array_obj_ref_374_Sample)
      array_obj_ref_374_sample_completed_ <-& (array_obj_ref_374_Sample)
      array_obj_ref_374_sample_completed_ &-> ($null)
      array_obj_ref_374_update_start_ &-> (array_obj_ref_374_Update)
      array_obj_ref_374_update_completed_ <-& (array_obj_ref_374_Update)
      // Guard dependency for expression array_obj_ref_374 with guard R_checkJZero_371
      // root J of guard-expression not in visited elements.
      // start: Forward dependencies from rdata_I21 to transition array_obj_ref_374_sample_start_
      array_obj_ref_374_sample_start_ <-& (call_stmt_370_update_completed_)
      // done: Forward dependencies from rdata_I21 to transition array_obj_ref_374_sample_start_
      // end:  	$guard (~checkJZero) ifmaps[2 ][1 ] := rdata_I21// bits of buffering = 16. 
      // start:  	$guard (~checkJZero) ifmaps2[1 ][1 ] := rdata_I21// bits of buffering = 16. 
      //  file prog.linked.opt.aa, line 138
      // Guard expression 
      // checkJZero
      // Source expression
      // rdata_I21
      // Target expression
      // ifmaps2[1 ][1 ]
      $T[array_obj_ref_380_sample_start_] 
      $T[array_obj_ref_380_sample_completed_] 
      $T[array_obj_ref_380_update_start_] 
      $T[array_obj_ref_380_update_completed_] 
      $T[array_obj_ref_380_word_address_calculated] 
      $T[array_obj_ref_380_root_address_calculated] 
      array_obj_ref_380_word_address_calculated <-& (array_obj_ref_380_root_address_calculated)
      ;;[array_obj_ref_380_Sample] 
      {
        ;;[array_obj_ref_380_Split] 
        {
          $T [split_req] $T [split_ack]
        }
        ||[word_access_start] 
        {
          ;;[word_0] 
          {
            $T [rr] $T [ra] 
          }
        }
      }
      ;;[array_obj_ref_380_Update] 
      {
        ||[word_access_complete] 
        {
          ;;[word_0] 
          {
            $T [cr] $T [ca] 
          }
        }
      }
      array_obj_ref_380_sample_start_ <-& (array_obj_ref_380_word_address_calculated)
      array_obj_ref_380_sample_start_ &-> (array_obj_ref_380_Sample)
      array_obj_ref_380_sample_completed_ <-& (array_obj_ref_380_Sample)
      array_obj_ref_380_sample_completed_ &-> ($null)
      array_obj_ref_380_update_start_ &-> (array_obj_ref_380_Update)
      array_obj_ref_380_update_completed_ <-& (array_obj_ref_380_Update)
      // Guard dependency for expression array_obj_ref_380 with guard R_checkJZero_377
      // root J of guard-expression not in visited elements.
      // start: Forward dependencies from rdata_I21 to transition array_obj_ref_380_sample_start_
      array_obj_ref_380_sample_start_ <-& (call_stmt_370_update_completed_)
      // done: Forward dependencies from rdata_I21 to transition array_obj_ref_380_sample_start_
      // end:  	$guard (~checkJZero) ifmaps2[1 ][1 ] := rdata_I21// bits of buffering = 16. 
      // start: 	$guard (~checkJZero) $call accessMem (read_signal rowI_2 col2 write_data_zero ) (rdata_I22 ) 
      //  file prog.linked.opt.aa, line 139
      $T[call_stmt_389_sample_start_] 
      $T[call_stmt_389_sample_completed_] 
      $T[call_stmt_389_update_start_] 
      $T[call_stmt_389_update_completed_] 
      // Guard expression
      // checkJZero
      // start: Forward dependencies from checkJZero to transition call_stmt_389_sample_start_
      // done: Forward dependencies from checkJZero to transition call_stmt_389_sample_start_
      // Call input argument 0
      // Call input argument 1
      // rowI_2
      // Call input argument 2
      // Call input argument 3
      // start: Forward dependencies from rowI_2 to transition call_stmt_389_sample_start_
      call_stmt_389_sample_start_ <-& (type_cast_223_update_completed_)
      // done: Forward dependencies from rowI_2 to transition call_stmt_389_sample_start_
      ;;[call_stmt_389_Sample] 
      {
        $T [crr] $T [cra] 
      }
      ;;[call_stmt_389_Update] 
      {
        $T [ccr] $T [cca] 
      }
      call_stmt_389_sample_start_ &-> (call_stmt_389_Sample)
      call_stmt_389_sample_completed_ <-& (call_stmt_389_Sample)
      call_stmt_389_sample_completed_ &-> ($null)
      call_stmt_389_update_start_ &-> (call_stmt_389_Update)
      call_stmt_389_update_completed_ <-& (call_stmt_389_Update)
      // Call output argument 0
      // (as target) rdata_I22
      // start: WAR dependencies for rdata_I22
      // done: WAR dependencies for rdata_I22
      // end: 	$guard (~checkJZero) $call accessMem (read_signal rowI_2 col2 write_data_zero ) (rdata_I22 ) 
      // start:  	$guard (~checkJZero) ifmaps[2 ][2 ] := rdata_I22// bits of buffering = 16. 
      //  file prog.linked.opt.aa, line 140
      // Guard expression 
      // checkJZero
      // Source expression
      // rdata_I22
      // Target expression
      // ifmaps[2 ][2 ]
      $T[array_obj_ref_393_sample_start_] 
      $T[array_obj_ref_393_sample_completed_] 
      $T[array_obj_ref_393_update_start_] 
      $T[array_obj_ref_393_update_completed_] 
      $T[array_obj_ref_393_word_address_calculated] 
      $T[array_obj_ref_393_root_address_calculated] 
      array_obj_ref_393_word_address_calculated <-& (array_obj_ref_393_root_address_calculated)
      ;;[array_obj_ref_393_Sample] 
      {
        ;;[array_obj_ref_393_Split] 
        {
          $T [split_req] $T [split_ack]
        }
        ||[word_access_start] 
        {
          ;;[word_0] 
          {
            $T [rr] $T [ra] 
          }
        }
      }
      ;;[array_obj_ref_393_Update] 
      {
        ||[word_access_complete] 
        {
          ;;[word_0] 
          {
            $T [cr] $T [ca] 
          }
        }
      }
      array_obj_ref_393_sample_start_ <-& (array_obj_ref_393_word_address_calculated)
      array_obj_ref_393_sample_start_ &-> (array_obj_ref_393_Sample)
      array_obj_ref_393_sample_completed_ <-& (array_obj_ref_393_Sample)
      array_obj_ref_393_sample_completed_ &-> ($null)
      array_obj_ref_393_update_start_ &-> (array_obj_ref_393_Update)
      array_obj_ref_393_update_completed_ <-& (array_obj_ref_393_Update)
      // Guard dependency for expression array_obj_ref_393 with guard R_checkJZero_390
      // root J of guard-expression not in visited elements.
      // start: Forward dependencies from rdata_I22 to transition array_obj_ref_393_sample_start_
      array_obj_ref_393_sample_start_ <-& (call_stmt_389_update_completed_)
      // done: Forward dependencies from rdata_I22 to transition array_obj_ref_393_sample_start_
      // end:  	$guard (~checkJZero) ifmaps[2 ][2 ] := rdata_I22// bits of buffering = 16. 
      // start:  	$guard (~checkJZero) ifmaps2[1 ][2 ] := rdata_I22// bits of buffering = 16. 
      //  file prog.linked.opt.aa, line 141
      // Guard expression 
      // checkJZero
      // Source expression
      // rdata_I22
      // Target expression
      // ifmaps2[1 ][2 ]
      $T[array_obj_ref_399_sample_start_] 
      $T[array_obj_ref_399_sample_completed_] 
      $T[array_obj_ref_399_update_start_] 
      $T[array_obj_ref_399_update_completed_] 
      $T[array_obj_ref_399_word_address_calculated] 
      $T[array_obj_ref_399_root_address_calculated] 
      array_obj_ref_399_word_address_calculated <-& (array_obj_ref_399_root_address_calculated)
      ;;[array_obj_ref_399_Sample] 
      {
        ;;[array_obj_ref_399_Split] 
        {
          $T [split_req] $T [split_ack]
        }
        ||[word_access_start] 
        {
          ;;[word_0] 
          {
            $T [rr] $T [ra] 
          }
        }
      }
      ;;[array_obj_ref_399_Update] 
      {
        ||[word_access_complete] 
        {
          ;;[word_0] 
          {
            $T [cr] $T [ca] 
          }
        }
      }
      array_obj_ref_399_sample_start_ <-& (array_obj_ref_399_word_address_calculated)
      array_obj_ref_399_sample_start_ &-> (array_obj_ref_399_Sample)
      array_obj_ref_399_sample_completed_ <-& (array_obj_ref_399_Sample)
      array_obj_ref_399_sample_completed_ &-> ($null)
      array_obj_ref_399_update_start_ &-> (array_obj_ref_399_Update)
      array_obj_ref_399_update_completed_ <-& (array_obj_ref_399_Update)
      // Guard dependency for expression array_obj_ref_399 with guard R_checkJZero_396
      // root J of guard-expression not in visited elements.
      // start: Forward dependencies from rdata_I22 to transition array_obj_ref_399_sample_start_
      array_obj_ref_399_sample_start_ <-& (call_stmt_389_update_completed_)
      // done: Forward dependencies from rdata_I22 to transition array_obj_ref_399_sample_start_
      // end:  	$guard (~checkJZero) ifmaps2[1 ][2 ] := rdata_I22// bits of buffering = 16. 
      // start: 	$guard (~checkJZero) $call accessMem (read_signal rowI_3 col0 write_data_zero ) (rdata_I30 ) 
      //  file prog.linked.opt.aa, line 142
      $T[call_stmt_408_sample_start_] 
      $T[call_stmt_408_sample_completed_] 
      $T[call_stmt_408_update_start_] 
      $T[call_stmt_408_update_completed_] 
      // Guard expression
      // checkJZero
      // start: Forward dependencies from checkJZero to transition call_stmt_408_sample_start_
      // done: Forward dependencies from checkJZero to transition call_stmt_408_sample_start_
      // Call input argument 0
      // Call input argument 1
      // rowI_3
      // Call input argument 2
      // Call input argument 3
      // start: Forward dependencies from rowI_3 to transition call_stmt_408_sample_start_
      call_stmt_408_sample_start_ <-& (type_cast_229_update_completed_)
      // done: Forward dependencies from rowI_3 to transition call_stmt_408_sample_start_
      ;;[call_stmt_408_Sample] 
      {
        $T [crr] $T [cra] 
      }
      ;;[call_stmt_408_Update] 
      {
        $T [ccr] $T [cca] 
      }
      call_stmt_408_sample_start_ &-> (call_stmt_408_Sample)
      call_stmt_408_sample_completed_ <-& (call_stmt_408_Sample)
      call_stmt_408_sample_completed_ &-> ($null)
      call_stmt_408_update_start_ &-> (call_stmt_408_Update)
      call_stmt_408_update_completed_ <-& (call_stmt_408_Update)
      // Call output argument 0
      // (as target) rdata_I30
      // start: WAR dependencies for rdata_I30
      // done: WAR dependencies for rdata_I30
      // end: 	$guard (~checkJZero) $call accessMem (read_signal rowI_3 col0 write_data_zero ) (rdata_I30 ) 
      // start:  	$guard (~checkJZero) ifmaps[3 ][0 ] := rdata_I30// bits of buffering = 16. 
      //  file prog.linked.opt.aa, line 143
      // Guard expression 
      // checkJZero
      // Source expression
      // rdata_I30
      // Target expression
      // ifmaps[3 ][0 ]
      $T[array_obj_ref_412_sample_start_] 
      $T[array_obj_ref_412_sample_completed_] 
      $T[array_obj_ref_412_update_start_] 
      $T[array_obj_ref_412_update_completed_] 
      $T[array_obj_ref_412_word_address_calculated] 
      $T[array_obj_ref_412_root_address_calculated] 
      array_obj_ref_412_word_address_calculated <-& (array_obj_ref_412_root_address_calculated)
      ;;[array_obj_ref_412_Sample] 
      {
        ;;[array_obj_ref_412_Split] 
        {
          $T [split_req] $T [split_ack]
        }
        ||[word_access_start] 
        {
          ;;[word_0] 
          {
            $T [rr] $T [ra] 
          }
        }
      }
      ;;[array_obj_ref_412_Update] 
      {
        ||[word_access_complete] 
        {
          ;;[word_0] 
          {
            $T [cr] $T [ca] 
          }
        }
      }
      array_obj_ref_412_sample_start_ <-& (array_obj_ref_412_word_address_calculated)
      array_obj_ref_412_sample_start_ &-> (array_obj_ref_412_Sample)
      array_obj_ref_412_sample_completed_ <-& (array_obj_ref_412_Sample)
      array_obj_ref_412_sample_completed_ &-> ($null)
      array_obj_ref_412_update_start_ &-> (array_obj_ref_412_Update)
      array_obj_ref_412_update_completed_ <-& (array_obj_ref_412_Update)
      // Guard dependency for expression array_obj_ref_412 with guard R_checkJZero_409
      // root J of guard-expression not in visited elements.
      // start: Forward dependencies from rdata_I30 to transition array_obj_ref_412_sample_start_
      array_obj_ref_412_sample_start_ <-& (call_stmt_408_update_completed_)
      // done: Forward dependencies from rdata_I30 to transition array_obj_ref_412_sample_start_
      // end:  	$guard (~checkJZero) ifmaps[3 ][0 ] := rdata_I30// bits of buffering = 16. 
      // start:  	$guard (~checkJZero) ifmaps2[2 ][0 ] := rdata_I30// bits of buffering = 16. 
      //  file prog.linked.opt.aa, line 144
      // Guard expression 
      // checkJZero
      // Source expression
      // rdata_I30
      // Target expression
      // ifmaps2[2 ][0 ]
      $T[array_obj_ref_418_sample_start_] 
      $T[array_obj_ref_418_sample_completed_] 
      $T[array_obj_ref_418_update_start_] 
      $T[array_obj_ref_418_update_completed_] 
      $T[array_obj_ref_418_word_address_calculated] 
      $T[array_obj_ref_418_root_address_calculated] 
      array_obj_ref_418_word_address_calculated <-& (array_obj_ref_418_root_address_calculated)
      ;;[array_obj_ref_418_Sample] 
      {
        ;;[array_obj_ref_418_Split] 
        {
          $T [split_req] $T [split_ack]
        }
        ||[word_access_start] 
        {
          ;;[word_0] 
          {
            $T [rr] $T [ra] 
          }
        }
      }
      ;;[array_obj_ref_418_Update] 
      {
        ||[word_access_complete] 
        {
          ;;[word_0] 
          {
            $T [cr] $T [ca] 
          }
        }
      }
      array_obj_ref_418_sample_start_ <-& (array_obj_ref_418_word_address_calculated)
      array_obj_ref_418_sample_start_ &-> (array_obj_ref_418_Sample)
      array_obj_ref_418_sample_completed_ <-& (array_obj_ref_418_Sample)
      array_obj_ref_418_sample_completed_ &-> ($null)
      array_obj_ref_418_update_start_ &-> (array_obj_ref_418_Update)
      array_obj_ref_418_update_completed_ <-& (array_obj_ref_418_Update)
      // Guard dependency for expression array_obj_ref_418 with guard R_checkJZero_415
      // root J of guard-expression not in visited elements.
      // start: Forward dependencies from rdata_I30 to transition array_obj_ref_418_sample_start_
      array_obj_ref_418_sample_start_ <-& (call_stmt_408_update_completed_)
      // done: Forward dependencies from rdata_I30 to transition array_obj_ref_418_sample_start_
      // end:  	$guard (~checkJZero) ifmaps2[2 ][0 ] := rdata_I30// bits of buffering = 16. 
      // start: 	$guard (~checkJZero) $call accessMem (read_signal rowI_3 col1 write_data_zero ) (rdata_I31 ) 
      //  file prog.linked.opt.aa, line 145
      $T[call_stmt_427_sample_start_] 
      $T[call_stmt_427_sample_completed_] 
      $T[call_stmt_427_update_start_] 
      $T[call_stmt_427_update_completed_] 
      // Guard expression
      // checkJZero
      // start: Forward dependencies from checkJZero to transition call_stmt_427_sample_start_
      // done: Forward dependencies from checkJZero to transition call_stmt_427_sample_start_
      // Call input argument 0
      // Call input argument 1
      // rowI_3
      // Call input argument 2
      // Call input argument 3
      // start: Forward dependencies from rowI_3 to transition call_stmt_427_sample_start_
      call_stmt_427_sample_start_ <-& (type_cast_229_update_completed_)
      // done: Forward dependencies from rowI_3 to transition call_stmt_427_sample_start_
      ;;[call_stmt_427_Sample] 
      {
        $T [crr] $T [cra] 
      }
      ;;[call_stmt_427_Update] 
      {
        $T [ccr] $T [cca] 
      }
      call_stmt_427_sample_start_ &-> (call_stmt_427_Sample)
      call_stmt_427_sample_completed_ <-& (call_stmt_427_Sample)
      call_stmt_427_sample_completed_ &-> ($null)
      call_stmt_427_update_start_ &-> (call_stmt_427_Update)
      call_stmt_427_update_completed_ <-& (call_stmt_427_Update)
      // Call output argument 0
      // (as target) rdata_I31
      // start: WAR dependencies for rdata_I31
      // done: WAR dependencies for rdata_I31
      // end: 	$guard (~checkJZero) $call accessMem (read_signal rowI_3 col1 write_data_zero ) (rdata_I31 ) 
      // start:  	$guard (~checkJZero) ifmaps[3 ][1 ] := rdata_I31// bits of buffering = 16. 
      //  file prog.linked.opt.aa, line 146
      // Guard expression 
      // checkJZero
      // Source expression
      // rdata_I31
      // Target expression
      // ifmaps[3 ][1 ]
      $T[array_obj_ref_431_sample_start_] 
      $T[array_obj_ref_431_sample_completed_] 
      $T[array_obj_ref_431_update_start_] 
      $T[array_obj_ref_431_update_completed_] 
      $T[array_obj_ref_431_word_address_calculated] 
      $T[array_obj_ref_431_root_address_calculated] 
      array_obj_ref_431_word_address_calculated <-& (array_obj_ref_431_root_address_calculated)
      ;;[array_obj_ref_431_Sample] 
      {
        ;;[array_obj_ref_431_Split] 
        {
          $T [split_req] $T [split_ack]
        }
        ||[word_access_start] 
        {
          ;;[word_0] 
          {
            $T [rr] $T [ra] 
          }
        }
      }
      ;;[array_obj_ref_431_Update] 
      {
        ||[word_access_complete] 
        {
          ;;[word_0] 
          {
            $T [cr] $T [ca] 
          }
        }
      }
      array_obj_ref_431_sample_start_ <-& (array_obj_ref_431_word_address_calculated)
      array_obj_ref_431_sample_start_ &-> (array_obj_ref_431_Sample)
      array_obj_ref_431_sample_completed_ <-& (array_obj_ref_431_Sample)
      array_obj_ref_431_sample_completed_ &-> ($null)
      array_obj_ref_431_update_start_ &-> (array_obj_ref_431_Update)
      array_obj_ref_431_update_completed_ <-& (array_obj_ref_431_Update)
      // Guard dependency for expression array_obj_ref_431 with guard R_checkJZero_428
      // root J of guard-expression not in visited elements.
      // start: Forward dependencies from rdata_I31 to transition array_obj_ref_431_sample_start_
      array_obj_ref_431_sample_start_ <-& (call_stmt_427_update_completed_)
      // done: Forward dependencies from rdata_I31 to transition array_obj_ref_431_sample_start_
      // end:  	$guard (~checkJZero) ifmaps[3 ][1 ] := rdata_I31// bits of buffering = 16. 
      // start:  	$guard (~checkJZero) ifmaps2[2 ][1 ] := rdata_I31// bits of buffering = 16. 
      //  file prog.linked.opt.aa, line 147
      // Guard expression 
      // checkJZero
      // Source expression
      // rdata_I31
      // Target expression
      // ifmaps2[2 ][1 ]
      $T[array_obj_ref_437_sample_start_] 
      $T[array_obj_ref_437_sample_completed_] 
      $T[array_obj_ref_437_update_start_] 
      $T[array_obj_ref_437_update_completed_] 
      $T[array_obj_ref_437_word_address_calculated] 
      $T[array_obj_ref_437_root_address_calculated] 
      array_obj_ref_437_word_address_calculated <-& (array_obj_ref_437_root_address_calculated)
      ;;[array_obj_ref_437_Sample] 
      {
        ;;[array_obj_ref_437_Split] 
        {
          $T [split_req] $T [split_ack]
        }
        ||[word_access_start] 
        {
          ;;[word_0] 
          {
            $T [rr] $T [ra] 
          }
        }
      }
      ;;[array_obj_ref_437_Update] 
      {
        ||[word_access_complete] 
        {
          ;;[word_0] 
          {
            $T [cr] $T [ca] 
          }
        }
      }
      array_obj_ref_437_sample_start_ <-& (array_obj_ref_437_word_address_calculated)
      array_obj_ref_437_sample_start_ &-> (array_obj_ref_437_Sample)
      array_obj_ref_437_sample_completed_ <-& (array_obj_ref_437_Sample)
      array_obj_ref_437_sample_completed_ &-> ($null)
      array_obj_ref_437_update_start_ &-> (array_obj_ref_437_Update)
      array_obj_ref_437_update_completed_ <-& (array_obj_ref_437_Update)
      // Guard dependency for expression array_obj_ref_437 with guard R_checkJZero_434
      // root J of guard-expression not in visited elements.
      // start: Forward dependencies from rdata_I31 to transition array_obj_ref_437_sample_start_
      array_obj_ref_437_sample_start_ <-& (call_stmt_427_update_completed_)
      // done: Forward dependencies from rdata_I31 to transition array_obj_ref_437_sample_start_
      // end:  	$guard (~checkJZero) ifmaps2[2 ][1 ] := rdata_I31// bits of buffering = 16. 
      // start: 	$guard (~checkJZero) $call accessMem (read_signal rowI_3 col2 write_data_zero ) (rdata_I32 ) 
      //  file prog.linked.opt.aa, line 148
      $T[call_stmt_446_sample_start_] 
      $T[call_stmt_446_sample_completed_] 
      $T[call_stmt_446_update_start_] 
      $T[call_stmt_446_update_completed_] 
      // Guard expression
      // checkJZero
      // start: Forward dependencies from checkJZero to transition call_stmt_446_sample_start_
      // done: Forward dependencies from checkJZero to transition call_stmt_446_sample_start_
      // Call input argument 0
      // Call input argument 1
      // rowI_3
      // Call input argument 2
      // Call input argument 3
      // start: Forward dependencies from rowI_3 to transition call_stmt_446_sample_start_
      call_stmt_446_sample_start_ <-& (type_cast_229_update_completed_)
      // done: Forward dependencies from rowI_3 to transition call_stmt_446_sample_start_
      ;;[call_stmt_446_Sample] 
      {
        $T [crr] $T [cra] 
      }
      ;;[call_stmt_446_Update] 
      {
        $T [ccr] $T [cca] 
      }
      call_stmt_446_sample_start_ &-> (call_stmt_446_Sample)
      call_stmt_446_sample_completed_ <-& (call_stmt_446_Sample)
      call_stmt_446_sample_completed_ &-> ($null)
      call_stmt_446_update_start_ &-> (call_stmt_446_Update)
      call_stmt_446_update_completed_ <-& (call_stmt_446_Update)
      // Call output argument 0
      // (as target) rdata_I32
      // start: WAR dependencies for rdata_I32
      // done: WAR dependencies for rdata_I32
      // end: 	$guard (~checkJZero) $call accessMem (read_signal rowI_3 col2 write_data_zero ) (rdata_I32 ) 
      // start:  	$guard (~checkJZero) ifmaps[3 ][2 ] := rdata_I32// bits of buffering = 16. 
      //  file prog.linked.opt.aa, line 149
      // Guard expression 
      // checkJZero
      // Source expression
      // rdata_I32
      // Target expression
      // ifmaps[3 ][2 ]
      $T[array_obj_ref_450_sample_start_] 
      $T[array_obj_ref_450_sample_completed_] 
      $T[array_obj_ref_450_update_start_] 
      $T[array_obj_ref_450_update_completed_] 
      $T[array_obj_ref_450_word_address_calculated] 
      $T[array_obj_ref_450_root_address_calculated] 
      array_obj_ref_450_word_address_calculated <-& (array_obj_ref_450_root_address_calculated)
      ;;[array_obj_ref_450_Sample] 
      {
        ;;[array_obj_ref_450_Split] 
        {
          $T [split_req] $T [split_ack]
        }
        ||[word_access_start] 
        {
          ;;[word_0] 
          {
            $T [rr] $T [ra] 
          }
        }
      }
      ;;[array_obj_ref_450_Update] 
      {
        ||[word_access_complete] 
        {
          ;;[word_0] 
          {
            $T [cr] $T [ca] 
          }
        }
      }
      array_obj_ref_450_sample_start_ <-& (array_obj_ref_450_word_address_calculated)
      array_obj_ref_450_sample_start_ &-> (array_obj_ref_450_Sample)
      array_obj_ref_450_sample_completed_ <-& (array_obj_ref_450_Sample)
      array_obj_ref_450_sample_completed_ &-> ($null)
      array_obj_ref_450_update_start_ &-> (array_obj_ref_450_Update)
      array_obj_ref_450_update_completed_ <-& (array_obj_ref_450_Update)
      // Guard dependency for expression array_obj_ref_450 with guard R_checkJZero_447
      // root J of guard-expression not in visited elements.
      // start: Forward dependencies from rdata_I32 to transition array_obj_ref_450_sample_start_
      array_obj_ref_450_sample_start_ <-& (call_stmt_446_update_completed_)
      // done: Forward dependencies from rdata_I32 to transition array_obj_ref_450_sample_start_
      // end:  	$guard (~checkJZero) ifmaps[3 ][2 ] := rdata_I32// bits of buffering = 16. 
      // start:  	$guard (~checkJZero) ifmaps2[2 ][2 ] := rdata_I32// bits of buffering = 16. 
      //  file prog.linked.opt.aa, line 150
      // Guard expression 
      // checkJZero
      // Source expression
      // rdata_I32
      // Target expression
      // ifmaps2[2 ][2 ]
      $T[array_obj_ref_456_sample_start_] 
      $T[array_obj_ref_456_sample_completed_] 
      $T[array_obj_ref_456_update_start_] 
      $T[array_obj_ref_456_update_completed_] 
      $T[array_obj_ref_456_word_address_calculated] 
      $T[array_obj_ref_456_root_address_calculated] 
      array_obj_ref_456_word_address_calculated <-& (array_obj_ref_456_root_address_calculated)
      ;;[array_obj_ref_456_Sample] 
      {
        ;;[array_obj_ref_456_Split] 
        {
          $T [split_req] $T [split_ack]
        }
        ||[word_access_start] 
        {
          ;;[word_0] 
          {
            $T [rr] $T [ra] 
          }
        }
      }
      ;;[array_obj_ref_456_Update] 
      {
        ||[word_access_complete] 
        {
          ;;[word_0] 
          {
            $T [cr] $T [ca] 
          }
        }
      }
      array_obj_ref_456_sample_start_ <-& (array_obj_ref_456_word_address_calculated)
      array_obj_ref_456_sample_start_ &-> (array_obj_ref_456_Sample)
      array_obj_ref_456_sample_completed_ <-& (array_obj_ref_456_Sample)
      array_obj_ref_456_sample_completed_ &-> ($null)
      array_obj_ref_456_update_start_ &-> (array_obj_ref_456_Update)
      array_obj_ref_456_update_completed_ <-& (array_obj_ref_456_Update)
      // Guard dependency for expression array_obj_ref_456 with guard R_checkJZero_453
      // root J of guard-expression not in visited elements.
      // start: Forward dependencies from rdata_I32 to transition array_obj_ref_456_sample_start_
      array_obj_ref_456_sample_start_ <-& (call_stmt_446_update_completed_)
      // done: Forward dependencies from rdata_I32 to transition array_obj_ref_456_sample_start_
      // end:  	$guard (~checkJZero) ifmaps2[2 ][2 ] := rdata_I32// bits of buffering = 16. 
      // start: 	$guard (~checkJZero) $call accessMem (read_signal rowI_4 col0 write_data_zero ) (rdata_I40 ) 
      //  file prog.linked.opt.aa, line 151
      $T[call_stmt_465_sample_start_] 
      $T[call_stmt_465_sample_completed_] 
      $T[call_stmt_465_update_start_] 
      $T[call_stmt_465_update_completed_] 
      // Guard expression
      // checkJZero
      // start: Forward dependencies from checkJZero to transition call_stmt_465_sample_start_
      // done: Forward dependencies from checkJZero to transition call_stmt_465_sample_start_
      // Call input argument 0
      // Call input argument 1
      // rowI_4
      // Call input argument 2
      // Call input argument 3
      // start: Forward dependencies from rowI_4 to transition call_stmt_465_sample_start_
      call_stmt_465_sample_start_ <-& (type_cast_235_update_completed_)
      // done: Forward dependencies from rowI_4 to transition call_stmt_465_sample_start_
      ;;[call_stmt_465_Sample] 
      {
        $T [crr] $T [cra] 
      }
      ;;[call_stmt_465_Update] 
      {
        $T [ccr] $T [cca] 
      }
      call_stmt_465_sample_start_ &-> (call_stmt_465_Sample)
      call_stmt_465_sample_completed_ <-& (call_stmt_465_Sample)
      call_stmt_465_sample_completed_ &-> ($null)
      call_stmt_465_update_start_ &-> (call_stmt_465_Update)
      call_stmt_465_update_completed_ <-& (call_stmt_465_Update)
      // Call output argument 0
      // (as target) rdata_I40
      // start: WAR dependencies for rdata_I40
      // done: WAR dependencies for rdata_I40
      // end: 	$guard (~checkJZero) $call accessMem (read_signal rowI_4 col0 write_data_zero ) (rdata_I40 ) 
      // start:  	$guard (~checkJZero) ifmaps2[3 ][0 ] := rdata_I40// bits of buffering = 16. 
      //  file prog.linked.opt.aa, line 152
      // Guard expression 
      // checkJZero
      // Source expression
      // rdata_I40
      // Target expression
      // ifmaps2[3 ][0 ]
      $T[array_obj_ref_469_sample_start_] 
      $T[array_obj_ref_469_sample_completed_] 
      $T[array_obj_ref_469_update_start_] 
      $T[array_obj_ref_469_update_completed_] 
      $T[array_obj_ref_469_word_address_calculated] 
      $T[array_obj_ref_469_root_address_calculated] 
      array_obj_ref_469_word_address_calculated <-& (array_obj_ref_469_root_address_calculated)
      ;;[array_obj_ref_469_Sample] 
      {
        ;;[array_obj_ref_469_Split] 
        {
          $T [split_req] $T [split_ack]
        }
        ||[word_access_start] 
        {
          ;;[word_0] 
          {
            $T [rr] $T [ra] 
          }
        }
      }
      ;;[array_obj_ref_469_Update] 
      {
        ||[word_access_complete] 
        {
          ;;[word_0] 
          {
            $T [cr] $T [ca] 
          }
        }
      }
      array_obj_ref_469_sample_start_ <-& (array_obj_ref_469_word_address_calculated)
      array_obj_ref_469_sample_start_ &-> (array_obj_ref_469_Sample)
      array_obj_ref_469_sample_completed_ <-& (array_obj_ref_469_Sample)
      array_obj_ref_469_sample_completed_ &-> ($null)
      array_obj_ref_469_update_start_ &-> (array_obj_ref_469_Update)
      array_obj_ref_469_update_completed_ <-& (array_obj_ref_469_Update)
      // Guard dependency for expression array_obj_ref_469 with guard R_checkJZero_466
      // root J of guard-expression not in visited elements.
      // start: Forward dependencies from rdata_I40 to transition array_obj_ref_469_sample_start_
      array_obj_ref_469_sample_start_ <-& (call_stmt_465_update_completed_)
      // done: Forward dependencies from rdata_I40 to transition array_obj_ref_469_sample_start_
      // end:  	$guard (~checkJZero) ifmaps2[3 ][0 ] := rdata_I40// bits of buffering = 16. 
      // start: 	$guard (~checkJZero) $call accessMem (read_signal rowI_4 col1 write_data_zero ) (rdata_I41 ) 
      //  file prog.linked.opt.aa, line 153
      $T[call_stmt_478_sample_start_] 
      $T[call_stmt_478_sample_completed_] 
      $T[call_stmt_478_update_start_] 
      $T[call_stmt_478_update_completed_] 
      // Guard expression
      // checkJZero
      // start: Forward dependencies from checkJZero to transition call_stmt_478_sample_start_
      // done: Forward dependencies from checkJZero to transition call_stmt_478_sample_start_
      // Call input argument 0
      // Call input argument 1
      // rowI_4
      // Call input argument 2
      // Call input argument 3
      // start: Forward dependencies from rowI_4 to transition call_stmt_478_sample_start_
      call_stmt_478_sample_start_ <-& (type_cast_235_update_completed_)
      // done: Forward dependencies from rowI_4 to transition call_stmt_478_sample_start_
      ;;[call_stmt_478_Sample] 
      {
        $T [crr] $T [cra] 
      }
      ;;[call_stmt_478_Update] 
      {
        $T [ccr] $T [cca] 
      }
      call_stmt_478_sample_start_ &-> (call_stmt_478_Sample)
      call_stmt_478_sample_completed_ <-& (call_stmt_478_Sample)
      call_stmt_478_sample_completed_ &-> ($null)
      call_stmt_478_update_start_ &-> (call_stmt_478_Update)
      call_stmt_478_update_completed_ <-& (call_stmt_478_Update)
      // Call output argument 0
      // (as target) rdata_I41
      // start: WAR dependencies for rdata_I41
      // done: WAR dependencies for rdata_I41
      // end: 	$guard (~checkJZero) $call accessMem (read_signal rowI_4 col1 write_data_zero ) (rdata_I41 ) 
      // start:  	$guard (~checkJZero) ifmaps2[3 ][1 ] := rdata_I41// bits of buffering = 16. 
      //  file prog.linked.opt.aa, line 154
      // Guard expression 
      // checkJZero
      // Source expression
      // rdata_I41
      // Target expression
      // ifmaps2[3 ][1 ]
      $T[array_obj_ref_482_sample_start_] 
      $T[array_obj_ref_482_sample_completed_] 
      $T[array_obj_ref_482_update_start_] 
      $T[array_obj_ref_482_update_completed_] 
      $T[array_obj_ref_482_word_address_calculated] 
      $T[array_obj_ref_482_root_address_calculated] 
      array_obj_ref_482_word_address_calculated <-& (array_obj_ref_482_root_address_calculated)
      ;;[array_obj_ref_482_Sample] 
      {
        ;;[array_obj_ref_482_Split] 
        {
          $T [split_req] $T [split_ack]
        }
        ||[word_access_start] 
        {
          ;;[word_0] 
          {
            $T [rr] $T [ra] 
          }
        }
      }
      ;;[array_obj_ref_482_Update] 
      {
        ||[word_access_complete] 
        {
          ;;[word_0] 
          {
            $T [cr] $T [ca] 
          }
        }
      }
      array_obj_ref_482_sample_start_ <-& (array_obj_ref_482_word_address_calculated)
      array_obj_ref_482_sample_start_ &-> (array_obj_ref_482_Sample)
      array_obj_ref_482_sample_completed_ <-& (array_obj_ref_482_Sample)
      array_obj_ref_482_sample_completed_ &-> ($null)
      array_obj_ref_482_update_start_ &-> (array_obj_ref_482_Update)
      array_obj_ref_482_update_completed_ <-& (array_obj_ref_482_Update)
      // Guard dependency for expression array_obj_ref_482 with guard R_checkJZero_479
      // root J of guard-expression not in visited elements.
      // start: Forward dependencies from rdata_I41 to transition array_obj_ref_482_sample_start_
      array_obj_ref_482_sample_start_ <-& (call_stmt_478_update_completed_)
      // done: Forward dependencies from rdata_I41 to transition array_obj_ref_482_sample_start_
      // end:  	$guard (~checkJZero) ifmaps2[3 ][1 ] := rdata_I41// bits of buffering = 16. 
      // start: 	$guard (~checkJZero) $call accessMem (read_signal rowI_4 col2 write_data_zero ) (rdata_I42 ) 
      //  file prog.linked.opt.aa, line 155
      $T[call_stmt_491_sample_start_] 
      $T[call_stmt_491_sample_completed_] 
      $T[call_stmt_491_update_start_] 
      $T[call_stmt_491_update_completed_] 
      // Guard expression
      // checkJZero
      // start: Forward dependencies from checkJZero to transition call_stmt_491_sample_start_
      // done: Forward dependencies from checkJZero to transition call_stmt_491_sample_start_
      // Call input argument 0
      // Call input argument 1
      // rowI_4
      // Call input argument 2
      // Call input argument 3
      // start: Forward dependencies from rowI_4 to transition call_stmt_491_sample_start_
      call_stmt_491_sample_start_ <-& (type_cast_235_update_completed_)
      // done: Forward dependencies from rowI_4 to transition call_stmt_491_sample_start_
      ;;[call_stmt_491_Sample] 
      {
        $T [crr] $T [cra] 
      }
      ;;[call_stmt_491_Update] 
      {
        $T [ccr] $T [cca] 
      }
      call_stmt_491_sample_start_ &-> (call_stmt_491_Sample)
      call_stmt_491_sample_completed_ <-& (call_stmt_491_Sample)
      call_stmt_491_sample_completed_ &-> ($null)
      call_stmt_491_update_start_ &-> (call_stmt_491_Update)
      call_stmt_491_update_completed_ <-& (call_stmt_491_Update)
      // Call output argument 0
      // (as target) rdata_I42
      // start: WAR dependencies for rdata_I42
      // done: WAR dependencies for rdata_I42
      // end: 	$guard (~checkJZero) $call accessMem (read_signal rowI_4 col2 write_data_zero ) (rdata_I42 ) 
      // start:  	$guard (~checkJZero) ifmaps2[3 ][2 ] := rdata_I42// bits of buffering = 16. 
      //  file prog.linked.opt.aa, line 156
      // Guard expression 
      // checkJZero
      // Source expression
      // rdata_I42
      // Target expression
      // ifmaps2[3 ][2 ]
      $T[array_obj_ref_495_sample_start_] 
      $T[array_obj_ref_495_sample_completed_] 
      $T[array_obj_ref_495_update_start_] 
      $T[array_obj_ref_495_update_completed_] 
      $T[array_obj_ref_495_word_address_calculated] 
      $T[array_obj_ref_495_root_address_calculated] 
      array_obj_ref_495_word_address_calculated <-& (array_obj_ref_495_root_address_calculated)
      ;;[array_obj_ref_495_Sample] 
      {
        ;;[array_obj_ref_495_Split] 
        {
          $T [split_req] $T [split_ack]
        }
        ||[word_access_start] 
        {
          ;;[word_0] 
          {
            $T [rr] $T [ra] 
          }
        }
      }
      ;;[array_obj_ref_495_Update] 
      {
        ||[word_access_complete] 
        {
          ;;[word_0] 
          {
            $T [cr] $T [ca] 
          }
        }
      }
      array_obj_ref_495_sample_start_ <-& (array_obj_ref_495_word_address_calculated)
      array_obj_ref_495_sample_start_ &-> (array_obj_ref_495_Sample)
      array_obj_ref_495_sample_completed_ <-& (array_obj_ref_495_Sample)
      array_obj_ref_495_sample_completed_ &-> ($null)
      array_obj_ref_495_update_start_ &-> (array_obj_ref_495_Update)
      array_obj_ref_495_update_completed_ <-& (array_obj_ref_495_Update)
      // Guard dependency for expression array_obj_ref_495 with guard R_checkJZero_492
      // root J of guard-expression not in visited elements.
      // start: Forward dependencies from rdata_I42 to transition array_obj_ref_495_sample_start_
      array_obj_ref_495_sample_start_ <-& (call_stmt_491_update_completed_)
      // done: Forward dependencies from rdata_I42 to transition array_obj_ref_495_sample_start_
      // end:  	$guard (~checkJZero) ifmaps2[3 ][2 ] := rdata_I42// bits of buffering = 16. 
      // start:  	J_3 := ($bitcast ($uint<5>) (J + 3 ) )// bits of buffering = 5. 
      //  file prog.linked.opt.aa, line 157
      // Source expression
      // ($bitcast ($uint<5>) (J + 3 ) )
      $T[type_cast_502_sample_start_] 
      $T[type_cast_502_sample_completed_] 
      $T[type_cast_502_update_start_] 
      $T[type_cast_502_update_completed_] 
      // (J + 3 )
      // J
      // start: Forward dependencies from (J + 3 ) to transition type_cast_502_sample_start_
      // done: Forward dependencies from (J + 3 ) to transition type_cast_502_sample_start_
      ;;[type_cast_502_Sample] 
      {
        // unary expression 
        $T [rr] $T [ra] // (split) unary operation
      }
      ;;[type_cast_502_Update] 
      {
        // unary expression 
        $T [cr] $T [ca] //(split) unary operation
      }
      type_cast_502_sample_start_ &-> (type_cast_502_Sample)
      type_cast_502_sample_completed_ <-& (type_cast_502_Sample)
      type_cast_502_sample_completed_ &-> ($null)
      type_cast_502_update_start_ &-> (type_cast_502_Update)
      type_cast_502_update_completed_ <-& (type_cast_502_Update)
      // Target expression
      // (as target) J_3
      // start: WAR dependencies for J_3
      // done: WAR dependencies for J_3
      // end:  	J_3 := ($bitcast ($uint<5>) (J + 3 ) )// bits of buffering = 5. 
      // start: 	$call accessMem (read_signal rowI J_3 write_data_zero ) (rdata_ifmap0 ) 
      //  file prog.linked.opt.aa, line 158
      $T[call_stmt_509_sample_start_] 
      $T[call_stmt_509_sample_completed_] 
      $T[call_stmt_509_update_start_] 
      $T[call_stmt_509_update_completed_] 
      // Call input argument 0
      // Call input argument 1
      // rowI
      // Call input argument 2
      // J_3
      // Call input argument 3
      // start: Forward dependencies from rowI to transition call_stmt_509_sample_start_
      call_stmt_509_sample_start_ <-& (type_cast_211_update_completed_)
      // done: Forward dependencies from rowI to transition call_stmt_509_sample_start_
      // start: Forward dependencies from J_3 to transition call_stmt_509_sample_start_
      call_stmt_509_sample_start_ <-& (type_cast_502_update_completed_)
      // done: Forward dependencies from J_3 to transition call_stmt_509_sample_start_
      ;;[call_stmt_509_Sample] 
      {
        $T [crr] $T [cra] 
      }
      ;;[call_stmt_509_Update] 
      {
        $T [ccr] $T [cca] 
      }
      call_stmt_509_sample_start_ &-> (call_stmt_509_Sample)
      call_stmt_509_sample_completed_ <-& (call_stmt_509_Sample)
      call_stmt_509_sample_completed_ &-> ($null)
      call_stmt_509_update_start_ &-> (call_stmt_509_Update)
      call_stmt_509_update_completed_ <-& (call_stmt_509_Update)
      // Call output argument 0
      // (as target) rdata_ifmap0
      // start: WAR dependencies for rdata_ifmap0
      // done: WAR dependencies for rdata_ifmap0
      // end: 	$call accessMem (read_signal rowI J_3 write_data_zero ) (rdata_ifmap0 ) 
      // start:  	ifmaps[0 ][col_to_be_replaced] := rdata_ifmap0// bits of buffering = 16. 
      //  file prog.linked.opt.aa, line 159
      // Source expression
      // rdata_ifmap0
      // Target expression
      // ifmaps[0 ][col_to_be_replaced]
      $T[array_obj_ref_512_sample_start_] 
      $T[array_obj_ref_512_sample_completed_] 
      $T[array_obj_ref_512_update_start_] 
      $T[array_obj_ref_512_update_completed_] 
      $T[array_obj_ref_512_word_address_calculated] 
      $T[array_obj_ref_512_root_address_calculated] 
      $T[array_obj_ref_512_offset_calculated] 
      $T[array_obj_ref_512_index_resized_1] 
      $T[array_obj_ref_512_index_scaled_1] 
      $T[array_obj_ref_512_index_computed_1] 
      // col_to_be_replaced
      // start: Forward dependencies from col_to_be_replaced to transition array_obj_ref_512_index_computed_1
      // done: Forward dependencies from col_to_be_replaced to transition array_obj_ref_512_index_computed_1
      ;;[array_obj_ref_512_index_resize_1] 
      {
        $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
      }
      array_obj_ref_512_index_computed_1 &-> (array_obj_ref_512_index_resize_1)
      array_obj_ref_512_index_resized_1 <-& (array_obj_ref_512_index_resize_1)
      ;;[array_obj_ref_512_index_scale_1] 
      {
        $T [scale_rename_req] $T [scale_rename_ack] // rename 
      }
      array_obj_ref_512_index_resized_1 &-> (array_obj_ref_512_index_scale_1)
      array_obj_ref_512_index_scaled_1 <-& (array_obj_ref_512_index_scale_1)
      $T[array_obj_ref_512_final_index_sum_regn_sample_complete] 
      $T[array_obj_ref_512_final_index_sum_regn_update_start] 
      ;;[array_obj_ref_512_final_index_sum_regn_Sample] 
      {
        $T [req] $T [ack] 
      }
      ;;[array_obj_ref_512_final_index_sum_regn_Update] 
      {
        $T [req] $T [ack] 
      }
      array_obj_ref_512_index_scaled_1 &-> (array_obj_ref_512_final_index_sum_regn_Sample)
      array_obj_ref_512_final_index_sum_regn_sample_complete <-& (array_obj_ref_512_final_index_sum_regn_Sample)
      array_obj_ref_512_final_index_sum_regn_update_start &-> (array_obj_ref_512_final_index_sum_regn_Update)
      array_obj_ref_512_offset_calculated <-& (array_obj_ref_512_final_index_sum_regn_Update)
      ;;[array_obj_ref_512_base_plus_offset] 
      {
        $T [sum_rename_req] $T [sum_rename_ack] // one gets through 
      }
      array_obj_ref_512_offset_calculated &-> (array_obj_ref_512_base_plus_offset)
      array_obj_ref_512_root_address_calculated <-& (array_obj_ref_512_base_plus_offset)
      ;;[array_obj_ref_512_word_addrgen] 
      {
        $T [root_register_req] $T [root_register_ack]
      }
      array_obj_ref_512_root_address_calculated &-> (array_obj_ref_512_word_addrgen)
      array_obj_ref_512_word_address_calculated <-& (array_obj_ref_512_word_addrgen)
      ;;[array_obj_ref_512_Sample] 
      {
        ;;[array_obj_ref_512_Split] 
        {
          $T [split_req] $T [split_ack]
        }
        ||[word_access_start] 
        {
          ;;[word_0] 
          {
            $T [rr] $T [ra] 
          }
        }
      }
      ;;[array_obj_ref_512_Update] 
      {
        ||[word_access_complete] 
        {
          ;;[word_0] 
          {
            $T [cr] $T [ca] 
          }
        }
      }
      array_obj_ref_512_sample_start_ <-& (array_obj_ref_512_word_address_calculated)
      array_obj_ref_512_sample_start_ &-> (array_obj_ref_512_Sample)
      array_obj_ref_512_sample_completed_ <-& (array_obj_ref_512_Sample)
      array_obj_ref_512_sample_completed_ &-> ($null)
      array_obj_ref_512_update_start_ &-> (array_obj_ref_512_Update)
      array_obj_ref_512_update_completed_ <-& (array_obj_ref_512_Update)
      // start: Forward dependencies from rdata_ifmap0 to transition array_obj_ref_512_sample_start_
      array_obj_ref_512_sample_start_ <-& (call_stmt_509_update_completed_)
      // done: Forward dependencies from rdata_ifmap0 to transition array_obj_ref_512_sample_start_
      // end:  	ifmaps[0 ][col_to_be_replaced] := rdata_ifmap0// bits of buffering = 16. 
      // start: 	$call accessMem (read_signal rowI_1 J_3 write_data_zero ) (rdata_ifmap1 ) 
      //  file prog.linked.opt.aa, line 160
      $T[call_stmt_520_sample_start_] 
      $T[call_stmt_520_sample_completed_] 
      $T[call_stmt_520_update_start_] 
      $T[call_stmt_520_update_completed_] 
      // Call input argument 0
      // Call input argument 1
      // rowI_1
      // Call input argument 2
      // J_3
      // Call input argument 3
      // start: Forward dependencies from rowI_1 to transition call_stmt_520_sample_start_
      call_stmt_520_sample_start_ <-& (type_cast_217_update_completed_)
      // done: Forward dependencies from rowI_1 to transition call_stmt_520_sample_start_
      // start: Forward dependencies from J_3 to transition call_stmt_520_sample_start_
      call_stmt_520_sample_start_ <-& (type_cast_502_update_completed_)
      // done: Forward dependencies from J_3 to transition call_stmt_520_sample_start_
      ;;[call_stmt_520_Sample] 
      {
        $T [crr] $T [cra] 
      }
      ;;[call_stmt_520_Update] 
      {
        $T [ccr] $T [cca] 
      }
      call_stmt_520_sample_start_ &-> (call_stmt_520_Sample)
      call_stmt_520_sample_completed_ <-& (call_stmt_520_Sample)
      call_stmt_520_sample_completed_ &-> ($null)
      call_stmt_520_update_start_ &-> (call_stmt_520_Update)
      call_stmt_520_update_completed_ <-& (call_stmt_520_Update)
      // Call output argument 0
      // (as target) rdata_ifmap1
      // start: WAR dependencies for rdata_ifmap1
      // done: WAR dependencies for rdata_ifmap1
      // end: 	$call accessMem (read_signal rowI_1 J_3 write_data_zero ) (rdata_ifmap1 ) 
      // start:  	ifmaps[1 ][col_to_be_replaced] := rdata_ifmap1// bits of buffering = 16. 
      //  file prog.linked.opt.aa, line 161
      // Source expression
      // rdata_ifmap1
      // Target expression
      // ifmaps[1 ][col_to_be_replaced]
      $T[array_obj_ref_523_sample_start_] 
      $T[array_obj_ref_523_sample_completed_] 
      $T[array_obj_ref_523_update_start_] 
      $T[array_obj_ref_523_update_completed_] 
      $T[array_obj_ref_523_word_address_calculated] 
      $T[array_obj_ref_523_root_address_calculated] 
      $T[array_obj_ref_523_offset_calculated] 
      $T[array_obj_ref_523_index_resized_1] 
      $T[array_obj_ref_523_index_scaled_1] 
      $T[array_obj_ref_523_index_computed_1] 
      // col_to_be_replaced
      // start: Forward dependencies from col_to_be_replaced to transition array_obj_ref_523_index_computed_1
      // done: Forward dependencies from col_to_be_replaced to transition array_obj_ref_523_index_computed_1
      ;;[array_obj_ref_523_index_resize_1] 
      {
        $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
      }
      array_obj_ref_523_index_computed_1 &-> (array_obj_ref_523_index_resize_1)
      array_obj_ref_523_index_resized_1 <-& (array_obj_ref_523_index_resize_1)
      ;;[array_obj_ref_523_index_scale_1] 
      {
        $T [scale_rename_req] $T [scale_rename_ack] // rename 
      }
      array_obj_ref_523_index_resized_1 &-> (array_obj_ref_523_index_scale_1)
      array_obj_ref_523_index_scaled_1 <-& (array_obj_ref_523_index_scale_1)
      $T[array_obj_ref_523_final_index_sum_regn_sample_complete] 
      $T[array_obj_ref_523_final_index_sum_regn_update_start] 
      ;;[array_obj_ref_523_final_index_sum_regn_Sample] 
      {
        $T [req] $T [ack] 
      }
      ;;[array_obj_ref_523_final_index_sum_regn_Update] 
      {
        $T [req] $T [ack] 
      }
      array_obj_ref_523_index_scaled_1 &-> (array_obj_ref_523_final_index_sum_regn_Sample)
      array_obj_ref_523_final_index_sum_regn_sample_complete <-& (array_obj_ref_523_final_index_sum_regn_Sample)
      array_obj_ref_523_final_index_sum_regn_update_start &-> (array_obj_ref_523_final_index_sum_regn_Update)
      array_obj_ref_523_offset_calculated <-& (array_obj_ref_523_final_index_sum_regn_Update)
      ;;[array_obj_ref_523_base_plus_offset] 
      {
        $T [sum_rename_req] $T [sum_rename_ack] // one gets through 
      }
      array_obj_ref_523_offset_calculated &-> (array_obj_ref_523_base_plus_offset)
      array_obj_ref_523_root_address_calculated <-& (array_obj_ref_523_base_plus_offset)
      ;;[array_obj_ref_523_word_addrgen] 
      {
        $T [root_register_req] $T [root_register_ack]
      }
      array_obj_ref_523_root_address_calculated &-> (array_obj_ref_523_word_addrgen)
      array_obj_ref_523_word_address_calculated <-& (array_obj_ref_523_word_addrgen)
      ;;[array_obj_ref_523_Sample] 
      {
        ;;[array_obj_ref_523_Split] 
        {
          $T [split_req] $T [split_ack]
        }
        ||[word_access_start] 
        {
          ;;[word_0] 
          {
            $T [rr] $T [ra] 
          }
        }
      }
      ;;[array_obj_ref_523_Update] 
      {
        ||[word_access_complete] 
        {
          ;;[word_0] 
          {
            $T [cr] $T [ca] 
          }
        }
      }
      array_obj_ref_523_sample_start_ <-& (array_obj_ref_523_word_address_calculated)
      array_obj_ref_523_sample_start_ &-> (array_obj_ref_523_Sample)
      array_obj_ref_523_sample_completed_ <-& (array_obj_ref_523_Sample)
      array_obj_ref_523_sample_completed_ &-> ($null)
      array_obj_ref_523_update_start_ &-> (array_obj_ref_523_Update)
      array_obj_ref_523_update_completed_ <-& (array_obj_ref_523_Update)
      // start: Forward dependencies from rdata_ifmap1 to transition array_obj_ref_523_sample_start_
      array_obj_ref_523_sample_start_ <-& (call_stmt_520_update_completed_)
      // done: Forward dependencies from rdata_ifmap1 to transition array_obj_ref_523_sample_start_
      // end:  	ifmaps[1 ][col_to_be_replaced] := rdata_ifmap1// bits of buffering = 16. 
      // start:  	ifmaps2[0 ][col_to_be_replaced] := rdata_ifmap1// bits of buffering = 16. 
      //  file prog.linked.opt.aa, line 162
      // Source expression
      // rdata_ifmap1
      // Target expression
      // ifmaps2[0 ][col_to_be_replaced]
      $T[array_obj_ref_528_sample_start_] 
      $T[array_obj_ref_528_sample_completed_] 
      $T[array_obj_ref_528_update_start_] 
      $T[array_obj_ref_528_update_completed_] 
      $T[array_obj_ref_528_word_address_calculated] 
      $T[array_obj_ref_528_root_address_calculated] 
      $T[array_obj_ref_528_offset_calculated] 
      $T[array_obj_ref_528_index_resized_1] 
      $T[array_obj_ref_528_index_scaled_1] 
      $T[array_obj_ref_528_index_computed_1] 
      // col_to_be_replaced
      // start: Forward dependencies from col_to_be_replaced to transition array_obj_ref_528_index_computed_1
      // done: Forward dependencies from col_to_be_replaced to transition array_obj_ref_528_index_computed_1
      ;;[array_obj_ref_528_index_resize_1] 
      {
        $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
      }
      array_obj_ref_528_index_computed_1 &-> (array_obj_ref_528_index_resize_1)
      array_obj_ref_528_index_resized_1 <-& (array_obj_ref_528_index_resize_1)
      ;;[array_obj_ref_528_index_scale_1] 
      {
        $T [scale_rename_req] $T [scale_rename_ack] // rename 
      }
      array_obj_ref_528_index_resized_1 &-> (array_obj_ref_528_index_scale_1)
      array_obj_ref_528_index_scaled_1 <-& (array_obj_ref_528_index_scale_1)
      $T[array_obj_ref_528_final_index_sum_regn_sample_complete] 
      $T[array_obj_ref_528_final_index_sum_regn_update_start] 
      ;;[array_obj_ref_528_final_index_sum_regn_Sample] 
      {
        $T [req] $T [ack] 
      }
      ;;[array_obj_ref_528_final_index_sum_regn_Update] 
      {
        $T [req] $T [ack] 
      }
      array_obj_ref_528_index_scaled_1 &-> (array_obj_ref_528_final_index_sum_regn_Sample)
      array_obj_ref_528_final_index_sum_regn_sample_complete <-& (array_obj_ref_528_final_index_sum_regn_Sample)
      array_obj_ref_528_final_index_sum_regn_update_start &-> (array_obj_ref_528_final_index_sum_regn_Update)
      array_obj_ref_528_offset_calculated <-& (array_obj_ref_528_final_index_sum_regn_Update)
      ;;[array_obj_ref_528_base_plus_offset] 
      {
        $T [sum_rename_req] $T [sum_rename_ack] // one gets through 
      }
      array_obj_ref_528_offset_calculated &-> (array_obj_ref_528_base_plus_offset)
      array_obj_ref_528_root_address_calculated <-& (array_obj_ref_528_base_plus_offset)
      ;;[array_obj_ref_528_word_addrgen] 
      {
        $T [root_register_req] $T [root_register_ack]
      }
      array_obj_ref_528_root_address_calculated &-> (array_obj_ref_528_word_addrgen)
      array_obj_ref_528_word_address_calculated <-& (array_obj_ref_528_word_addrgen)
      ;;[array_obj_ref_528_Sample] 
      {
        ;;[array_obj_ref_528_Split] 
        {
          $T [split_req] $T [split_ack]
        }
        ||[word_access_start] 
        {
          ;;[word_0] 
          {
            $T [rr] $T [ra] 
          }
        }
      }
      ;;[array_obj_ref_528_Update] 
      {
        ||[word_access_complete] 
        {
          ;;[word_0] 
          {
            $T [cr] $T [ca] 
          }
        }
      }
      array_obj_ref_528_sample_start_ <-& (array_obj_ref_528_word_address_calculated)
      array_obj_ref_528_sample_start_ &-> (array_obj_ref_528_Sample)
      array_obj_ref_528_sample_completed_ <-& (array_obj_ref_528_Sample)
      array_obj_ref_528_sample_completed_ &-> ($null)
      array_obj_ref_528_update_start_ &-> (array_obj_ref_528_Update)
      array_obj_ref_528_update_completed_ <-& (array_obj_ref_528_Update)
      // start: Forward dependencies from rdata_ifmap1 to transition array_obj_ref_528_sample_start_
      array_obj_ref_528_sample_start_ <-& (call_stmt_520_update_completed_)
      // done: Forward dependencies from rdata_ifmap1 to transition array_obj_ref_528_sample_start_
      // end:  	ifmaps2[0 ][col_to_be_replaced] := rdata_ifmap1// bits of buffering = 16. 
      // start: 	$call accessMem (read_signal rowI_2 J_3 write_data_zero ) (rdata_ifmap2 ) 
      //  file prog.linked.opt.aa, line 163
      $T[call_stmt_536_sample_start_] 
      $T[call_stmt_536_sample_completed_] 
      $T[call_stmt_536_update_start_] 
      $T[call_stmt_536_update_completed_] 
      // Call input argument 0
      // Call input argument 1
      // rowI_2
      // Call input argument 2
      // J_3
      // Call input argument 3
      // start: Forward dependencies from rowI_2 to transition call_stmt_536_sample_start_
      call_stmt_536_sample_start_ <-& (type_cast_223_update_completed_)
      // done: Forward dependencies from rowI_2 to transition call_stmt_536_sample_start_
      // start: Forward dependencies from J_3 to transition call_stmt_536_sample_start_
      call_stmt_536_sample_start_ <-& (type_cast_502_update_completed_)
      // done: Forward dependencies from J_3 to transition call_stmt_536_sample_start_
      ;;[call_stmt_536_Sample] 
      {
        $T [crr] $T [cra] 
      }
      ;;[call_stmt_536_Update] 
      {
        $T [ccr] $T [cca] 
      }
      call_stmt_536_sample_start_ &-> (call_stmt_536_Sample)
      call_stmt_536_sample_completed_ <-& (call_stmt_536_Sample)
      call_stmt_536_sample_completed_ &-> ($null)
      call_stmt_536_update_start_ &-> (call_stmt_536_Update)
      call_stmt_536_update_completed_ <-& (call_stmt_536_Update)
      // Call output argument 0
      // (as target) rdata_ifmap2
      // start: WAR dependencies for rdata_ifmap2
      // done: WAR dependencies for rdata_ifmap2
      // end: 	$call accessMem (read_signal rowI_2 J_3 write_data_zero ) (rdata_ifmap2 ) 
      // start:  	ifmaps[2 ][col_to_be_replaced] := rdata_ifmap2// bits of buffering = 16. 
      //  file prog.linked.opt.aa, line 164
      // Source expression
      // rdata_ifmap2
      // Target expression
      // ifmaps[2 ][col_to_be_replaced]
      $T[array_obj_ref_539_sample_start_] 
      $T[array_obj_ref_539_sample_completed_] 
      $T[array_obj_ref_539_update_start_] 
      $T[array_obj_ref_539_update_completed_] 
      $T[array_obj_ref_539_word_address_calculated] 
      $T[array_obj_ref_539_root_address_calculated] 
      $T[array_obj_ref_539_offset_calculated] 
      $T[array_obj_ref_539_index_resized_1] 
      $T[array_obj_ref_539_index_scaled_1] 
      $T[array_obj_ref_539_index_computed_1] 
      // col_to_be_replaced
      // start: Forward dependencies from col_to_be_replaced to transition array_obj_ref_539_index_computed_1
      // done: Forward dependencies from col_to_be_replaced to transition array_obj_ref_539_index_computed_1
      ;;[array_obj_ref_539_index_resize_1] 
      {
        $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
      }
      array_obj_ref_539_index_computed_1 &-> (array_obj_ref_539_index_resize_1)
      array_obj_ref_539_index_resized_1 <-& (array_obj_ref_539_index_resize_1)
      ;;[array_obj_ref_539_index_scale_1] 
      {
        $T [scale_rename_req] $T [scale_rename_ack] // rename 
      }
      array_obj_ref_539_index_resized_1 &-> (array_obj_ref_539_index_scale_1)
      array_obj_ref_539_index_scaled_1 <-& (array_obj_ref_539_index_scale_1)
      $T[array_obj_ref_539_final_index_sum_regn_sample_complete] 
      $T[array_obj_ref_539_final_index_sum_regn_update_start] 
      ;;[array_obj_ref_539_final_index_sum_regn_Sample] 
      {
        $T [req] $T [ack] 
      }
      ;;[array_obj_ref_539_final_index_sum_regn_Update] 
      {
        $T [req] $T [ack] 
      }
      array_obj_ref_539_index_scaled_1 &-> (array_obj_ref_539_final_index_sum_regn_Sample)
      array_obj_ref_539_final_index_sum_regn_sample_complete <-& (array_obj_ref_539_final_index_sum_regn_Sample)
      array_obj_ref_539_final_index_sum_regn_update_start &-> (array_obj_ref_539_final_index_sum_regn_Update)
      array_obj_ref_539_offset_calculated <-& (array_obj_ref_539_final_index_sum_regn_Update)
      ;;[array_obj_ref_539_base_plus_offset] 
      {
        $T [sum_rename_req] $T [sum_rename_ack] // one gets through 
      }
      array_obj_ref_539_offset_calculated &-> (array_obj_ref_539_base_plus_offset)
      array_obj_ref_539_root_address_calculated <-& (array_obj_ref_539_base_plus_offset)
      ;;[array_obj_ref_539_word_addrgen] 
      {
        $T [root_register_req] $T [root_register_ack]
      }
      array_obj_ref_539_root_address_calculated &-> (array_obj_ref_539_word_addrgen)
      array_obj_ref_539_word_address_calculated <-& (array_obj_ref_539_word_addrgen)
      ;;[array_obj_ref_539_Sample] 
      {
        ;;[array_obj_ref_539_Split] 
        {
          $T [split_req] $T [split_ack]
        }
        ||[word_access_start] 
        {
          ;;[word_0] 
          {
            $T [rr] $T [ra] 
          }
        }
      }
      ;;[array_obj_ref_539_Update] 
      {
        ||[word_access_complete] 
        {
          ;;[word_0] 
          {
            $T [cr] $T [ca] 
          }
        }
      }
      array_obj_ref_539_sample_start_ <-& (array_obj_ref_539_word_address_calculated)
      array_obj_ref_539_sample_start_ &-> (array_obj_ref_539_Sample)
      array_obj_ref_539_sample_completed_ <-& (array_obj_ref_539_Sample)
      array_obj_ref_539_sample_completed_ &-> ($null)
      array_obj_ref_539_update_start_ &-> (array_obj_ref_539_Update)
      array_obj_ref_539_update_completed_ <-& (array_obj_ref_539_Update)
      // start: Forward dependencies from rdata_ifmap2 to transition array_obj_ref_539_sample_start_
      array_obj_ref_539_sample_start_ <-& (call_stmt_536_update_completed_)
      // done: Forward dependencies from rdata_ifmap2 to transition array_obj_ref_539_sample_start_
      // end:  	ifmaps[2 ][col_to_be_replaced] := rdata_ifmap2// bits of buffering = 16. 
      // start:  	ifmaps2[1 ][col_to_be_replaced] := rdata_ifmap2// bits of buffering = 16. 
      //  file prog.linked.opt.aa, line 165
      // Source expression
      // rdata_ifmap2
      // Target expression
      // ifmaps2[1 ][col_to_be_replaced]
      $T[array_obj_ref_544_sample_start_] 
      $T[array_obj_ref_544_sample_completed_] 
      $T[array_obj_ref_544_update_start_] 
      $T[array_obj_ref_544_update_completed_] 
      $T[array_obj_ref_544_word_address_calculated] 
      $T[array_obj_ref_544_root_address_calculated] 
      $T[array_obj_ref_544_offset_calculated] 
      $T[array_obj_ref_544_index_resized_1] 
      $T[array_obj_ref_544_index_scaled_1] 
      $T[array_obj_ref_544_index_computed_1] 
      // col_to_be_replaced
      // start: Forward dependencies from col_to_be_replaced to transition array_obj_ref_544_index_computed_1
      // done: Forward dependencies from col_to_be_replaced to transition array_obj_ref_544_index_computed_1
      ;;[array_obj_ref_544_index_resize_1] 
      {
        $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
      }
      array_obj_ref_544_index_computed_1 &-> (array_obj_ref_544_index_resize_1)
      array_obj_ref_544_index_resized_1 <-& (array_obj_ref_544_index_resize_1)
      ;;[array_obj_ref_544_index_scale_1] 
      {
        $T [scale_rename_req] $T [scale_rename_ack] // rename 
      }
      array_obj_ref_544_index_resized_1 &-> (array_obj_ref_544_index_scale_1)
      array_obj_ref_544_index_scaled_1 <-& (array_obj_ref_544_index_scale_1)
      $T[array_obj_ref_544_final_index_sum_regn_sample_complete] 
      $T[array_obj_ref_544_final_index_sum_regn_update_start] 
      ;;[array_obj_ref_544_final_index_sum_regn_Sample] 
      {
        $T [req] $T [ack] 
      }
      ;;[array_obj_ref_544_final_index_sum_regn_Update] 
      {
        $T [req] $T [ack] 
      }
      array_obj_ref_544_index_scaled_1 &-> (array_obj_ref_544_final_index_sum_regn_Sample)
      array_obj_ref_544_final_index_sum_regn_sample_complete <-& (array_obj_ref_544_final_index_sum_regn_Sample)
      array_obj_ref_544_final_index_sum_regn_update_start &-> (array_obj_ref_544_final_index_sum_regn_Update)
      array_obj_ref_544_offset_calculated <-& (array_obj_ref_544_final_index_sum_regn_Update)
      ;;[array_obj_ref_544_base_plus_offset] 
      {
        $T [sum_rename_req] $T [sum_rename_ack] // one gets through 
      }
      array_obj_ref_544_offset_calculated &-> (array_obj_ref_544_base_plus_offset)
      array_obj_ref_544_root_address_calculated <-& (array_obj_ref_544_base_plus_offset)
      ;;[array_obj_ref_544_word_addrgen] 
      {
        $T [root_register_req] $T [root_register_ack]
      }
      array_obj_ref_544_root_address_calculated &-> (array_obj_ref_544_word_addrgen)
      array_obj_ref_544_word_address_calculated <-& (array_obj_ref_544_word_addrgen)
      ;;[array_obj_ref_544_Sample] 
      {
        ;;[array_obj_ref_544_Split] 
        {
          $T [split_req] $T [split_ack]
        }
        ||[word_access_start] 
        {
          ;;[word_0] 
          {
            $T [rr] $T [ra] 
          }
        }
      }
      ;;[array_obj_ref_544_Update] 
      {
        ||[word_access_complete] 
        {
          ;;[word_0] 
          {
            $T [cr] $T [ca] 
          }
        }
      }
      array_obj_ref_544_sample_start_ <-& (array_obj_ref_544_word_address_calculated)
      array_obj_ref_544_sample_start_ &-> (array_obj_ref_544_Sample)
      array_obj_ref_544_sample_completed_ <-& (array_obj_ref_544_Sample)
      array_obj_ref_544_sample_completed_ &-> ($null)
      array_obj_ref_544_update_start_ &-> (array_obj_ref_544_Update)
      array_obj_ref_544_update_completed_ <-& (array_obj_ref_544_Update)
      // start: Forward dependencies from rdata_ifmap2 to transition array_obj_ref_544_sample_start_
      array_obj_ref_544_sample_start_ <-& (call_stmt_536_update_completed_)
      // done: Forward dependencies from rdata_ifmap2 to transition array_obj_ref_544_sample_start_
      // end:  	ifmaps2[1 ][col_to_be_replaced] := rdata_ifmap2// bits of buffering = 16. 
      // start: 	$call accessMem (read_signal rowI_3 J_3 write_data_zero ) (rdata_ifmap3 ) 
      //  file prog.linked.opt.aa, line 166
      $T[call_stmt_552_sample_start_] 
      $T[call_stmt_552_sample_completed_] 
      $T[call_stmt_552_update_start_] 
      $T[call_stmt_552_update_completed_] 
      // Call input argument 0
      // Call input argument 1
      // rowI_3
      // Call input argument 2
      // J_3
      // Call input argument 3
      // start: Forward dependencies from rowI_3 to transition call_stmt_552_sample_start_
      call_stmt_552_sample_start_ <-& (type_cast_229_update_completed_)
      // done: Forward dependencies from rowI_3 to transition call_stmt_552_sample_start_
      // start: Forward dependencies from J_3 to transition call_stmt_552_sample_start_
      call_stmt_552_sample_start_ <-& (type_cast_502_update_completed_)
      // done: Forward dependencies from J_3 to transition call_stmt_552_sample_start_
      ;;[call_stmt_552_Sample] 
      {
        $T [crr] $T [cra] 
      }
      ;;[call_stmt_552_Update] 
      {
        $T [ccr] $T [cca] 
      }
      call_stmt_552_sample_start_ &-> (call_stmt_552_Sample)
      call_stmt_552_sample_completed_ <-& (call_stmt_552_Sample)
      call_stmt_552_sample_completed_ &-> ($null)
      call_stmt_552_update_start_ &-> (call_stmt_552_Update)
      call_stmt_552_update_completed_ <-& (call_stmt_552_Update)
      // Call output argument 0
      // (as target) rdata_ifmap3
      // start: WAR dependencies for rdata_ifmap3
      // done: WAR dependencies for rdata_ifmap3
      // end: 	$call accessMem (read_signal rowI_3 J_3 write_data_zero ) (rdata_ifmap3 ) 
      // start:  	ifmaps[3 ][col_to_be_replaced] := rdata_ifmap3// bits of buffering = 16. 
      //  file prog.linked.opt.aa, line 167
      // Source expression
      // rdata_ifmap3
      // Target expression
      // ifmaps[3 ][col_to_be_replaced]
      $T[array_obj_ref_555_sample_start_] 
      $T[array_obj_ref_555_sample_completed_] 
      $T[array_obj_ref_555_update_start_] 
      $T[array_obj_ref_555_update_completed_] 
      $T[array_obj_ref_555_word_address_calculated] 
      $T[array_obj_ref_555_root_address_calculated] 
      $T[array_obj_ref_555_offset_calculated] 
      $T[array_obj_ref_555_index_resized_1] 
      $T[array_obj_ref_555_index_scaled_1] 
      $T[array_obj_ref_555_index_computed_1] 
      // col_to_be_replaced
      // start: Forward dependencies from col_to_be_replaced to transition array_obj_ref_555_index_computed_1
      // done: Forward dependencies from col_to_be_replaced to transition array_obj_ref_555_index_computed_1
      ;;[array_obj_ref_555_index_resize_1] 
      {
        $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
      }
      array_obj_ref_555_index_computed_1 &-> (array_obj_ref_555_index_resize_1)
      array_obj_ref_555_index_resized_1 <-& (array_obj_ref_555_index_resize_1)
      ;;[array_obj_ref_555_index_scale_1] 
      {
        $T [scale_rename_req] $T [scale_rename_ack] // rename 
      }
      array_obj_ref_555_index_resized_1 &-> (array_obj_ref_555_index_scale_1)
      array_obj_ref_555_index_scaled_1 <-& (array_obj_ref_555_index_scale_1)
      $T[array_obj_ref_555_final_index_sum_regn_sample_complete] 
      $T[array_obj_ref_555_final_index_sum_regn_update_start] 
      ;;[array_obj_ref_555_final_index_sum_regn_Sample] 
      {
        $T [req] $T [ack] 
      }
      ;;[array_obj_ref_555_final_index_sum_regn_Update] 
      {
        $T [req] $T [ack] 
      }
      array_obj_ref_555_index_scaled_1 &-> (array_obj_ref_555_final_index_sum_regn_Sample)
      array_obj_ref_555_final_index_sum_regn_sample_complete <-& (array_obj_ref_555_final_index_sum_regn_Sample)
      array_obj_ref_555_final_index_sum_regn_update_start &-> (array_obj_ref_555_final_index_sum_regn_Update)
      array_obj_ref_555_offset_calculated <-& (array_obj_ref_555_final_index_sum_regn_Update)
      ;;[array_obj_ref_555_base_plus_offset] 
      {
        $T [sum_rename_req] $T [sum_rename_ack] // one gets through 
      }
      array_obj_ref_555_offset_calculated &-> (array_obj_ref_555_base_plus_offset)
      array_obj_ref_555_root_address_calculated <-& (array_obj_ref_555_base_plus_offset)
      ;;[array_obj_ref_555_word_addrgen] 
      {
        $T [root_register_req] $T [root_register_ack]
      }
      array_obj_ref_555_root_address_calculated &-> (array_obj_ref_555_word_addrgen)
      array_obj_ref_555_word_address_calculated <-& (array_obj_ref_555_word_addrgen)
      ;;[array_obj_ref_555_Sample] 
      {
        ;;[array_obj_ref_555_Split] 
        {
          $T [split_req] $T [split_ack]
        }
        ||[word_access_start] 
        {
          ;;[word_0] 
          {
            $T [rr] $T [ra] 
          }
        }
      }
      ;;[array_obj_ref_555_Update] 
      {
        ||[word_access_complete] 
        {
          ;;[word_0] 
          {
            $T [cr] $T [ca] 
          }
        }
      }
      array_obj_ref_555_sample_start_ <-& (array_obj_ref_555_word_address_calculated)
      array_obj_ref_555_sample_start_ &-> (array_obj_ref_555_Sample)
      array_obj_ref_555_sample_completed_ <-& (array_obj_ref_555_Sample)
      array_obj_ref_555_sample_completed_ &-> ($null)
      array_obj_ref_555_update_start_ &-> (array_obj_ref_555_Update)
      array_obj_ref_555_update_completed_ <-& (array_obj_ref_555_Update)
      // start: Forward dependencies from rdata_ifmap3 to transition array_obj_ref_555_sample_start_
      array_obj_ref_555_sample_start_ <-& (call_stmt_552_update_completed_)
      // done: Forward dependencies from rdata_ifmap3 to transition array_obj_ref_555_sample_start_
      // end:  	ifmaps[3 ][col_to_be_replaced] := rdata_ifmap3// bits of buffering = 16. 
      // start:  	ifmaps2[2 ][col_to_be_replaced] := rdata_ifmap3// bits of buffering = 16. 
      //  file prog.linked.opt.aa, line 168
      // Source expression
      // rdata_ifmap3
      // Target expression
      // ifmaps2[2 ][col_to_be_replaced]
      $T[array_obj_ref_560_sample_start_] 
      $T[array_obj_ref_560_sample_completed_] 
      $T[array_obj_ref_560_update_start_] 
      $T[array_obj_ref_560_update_completed_] 
      $T[array_obj_ref_560_word_address_calculated] 
      $T[array_obj_ref_560_root_address_calculated] 
      $T[array_obj_ref_560_offset_calculated] 
      $T[array_obj_ref_560_index_resized_1] 
      $T[array_obj_ref_560_index_scaled_1] 
      $T[array_obj_ref_560_index_computed_1] 
      // col_to_be_replaced
      // start: Forward dependencies from col_to_be_replaced to transition array_obj_ref_560_index_computed_1
      // done: Forward dependencies from col_to_be_replaced to transition array_obj_ref_560_index_computed_1
      ;;[array_obj_ref_560_index_resize_1] 
      {
        $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
      }
      array_obj_ref_560_index_computed_1 &-> (array_obj_ref_560_index_resize_1)
      array_obj_ref_560_index_resized_1 <-& (array_obj_ref_560_index_resize_1)
      ;;[array_obj_ref_560_index_scale_1] 
      {
        $T [scale_rename_req] $T [scale_rename_ack] // rename 
      }
      array_obj_ref_560_index_resized_1 &-> (array_obj_ref_560_index_scale_1)
      array_obj_ref_560_index_scaled_1 <-& (array_obj_ref_560_index_scale_1)
      $T[array_obj_ref_560_final_index_sum_regn_sample_complete] 
      $T[array_obj_ref_560_final_index_sum_regn_update_start] 
      ;;[array_obj_ref_560_final_index_sum_regn_Sample] 
      {
        $T [req] $T [ack] 
      }
      ;;[array_obj_ref_560_final_index_sum_regn_Update] 
      {
        $T [req] $T [ack] 
      }
      array_obj_ref_560_index_scaled_1 &-> (array_obj_ref_560_final_index_sum_regn_Sample)
      array_obj_ref_560_final_index_sum_regn_sample_complete <-& (array_obj_ref_560_final_index_sum_regn_Sample)
      array_obj_ref_560_final_index_sum_regn_update_start &-> (array_obj_ref_560_final_index_sum_regn_Update)
      array_obj_ref_560_offset_calculated <-& (array_obj_ref_560_final_index_sum_regn_Update)
      ;;[array_obj_ref_560_base_plus_offset] 
      {
        $T [sum_rename_req] $T [sum_rename_ack] // one gets through 
      }
      array_obj_ref_560_offset_calculated &-> (array_obj_ref_560_base_plus_offset)
      array_obj_ref_560_root_address_calculated <-& (array_obj_ref_560_base_plus_offset)
      ;;[array_obj_ref_560_word_addrgen] 
      {
        $T [root_register_req] $T [root_register_ack]
      }
      array_obj_ref_560_root_address_calculated &-> (array_obj_ref_560_word_addrgen)
      array_obj_ref_560_word_address_calculated <-& (array_obj_ref_560_word_addrgen)
      ;;[array_obj_ref_560_Sample] 
      {
        ;;[array_obj_ref_560_Split] 
        {
          $T [split_req] $T [split_ack]
        }
        ||[word_access_start] 
        {
          ;;[word_0] 
          {
            $T [rr] $T [ra] 
          }
        }
      }
      ;;[array_obj_ref_560_Update] 
      {
        ||[word_access_complete] 
        {
          ;;[word_0] 
          {
            $T [cr] $T [ca] 
          }
        }
      }
      array_obj_ref_560_sample_start_ <-& (array_obj_ref_560_word_address_calculated)
      array_obj_ref_560_sample_start_ &-> (array_obj_ref_560_Sample)
      array_obj_ref_560_sample_completed_ <-& (array_obj_ref_560_Sample)
      array_obj_ref_560_sample_completed_ &-> ($null)
      array_obj_ref_560_update_start_ &-> (array_obj_ref_560_Update)
      array_obj_ref_560_update_completed_ <-& (array_obj_ref_560_Update)
      // start: Forward dependencies from rdata_ifmap3 to transition array_obj_ref_560_sample_start_
      array_obj_ref_560_sample_start_ <-& (call_stmt_552_update_completed_)
      // done: Forward dependencies from rdata_ifmap3 to transition array_obj_ref_560_sample_start_
      // end:  	ifmaps2[2 ][col_to_be_replaced] := rdata_ifmap3// bits of buffering = 16. 
      // start: 	$call accessMem (read_signal rowI_4 J_3 write_data_zero ) (rdata_ifmap4 ) 
      //  file prog.linked.opt.aa, line 169
      $T[call_stmt_568_sample_start_] 
      $T[call_stmt_568_sample_completed_] 
      $T[call_stmt_568_update_start_] 
      $T[call_stmt_568_update_completed_] 
      // Call input argument 0
      // Call input argument 1
      // rowI_4
      // Call input argument 2
      // J_3
      // Call input argument 3
      // start: Forward dependencies from rowI_4 to transition call_stmt_568_sample_start_
      call_stmt_568_sample_start_ <-& (type_cast_235_update_completed_)
      // done: Forward dependencies from rowI_4 to transition call_stmt_568_sample_start_
      // start: Forward dependencies from J_3 to transition call_stmt_568_sample_start_
      call_stmt_568_sample_start_ <-& (type_cast_502_update_completed_)
      // done: Forward dependencies from J_3 to transition call_stmt_568_sample_start_
      ;;[call_stmt_568_Sample] 
      {
        $T [crr] $T [cra] 
      }
      ;;[call_stmt_568_Update] 
      {
        $T [ccr] $T [cca] 
      }
      call_stmt_568_sample_start_ &-> (call_stmt_568_Sample)
      call_stmt_568_sample_completed_ <-& (call_stmt_568_Sample)
      call_stmt_568_sample_completed_ &-> ($null)
      call_stmt_568_update_start_ &-> (call_stmt_568_Update)
      call_stmt_568_update_completed_ <-& (call_stmt_568_Update)
      // Call output argument 0
      // (as target) rdata_ifmap4
      // start: WAR dependencies for rdata_ifmap4
      // done: WAR dependencies for rdata_ifmap4
      // end: 	$call accessMem (read_signal rowI_4 J_3 write_data_zero ) (rdata_ifmap4 ) 
      // start:  	ifmaps2[3 ][col_to_be_replaced] := rdata_ifmap4// bits of buffering = 16. 
      //  file prog.linked.opt.aa, line 170
      // Source expression
      // rdata_ifmap4
      // Target expression
      // ifmaps2[3 ][col_to_be_replaced]
      $T[array_obj_ref_571_sample_start_] 
      $T[array_obj_ref_571_sample_completed_] 
      $T[array_obj_ref_571_update_start_] 
      $T[array_obj_ref_571_update_completed_] 
      $T[array_obj_ref_571_word_address_calculated] 
      $T[array_obj_ref_571_root_address_calculated] 
      $T[array_obj_ref_571_offset_calculated] 
      $T[array_obj_ref_571_index_resized_1] 
      $T[array_obj_ref_571_index_scaled_1] 
      $T[array_obj_ref_571_index_computed_1] 
      // col_to_be_replaced
      // start: Forward dependencies from col_to_be_replaced to transition array_obj_ref_571_index_computed_1
      // done: Forward dependencies from col_to_be_replaced to transition array_obj_ref_571_index_computed_1
      ;;[array_obj_ref_571_index_resize_1] 
      {
        $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
      }
      array_obj_ref_571_index_computed_1 &-> (array_obj_ref_571_index_resize_1)
      array_obj_ref_571_index_resized_1 <-& (array_obj_ref_571_index_resize_1)
      ;;[array_obj_ref_571_index_scale_1] 
      {
        $T [scale_rename_req] $T [scale_rename_ack] // rename 
      }
      array_obj_ref_571_index_resized_1 &-> (array_obj_ref_571_index_scale_1)
      array_obj_ref_571_index_scaled_1 <-& (array_obj_ref_571_index_scale_1)
      $T[array_obj_ref_571_final_index_sum_regn_sample_complete] 
      $T[array_obj_ref_571_final_index_sum_regn_update_start] 
      ;;[array_obj_ref_571_final_index_sum_regn_Sample] 
      {
        $T [req] $T [ack] 
      }
      ;;[array_obj_ref_571_final_index_sum_regn_Update] 
      {
        $T [req] $T [ack] 
      }
      array_obj_ref_571_index_scaled_1 &-> (array_obj_ref_571_final_index_sum_regn_Sample)
      array_obj_ref_571_final_index_sum_regn_sample_complete <-& (array_obj_ref_571_final_index_sum_regn_Sample)
      array_obj_ref_571_final_index_sum_regn_update_start &-> (array_obj_ref_571_final_index_sum_regn_Update)
      array_obj_ref_571_offset_calculated <-& (array_obj_ref_571_final_index_sum_regn_Update)
      ;;[array_obj_ref_571_base_plus_offset] 
      {
        $T [sum_rename_req] $T [sum_rename_ack] // one gets through 
      }
      array_obj_ref_571_offset_calculated &-> (array_obj_ref_571_base_plus_offset)
      array_obj_ref_571_root_address_calculated <-& (array_obj_ref_571_base_plus_offset)
      ;;[array_obj_ref_571_word_addrgen] 
      {
        $T [root_register_req] $T [root_register_ack]
      }
      array_obj_ref_571_root_address_calculated &-> (array_obj_ref_571_word_addrgen)
      array_obj_ref_571_word_address_calculated <-& (array_obj_ref_571_word_addrgen)
      ;;[array_obj_ref_571_Sample] 
      {
        ;;[array_obj_ref_571_Split] 
        {
          $T [split_req] $T [split_ack]
        }
        ||[word_access_start] 
        {
          ;;[word_0] 
          {
            $T [rr] $T [ra] 
          }
        }
      }
      ;;[array_obj_ref_571_Update] 
      {
        ||[word_access_complete] 
        {
          ;;[word_0] 
          {
            $T [cr] $T [ca] 
          }
        }
      }
      array_obj_ref_571_sample_start_ <-& (array_obj_ref_571_word_address_calculated)
      array_obj_ref_571_sample_start_ &-> (array_obj_ref_571_Sample)
      array_obj_ref_571_sample_completed_ <-& (array_obj_ref_571_Sample)
      array_obj_ref_571_sample_completed_ &-> ($null)
      array_obj_ref_571_update_start_ &-> (array_obj_ref_571_Update)
      array_obj_ref_571_update_completed_ <-& (array_obj_ref_571_Update)
      // start: Forward dependencies from rdata_ifmap4 to transition array_obj_ref_571_sample_start_
      array_obj_ref_571_sample_start_ <-& (call_stmt_568_update_completed_)
      // done: Forward dependencies from rdata_ifmap4 to transition array_obj_ref_571_sample_start_
      // end:  	ifmaps2[3 ][col_to_be_replaced] := rdata_ifmap4// bits of buffering = 16. 
      // start:  	finished := ($bitcast ($uint<2>) 1  )// bits of buffering = 2. 
      //  file prog.linked.opt.aa, line 171
      // constant! 
      // finished
      // write to interface object
      // end:  	finished := ($bitcast ($uint<2>) 1  )// bits of buffering = 2. 
      // load-store dependencies..
      // memory-space  memory_space_2
      //  array_obj_ref_304 store
      //  array_obj_ref_323 store
      $T [array_obj_ref_304_array_obj_ref_323_delay] $delay
      // array_obj_ref_304(store) -> array_obj_ref_323(store)
      array_obj_ref_323_sample_start_ <-& (array_obj_ref_304_array_obj_ref_323_delay)
      array_obj_ref_304_array_obj_ref_323_delay <-& (array_obj_ref_304_sample_completed_)
      //  array_obj_ref_342 store
      $T [array_obj_ref_323_array_obj_ref_342_delay] $delay
      // array_obj_ref_323(store) -> array_obj_ref_342(store)
      array_obj_ref_342_sample_start_ <-& (array_obj_ref_323_array_obj_ref_342_delay)
      array_obj_ref_323_array_obj_ref_342_delay <-& (array_obj_ref_323_sample_completed_)
      //  array_obj_ref_361 store
      $T [array_obj_ref_342_array_obj_ref_361_delay] $delay
      // array_obj_ref_342(store) -> array_obj_ref_361(store)
      array_obj_ref_361_sample_start_ <-& (array_obj_ref_342_array_obj_ref_361_delay)
      array_obj_ref_342_array_obj_ref_361_delay <-& (array_obj_ref_342_sample_completed_)
      //  array_obj_ref_380 store
      $T [array_obj_ref_361_array_obj_ref_380_delay] $delay
      // array_obj_ref_361(store) -> array_obj_ref_380(store)
      array_obj_ref_380_sample_start_ <-& (array_obj_ref_361_array_obj_ref_380_delay)
      array_obj_ref_361_array_obj_ref_380_delay <-& (array_obj_ref_361_sample_completed_)
      //  array_obj_ref_399 store
      $T [array_obj_ref_380_array_obj_ref_399_delay] $delay
      // array_obj_ref_380(store) -> array_obj_ref_399(store)
      array_obj_ref_399_sample_start_ <-& (array_obj_ref_380_array_obj_ref_399_delay)
      array_obj_ref_380_array_obj_ref_399_delay <-& (array_obj_ref_380_sample_completed_)
      //  array_obj_ref_418 store
      $T [array_obj_ref_399_array_obj_ref_418_delay] $delay
      // array_obj_ref_399(store) -> array_obj_ref_418(store)
      array_obj_ref_418_sample_start_ <-& (array_obj_ref_399_array_obj_ref_418_delay)
      array_obj_ref_399_array_obj_ref_418_delay <-& (array_obj_ref_399_sample_completed_)
      //  array_obj_ref_437 store
      $T [array_obj_ref_418_array_obj_ref_437_delay] $delay
      // array_obj_ref_418(store) -> array_obj_ref_437(store)
      array_obj_ref_437_sample_start_ <-& (array_obj_ref_418_array_obj_ref_437_delay)
      array_obj_ref_418_array_obj_ref_437_delay <-& (array_obj_ref_418_sample_completed_)
      //  array_obj_ref_456 store
      $T [array_obj_ref_437_array_obj_ref_456_delay] $delay
      // array_obj_ref_437(store) -> array_obj_ref_456(store)
      array_obj_ref_456_sample_start_ <-& (array_obj_ref_437_array_obj_ref_456_delay)
      array_obj_ref_437_array_obj_ref_456_delay <-& (array_obj_ref_437_sample_completed_)
      //  array_obj_ref_469 store
      $T [array_obj_ref_456_array_obj_ref_469_delay] $delay
      // array_obj_ref_456(store) -> array_obj_ref_469(store)
      array_obj_ref_469_sample_start_ <-& (array_obj_ref_456_array_obj_ref_469_delay)
      array_obj_ref_456_array_obj_ref_469_delay <-& (array_obj_ref_456_sample_completed_)
      //  array_obj_ref_482 store
      $T [array_obj_ref_469_array_obj_ref_482_delay] $delay
      // array_obj_ref_469(store) -> array_obj_ref_482(store)
      array_obj_ref_482_sample_start_ <-& (array_obj_ref_469_array_obj_ref_482_delay)
      array_obj_ref_469_array_obj_ref_482_delay <-& (array_obj_ref_469_sample_completed_)
      //  array_obj_ref_495 store
      $T [array_obj_ref_482_array_obj_ref_495_delay] $delay
      // array_obj_ref_482(store) -> array_obj_ref_495(store)
      array_obj_ref_495_sample_start_ <-& (array_obj_ref_482_array_obj_ref_495_delay)
      array_obj_ref_482_array_obj_ref_495_delay <-& (array_obj_ref_482_sample_completed_)
      //  array_obj_ref_528 store
      $T [array_obj_ref_495_array_obj_ref_528_delay] $delay
      // array_obj_ref_495(store) -> array_obj_ref_528(store)
      array_obj_ref_528_sample_start_ <-& (array_obj_ref_495_array_obj_ref_528_delay)
      array_obj_ref_495_array_obj_ref_528_delay <-& (array_obj_ref_495_sample_completed_)
      //  array_obj_ref_544 store
      $T [array_obj_ref_528_array_obj_ref_544_delay] $delay
      // array_obj_ref_528(store) -> array_obj_ref_544(store)
      array_obj_ref_544_sample_start_ <-& (array_obj_ref_528_array_obj_ref_544_delay)
      array_obj_ref_528_array_obj_ref_544_delay <-& (array_obj_ref_528_sample_completed_)
      //  array_obj_ref_560 store
      $T [array_obj_ref_544_array_obj_ref_560_delay] $delay
      // array_obj_ref_544(store) -> array_obj_ref_560(store)
      array_obj_ref_560_sample_start_ <-& (array_obj_ref_544_array_obj_ref_560_delay)
      array_obj_ref_544_array_obj_ref_560_delay <-& (array_obj_ref_544_sample_completed_)
      //  array_obj_ref_571 store
      $T [array_obj_ref_560_array_obj_ref_571_delay] $delay
      // array_obj_ref_560(store) -> array_obj_ref_571(store)
      array_obj_ref_571_sample_start_ <-& (array_obj_ref_560_array_obj_ref_571_delay)
      array_obj_ref_560_array_obj_ref_571_delay <-& (array_obj_ref_560_sample_completed_)
      // memory-space  memory_space_3
      //  call_stmt_255 store
      //  call_stmt_268 store
      $T [call_stmt_255_call_stmt_268_delay] $delay
      // call_stmt_255(store) -> call_stmt_268(store)
      call_stmt_268_sample_start_ <-& (call_stmt_255_call_stmt_268_delay)
      call_stmt_255_call_stmt_268_delay <-& (call_stmt_255_update_completed_)
      //  call_stmt_281 store
      $T [call_stmt_268_call_stmt_281_delay] $delay
      // call_stmt_268(store) -> call_stmt_281(store)
      call_stmt_281_sample_start_ <-& (call_stmt_268_call_stmt_281_delay)
      call_stmt_268_call_stmt_281_delay <-& (call_stmt_268_update_completed_)
      //  call_stmt_294 store
      $T [call_stmt_281_call_stmt_294_delay] $delay
      // call_stmt_281(store) -> call_stmt_294(store)
      call_stmt_294_sample_start_ <-& (call_stmt_281_call_stmt_294_delay)
      call_stmt_281_call_stmt_294_delay <-& (call_stmt_281_update_completed_)
      //  call_stmt_313 store
      $T [call_stmt_294_call_stmt_313_delay] $delay
      // call_stmt_294(store) -> call_stmt_313(store)
      call_stmt_313_sample_start_ <-& (call_stmt_294_call_stmt_313_delay)
      call_stmt_294_call_stmt_313_delay <-& (call_stmt_294_update_completed_)
      //  call_stmt_332 store
      $T [call_stmt_313_call_stmt_332_delay] $delay
      // call_stmt_313(store) -> call_stmt_332(store)
      call_stmt_332_sample_start_ <-& (call_stmt_313_call_stmt_332_delay)
      call_stmt_313_call_stmt_332_delay <-& (call_stmt_313_update_completed_)
      //  call_stmt_351 store
      $T [call_stmt_332_call_stmt_351_delay] $delay
      // call_stmt_332(store) -> call_stmt_351(store)
      call_stmt_351_sample_start_ <-& (call_stmt_332_call_stmt_351_delay)
      call_stmt_332_call_stmt_351_delay <-& (call_stmt_332_update_completed_)
      //  call_stmt_370 store
      $T [call_stmt_351_call_stmt_370_delay] $delay
      // call_stmt_351(store) -> call_stmt_370(store)
      call_stmt_370_sample_start_ <-& (call_stmt_351_call_stmt_370_delay)
      call_stmt_351_call_stmt_370_delay <-& (call_stmt_351_update_completed_)
      //  call_stmt_389 store
      $T [call_stmt_370_call_stmt_389_delay] $delay
      // call_stmt_370(store) -> call_stmt_389(store)
      call_stmt_389_sample_start_ <-& (call_stmt_370_call_stmt_389_delay)
      call_stmt_370_call_stmt_389_delay <-& (call_stmt_370_update_completed_)
      //  call_stmt_408 store
      $T [call_stmt_389_call_stmt_408_delay] $delay
      // call_stmt_389(store) -> call_stmt_408(store)
      call_stmt_408_sample_start_ <-& (call_stmt_389_call_stmt_408_delay)
      call_stmt_389_call_stmt_408_delay <-& (call_stmt_389_update_completed_)
      //  call_stmt_427 store
      $T [call_stmt_408_call_stmt_427_delay] $delay
      // call_stmt_408(store) -> call_stmt_427(store)
      call_stmt_427_sample_start_ <-& (call_stmt_408_call_stmt_427_delay)
      call_stmt_408_call_stmt_427_delay <-& (call_stmt_408_update_completed_)
      //  call_stmt_446 store
      $T [call_stmt_427_call_stmt_446_delay] $delay
      // call_stmt_427(store) -> call_stmt_446(store)
      call_stmt_446_sample_start_ <-& (call_stmt_427_call_stmt_446_delay)
      call_stmt_427_call_stmt_446_delay <-& (call_stmt_427_update_completed_)
      //  call_stmt_465 store
      $T [call_stmt_446_call_stmt_465_delay] $delay
      // call_stmt_446(store) -> call_stmt_465(store)
      call_stmt_465_sample_start_ <-& (call_stmt_446_call_stmt_465_delay)
      call_stmt_446_call_stmt_465_delay <-& (call_stmt_446_update_completed_)
      //  call_stmt_478 store
      $T [call_stmt_465_call_stmt_478_delay] $delay
      // call_stmt_465(store) -> call_stmt_478(store)
      call_stmt_478_sample_start_ <-& (call_stmt_465_call_stmt_478_delay)
      call_stmt_465_call_stmt_478_delay <-& (call_stmt_465_update_completed_)
      //  call_stmt_491 store
      $T [call_stmt_478_call_stmt_491_delay] $delay
      // call_stmt_478(store) -> call_stmt_491(store)
      call_stmt_491_sample_start_ <-& (call_stmt_478_call_stmt_491_delay)
      call_stmt_478_call_stmt_491_delay <-& (call_stmt_478_update_completed_)
      //  call_stmt_509 store
      $T [call_stmt_491_call_stmt_509_delay] $delay
      // call_stmt_491(store) -> call_stmt_509(store)
      call_stmt_509_sample_start_ <-& (call_stmt_491_call_stmt_509_delay)
      call_stmt_491_call_stmt_509_delay <-& (call_stmt_491_update_completed_)
      //  call_stmt_520 store
      $T [call_stmt_509_call_stmt_520_delay] $delay
      // call_stmt_509(store) -> call_stmt_520(store)
      call_stmt_520_sample_start_ <-& (call_stmt_509_call_stmt_520_delay)
      call_stmt_509_call_stmt_520_delay <-& (call_stmt_509_update_completed_)
      //  call_stmt_536 store
      $T [call_stmt_520_call_stmt_536_delay] $delay
      // call_stmt_520(store) -> call_stmt_536(store)
      call_stmt_536_sample_start_ <-& (call_stmt_520_call_stmt_536_delay)
      call_stmt_520_call_stmt_536_delay <-& (call_stmt_520_update_completed_)
      //  call_stmt_552 store
      $T [call_stmt_536_call_stmt_552_delay] $delay
      // call_stmt_536(store) -> call_stmt_552(store)
      call_stmt_552_sample_start_ <-& (call_stmt_536_call_stmt_552_delay)
      call_stmt_536_call_stmt_552_delay <-& (call_stmt_536_update_completed_)
      //  call_stmt_568 store
      $T [call_stmt_552_call_stmt_568_delay] $delay
      // call_stmt_552(store) -> call_stmt_568(store)
      call_stmt_568_sample_start_ <-& (call_stmt_552_call_stmt_568_delay)
      call_stmt_552_call_stmt_568_delay <-& (call_stmt_552_update_completed_)
      // memory-space  memory_space_1
      //  array_obj_ref_259 store
      //  array_obj_ref_272 store
      $T [array_obj_ref_259_array_obj_ref_272_delay] $delay
      // array_obj_ref_259(store) -> array_obj_ref_272(store)
      array_obj_ref_272_sample_start_ <-& (array_obj_ref_259_array_obj_ref_272_delay)
      array_obj_ref_259_array_obj_ref_272_delay <-& (array_obj_ref_259_sample_completed_)
      //  array_obj_ref_285 store
      $T [array_obj_ref_272_array_obj_ref_285_delay] $delay
      // array_obj_ref_272(store) -> array_obj_ref_285(store)
      array_obj_ref_285_sample_start_ <-& (array_obj_ref_272_array_obj_ref_285_delay)
      array_obj_ref_272_array_obj_ref_285_delay <-& (array_obj_ref_272_sample_completed_)
      //  array_obj_ref_298 store
      $T [array_obj_ref_285_array_obj_ref_298_delay] $delay
      // array_obj_ref_285(store) -> array_obj_ref_298(store)
      array_obj_ref_298_sample_start_ <-& (array_obj_ref_285_array_obj_ref_298_delay)
      array_obj_ref_285_array_obj_ref_298_delay <-& (array_obj_ref_285_sample_completed_)
      //  array_obj_ref_317 store
      $T [array_obj_ref_298_array_obj_ref_317_delay] $delay
      // array_obj_ref_298(store) -> array_obj_ref_317(store)
      array_obj_ref_317_sample_start_ <-& (array_obj_ref_298_array_obj_ref_317_delay)
      array_obj_ref_298_array_obj_ref_317_delay <-& (array_obj_ref_298_sample_completed_)
      //  array_obj_ref_336 store
      $T [array_obj_ref_317_array_obj_ref_336_delay] $delay
      // array_obj_ref_317(store) -> array_obj_ref_336(store)
      array_obj_ref_336_sample_start_ <-& (array_obj_ref_317_array_obj_ref_336_delay)
      array_obj_ref_317_array_obj_ref_336_delay <-& (array_obj_ref_317_sample_completed_)
      //  array_obj_ref_355 store
      $T [array_obj_ref_336_array_obj_ref_355_delay] $delay
      // array_obj_ref_336(store) -> array_obj_ref_355(store)
      array_obj_ref_355_sample_start_ <-& (array_obj_ref_336_array_obj_ref_355_delay)
      array_obj_ref_336_array_obj_ref_355_delay <-& (array_obj_ref_336_sample_completed_)
      //  array_obj_ref_374 store
      $T [array_obj_ref_355_array_obj_ref_374_delay] $delay
      // array_obj_ref_355(store) -> array_obj_ref_374(store)
      array_obj_ref_374_sample_start_ <-& (array_obj_ref_355_array_obj_ref_374_delay)
      array_obj_ref_355_array_obj_ref_374_delay <-& (array_obj_ref_355_sample_completed_)
      //  array_obj_ref_393 store
      $T [array_obj_ref_374_array_obj_ref_393_delay] $delay
      // array_obj_ref_374(store) -> array_obj_ref_393(store)
      array_obj_ref_393_sample_start_ <-& (array_obj_ref_374_array_obj_ref_393_delay)
      array_obj_ref_374_array_obj_ref_393_delay <-& (array_obj_ref_374_sample_completed_)
      //  array_obj_ref_412 store
      $T [array_obj_ref_393_array_obj_ref_412_delay] $delay
      // array_obj_ref_393(store) -> array_obj_ref_412(store)
      array_obj_ref_412_sample_start_ <-& (array_obj_ref_393_array_obj_ref_412_delay)
      array_obj_ref_393_array_obj_ref_412_delay <-& (array_obj_ref_393_sample_completed_)
      //  array_obj_ref_431 store
      $T [array_obj_ref_412_array_obj_ref_431_delay] $delay
      // array_obj_ref_412(store) -> array_obj_ref_431(store)
      array_obj_ref_431_sample_start_ <-& (array_obj_ref_412_array_obj_ref_431_delay)
      array_obj_ref_412_array_obj_ref_431_delay <-& (array_obj_ref_412_sample_completed_)
      //  array_obj_ref_450 store
      $T [array_obj_ref_431_array_obj_ref_450_delay] $delay
      // array_obj_ref_431(store) -> array_obj_ref_450(store)
      array_obj_ref_450_sample_start_ <-& (array_obj_ref_431_array_obj_ref_450_delay)
      array_obj_ref_431_array_obj_ref_450_delay <-& (array_obj_ref_431_sample_completed_)
      //  array_obj_ref_512 store
      $T [array_obj_ref_450_array_obj_ref_512_delay] $delay
      // array_obj_ref_450(store) -> array_obj_ref_512(store)
      array_obj_ref_512_sample_start_ <-& (array_obj_ref_450_array_obj_ref_512_delay)
      array_obj_ref_450_array_obj_ref_512_delay <-& (array_obj_ref_450_sample_completed_)
      //  array_obj_ref_523 store
      $T [array_obj_ref_512_array_obj_ref_523_delay] $delay
      // array_obj_ref_512(store) -> array_obj_ref_523(store)
      array_obj_ref_523_sample_start_ <-& (array_obj_ref_512_array_obj_ref_523_delay)
      array_obj_ref_512_array_obj_ref_523_delay <-& (array_obj_ref_512_sample_completed_)
      //  array_obj_ref_539 store
      $T [array_obj_ref_523_array_obj_ref_539_delay] $delay
      // array_obj_ref_523(store) -> array_obj_ref_539(store)
      array_obj_ref_539_sample_start_ <-& (array_obj_ref_523_array_obj_ref_539_delay)
      array_obj_ref_523_array_obj_ref_539_delay <-& (array_obj_ref_523_sample_completed_)
      //  array_obj_ref_555 store
      $T [array_obj_ref_539_array_obj_ref_555_delay] $delay
      // array_obj_ref_539(store) -> array_obj_ref_555(store)
      array_obj_ref_555_sample_start_ <-& (array_obj_ref_539_array_obj_ref_555_delay)
      array_obj_ref_539_array_obj_ref_555_delay <-& (array_obj_ref_539_sample_completed_)
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %initIfMaps
    //  file prog.linked.opt.aa, line 104
    // ( $mux (J == 0 ) ($bitcast ($uint<1>) 0  )  ($bitcast ($uint<1>) 1  ) ) 
    // 0 
    $constant $W[konst_201_wire_constant] : $int<5> := _b00000// 0
    // ($bitcast ($uint<1>) 0  )
    $constant $W[type_cast_204_wire_constant] : $int<1> := _b0// 0
    // ($bitcast ($uint<1>) 1  )
    $constant $W[type_cast_206_wire_constant] : $int<1> := _b1// 1
    // 1 
    $constant $W[konst_215_wire_constant] : $int<6> := _b000001// 1
    // 2 
    $constant $W[konst_221_wire_constant] : $int<6> := _b000010// 2
    // 3 
    $constant $W[konst_227_wire_constant] : $int<6> := _b000011// 3
    // 4 
    $constant $W[konst_233_wire_constant] : $int<6> := _b000100// 4
    // 	col0 := ($bitcast ($uint<5>) 0  )// bits of buffering = 5. 
    //  file prog.linked.opt.aa, line 115
    $constant $W[col0_240] : $int<5> := _b00000 // 0
    // 	col1 := ($bitcast ($uint<5>) 1  )// bits of buffering = 5. 
    //  file prog.linked.opt.aa, line 116
    $constant $W[col1_244] : $int<5> := _b00001 // 1
    // 	col2 := ($bitcast ($uint<5>) 2  )// bits of buffering = 5. 
    //  file prog.linked.opt.aa, line 117
    $constant $W[col2_248] : $int<5> := _b00010 // 2
    // 	$guard (~checkJZero) $call accessMem (read_signal rowI col0 write_data_zero ) (rdata_I00 ) 
    //  file prog.linked.opt.aa, line 118
    // read_signal
    $constant $W[R_read_signal_250_wire_constant] : $int<1> := _b1// 1
    // write_data_zero
    $constant $W[R_write_data_zero_253_wire_constant] : $int<16> := _b0000000000000000// 0
    // ifmaps[0 ][0 ]
    $constant $W[array_obj_ref_259_word_address_0] : $pointer<memory_space_1> := _b0000
    // 	$guard (~checkJZero) $call accessMem (read_signal rowI col1 write_data_zero ) (rdata_I01 ) 
    //  file prog.linked.opt.aa, line 120
    // read_signal
    $constant $W[R_read_signal_263_wire_constant] : $int<1> := _b1// 1
    // write_data_zero
    $constant $W[R_write_data_zero_266_wire_constant] : $int<16> := _b0000000000000000// 0
    // ifmaps[0 ][1 ]
    $constant $W[array_obj_ref_272_word_address_0] : $pointer<memory_space_1> := _b0001
    // 	$guard (~checkJZero) $call accessMem (read_signal rowI col2 write_data_zero ) (rdata_I02 ) 
    //  file prog.linked.opt.aa, line 122
    // read_signal
    $constant $W[R_read_signal_276_wire_constant] : $int<1> := _b1// 1
    // write_data_zero
    $constant $W[R_write_data_zero_279_wire_constant] : $int<16> := _b0000000000000000// 0
    // ifmaps[0 ][2 ]
    $constant $W[array_obj_ref_285_word_address_0] : $pointer<memory_space_1> := _b0010
    // 	$guard (~checkJZero) $call accessMem (read_signal rowI_1 col0 write_data_zero ) (rdata_I10 ) 
    //  file prog.linked.opt.aa, line 124
    // read_signal
    $constant $W[R_read_signal_289_wire_constant] : $int<1> := _b1// 1
    // write_data_zero
    $constant $W[R_write_data_zero_292_wire_constant] : $int<16> := _b0000000000000000// 0
    // ifmaps[1 ][0 ]
    $constant $W[array_obj_ref_298_word_address_0] : $pointer<memory_space_1> := _b0100
    // ifmaps2[0 ][0 ]
    $constant $W[array_obj_ref_304_word_address_0] : $pointer<memory_space_2> := _b0000
    // 	$guard (~checkJZero) $call accessMem (read_signal rowI_1 col1 write_data_zero ) (rdata_I11 ) 
    //  file prog.linked.opt.aa, line 127
    // read_signal
    $constant $W[R_read_signal_308_wire_constant] : $int<1> := _b1// 1
    // write_data_zero
    $constant $W[R_write_data_zero_311_wire_constant] : $int<16> := _b0000000000000000// 0
    // ifmaps[1 ][1 ]
    $constant $W[array_obj_ref_317_word_address_0] : $pointer<memory_space_1> := _b0101
    // ifmaps2[0 ][1 ]
    $constant $W[array_obj_ref_323_word_address_0] : $pointer<memory_space_2> := _b0001
    // 	$guard (~checkJZero) $call accessMem (read_signal rowI_1 col2 write_data_zero ) (rdata_I12 ) 
    //  file prog.linked.opt.aa, line 130
    // read_signal
    $constant $W[R_read_signal_327_wire_constant] : $int<1> := _b1// 1
    // write_data_zero
    $constant $W[R_write_data_zero_330_wire_constant] : $int<16> := _b0000000000000000// 0
    // ifmaps[1 ][2 ]
    $constant $W[array_obj_ref_336_word_address_0] : $pointer<memory_space_1> := _b0110
    // ifmaps2[0 ][2 ]
    $constant $W[array_obj_ref_342_word_address_0] : $pointer<memory_space_2> := _b0010
    // 	$guard (~checkJZero) $call accessMem (read_signal rowI_2 col0 write_data_zero ) (rdata_I20 ) 
    //  file prog.linked.opt.aa, line 133
    // read_signal
    $constant $W[R_read_signal_346_wire_constant] : $int<1> := _b1// 1
    // write_data_zero
    $constant $W[R_write_data_zero_349_wire_constant] : $int<16> := _b0000000000000000// 0
    // ifmaps[2 ][0 ]
    $constant $W[array_obj_ref_355_word_address_0] : $pointer<memory_space_1> := _b1000
    // ifmaps2[1 ][0 ]
    $constant $W[array_obj_ref_361_word_address_0] : $pointer<memory_space_2> := _b0100
    // 	$guard (~checkJZero) $call accessMem (read_signal rowI_2 col1 write_data_zero ) (rdata_I21 ) 
    //  file prog.linked.opt.aa, line 136
    // read_signal
    $constant $W[R_read_signal_365_wire_constant] : $int<1> := _b1// 1
    // write_data_zero
    $constant $W[R_write_data_zero_368_wire_constant] : $int<16> := _b0000000000000000// 0
    // ifmaps[2 ][1 ]
    $constant $W[array_obj_ref_374_word_address_0] : $pointer<memory_space_1> := _b1001
    // ifmaps2[1 ][1 ]
    $constant $W[array_obj_ref_380_word_address_0] : $pointer<memory_space_2> := _b0101
    // 	$guard (~checkJZero) $call accessMem (read_signal rowI_2 col2 write_data_zero ) (rdata_I22 ) 
    //  file prog.linked.opt.aa, line 139
    // read_signal
    $constant $W[R_read_signal_384_wire_constant] : $int<1> := _b1// 1
    // write_data_zero
    $constant $W[R_write_data_zero_387_wire_constant] : $int<16> := _b0000000000000000// 0
    // ifmaps[2 ][2 ]
    $constant $W[array_obj_ref_393_word_address_0] : $pointer<memory_space_1> := _b1010
    // ifmaps2[1 ][2 ]
    $constant $W[array_obj_ref_399_word_address_0] : $pointer<memory_space_2> := _b0110
    // 	$guard (~checkJZero) $call accessMem (read_signal rowI_3 col0 write_data_zero ) (rdata_I30 ) 
    //  file prog.linked.opt.aa, line 142
    // read_signal
    $constant $W[R_read_signal_403_wire_constant] : $int<1> := _b1// 1
    // write_data_zero
    $constant $W[R_write_data_zero_406_wire_constant] : $int<16> := _b0000000000000000// 0
    // ifmaps[3 ][0 ]
    $constant $W[array_obj_ref_412_word_address_0] : $pointer<memory_space_1> := _b1100
    // ifmaps2[2 ][0 ]
    $constant $W[array_obj_ref_418_word_address_0] : $pointer<memory_space_2> := _b1000
    // 	$guard (~checkJZero) $call accessMem (read_signal rowI_3 col1 write_data_zero ) (rdata_I31 ) 
    //  file prog.linked.opt.aa, line 145
    // read_signal
    $constant $W[R_read_signal_422_wire_constant] : $int<1> := _b1// 1
    // write_data_zero
    $constant $W[R_write_data_zero_425_wire_constant] : $int<16> := _b0000000000000000// 0
    // ifmaps[3 ][1 ]
    $constant $W[array_obj_ref_431_word_address_0] : $pointer<memory_space_1> := _b1101
    // ifmaps2[2 ][1 ]
    $constant $W[array_obj_ref_437_word_address_0] : $pointer<memory_space_2> := _b1001
    // 	$guard (~checkJZero) $call accessMem (read_signal rowI_3 col2 write_data_zero ) (rdata_I32 ) 
    //  file prog.linked.opt.aa, line 148
    // read_signal
    $constant $W[R_read_signal_441_wire_constant] : $int<1> := _b1// 1
    // write_data_zero
    $constant $W[R_write_data_zero_444_wire_constant] : $int<16> := _b0000000000000000// 0
    // ifmaps[3 ][2 ]
    $constant $W[array_obj_ref_450_word_address_0] : $pointer<memory_space_1> := _b1110
    // ifmaps2[2 ][2 ]
    $constant $W[array_obj_ref_456_word_address_0] : $pointer<memory_space_2> := _b1010
    // 	$guard (~checkJZero) $call accessMem (read_signal rowI_4 col0 write_data_zero ) (rdata_I40 ) 
    //  file prog.linked.opt.aa, line 151
    // read_signal
    $constant $W[R_read_signal_460_wire_constant] : $int<1> := _b1// 1
    // write_data_zero
    $constant $W[R_write_data_zero_463_wire_constant] : $int<16> := _b0000000000000000// 0
    // ifmaps2[3 ][0 ]
    $constant $W[array_obj_ref_469_word_address_0] : $pointer<memory_space_2> := _b1100
    // 	$guard (~checkJZero) $call accessMem (read_signal rowI_4 col1 write_data_zero ) (rdata_I41 ) 
    //  file prog.linked.opt.aa, line 153
    // read_signal
    $constant $W[R_read_signal_473_wire_constant] : $int<1> := _b1// 1
    // write_data_zero
    $constant $W[R_write_data_zero_476_wire_constant] : $int<16> := _b0000000000000000// 0
    // ifmaps2[3 ][1 ]
    $constant $W[array_obj_ref_482_word_address_0] : $pointer<memory_space_2> := _b1101
    // 	$guard (~checkJZero) $call accessMem (read_signal rowI_4 col2 write_data_zero ) (rdata_I42 ) 
    //  file prog.linked.opt.aa, line 155
    // read_signal
    $constant $W[R_read_signal_486_wire_constant] : $int<1> := _b1// 1
    // write_data_zero
    $constant $W[R_write_data_zero_489_wire_constant] : $int<16> := _b0000000000000000// 0
    // ifmaps2[3 ][2 ]
    $constant $W[array_obj_ref_495_word_address_0] : $pointer<memory_space_2> := _b1110
    // 3 
    $constant $W[konst_500_wire_constant] : $int<5> := _b00011// 3
    // 	$call accessMem (read_signal rowI J_3 write_data_zero ) (rdata_ifmap0 ) 
    //  file prog.linked.opt.aa, line 158
    // read_signal
    $constant $W[R_read_signal_504_wire_constant] : $int<1> := _b1// 1
    // write_data_zero
    $constant $W[R_write_data_zero_507_wire_constant] : $int<16> := _b0000000000000000// 0
    // ifmaps[0 ][col_to_be_replaced]
    $constant $W[array_obj_ref_512_constant_part_of_offset] : $int<4> := _b0000// 0
    $constant $W[array_obj_ref_512_resized_base_address] : $int<4> := _b0000// 0
    $constant $W[array_obj_ref_512_offset_scale_factor_0] : $int<4> := _b0100// 4
    $constant $W[array_obj_ref_512_offset_scale_factor_1] : $int<4> := _b0001// 1
    $constant $W[array_obj_ref_512_word_offset_0] : $int<4> := _b0000// 0
    // 	$call accessMem (read_signal rowI_1 J_3 write_data_zero ) (rdata_ifmap1 ) 
    //  file prog.linked.opt.aa, line 160
    // read_signal
    $constant $W[R_read_signal_515_wire_constant] : $int<1> := _b1// 1
    // write_data_zero
    $constant $W[R_write_data_zero_518_wire_constant] : $int<16> := _b0000000000000000// 0
    // ifmaps[1 ][col_to_be_replaced]
    $constant $W[array_obj_ref_523_constant_part_of_offset] : $int<4> := _b0100// 4
    $constant $W[array_obj_ref_523_resized_base_address] : $int<4> := _b0000// 0
    $constant $W[array_obj_ref_523_offset_scale_factor_0] : $int<4> := _b0100// 4
    $constant $W[array_obj_ref_523_offset_scale_factor_1] : $int<4> := _b0001// 1
    $constant $W[array_obj_ref_523_word_offset_0] : $int<4> := _b0000// 0
    // ifmaps2[0 ][col_to_be_replaced]
    $constant $W[array_obj_ref_528_constant_part_of_offset] : $int<4> := _b0000// 0
    $constant $W[array_obj_ref_528_resized_base_address] : $int<4> := _b0000// 0
    $constant $W[array_obj_ref_528_offset_scale_factor_0] : $int<4> := _b0100// 4
    $constant $W[array_obj_ref_528_offset_scale_factor_1] : $int<4> := _b0001// 1
    $constant $W[array_obj_ref_528_word_offset_0] : $int<4> := _b0000// 0
    // 	$call accessMem (read_signal rowI_2 J_3 write_data_zero ) (rdata_ifmap2 ) 
    //  file prog.linked.opt.aa, line 163
    // read_signal
    $constant $W[R_read_signal_531_wire_constant] : $int<1> := _b1// 1
    // write_data_zero
    $constant $W[R_write_data_zero_534_wire_constant] : $int<16> := _b0000000000000000// 0
    // ifmaps[2 ][col_to_be_replaced]
    $constant $W[array_obj_ref_539_constant_part_of_offset] : $int<4> := _b1000// 8
    $constant $W[array_obj_ref_539_resized_base_address] : $int<4> := _b0000// 0
    $constant $W[array_obj_ref_539_offset_scale_factor_0] : $int<4> := _b0100// 4
    $constant $W[array_obj_ref_539_offset_scale_factor_1] : $int<4> := _b0001// 1
    $constant $W[array_obj_ref_539_word_offset_0] : $int<4> := _b0000// 0
    // ifmaps2[1 ][col_to_be_replaced]
    $constant $W[array_obj_ref_544_constant_part_of_offset] : $int<4> := _b0100// 4
    $constant $W[array_obj_ref_544_resized_base_address] : $int<4> := _b0000// 0
    $constant $W[array_obj_ref_544_offset_scale_factor_0] : $int<4> := _b0100// 4
    $constant $W[array_obj_ref_544_offset_scale_factor_1] : $int<4> := _b0001// 1
    $constant $W[array_obj_ref_544_word_offset_0] : $int<4> := _b0000// 0
    // 	$call accessMem (read_signal rowI_3 J_3 write_data_zero ) (rdata_ifmap3 ) 
    //  file prog.linked.opt.aa, line 166
    // read_signal
    $constant $W[R_read_signal_547_wire_constant] : $int<1> := _b1// 1
    // write_data_zero
    $constant $W[R_write_data_zero_550_wire_constant] : $int<16> := _b0000000000000000// 0
    // ifmaps[3 ][col_to_be_replaced]
    $constant $W[array_obj_ref_555_constant_part_of_offset] : $int<4> := _b1100// 12
    $constant $W[array_obj_ref_555_resized_base_address] : $int<4> := _b0000// 0
    $constant $W[array_obj_ref_555_offset_scale_factor_0] : $int<4> := _b0100// 4
    $constant $W[array_obj_ref_555_offset_scale_factor_1] : $int<4> := _b0001// 1
    $constant $W[array_obj_ref_555_word_offset_0] : $int<4> := _b0000// 0
    // ifmaps2[2 ][col_to_be_replaced]
    $constant $W[array_obj_ref_560_constant_part_of_offset] : $int<4> := _b1000// 8
    $constant $W[array_obj_ref_560_resized_base_address] : $int<4> := _b0000// 0
    $constant $W[array_obj_ref_560_offset_scale_factor_0] : $int<4> := _b0100// 4
    $constant $W[array_obj_ref_560_offset_scale_factor_1] : $int<4> := _b0001// 1
    $constant $W[array_obj_ref_560_word_offset_0] : $int<4> := _b0000// 0
    // 	$call accessMem (read_signal rowI_4 J_3 write_data_zero ) (rdata_ifmap4 ) 
    //  file prog.linked.opt.aa, line 169
    // read_signal
    $constant $W[R_read_signal_563_wire_constant] : $int<1> := _b1// 1
    // write_data_zero
    $constant $W[R_write_data_zero_566_wire_constant] : $int<16> := _b0000000000000000// 0
    // ifmaps2[3 ][col_to_be_replaced]
    $constant $W[array_obj_ref_571_constant_part_of_offset] : $int<4> := _b1100// 12
    $constant $W[array_obj_ref_571_resized_base_address] : $int<4> := _b0000// 0
    $constant $W[array_obj_ref_571_offset_scale_factor_0] : $int<4> := _b0100// 4
    $constant $W[array_obj_ref_571_offset_scale_factor_1] : $int<4> := _b0001// 1
    $constant $W[array_obj_ref_571_word_offset_0] : $int<4> := _b0000// 0
    // 	finished := ($bitcast ($uint<2>) 1  )// bits of buffering = 2. 
    //  file prog.linked.opt.aa, line 171
    // 	$volatile checkJZero := ( $mux (J == 0 ) ($bitcast ($uint<1>) 0  )  ($bitcast ($uint<1>) 1  ) ) 
    //  file prog.linked.opt.aa, line 109
    // (J == 0 )
    $intermediate $W[EQ_u5_u1_202_wire] : $int<1>
    // checkJZero
    $W[checkJZero_208] : $int<1>
    // 	rowI := ($bitcast ($uint<6>) I )// bits of buffering = 6. 
    //  file prog.linked.opt.aa, line 110
    // rowI
    $W[rowI_212] : $int<6>
    // 	rowI_1 := ($bitcast ($uint<6>) (I + 1 ) )// bits of buffering = 6. 
    //  file prog.linked.opt.aa, line 111
    // (I + 1 )
    $intermediate $W[ADD_u6_u6_216_wire] : $int<6>
    // rowI_1
    $W[rowI_1_218] : $int<6>
    // 	rowI_2 := ($bitcast ($uint<6>) (I + 2 ) )// bits of buffering = 6. 
    //  file prog.linked.opt.aa, line 112
    // (I + 2 )
    $intermediate $W[ADD_u6_u6_222_wire] : $int<6>
    // rowI_2
    $W[rowI_2_224] : $int<6>
    // 	rowI_3 := ($bitcast ($uint<6>) (I + 3 ) )// bits of buffering = 6. 
    //  file prog.linked.opt.aa, line 113
    // (I + 3 )
    $intermediate $W[ADD_u6_u6_228_wire] : $int<6>
    // rowI_3
    $W[rowI_3_230] : $int<6>
    // 	rowI_4 := ($bitcast ($uint<6>) (I + 4 ) )// bits of buffering = 6. 
    //  file prog.linked.opt.aa, line 114
    // (I + 4 )
    $intermediate $W[ADD_u6_u6_234_wire] : $int<6>
    // rowI_4
    $W[rowI_4_236] : $int<6>
    // 	$guard (~checkJZero) $call accessMem (read_signal rowI col0 write_data_zero ) (rdata_I00 ) 
    //  file prog.linked.opt.aa, line 118
    // rdata_I00
    $W[rdata_I00_255] : $int<16>
    // 	$guard (~checkJZero) ifmaps[0 ][0 ] := rdata_I00// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 119
    // ifmaps[0 ][0 ]
    $W[array_obj_ref_259_data_0] : $int<16>
    // 	$guard (~checkJZero) $call accessMem (read_signal rowI col1 write_data_zero ) (rdata_I01 ) 
    //  file prog.linked.opt.aa, line 120
    // rdata_I01
    $W[rdata_I01_268] : $int<16>
    // 	$guard (~checkJZero) ifmaps[0 ][1 ] := rdata_I01// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 121
    // ifmaps[0 ][1 ]
    $W[array_obj_ref_272_data_0] : $int<16>
    // 	$guard (~checkJZero) $call accessMem (read_signal rowI col2 write_data_zero ) (rdata_I02 ) 
    //  file prog.linked.opt.aa, line 122
    // rdata_I02
    $W[rdata_I02_281] : $int<16>
    // 	$guard (~checkJZero) ifmaps[0 ][2 ] := rdata_I02// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 123
    // ifmaps[0 ][2 ]
    $W[array_obj_ref_285_data_0] : $int<16>
    // 	$guard (~checkJZero) $call accessMem (read_signal rowI_1 col0 write_data_zero ) (rdata_I10 ) 
    //  file prog.linked.opt.aa, line 124
    // rdata_I10
    $W[rdata_I10_294] : $int<16>
    // 	$guard (~checkJZero) ifmaps[1 ][0 ] := rdata_I10// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 125
    // ifmaps[1 ][0 ]
    $W[array_obj_ref_298_data_0] : $int<16>
    // 	$guard (~checkJZero) ifmaps2[0 ][0 ] := rdata_I10// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 126
    // ifmaps2[0 ][0 ]
    $W[array_obj_ref_304_data_0] : $int<16>
    // 	$guard (~checkJZero) $call accessMem (read_signal rowI_1 col1 write_data_zero ) (rdata_I11 ) 
    //  file prog.linked.opt.aa, line 127
    // rdata_I11
    $W[rdata_I11_313] : $int<16>
    // 	$guard (~checkJZero) ifmaps[1 ][1 ] := rdata_I11// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 128
    // ifmaps[1 ][1 ]
    $W[array_obj_ref_317_data_0] : $int<16>
    // 	$guard (~checkJZero) ifmaps2[0 ][1 ] := rdata_I11// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 129
    // ifmaps2[0 ][1 ]
    $W[array_obj_ref_323_data_0] : $int<16>
    // 	$guard (~checkJZero) $call accessMem (read_signal rowI_1 col2 write_data_zero ) (rdata_I12 ) 
    //  file prog.linked.opt.aa, line 130
    // rdata_I12
    $W[rdata_I12_332] : $int<16>
    // 	$guard (~checkJZero) ifmaps[1 ][2 ] := rdata_I12// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 131
    // ifmaps[1 ][2 ]
    $W[array_obj_ref_336_data_0] : $int<16>
    // 	$guard (~checkJZero) ifmaps2[0 ][2 ] := rdata_I12// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 132
    // ifmaps2[0 ][2 ]
    $W[array_obj_ref_342_data_0] : $int<16>
    // 	$guard (~checkJZero) $call accessMem (read_signal rowI_2 col0 write_data_zero ) (rdata_I20 ) 
    //  file prog.linked.opt.aa, line 133
    // rdata_I20
    $W[rdata_I20_351] : $int<16>
    // 	$guard (~checkJZero) ifmaps[2 ][0 ] := rdata_I20// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 134
    // ifmaps[2 ][0 ]
    $W[array_obj_ref_355_data_0] : $int<16>
    // 	$guard (~checkJZero) ifmaps2[1 ][0 ] := rdata_I20// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 135
    // ifmaps2[1 ][0 ]
    $W[array_obj_ref_361_data_0] : $int<16>
    // 	$guard (~checkJZero) $call accessMem (read_signal rowI_2 col1 write_data_zero ) (rdata_I21 ) 
    //  file prog.linked.opt.aa, line 136
    // rdata_I21
    $W[rdata_I21_370] : $int<16>
    // 	$guard (~checkJZero) ifmaps[2 ][1 ] := rdata_I21// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 137
    // ifmaps[2 ][1 ]
    $W[array_obj_ref_374_data_0] : $int<16>
    // 	$guard (~checkJZero) ifmaps2[1 ][1 ] := rdata_I21// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 138
    // ifmaps2[1 ][1 ]
    $W[array_obj_ref_380_data_0] : $int<16>
    // 	$guard (~checkJZero) $call accessMem (read_signal rowI_2 col2 write_data_zero ) (rdata_I22 ) 
    //  file prog.linked.opt.aa, line 139
    // rdata_I22
    $W[rdata_I22_389] : $int<16>
    // 	$guard (~checkJZero) ifmaps[2 ][2 ] := rdata_I22// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 140
    // ifmaps[2 ][2 ]
    $W[array_obj_ref_393_data_0] : $int<16>
    // 	$guard (~checkJZero) ifmaps2[1 ][2 ] := rdata_I22// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 141
    // ifmaps2[1 ][2 ]
    $W[array_obj_ref_399_data_0] : $int<16>
    // 	$guard (~checkJZero) $call accessMem (read_signal rowI_3 col0 write_data_zero ) (rdata_I30 ) 
    //  file prog.linked.opt.aa, line 142
    // rdata_I30
    $W[rdata_I30_408] : $int<16>
    // 	$guard (~checkJZero) ifmaps[3 ][0 ] := rdata_I30// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 143
    // ifmaps[3 ][0 ]
    $W[array_obj_ref_412_data_0] : $int<16>
    // 	$guard (~checkJZero) ifmaps2[2 ][0 ] := rdata_I30// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 144
    // ifmaps2[2 ][0 ]
    $W[array_obj_ref_418_data_0] : $int<16>
    // 	$guard (~checkJZero) $call accessMem (read_signal rowI_3 col1 write_data_zero ) (rdata_I31 ) 
    //  file prog.linked.opt.aa, line 145
    // rdata_I31
    $W[rdata_I31_427] : $int<16>
    // 	$guard (~checkJZero) ifmaps[3 ][1 ] := rdata_I31// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 146
    // ifmaps[3 ][1 ]
    $W[array_obj_ref_431_data_0] : $int<16>
    // 	$guard (~checkJZero) ifmaps2[2 ][1 ] := rdata_I31// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 147
    // ifmaps2[2 ][1 ]
    $W[array_obj_ref_437_data_0] : $int<16>
    // 	$guard (~checkJZero) $call accessMem (read_signal rowI_3 col2 write_data_zero ) (rdata_I32 ) 
    //  file prog.linked.opt.aa, line 148
    // rdata_I32
    $W[rdata_I32_446] : $int<16>
    // 	$guard (~checkJZero) ifmaps[3 ][2 ] := rdata_I32// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 149
    // ifmaps[3 ][2 ]
    $W[array_obj_ref_450_data_0] : $int<16>
    // 	$guard (~checkJZero) ifmaps2[2 ][2 ] := rdata_I32// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 150
    // ifmaps2[2 ][2 ]
    $W[array_obj_ref_456_data_0] : $int<16>
    // 	$guard (~checkJZero) $call accessMem (read_signal rowI_4 col0 write_data_zero ) (rdata_I40 ) 
    //  file prog.linked.opt.aa, line 151
    // rdata_I40
    $W[rdata_I40_465] : $int<16>
    // 	$guard (~checkJZero) ifmaps2[3 ][0 ] := rdata_I40// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 152
    // ifmaps2[3 ][0 ]
    $W[array_obj_ref_469_data_0] : $int<16>
    // 	$guard (~checkJZero) $call accessMem (read_signal rowI_4 col1 write_data_zero ) (rdata_I41 ) 
    //  file prog.linked.opt.aa, line 153
    // rdata_I41
    $W[rdata_I41_478] : $int<16>
    // 	$guard (~checkJZero) ifmaps2[3 ][1 ] := rdata_I41// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 154
    // ifmaps2[3 ][1 ]
    $W[array_obj_ref_482_data_0] : $int<16>
    // 	$guard (~checkJZero) $call accessMem (read_signal rowI_4 col2 write_data_zero ) (rdata_I42 ) 
    //  file prog.linked.opt.aa, line 155
    // rdata_I42
    $W[rdata_I42_491] : $int<16>
    // 	$guard (~checkJZero) ifmaps2[3 ][2 ] := rdata_I42// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 156
    // ifmaps2[3 ][2 ]
    $W[array_obj_ref_495_data_0] : $int<16>
    // 	J_3 := ($bitcast ($uint<5>) (J + 3 ) )// bits of buffering = 5. 
    //  file prog.linked.opt.aa, line 157
    // (J + 3 )
    $intermediate $W[ADD_u5_u5_501_wire] : $int<5>
    // J_3
    $W[J_3_503] : $int<5>
    // 	$call accessMem (read_signal rowI J_3 write_data_zero ) (rdata_ifmap0 ) 
    //  file prog.linked.opt.aa, line 158
    // rdata_ifmap0
    $W[rdata_ifmap0_509] : $int<16>
    // 	ifmaps[0 ][col_to_be_replaced] := rdata_ifmap0// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 159
    // ifmaps[0 ][col_to_be_replaced]
    $intermediate $W[R_col_to_be_replaced_511_resized] : $int<4>
    $intermediate $W[R_col_to_be_replaced_511_scaled] : $int<4>
    $intermediate $W[array_obj_ref_512_final_offset] : $int<4>
    $intermediate $W[array_obj_ref_512_root_address] : $int<4>
    $W[array_obj_ref_512_word_address_0] : $pointer<memory_space_1>
    $W[array_obj_ref_512_data_0] : $int<16>
    // 	$call accessMem (read_signal rowI_1 J_3 write_data_zero ) (rdata_ifmap1 ) 
    //  file prog.linked.opt.aa, line 160
    // rdata_ifmap1
    $W[rdata_ifmap1_520] : $int<16>
    // 	ifmaps[1 ][col_to_be_replaced] := rdata_ifmap1// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 161
    // ifmaps[1 ][col_to_be_replaced]
    $intermediate $W[R_col_to_be_replaced_522_resized] : $int<4>
    $intermediate $W[R_col_to_be_replaced_522_scaled] : $int<4>
    $intermediate $W[array_obj_ref_523_final_offset] : $int<4>
    $intermediate $W[array_obj_ref_523_root_address] : $int<4>
    $W[array_obj_ref_523_word_address_0] : $pointer<memory_space_1>
    $W[array_obj_ref_523_data_0] : $int<16>
    // 	ifmaps2[0 ][col_to_be_replaced] := rdata_ifmap1// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 162
    // ifmaps2[0 ][col_to_be_replaced]
    $intermediate $W[R_col_to_be_replaced_527_resized] : $int<4>
    $intermediate $W[R_col_to_be_replaced_527_scaled] : $int<4>
    $intermediate $W[array_obj_ref_528_final_offset] : $int<4>
    $intermediate $W[array_obj_ref_528_root_address] : $int<4>
    $W[array_obj_ref_528_word_address_0] : $pointer<memory_space_2>
    $W[array_obj_ref_528_data_0] : $int<16>
    // 	$call accessMem (read_signal rowI_2 J_3 write_data_zero ) (rdata_ifmap2 ) 
    //  file prog.linked.opt.aa, line 163
    // rdata_ifmap2
    $W[rdata_ifmap2_536] : $int<16>
    // 	ifmaps[2 ][col_to_be_replaced] := rdata_ifmap2// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 164
    // ifmaps[2 ][col_to_be_replaced]
    $intermediate $W[R_col_to_be_replaced_538_resized] : $int<4>
    $intermediate $W[R_col_to_be_replaced_538_scaled] : $int<4>
    $intermediate $W[array_obj_ref_539_final_offset] : $int<4>
    $intermediate $W[array_obj_ref_539_root_address] : $int<4>
    $W[array_obj_ref_539_word_address_0] : $pointer<memory_space_1>
    $W[array_obj_ref_539_data_0] : $int<16>
    // 	ifmaps2[1 ][col_to_be_replaced] := rdata_ifmap2// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 165
    // ifmaps2[1 ][col_to_be_replaced]
    $intermediate $W[R_col_to_be_replaced_543_resized] : $int<4>
    $intermediate $W[R_col_to_be_replaced_543_scaled] : $int<4>
    $intermediate $W[array_obj_ref_544_final_offset] : $int<4>
    $intermediate $W[array_obj_ref_544_root_address] : $int<4>
    $W[array_obj_ref_544_word_address_0] : $pointer<memory_space_2>
    $W[array_obj_ref_544_data_0] : $int<16>
    // 	$call accessMem (read_signal rowI_3 J_3 write_data_zero ) (rdata_ifmap3 ) 
    //  file prog.linked.opt.aa, line 166
    // rdata_ifmap3
    $W[rdata_ifmap3_552] : $int<16>
    // 	ifmaps[3 ][col_to_be_replaced] := rdata_ifmap3// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 167
    // ifmaps[3 ][col_to_be_replaced]
    $intermediate $W[R_col_to_be_replaced_554_resized] : $int<4>
    $intermediate $W[R_col_to_be_replaced_554_scaled] : $int<4>
    $intermediate $W[array_obj_ref_555_final_offset] : $int<4>
    $intermediate $W[array_obj_ref_555_root_address] : $int<4>
    $W[array_obj_ref_555_word_address_0] : $pointer<memory_space_1>
    $W[array_obj_ref_555_data_0] : $int<16>
    // 	ifmaps2[2 ][col_to_be_replaced] := rdata_ifmap3// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 168
    // ifmaps2[2 ][col_to_be_replaced]
    $intermediate $W[R_col_to_be_replaced_559_resized] : $int<4>
    $intermediate $W[R_col_to_be_replaced_559_scaled] : $int<4>
    $intermediate $W[array_obj_ref_560_final_offset] : $int<4>
    $intermediate $W[array_obj_ref_560_root_address] : $int<4>
    $W[array_obj_ref_560_word_address_0] : $pointer<memory_space_2>
    $W[array_obj_ref_560_data_0] : $int<16>
    // 	$call accessMem (read_signal rowI_4 J_3 write_data_zero ) (rdata_ifmap4 ) 
    //  file prog.linked.opt.aa, line 169
    // rdata_ifmap4
    $W[rdata_ifmap4_568] : $int<16>
    // 	ifmaps2[3 ][col_to_be_replaced] := rdata_ifmap4// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 170
    // ifmaps2[3 ][col_to_be_replaced]
    $intermediate $W[R_col_to_be_replaced_570_resized] : $int<4>
    $intermediate $W[R_col_to_be_replaced_570_scaled] : $int<4>
    $intermediate $W[array_obj_ref_571_final_offset] : $int<4>
    $intermediate $W[array_obj_ref_571_root_address] : $int<4>
    $W[array_obj_ref_571_word_address_0] : $pointer<memory_space_2>
    $W[array_obj_ref_571_data_0] : $int<16>
    // 	$volatile checkJZero := ( $mux (J == 0 ) ($bitcast ($uint<1>) 0  )  ($bitcast ($uint<1>) 1  ) ) 
    //  file prog.linked.opt.aa, line 109
    // (J == 0 )
    ==[EQ_u5_u1_202_inst] (J konst_201_wire_constant) (EQ_u5_u1_202_wire)   $flowthrough 
    $delay EQ_u5_u1_202_inst 0
    // ( $mux (J == 0 ) ($bitcast ($uint<1>) 0  )  ($bitcast ($uint<1>) 1  ) ) 
    ? [MUX_207_inst] (EQ_u5_u1_202_wire type_cast_204_wire_constant type_cast_206_wire_constant) (checkJZero_208)  $flowthrough
    // 	rowI := ($bitcast ($uint<6>) I )// bits of buffering = 6. 
    //  file prog.linked.opt.aa, line 110
    // ($bitcast ($uint<6>) I )
    # := [type_cast_211_inst] (I) (rowI_212)   
    $buffering  $out type_cast_211_inst rowI_212 1
    $delay type_cast_211_inst 1
    // 	rowI_1 := ($bitcast ($uint<6>) (I + 1 ) )// bits of buffering = 6. 
    //  file prog.linked.opt.aa, line 111
    // (I + 1 )
    +[ADD_u6_u6_216_inst] (I konst_215_wire_constant) (ADD_u6_u6_216_wire)   $flowthrough 
    $delay ADD_u6_u6_216_inst 0
    // ($bitcast ($uint<6>) (I + 1 ) )
    # := [type_cast_217_inst] (ADD_u6_u6_216_wire) (rowI_1_218)   
    $buffering  $out type_cast_217_inst rowI_1_218 1
    $delay type_cast_217_inst 1
    // 	rowI_2 := ($bitcast ($uint<6>) (I + 2 ) )// bits of buffering = 6. 
    //  file prog.linked.opt.aa, line 112
    // (I + 2 )
    +[ADD_u6_u6_222_inst] (I konst_221_wire_constant) (ADD_u6_u6_222_wire)   $flowthrough 
    $delay ADD_u6_u6_222_inst 0
    // ($bitcast ($uint<6>) (I + 2 ) )
    # := [type_cast_223_inst] (ADD_u6_u6_222_wire) (rowI_2_224)   
    $buffering  $out type_cast_223_inst rowI_2_224 1
    $delay type_cast_223_inst 1
    // 	rowI_3 := ($bitcast ($uint<6>) (I + 3 ) )// bits of buffering = 6. 
    //  file prog.linked.opt.aa, line 113
    // (I + 3 )
    +[ADD_u6_u6_228_inst] (I konst_227_wire_constant) (ADD_u6_u6_228_wire)   $flowthrough 
    $delay ADD_u6_u6_228_inst 0
    // ($bitcast ($uint<6>) (I + 3 ) )
    # := [type_cast_229_inst] (ADD_u6_u6_228_wire) (rowI_3_230)   
    $buffering  $out type_cast_229_inst rowI_3_230 1
    $delay type_cast_229_inst 1
    // 	rowI_4 := ($bitcast ($uint<6>) (I + 4 ) )// bits of buffering = 6. 
    //  file prog.linked.opt.aa, line 114
    // (I + 4 )
    +[ADD_u6_u6_234_inst] (I konst_233_wire_constant) (ADD_u6_u6_234_wire)   $flowthrough 
    $delay ADD_u6_u6_234_inst 0
    // ($bitcast ($uint<6>) (I + 4 ) )
    # := [type_cast_235_inst] (ADD_u6_u6_234_wire) (rowI_4_236)   
    $buffering  $out type_cast_235_inst rowI_4_236 1
    $delay type_cast_235_inst 1
    // 	$guard (~checkJZero) $call accessMem (read_signal rowI col0 write_data_zero ) (rdata_I00 ) 
    //  file prog.linked.opt.aa, line 118
    $call [call_stmt_255_call] $module accessMem(R_read_signal_250_wire_constant rowI_212 col0_240 R_write_data_zero_253_wire_constant) (rdata_I00_255) $guard ( ~ checkJZero_208 )  
    $delay call_stmt_255_call 7
    $buffering  $in call_stmt_255_call R_read_signal_250_wire_constant 1
    $buffering  $in call_stmt_255_call rowI_212 1
    $buffering  $in call_stmt_255_call col0_240 1
    $buffering  $in call_stmt_255_call R_write_data_zero_253_wire_constant 1
    $buffering  $out call_stmt_255_call rdata_I00_255 1
    // 	$guard (~checkJZero) ifmaps[0 ][0 ] := rdata_I00// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 119
    // ifmaps[0 ][0 ]
    $store [array_obj_ref_259_store_0] $to memory_space_1 (array_obj_ref_259_word_address_0 array_obj_ref_259_data_0) $guard ( ~ checkJZero_208 ) 
    $delay array_obj_ref_259_store_0 4
    &/ [array_obj_ref_259_gather_scatter] (rdata_I00_255) (array_obj_ref_259_data_0) $guard ( ~ checkJZero_208 ) 
    $flowthrough 
    // 	$guard (~checkJZero) $call accessMem (read_signal rowI col1 write_data_zero ) (rdata_I01 ) 
    //  file prog.linked.opt.aa, line 120
    $call [call_stmt_268_call] $module accessMem(R_read_signal_263_wire_constant rowI_212 col1_244 R_write_data_zero_266_wire_constant) (rdata_I01_268) $guard ( ~ checkJZero_208 )  
    $delay call_stmt_268_call 7
    $buffering  $in call_stmt_268_call R_read_signal_263_wire_constant 1
    $buffering  $in call_stmt_268_call rowI_212 1
    $buffering  $in call_stmt_268_call col1_244 1
    $buffering  $in call_stmt_268_call R_write_data_zero_266_wire_constant 1
    $buffering  $out call_stmt_268_call rdata_I01_268 1
    // 	$guard (~checkJZero) ifmaps[0 ][1 ] := rdata_I01// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 121
    // ifmaps[0 ][1 ]
    $store [array_obj_ref_272_store_0] $to memory_space_1 (array_obj_ref_272_word_address_0 array_obj_ref_272_data_0) $guard ( ~ checkJZero_208 ) 
    $delay array_obj_ref_272_store_0 4
    &/ [array_obj_ref_272_gather_scatter] (rdata_I01_268) (array_obj_ref_272_data_0) $guard ( ~ checkJZero_208 ) 
    $flowthrough 
    // 	$guard (~checkJZero) $call accessMem (read_signal rowI col2 write_data_zero ) (rdata_I02 ) 
    //  file prog.linked.opt.aa, line 122
    $call [call_stmt_281_call] $module accessMem(R_read_signal_276_wire_constant rowI_212 col2_248 R_write_data_zero_279_wire_constant) (rdata_I02_281) $guard ( ~ checkJZero_208 )  
    $delay call_stmt_281_call 7
    $buffering  $in call_stmt_281_call R_read_signal_276_wire_constant 1
    $buffering  $in call_stmt_281_call rowI_212 1
    $buffering  $in call_stmt_281_call col2_248 1
    $buffering  $in call_stmt_281_call R_write_data_zero_279_wire_constant 1
    $buffering  $out call_stmt_281_call rdata_I02_281 1
    // 	$guard (~checkJZero) ifmaps[0 ][2 ] := rdata_I02// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 123
    // ifmaps[0 ][2 ]
    $store [array_obj_ref_285_store_0] $to memory_space_1 (array_obj_ref_285_word_address_0 array_obj_ref_285_data_0) $guard ( ~ checkJZero_208 ) 
    $delay array_obj_ref_285_store_0 4
    &/ [array_obj_ref_285_gather_scatter] (rdata_I02_281) (array_obj_ref_285_data_0) $guard ( ~ checkJZero_208 ) 
    $flowthrough 
    // 	$guard (~checkJZero) $call accessMem (read_signal rowI_1 col0 write_data_zero ) (rdata_I10 ) 
    //  file prog.linked.opt.aa, line 124
    $call [call_stmt_294_call] $module accessMem(R_read_signal_289_wire_constant rowI_1_218 col0_240 R_write_data_zero_292_wire_constant) (rdata_I10_294) $guard ( ~ checkJZero_208 )  
    $delay call_stmt_294_call 7
    $buffering  $in call_stmt_294_call R_read_signal_289_wire_constant 1
    $buffering  $in call_stmt_294_call rowI_1_218 1
    $buffering  $in call_stmt_294_call col0_240 1
    $buffering  $in call_stmt_294_call R_write_data_zero_292_wire_constant 1
    $buffering  $out call_stmt_294_call rdata_I10_294 1
    // 	$guard (~checkJZero) ifmaps[1 ][0 ] := rdata_I10// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 125
    // ifmaps[1 ][0 ]
    $store [array_obj_ref_298_store_0] $to memory_space_1 (array_obj_ref_298_word_address_0 array_obj_ref_298_data_0) $guard ( ~ checkJZero_208 ) 
    $delay array_obj_ref_298_store_0 4
    &/ [array_obj_ref_298_gather_scatter] (rdata_I10_294) (array_obj_ref_298_data_0) $guard ( ~ checkJZero_208 ) 
    $flowthrough 
    // 	$guard (~checkJZero) ifmaps2[0 ][0 ] := rdata_I10// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 126
    // ifmaps2[0 ][0 ]
    $store [array_obj_ref_304_store_0] $to memory_space_2 (array_obj_ref_304_word_address_0 array_obj_ref_304_data_0) $guard ( ~ checkJZero_208 ) 
    $delay array_obj_ref_304_store_0 4
    &/ [array_obj_ref_304_gather_scatter] (rdata_I10_294) (array_obj_ref_304_data_0) $guard ( ~ checkJZero_208 ) 
    $flowthrough 
    // 	$guard (~checkJZero) $call accessMem (read_signal rowI_1 col1 write_data_zero ) (rdata_I11 ) 
    //  file prog.linked.opt.aa, line 127
    $call [call_stmt_313_call] $module accessMem(R_read_signal_308_wire_constant rowI_1_218 col1_244 R_write_data_zero_311_wire_constant) (rdata_I11_313) $guard ( ~ checkJZero_208 )  
    $delay call_stmt_313_call 7
    $buffering  $in call_stmt_313_call R_read_signal_308_wire_constant 1
    $buffering  $in call_stmt_313_call rowI_1_218 1
    $buffering  $in call_stmt_313_call col1_244 1
    $buffering  $in call_stmt_313_call R_write_data_zero_311_wire_constant 1
    $buffering  $out call_stmt_313_call rdata_I11_313 1
    // 	$guard (~checkJZero) ifmaps[1 ][1 ] := rdata_I11// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 128
    // ifmaps[1 ][1 ]
    $store [array_obj_ref_317_store_0] $to memory_space_1 (array_obj_ref_317_word_address_0 array_obj_ref_317_data_0) $guard ( ~ checkJZero_208 ) 
    $delay array_obj_ref_317_store_0 4
    &/ [array_obj_ref_317_gather_scatter] (rdata_I11_313) (array_obj_ref_317_data_0) $guard ( ~ checkJZero_208 ) 
    $flowthrough 
    // 	$guard (~checkJZero) ifmaps2[0 ][1 ] := rdata_I11// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 129
    // ifmaps2[0 ][1 ]
    $store [array_obj_ref_323_store_0] $to memory_space_2 (array_obj_ref_323_word_address_0 array_obj_ref_323_data_0) $guard ( ~ checkJZero_208 ) 
    $delay array_obj_ref_323_store_0 4
    &/ [array_obj_ref_323_gather_scatter] (rdata_I11_313) (array_obj_ref_323_data_0) $guard ( ~ checkJZero_208 ) 
    $flowthrough 
    // 	$guard (~checkJZero) $call accessMem (read_signal rowI_1 col2 write_data_zero ) (rdata_I12 ) 
    //  file prog.linked.opt.aa, line 130
    $call [call_stmt_332_call] $module accessMem(R_read_signal_327_wire_constant rowI_1_218 col2_248 R_write_data_zero_330_wire_constant) (rdata_I12_332) $guard ( ~ checkJZero_208 )  
    $delay call_stmt_332_call 7
    $buffering  $in call_stmt_332_call R_read_signal_327_wire_constant 1
    $buffering  $in call_stmt_332_call rowI_1_218 1
    $buffering  $in call_stmt_332_call col2_248 1
    $buffering  $in call_stmt_332_call R_write_data_zero_330_wire_constant 1
    $buffering  $out call_stmt_332_call rdata_I12_332 1
    // 	$guard (~checkJZero) ifmaps[1 ][2 ] := rdata_I12// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 131
    // ifmaps[1 ][2 ]
    $store [array_obj_ref_336_store_0] $to memory_space_1 (array_obj_ref_336_word_address_0 array_obj_ref_336_data_0) $guard ( ~ checkJZero_208 ) 
    $delay array_obj_ref_336_store_0 4
    &/ [array_obj_ref_336_gather_scatter] (rdata_I12_332) (array_obj_ref_336_data_0) $guard ( ~ checkJZero_208 ) 
    $flowthrough 
    // 	$guard (~checkJZero) ifmaps2[0 ][2 ] := rdata_I12// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 132
    // ifmaps2[0 ][2 ]
    $store [array_obj_ref_342_store_0] $to memory_space_2 (array_obj_ref_342_word_address_0 array_obj_ref_342_data_0) $guard ( ~ checkJZero_208 ) 
    $delay array_obj_ref_342_store_0 4
    &/ [array_obj_ref_342_gather_scatter] (rdata_I12_332) (array_obj_ref_342_data_0) $guard ( ~ checkJZero_208 ) 
    $flowthrough 
    // 	$guard (~checkJZero) $call accessMem (read_signal rowI_2 col0 write_data_zero ) (rdata_I20 ) 
    //  file prog.linked.opt.aa, line 133
    $call [call_stmt_351_call] $module accessMem(R_read_signal_346_wire_constant rowI_2_224 col0_240 R_write_data_zero_349_wire_constant) (rdata_I20_351) $guard ( ~ checkJZero_208 )  
    $delay call_stmt_351_call 7
    $buffering  $in call_stmt_351_call R_read_signal_346_wire_constant 1
    $buffering  $in call_stmt_351_call rowI_2_224 1
    $buffering  $in call_stmt_351_call col0_240 1
    $buffering  $in call_stmt_351_call R_write_data_zero_349_wire_constant 1
    $buffering  $out call_stmt_351_call rdata_I20_351 1
    // 	$guard (~checkJZero) ifmaps[2 ][0 ] := rdata_I20// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 134
    // ifmaps[2 ][0 ]
    $store [array_obj_ref_355_store_0] $to memory_space_1 (array_obj_ref_355_word_address_0 array_obj_ref_355_data_0) $guard ( ~ checkJZero_208 ) 
    $delay array_obj_ref_355_store_0 4
    &/ [array_obj_ref_355_gather_scatter] (rdata_I20_351) (array_obj_ref_355_data_0) $guard ( ~ checkJZero_208 ) 
    $flowthrough 
    // 	$guard (~checkJZero) ifmaps2[1 ][0 ] := rdata_I20// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 135
    // ifmaps2[1 ][0 ]
    $store [array_obj_ref_361_store_0] $to memory_space_2 (array_obj_ref_361_word_address_0 array_obj_ref_361_data_0) $guard ( ~ checkJZero_208 ) 
    $delay array_obj_ref_361_store_0 4
    &/ [array_obj_ref_361_gather_scatter] (rdata_I20_351) (array_obj_ref_361_data_0) $guard ( ~ checkJZero_208 ) 
    $flowthrough 
    // 	$guard (~checkJZero) $call accessMem (read_signal rowI_2 col1 write_data_zero ) (rdata_I21 ) 
    //  file prog.linked.opt.aa, line 136
    $call [call_stmt_370_call] $module accessMem(R_read_signal_365_wire_constant rowI_2_224 col1_244 R_write_data_zero_368_wire_constant) (rdata_I21_370) $guard ( ~ checkJZero_208 )  
    $delay call_stmt_370_call 7
    $buffering  $in call_stmt_370_call R_read_signal_365_wire_constant 1
    $buffering  $in call_stmt_370_call rowI_2_224 1
    $buffering  $in call_stmt_370_call col1_244 1
    $buffering  $in call_stmt_370_call R_write_data_zero_368_wire_constant 1
    $buffering  $out call_stmt_370_call rdata_I21_370 1
    // 	$guard (~checkJZero) ifmaps[2 ][1 ] := rdata_I21// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 137
    // ifmaps[2 ][1 ]
    $store [array_obj_ref_374_store_0] $to memory_space_1 (array_obj_ref_374_word_address_0 array_obj_ref_374_data_0) $guard ( ~ checkJZero_208 ) 
    $delay array_obj_ref_374_store_0 4
    &/ [array_obj_ref_374_gather_scatter] (rdata_I21_370) (array_obj_ref_374_data_0) $guard ( ~ checkJZero_208 ) 
    $flowthrough 
    // 	$guard (~checkJZero) ifmaps2[1 ][1 ] := rdata_I21// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 138
    // ifmaps2[1 ][1 ]
    $store [array_obj_ref_380_store_0] $to memory_space_2 (array_obj_ref_380_word_address_0 array_obj_ref_380_data_0) $guard ( ~ checkJZero_208 ) 
    $delay array_obj_ref_380_store_0 4
    &/ [array_obj_ref_380_gather_scatter] (rdata_I21_370) (array_obj_ref_380_data_0) $guard ( ~ checkJZero_208 ) 
    $flowthrough 
    // 	$guard (~checkJZero) $call accessMem (read_signal rowI_2 col2 write_data_zero ) (rdata_I22 ) 
    //  file prog.linked.opt.aa, line 139
    $call [call_stmt_389_call] $module accessMem(R_read_signal_384_wire_constant rowI_2_224 col2_248 R_write_data_zero_387_wire_constant) (rdata_I22_389) $guard ( ~ checkJZero_208 )  
    $delay call_stmt_389_call 7
    $buffering  $in call_stmt_389_call R_read_signal_384_wire_constant 1
    $buffering  $in call_stmt_389_call rowI_2_224 1
    $buffering  $in call_stmt_389_call col2_248 1
    $buffering  $in call_stmt_389_call R_write_data_zero_387_wire_constant 1
    $buffering  $out call_stmt_389_call rdata_I22_389 1
    // 	$guard (~checkJZero) ifmaps[2 ][2 ] := rdata_I22// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 140
    // ifmaps[2 ][2 ]
    $store [array_obj_ref_393_store_0] $to memory_space_1 (array_obj_ref_393_word_address_0 array_obj_ref_393_data_0) $guard ( ~ checkJZero_208 ) 
    $delay array_obj_ref_393_store_0 4
    &/ [array_obj_ref_393_gather_scatter] (rdata_I22_389) (array_obj_ref_393_data_0) $guard ( ~ checkJZero_208 ) 
    $flowthrough 
    // 	$guard (~checkJZero) ifmaps2[1 ][2 ] := rdata_I22// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 141
    // ifmaps2[1 ][2 ]
    $store [array_obj_ref_399_store_0] $to memory_space_2 (array_obj_ref_399_word_address_0 array_obj_ref_399_data_0) $guard ( ~ checkJZero_208 ) 
    $delay array_obj_ref_399_store_0 4
    &/ [array_obj_ref_399_gather_scatter] (rdata_I22_389) (array_obj_ref_399_data_0) $guard ( ~ checkJZero_208 ) 
    $flowthrough 
    // 	$guard (~checkJZero) $call accessMem (read_signal rowI_3 col0 write_data_zero ) (rdata_I30 ) 
    //  file prog.linked.opt.aa, line 142
    $call [call_stmt_408_call] $module accessMem(R_read_signal_403_wire_constant rowI_3_230 col0_240 R_write_data_zero_406_wire_constant) (rdata_I30_408) $guard ( ~ checkJZero_208 )  
    $delay call_stmt_408_call 7
    $buffering  $in call_stmt_408_call R_read_signal_403_wire_constant 1
    $buffering  $in call_stmt_408_call rowI_3_230 1
    $buffering  $in call_stmt_408_call col0_240 1
    $buffering  $in call_stmt_408_call R_write_data_zero_406_wire_constant 1
    $buffering  $out call_stmt_408_call rdata_I30_408 1
    // 	$guard (~checkJZero) ifmaps[3 ][0 ] := rdata_I30// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 143
    // ifmaps[3 ][0 ]
    $store [array_obj_ref_412_store_0] $to memory_space_1 (array_obj_ref_412_word_address_0 array_obj_ref_412_data_0) $guard ( ~ checkJZero_208 ) 
    $delay array_obj_ref_412_store_0 4
    &/ [array_obj_ref_412_gather_scatter] (rdata_I30_408) (array_obj_ref_412_data_0) $guard ( ~ checkJZero_208 ) 
    $flowthrough 
    // 	$guard (~checkJZero) ifmaps2[2 ][0 ] := rdata_I30// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 144
    // ifmaps2[2 ][0 ]
    $store [array_obj_ref_418_store_0] $to memory_space_2 (array_obj_ref_418_word_address_0 array_obj_ref_418_data_0) $guard ( ~ checkJZero_208 ) 
    $delay array_obj_ref_418_store_0 4
    &/ [array_obj_ref_418_gather_scatter] (rdata_I30_408) (array_obj_ref_418_data_0) $guard ( ~ checkJZero_208 ) 
    $flowthrough 
    // 	$guard (~checkJZero) $call accessMem (read_signal rowI_3 col1 write_data_zero ) (rdata_I31 ) 
    //  file prog.linked.opt.aa, line 145
    $call [call_stmt_427_call] $module accessMem(R_read_signal_422_wire_constant rowI_3_230 col1_244 R_write_data_zero_425_wire_constant) (rdata_I31_427) $guard ( ~ checkJZero_208 )  
    $delay call_stmt_427_call 7
    $buffering  $in call_stmt_427_call R_read_signal_422_wire_constant 1
    $buffering  $in call_stmt_427_call rowI_3_230 1
    $buffering  $in call_stmt_427_call col1_244 1
    $buffering  $in call_stmt_427_call R_write_data_zero_425_wire_constant 1
    $buffering  $out call_stmt_427_call rdata_I31_427 1
    // 	$guard (~checkJZero) ifmaps[3 ][1 ] := rdata_I31// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 146
    // ifmaps[3 ][1 ]
    $store [array_obj_ref_431_store_0] $to memory_space_1 (array_obj_ref_431_word_address_0 array_obj_ref_431_data_0) $guard ( ~ checkJZero_208 ) 
    $delay array_obj_ref_431_store_0 4
    &/ [array_obj_ref_431_gather_scatter] (rdata_I31_427) (array_obj_ref_431_data_0) $guard ( ~ checkJZero_208 ) 
    $flowthrough 
    // 	$guard (~checkJZero) ifmaps2[2 ][1 ] := rdata_I31// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 147
    // ifmaps2[2 ][1 ]
    $store [array_obj_ref_437_store_0] $to memory_space_2 (array_obj_ref_437_word_address_0 array_obj_ref_437_data_0) $guard ( ~ checkJZero_208 ) 
    $delay array_obj_ref_437_store_0 4
    &/ [array_obj_ref_437_gather_scatter] (rdata_I31_427) (array_obj_ref_437_data_0) $guard ( ~ checkJZero_208 ) 
    $flowthrough 
    // 	$guard (~checkJZero) $call accessMem (read_signal rowI_3 col2 write_data_zero ) (rdata_I32 ) 
    //  file prog.linked.opt.aa, line 148
    $call [call_stmt_446_call] $module accessMem(R_read_signal_441_wire_constant rowI_3_230 col2_248 R_write_data_zero_444_wire_constant) (rdata_I32_446) $guard ( ~ checkJZero_208 )  
    $delay call_stmt_446_call 7
    $buffering  $in call_stmt_446_call R_read_signal_441_wire_constant 1
    $buffering  $in call_stmt_446_call rowI_3_230 1
    $buffering  $in call_stmt_446_call col2_248 1
    $buffering  $in call_stmt_446_call R_write_data_zero_444_wire_constant 1
    $buffering  $out call_stmt_446_call rdata_I32_446 1
    // 	$guard (~checkJZero) ifmaps[3 ][2 ] := rdata_I32// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 149
    // ifmaps[3 ][2 ]
    $store [array_obj_ref_450_store_0] $to memory_space_1 (array_obj_ref_450_word_address_0 array_obj_ref_450_data_0) $guard ( ~ checkJZero_208 ) 
    $delay array_obj_ref_450_store_0 4
    &/ [array_obj_ref_450_gather_scatter] (rdata_I32_446) (array_obj_ref_450_data_0) $guard ( ~ checkJZero_208 ) 
    $flowthrough 
    // 	$guard (~checkJZero) ifmaps2[2 ][2 ] := rdata_I32// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 150
    // ifmaps2[2 ][2 ]
    $store [array_obj_ref_456_store_0] $to memory_space_2 (array_obj_ref_456_word_address_0 array_obj_ref_456_data_0) $guard ( ~ checkJZero_208 ) 
    $delay array_obj_ref_456_store_0 4
    &/ [array_obj_ref_456_gather_scatter] (rdata_I32_446) (array_obj_ref_456_data_0) $guard ( ~ checkJZero_208 ) 
    $flowthrough 
    // 	$guard (~checkJZero) $call accessMem (read_signal rowI_4 col0 write_data_zero ) (rdata_I40 ) 
    //  file prog.linked.opt.aa, line 151
    $call [call_stmt_465_call] $module accessMem(R_read_signal_460_wire_constant rowI_4_236 col0_240 R_write_data_zero_463_wire_constant) (rdata_I40_465) $guard ( ~ checkJZero_208 )  
    $delay call_stmt_465_call 7
    $buffering  $in call_stmt_465_call R_read_signal_460_wire_constant 1
    $buffering  $in call_stmt_465_call rowI_4_236 1
    $buffering  $in call_stmt_465_call col0_240 1
    $buffering  $in call_stmt_465_call R_write_data_zero_463_wire_constant 1
    $buffering  $out call_stmt_465_call rdata_I40_465 1
    // 	$guard (~checkJZero) ifmaps2[3 ][0 ] := rdata_I40// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 152
    // ifmaps2[3 ][0 ]
    $store [array_obj_ref_469_store_0] $to memory_space_2 (array_obj_ref_469_word_address_0 array_obj_ref_469_data_0) $guard ( ~ checkJZero_208 ) 
    $delay array_obj_ref_469_store_0 4
    &/ [array_obj_ref_469_gather_scatter] (rdata_I40_465) (array_obj_ref_469_data_0) $guard ( ~ checkJZero_208 ) 
    $flowthrough 
    // 	$guard (~checkJZero) $call accessMem (read_signal rowI_4 col1 write_data_zero ) (rdata_I41 ) 
    //  file prog.linked.opt.aa, line 153
    $call [call_stmt_478_call] $module accessMem(R_read_signal_473_wire_constant rowI_4_236 col1_244 R_write_data_zero_476_wire_constant) (rdata_I41_478) $guard ( ~ checkJZero_208 )  
    $delay call_stmt_478_call 7
    $buffering  $in call_stmt_478_call R_read_signal_473_wire_constant 1
    $buffering  $in call_stmt_478_call rowI_4_236 1
    $buffering  $in call_stmt_478_call col1_244 1
    $buffering  $in call_stmt_478_call R_write_data_zero_476_wire_constant 1
    $buffering  $out call_stmt_478_call rdata_I41_478 1
    // 	$guard (~checkJZero) ifmaps2[3 ][1 ] := rdata_I41// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 154
    // ifmaps2[3 ][1 ]
    $store [array_obj_ref_482_store_0] $to memory_space_2 (array_obj_ref_482_word_address_0 array_obj_ref_482_data_0) $guard ( ~ checkJZero_208 ) 
    $delay array_obj_ref_482_store_0 4
    &/ [array_obj_ref_482_gather_scatter] (rdata_I41_478) (array_obj_ref_482_data_0) $guard ( ~ checkJZero_208 ) 
    $flowthrough 
    // 	$guard (~checkJZero) $call accessMem (read_signal rowI_4 col2 write_data_zero ) (rdata_I42 ) 
    //  file prog.linked.opt.aa, line 155
    $call [call_stmt_491_call] $module accessMem(R_read_signal_486_wire_constant rowI_4_236 col2_248 R_write_data_zero_489_wire_constant) (rdata_I42_491) $guard ( ~ checkJZero_208 )  
    $delay call_stmt_491_call 7
    $buffering  $in call_stmt_491_call R_read_signal_486_wire_constant 1
    $buffering  $in call_stmt_491_call rowI_4_236 1
    $buffering  $in call_stmt_491_call col2_248 1
    $buffering  $in call_stmt_491_call R_write_data_zero_489_wire_constant 1
    $buffering  $out call_stmt_491_call rdata_I42_491 1
    // 	$guard (~checkJZero) ifmaps2[3 ][2 ] := rdata_I42// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 156
    // ifmaps2[3 ][2 ]
    $store [array_obj_ref_495_store_0] $to memory_space_2 (array_obj_ref_495_word_address_0 array_obj_ref_495_data_0) $guard ( ~ checkJZero_208 ) 
    $delay array_obj_ref_495_store_0 4
    &/ [array_obj_ref_495_gather_scatter] (rdata_I42_491) (array_obj_ref_495_data_0) $guard ( ~ checkJZero_208 ) 
    $flowthrough 
    // 	J_3 := ($bitcast ($uint<5>) (J + 3 ) )// bits of buffering = 5. 
    //  file prog.linked.opt.aa, line 157
    // (J + 3 )
    +[ADD_u5_u5_501_inst] (J konst_500_wire_constant) (ADD_u5_u5_501_wire)   $flowthrough 
    $delay ADD_u5_u5_501_inst 0
    // ($bitcast ($uint<5>) (J + 3 ) )
    # := [type_cast_502_inst] (ADD_u5_u5_501_wire) (J_3_503)   
    $buffering  $out type_cast_502_inst J_3_503 1
    $delay type_cast_502_inst 1
    // 	$call accessMem (read_signal rowI J_3 write_data_zero ) (rdata_ifmap0 ) 
    //  file prog.linked.opt.aa, line 158
    $call [call_stmt_509_call] $module accessMem(R_read_signal_504_wire_constant rowI_212 J_3_503 R_write_data_zero_507_wire_constant) (rdata_ifmap0_509)  
    $delay call_stmt_509_call 7
    $buffering  $in call_stmt_509_call R_read_signal_504_wire_constant 1
    $buffering  $in call_stmt_509_call rowI_212 1
    $buffering  $in call_stmt_509_call J_3_503 1
    $buffering  $in call_stmt_509_call R_write_data_zero_507_wire_constant 1
    $buffering  $out call_stmt_509_call rdata_ifmap0_509 1
    // 	ifmaps[0 ][col_to_be_replaced] := rdata_ifmap0// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 159
    // ifmaps[0 ][col_to_be_replaced]
    &/ [array_obj_ref_512_index_1_resize] (col_to_be_replaced) (R_col_to_be_replaced_511_resized) 
    $flowthrough 
    &/ [array_obj_ref_512_index_1_rename] (R_col_to_be_replaced_511_resized) (R_col_to_be_replaced_511_scaled) 
    $flowthrough 
    +[array_obj_ref_512_index_offset] (R_col_to_be_replaced_511_scaled array_obj_ref_512_constant_part_of_offset) (array_obj_ref_512_final_offset)   
    $delay array_obj_ref_512_index_offset 2
    &/ [array_obj_ref_512_root_address_inst] (array_obj_ref_512_final_offset) (array_obj_ref_512_root_address) 
    $flowthrough 
    &/ [array_obj_ref_512_addr_0] (array_obj_ref_512_root_address) (array_obj_ref_512_word_address_0) 
    $flowthrough 
    $store [array_obj_ref_512_store_0] $to memory_space_1 (array_obj_ref_512_word_address_0 array_obj_ref_512_data_0) 
    $delay array_obj_ref_512_store_0 4
    &/ [array_obj_ref_512_gather_scatter] (rdata_ifmap0_509) (array_obj_ref_512_data_0) 
    $flowthrough 
    // 	$call accessMem (read_signal rowI_1 J_3 write_data_zero ) (rdata_ifmap1 ) 
    //  file prog.linked.opt.aa, line 160
    $call [call_stmt_520_call] $module accessMem(R_read_signal_515_wire_constant rowI_1_218 J_3_503 R_write_data_zero_518_wire_constant) (rdata_ifmap1_520)  
    $delay call_stmt_520_call 7
    $buffering  $in call_stmt_520_call R_read_signal_515_wire_constant 1
    $buffering  $in call_stmt_520_call rowI_1_218 1
    $buffering  $in call_stmt_520_call J_3_503 1
    $buffering  $in call_stmt_520_call R_write_data_zero_518_wire_constant 1
    $buffering  $out call_stmt_520_call rdata_ifmap1_520 1
    // 	ifmaps[1 ][col_to_be_replaced] := rdata_ifmap1// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 161
    // ifmaps[1 ][col_to_be_replaced]
    &/ [array_obj_ref_523_index_1_resize] (col_to_be_replaced) (R_col_to_be_replaced_522_resized) 
    $flowthrough 
    &/ [array_obj_ref_523_index_1_rename] (R_col_to_be_replaced_522_resized) (R_col_to_be_replaced_522_scaled) 
    $flowthrough 
    +[array_obj_ref_523_index_offset] (R_col_to_be_replaced_522_scaled array_obj_ref_523_constant_part_of_offset) (array_obj_ref_523_final_offset)   
    $delay array_obj_ref_523_index_offset 2
    &/ [array_obj_ref_523_root_address_inst] (array_obj_ref_523_final_offset) (array_obj_ref_523_root_address) 
    $flowthrough 
    &/ [array_obj_ref_523_addr_0] (array_obj_ref_523_root_address) (array_obj_ref_523_word_address_0) 
    $flowthrough 
    $store [array_obj_ref_523_store_0] $to memory_space_1 (array_obj_ref_523_word_address_0 array_obj_ref_523_data_0) 
    $delay array_obj_ref_523_store_0 4
    &/ [array_obj_ref_523_gather_scatter] (rdata_ifmap1_520) (array_obj_ref_523_data_0) 
    $flowthrough 
    // 	ifmaps2[0 ][col_to_be_replaced] := rdata_ifmap1// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 162
    // ifmaps2[0 ][col_to_be_replaced]
    &/ [array_obj_ref_528_index_1_resize] (col_to_be_replaced) (R_col_to_be_replaced_527_resized) 
    $flowthrough 
    &/ [array_obj_ref_528_index_1_rename] (R_col_to_be_replaced_527_resized) (R_col_to_be_replaced_527_scaled) 
    $flowthrough 
    +[array_obj_ref_528_index_offset] (R_col_to_be_replaced_527_scaled array_obj_ref_528_constant_part_of_offset) (array_obj_ref_528_final_offset)   
    $delay array_obj_ref_528_index_offset 2
    &/ [array_obj_ref_528_root_address_inst] (array_obj_ref_528_final_offset) (array_obj_ref_528_root_address) 
    $flowthrough 
    &/ [array_obj_ref_528_addr_0] (array_obj_ref_528_root_address) (array_obj_ref_528_word_address_0) 
    $flowthrough 
    $store [array_obj_ref_528_store_0] $to memory_space_2 (array_obj_ref_528_word_address_0 array_obj_ref_528_data_0) 
    $delay array_obj_ref_528_store_0 4
    &/ [array_obj_ref_528_gather_scatter] (rdata_ifmap1_520) (array_obj_ref_528_data_0) 
    $flowthrough 
    // 	$call accessMem (read_signal rowI_2 J_3 write_data_zero ) (rdata_ifmap2 ) 
    //  file prog.linked.opt.aa, line 163
    $call [call_stmt_536_call] $module accessMem(R_read_signal_531_wire_constant rowI_2_224 J_3_503 R_write_data_zero_534_wire_constant) (rdata_ifmap2_536)  
    $delay call_stmt_536_call 7
    $buffering  $in call_stmt_536_call R_read_signal_531_wire_constant 1
    $buffering  $in call_stmt_536_call rowI_2_224 1
    $buffering  $in call_stmt_536_call J_3_503 1
    $buffering  $in call_stmt_536_call R_write_data_zero_534_wire_constant 1
    $buffering  $out call_stmt_536_call rdata_ifmap2_536 1
    // 	ifmaps[2 ][col_to_be_replaced] := rdata_ifmap2// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 164
    // ifmaps[2 ][col_to_be_replaced]
    &/ [array_obj_ref_539_index_1_resize] (col_to_be_replaced) (R_col_to_be_replaced_538_resized) 
    $flowthrough 
    &/ [array_obj_ref_539_index_1_rename] (R_col_to_be_replaced_538_resized) (R_col_to_be_replaced_538_scaled) 
    $flowthrough 
    +[array_obj_ref_539_index_offset] (R_col_to_be_replaced_538_scaled array_obj_ref_539_constant_part_of_offset) (array_obj_ref_539_final_offset)   
    $delay array_obj_ref_539_index_offset 2
    &/ [array_obj_ref_539_root_address_inst] (array_obj_ref_539_final_offset) (array_obj_ref_539_root_address) 
    $flowthrough 
    &/ [array_obj_ref_539_addr_0] (array_obj_ref_539_root_address) (array_obj_ref_539_word_address_0) 
    $flowthrough 
    $store [array_obj_ref_539_store_0] $to memory_space_1 (array_obj_ref_539_word_address_0 array_obj_ref_539_data_0) 
    $delay array_obj_ref_539_store_0 4
    &/ [array_obj_ref_539_gather_scatter] (rdata_ifmap2_536) (array_obj_ref_539_data_0) 
    $flowthrough 
    // 	ifmaps2[1 ][col_to_be_replaced] := rdata_ifmap2// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 165
    // ifmaps2[1 ][col_to_be_replaced]
    &/ [array_obj_ref_544_index_1_resize] (col_to_be_replaced) (R_col_to_be_replaced_543_resized) 
    $flowthrough 
    &/ [array_obj_ref_544_index_1_rename] (R_col_to_be_replaced_543_resized) (R_col_to_be_replaced_543_scaled) 
    $flowthrough 
    +[array_obj_ref_544_index_offset] (R_col_to_be_replaced_543_scaled array_obj_ref_544_constant_part_of_offset) (array_obj_ref_544_final_offset)   
    $delay array_obj_ref_544_index_offset 2
    &/ [array_obj_ref_544_root_address_inst] (array_obj_ref_544_final_offset) (array_obj_ref_544_root_address) 
    $flowthrough 
    &/ [array_obj_ref_544_addr_0] (array_obj_ref_544_root_address) (array_obj_ref_544_word_address_0) 
    $flowthrough 
    $store [array_obj_ref_544_store_0] $to memory_space_2 (array_obj_ref_544_word_address_0 array_obj_ref_544_data_0) 
    $delay array_obj_ref_544_store_0 4
    &/ [array_obj_ref_544_gather_scatter] (rdata_ifmap2_536) (array_obj_ref_544_data_0) 
    $flowthrough 
    // 	$call accessMem (read_signal rowI_3 J_3 write_data_zero ) (rdata_ifmap3 ) 
    //  file prog.linked.opt.aa, line 166
    $call [call_stmt_552_call] $module accessMem(R_read_signal_547_wire_constant rowI_3_230 J_3_503 R_write_data_zero_550_wire_constant) (rdata_ifmap3_552)  
    $delay call_stmt_552_call 7
    $buffering  $in call_stmt_552_call R_read_signal_547_wire_constant 1
    $buffering  $in call_stmt_552_call rowI_3_230 1
    $buffering  $in call_stmt_552_call J_3_503 1
    $buffering  $in call_stmt_552_call R_write_data_zero_550_wire_constant 1
    $buffering  $out call_stmt_552_call rdata_ifmap3_552 1
    // 	ifmaps[3 ][col_to_be_replaced] := rdata_ifmap3// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 167
    // ifmaps[3 ][col_to_be_replaced]
    &/ [array_obj_ref_555_index_1_resize] (col_to_be_replaced) (R_col_to_be_replaced_554_resized) 
    $flowthrough 
    &/ [array_obj_ref_555_index_1_rename] (R_col_to_be_replaced_554_resized) (R_col_to_be_replaced_554_scaled) 
    $flowthrough 
    +[array_obj_ref_555_index_offset] (R_col_to_be_replaced_554_scaled array_obj_ref_555_constant_part_of_offset) (array_obj_ref_555_final_offset)   
    $delay array_obj_ref_555_index_offset 2
    &/ [array_obj_ref_555_root_address_inst] (array_obj_ref_555_final_offset) (array_obj_ref_555_root_address) 
    $flowthrough 
    &/ [array_obj_ref_555_addr_0] (array_obj_ref_555_root_address) (array_obj_ref_555_word_address_0) 
    $flowthrough 
    $store [array_obj_ref_555_store_0] $to memory_space_1 (array_obj_ref_555_word_address_0 array_obj_ref_555_data_0) 
    $delay array_obj_ref_555_store_0 4
    &/ [array_obj_ref_555_gather_scatter] (rdata_ifmap3_552) (array_obj_ref_555_data_0) 
    $flowthrough 
    // 	ifmaps2[2 ][col_to_be_replaced] := rdata_ifmap3// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 168
    // ifmaps2[2 ][col_to_be_replaced]
    &/ [array_obj_ref_560_index_1_resize] (col_to_be_replaced) (R_col_to_be_replaced_559_resized) 
    $flowthrough 
    &/ [array_obj_ref_560_index_1_rename] (R_col_to_be_replaced_559_resized) (R_col_to_be_replaced_559_scaled) 
    $flowthrough 
    +[array_obj_ref_560_index_offset] (R_col_to_be_replaced_559_scaled array_obj_ref_560_constant_part_of_offset) (array_obj_ref_560_final_offset)   
    $delay array_obj_ref_560_index_offset 2
    &/ [array_obj_ref_560_root_address_inst] (array_obj_ref_560_final_offset) (array_obj_ref_560_root_address) 
    $flowthrough 
    &/ [array_obj_ref_560_addr_0] (array_obj_ref_560_root_address) (array_obj_ref_560_word_address_0) 
    $flowthrough 
    $store [array_obj_ref_560_store_0] $to memory_space_2 (array_obj_ref_560_word_address_0 array_obj_ref_560_data_0) 
    $delay array_obj_ref_560_store_0 4
    &/ [array_obj_ref_560_gather_scatter] (rdata_ifmap3_552) (array_obj_ref_560_data_0) 
    $flowthrough 
    // 	$call accessMem (read_signal rowI_4 J_3 write_data_zero ) (rdata_ifmap4 ) 
    //  file prog.linked.opt.aa, line 169
    $call [call_stmt_568_call] $module accessMem(R_read_signal_563_wire_constant rowI_4_236 J_3_503 R_write_data_zero_566_wire_constant) (rdata_ifmap4_568)  
    $delay call_stmt_568_call 7
    $buffering  $in call_stmt_568_call R_read_signal_563_wire_constant 1
    $buffering  $in call_stmt_568_call rowI_4_236 1
    $buffering  $in call_stmt_568_call J_3_503 1
    $buffering  $in call_stmt_568_call R_write_data_zero_566_wire_constant 1
    $buffering  $out call_stmt_568_call rdata_ifmap4_568 1
    // 	ifmaps2[3 ][col_to_be_replaced] := rdata_ifmap4// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 170
    // ifmaps2[3 ][col_to_be_replaced]
    &/ [array_obj_ref_571_index_1_resize] (col_to_be_replaced) (R_col_to_be_replaced_570_resized) 
    $flowthrough 
    &/ [array_obj_ref_571_index_1_rename] (R_col_to_be_replaced_570_resized) (R_col_to_be_replaced_570_scaled) 
    $flowthrough 
    +[array_obj_ref_571_index_offset] (R_col_to_be_replaced_570_scaled array_obj_ref_571_constant_part_of_offset) (array_obj_ref_571_final_offset)   
    $delay array_obj_ref_571_index_offset 2
    &/ [array_obj_ref_571_root_address_inst] (array_obj_ref_571_final_offset) (array_obj_ref_571_root_address) 
    $flowthrough 
    &/ [array_obj_ref_571_addr_0] (array_obj_ref_571_root_address) (array_obj_ref_571_word_address_0) 
    $flowthrough 
    $store [array_obj_ref_571_store_0] $to memory_space_2 (array_obj_ref_571_word_address_0 array_obj_ref_571_data_0) 
    $delay array_obj_ref_571_store_0 4
    &/ [array_obj_ref_571_gather_scatter] (rdata_ifmap4_568) (array_obj_ref_571_data_0) 
    $flowthrough 
  }
  // end data-path
  // 	$volatile checkJZero := ( $mux (J == 0 ) ($bitcast ($uint<1>) 0  )  ($bitcast ($uint<1>) 1  ) ) 
  //  file prog.linked.opt.aa, line 109
  // (J == 0 )
  // J
  // ( $mux (J == 0 ) ($bitcast ($uint<1>) 0  )  ($bitcast ($uint<1>) 1  ) ) 
  // 	rowI := ($bitcast ($uint<6>) I )// bits of buffering = 6. 
  //  file prog.linked.opt.aa, line 110
  // I
  // ($bitcast ($uint<6>) I )
  type_cast_211_inst <=> (assign_stmt_208_to_assign_stmt_577/type_cast_211_Sample/rr assign_stmt_208_to_assign_stmt_577/type_cast_211_Update/cr) (assign_stmt_208_to_assign_stmt_577/type_cast_211_Sample/ra assign_stmt_208_to_assign_stmt_577/type_cast_211_Update/ca)
  // 	rowI_1 := ($bitcast ($uint<6>) (I + 1 ) )// bits of buffering = 6. 
  //  file prog.linked.opt.aa, line 111
  // (I + 1 )
  // I
  // ($bitcast ($uint<6>) (I + 1 ) )
  type_cast_217_inst <=> (assign_stmt_208_to_assign_stmt_577/type_cast_217_Sample/rr assign_stmt_208_to_assign_stmt_577/type_cast_217_Update/cr) (assign_stmt_208_to_assign_stmt_577/type_cast_217_Sample/ra assign_stmt_208_to_assign_stmt_577/type_cast_217_Update/ca)
  // 	rowI_2 := ($bitcast ($uint<6>) (I + 2 ) )// bits of buffering = 6. 
  //  file prog.linked.opt.aa, line 112
  // (I + 2 )
  // I
  // ($bitcast ($uint<6>) (I + 2 ) )
  type_cast_223_inst <=> (assign_stmt_208_to_assign_stmt_577/type_cast_223_Sample/rr assign_stmt_208_to_assign_stmt_577/type_cast_223_Update/cr) (assign_stmt_208_to_assign_stmt_577/type_cast_223_Sample/ra assign_stmt_208_to_assign_stmt_577/type_cast_223_Update/ca)
  // 	rowI_3 := ($bitcast ($uint<6>) (I + 3 ) )// bits of buffering = 6. 
  //  file prog.linked.opt.aa, line 113
  // (I + 3 )
  // I
  // ($bitcast ($uint<6>) (I + 3 ) )
  type_cast_229_inst <=> (assign_stmt_208_to_assign_stmt_577/type_cast_229_Sample/rr assign_stmt_208_to_assign_stmt_577/type_cast_229_Update/cr) (assign_stmt_208_to_assign_stmt_577/type_cast_229_Sample/ra assign_stmt_208_to_assign_stmt_577/type_cast_229_Update/ca)
  // 	rowI_4 := ($bitcast ($uint<6>) (I + 4 ) )// bits of buffering = 6. 
  //  file prog.linked.opt.aa, line 114
  // (I + 4 )
  // I
  // ($bitcast ($uint<6>) (I + 4 ) )
  type_cast_235_inst <=> (assign_stmt_208_to_assign_stmt_577/type_cast_235_Sample/rr assign_stmt_208_to_assign_stmt_577/type_cast_235_Update/cr) (assign_stmt_208_to_assign_stmt_577/type_cast_235_Sample/ra assign_stmt_208_to_assign_stmt_577/type_cast_235_Update/ca)
  // 	$guard (~checkJZero) $call accessMem (read_signal rowI col0 write_data_zero ) (rdata_I00 ) 
  //  file prog.linked.opt.aa, line 118
  // rowI
  call_stmt_255_call <=> (assign_stmt_208_to_assign_stmt_577/call_stmt_255_Sample/crr assign_stmt_208_to_assign_stmt_577/call_stmt_255_Update/ccr) (assign_stmt_208_to_assign_stmt_577/call_stmt_255_Sample/cra assign_stmt_208_to_assign_stmt_577/call_stmt_255_Update/cca)
  // 	$guard (~checkJZero) ifmaps[0 ][0 ] := rdata_I00// bits of buffering = 16. 
  //  file prog.linked.opt.aa, line 119
  // rdata_I00
  array_obj_ref_259_gather_scatter <=> (assign_stmt_208_to_assign_stmt_577/array_obj_ref_259_Sample/array_obj_ref_259_Split/split_req) (assign_stmt_208_to_assign_stmt_577/array_obj_ref_259_Sample/array_obj_ref_259_Split/split_ack)
  array_obj_ref_259_store_0 <=> (assign_stmt_208_to_assign_stmt_577/array_obj_ref_259_Sample/word_access_start/word_0/rr assign_stmt_208_to_assign_stmt_577/array_obj_ref_259_Update/word_access_complete/word_0/cr) (assign_stmt_208_to_assign_stmt_577/array_obj_ref_259_Sample/word_access_start/word_0/ra assign_stmt_208_to_assign_stmt_577/array_obj_ref_259_Update/word_access_complete/word_0/ca)
  // 	$guard (~checkJZero) $call accessMem (read_signal rowI col1 write_data_zero ) (rdata_I01 ) 
  //  file prog.linked.opt.aa, line 120
  // rowI
  call_stmt_268_call <=> (assign_stmt_208_to_assign_stmt_577/call_stmt_268_Sample/crr assign_stmt_208_to_assign_stmt_577/call_stmt_268_Update/ccr) (assign_stmt_208_to_assign_stmt_577/call_stmt_268_Sample/cra assign_stmt_208_to_assign_stmt_577/call_stmt_268_Update/cca)
  // 	$guard (~checkJZero) ifmaps[0 ][1 ] := rdata_I01// bits of buffering = 16. 
  //  file prog.linked.opt.aa, line 121
  // rdata_I01
  array_obj_ref_272_gather_scatter <=> (assign_stmt_208_to_assign_stmt_577/array_obj_ref_272_Sample/array_obj_ref_272_Split/split_req) (assign_stmt_208_to_assign_stmt_577/array_obj_ref_272_Sample/array_obj_ref_272_Split/split_ack)
  array_obj_ref_272_store_0 <=> (assign_stmt_208_to_assign_stmt_577/array_obj_ref_272_Sample/word_access_start/word_0/rr assign_stmt_208_to_assign_stmt_577/array_obj_ref_272_Update/word_access_complete/word_0/cr) (assign_stmt_208_to_assign_stmt_577/array_obj_ref_272_Sample/word_access_start/word_0/ra assign_stmt_208_to_assign_stmt_577/array_obj_ref_272_Update/word_access_complete/word_0/ca)
  // 	$guard (~checkJZero) $call accessMem (read_signal rowI col2 write_data_zero ) (rdata_I02 ) 
  //  file prog.linked.opt.aa, line 122
  // rowI
  call_stmt_281_call <=> (assign_stmt_208_to_assign_stmt_577/call_stmt_281_Sample/crr assign_stmt_208_to_assign_stmt_577/call_stmt_281_Update/ccr) (assign_stmt_208_to_assign_stmt_577/call_stmt_281_Sample/cra assign_stmt_208_to_assign_stmt_577/call_stmt_281_Update/cca)
  // 	$guard (~checkJZero) ifmaps[0 ][2 ] := rdata_I02// bits of buffering = 16. 
  //  file prog.linked.opt.aa, line 123
  // rdata_I02
  array_obj_ref_285_gather_scatter <=> (assign_stmt_208_to_assign_stmt_577/array_obj_ref_285_Sample/array_obj_ref_285_Split/split_req) (assign_stmt_208_to_assign_stmt_577/array_obj_ref_285_Sample/array_obj_ref_285_Split/split_ack)
  array_obj_ref_285_store_0 <=> (assign_stmt_208_to_assign_stmt_577/array_obj_ref_285_Sample/word_access_start/word_0/rr assign_stmt_208_to_assign_stmt_577/array_obj_ref_285_Update/word_access_complete/word_0/cr) (assign_stmt_208_to_assign_stmt_577/array_obj_ref_285_Sample/word_access_start/word_0/ra assign_stmt_208_to_assign_stmt_577/array_obj_ref_285_Update/word_access_complete/word_0/ca)
  // 	$guard (~checkJZero) $call accessMem (read_signal rowI_1 col0 write_data_zero ) (rdata_I10 ) 
  //  file prog.linked.opt.aa, line 124
  // rowI_1
  call_stmt_294_call <=> (assign_stmt_208_to_assign_stmt_577/call_stmt_294_Sample/crr assign_stmt_208_to_assign_stmt_577/call_stmt_294_Update/ccr) (assign_stmt_208_to_assign_stmt_577/call_stmt_294_Sample/cra assign_stmt_208_to_assign_stmt_577/call_stmt_294_Update/cca)
  // 	$guard (~checkJZero) ifmaps[1 ][0 ] := rdata_I10// bits of buffering = 16. 
  //  file prog.linked.opt.aa, line 125
  // rdata_I10
  array_obj_ref_298_gather_scatter <=> (assign_stmt_208_to_assign_stmt_577/array_obj_ref_298_Sample/array_obj_ref_298_Split/split_req) (assign_stmt_208_to_assign_stmt_577/array_obj_ref_298_Sample/array_obj_ref_298_Split/split_ack)
  array_obj_ref_298_store_0 <=> (assign_stmt_208_to_assign_stmt_577/array_obj_ref_298_Sample/word_access_start/word_0/rr assign_stmt_208_to_assign_stmt_577/array_obj_ref_298_Update/word_access_complete/word_0/cr) (assign_stmt_208_to_assign_stmt_577/array_obj_ref_298_Sample/word_access_start/word_0/ra assign_stmt_208_to_assign_stmt_577/array_obj_ref_298_Update/word_access_complete/word_0/ca)
  // 	$guard (~checkJZero) ifmaps2[0 ][0 ] := rdata_I10// bits of buffering = 16. 
  //  file prog.linked.opt.aa, line 126
  // rdata_I10
  array_obj_ref_304_gather_scatter <=> (assign_stmt_208_to_assign_stmt_577/array_obj_ref_304_Sample/array_obj_ref_304_Split/split_req) (assign_stmt_208_to_assign_stmt_577/array_obj_ref_304_Sample/array_obj_ref_304_Split/split_ack)
  array_obj_ref_304_store_0 <=> (assign_stmt_208_to_assign_stmt_577/array_obj_ref_304_Sample/word_access_start/word_0/rr assign_stmt_208_to_assign_stmt_577/array_obj_ref_304_Update/word_access_complete/word_0/cr) (assign_stmt_208_to_assign_stmt_577/array_obj_ref_304_Sample/word_access_start/word_0/ra assign_stmt_208_to_assign_stmt_577/array_obj_ref_304_Update/word_access_complete/word_0/ca)
  // 	$guard (~checkJZero) $call accessMem (read_signal rowI_1 col1 write_data_zero ) (rdata_I11 ) 
  //  file prog.linked.opt.aa, line 127
  // rowI_1
  call_stmt_313_call <=> (assign_stmt_208_to_assign_stmt_577/call_stmt_313_Sample/crr assign_stmt_208_to_assign_stmt_577/call_stmt_313_Update/ccr) (assign_stmt_208_to_assign_stmt_577/call_stmt_313_Sample/cra assign_stmt_208_to_assign_stmt_577/call_stmt_313_Update/cca)
  // 	$guard (~checkJZero) ifmaps[1 ][1 ] := rdata_I11// bits of buffering = 16. 
  //  file prog.linked.opt.aa, line 128
  // rdata_I11
  array_obj_ref_317_gather_scatter <=> (assign_stmt_208_to_assign_stmt_577/array_obj_ref_317_Sample/array_obj_ref_317_Split/split_req) (assign_stmt_208_to_assign_stmt_577/array_obj_ref_317_Sample/array_obj_ref_317_Split/split_ack)
  array_obj_ref_317_store_0 <=> (assign_stmt_208_to_assign_stmt_577/array_obj_ref_317_Sample/word_access_start/word_0/rr assign_stmt_208_to_assign_stmt_577/array_obj_ref_317_Update/word_access_complete/word_0/cr) (assign_stmt_208_to_assign_stmt_577/array_obj_ref_317_Sample/word_access_start/word_0/ra assign_stmt_208_to_assign_stmt_577/array_obj_ref_317_Update/word_access_complete/word_0/ca)
  // 	$guard (~checkJZero) ifmaps2[0 ][1 ] := rdata_I11// bits of buffering = 16. 
  //  file prog.linked.opt.aa, line 129
  // rdata_I11
  array_obj_ref_323_gather_scatter <=> (assign_stmt_208_to_assign_stmt_577/array_obj_ref_323_Sample/array_obj_ref_323_Split/split_req) (assign_stmt_208_to_assign_stmt_577/array_obj_ref_323_Sample/array_obj_ref_323_Split/split_ack)
  array_obj_ref_323_store_0 <=> (assign_stmt_208_to_assign_stmt_577/array_obj_ref_323_Sample/word_access_start/word_0/rr assign_stmt_208_to_assign_stmt_577/array_obj_ref_323_Update/word_access_complete/word_0/cr) (assign_stmt_208_to_assign_stmt_577/array_obj_ref_323_Sample/word_access_start/word_0/ra assign_stmt_208_to_assign_stmt_577/array_obj_ref_323_Update/word_access_complete/word_0/ca)
  // 	$guard (~checkJZero) $call accessMem (read_signal rowI_1 col2 write_data_zero ) (rdata_I12 ) 
  //  file prog.linked.opt.aa, line 130
  // rowI_1
  call_stmt_332_call <=> (assign_stmt_208_to_assign_stmt_577/call_stmt_332_Sample/crr assign_stmt_208_to_assign_stmt_577/call_stmt_332_Update/ccr) (assign_stmt_208_to_assign_stmt_577/call_stmt_332_Sample/cra assign_stmt_208_to_assign_stmt_577/call_stmt_332_Update/cca)
  // 	$guard (~checkJZero) ifmaps[1 ][2 ] := rdata_I12// bits of buffering = 16. 
  //  file prog.linked.opt.aa, line 131
  // rdata_I12
  array_obj_ref_336_gather_scatter <=> (assign_stmt_208_to_assign_stmt_577/array_obj_ref_336_Sample/array_obj_ref_336_Split/split_req) (assign_stmt_208_to_assign_stmt_577/array_obj_ref_336_Sample/array_obj_ref_336_Split/split_ack)
  array_obj_ref_336_store_0 <=> (assign_stmt_208_to_assign_stmt_577/array_obj_ref_336_Sample/word_access_start/word_0/rr assign_stmt_208_to_assign_stmt_577/array_obj_ref_336_Update/word_access_complete/word_0/cr) (assign_stmt_208_to_assign_stmt_577/array_obj_ref_336_Sample/word_access_start/word_0/ra assign_stmt_208_to_assign_stmt_577/array_obj_ref_336_Update/word_access_complete/word_0/ca)
  // 	$guard (~checkJZero) ifmaps2[0 ][2 ] := rdata_I12// bits of buffering = 16. 
  //  file prog.linked.opt.aa, line 132
  // rdata_I12
  array_obj_ref_342_gather_scatter <=> (assign_stmt_208_to_assign_stmt_577/array_obj_ref_342_Sample/array_obj_ref_342_Split/split_req) (assign_stmt_208_to_assign_stmt_577/array_obj_ref_342_Sample/array_obj_ref_342_Split/split_ack)
  array_obj_ref_342_store_0 <=> (assign_stmt_208_to_assign_stmt_577/array_obj_ref_342_Sample/word_access_start/word_0/rr assign_stmt_208_to_assign_stmt_577/array_obj_ref_342_Update/word_access_complete/word_0/cr) (assign_stmt_208_to_assign_stmt_577/array_obj_ref_342_Sample/word_access_start/word_0/ra assign_stmt_208_to_assign_stmt_577/array_obj_ref_342_Update/word_access_complete/word_0/ca)
  // 	$guard (~checkJZero) $call accessMem (read_signal rowI_2 col0 write_data_zero ) (rdata_I20 ) 
  //  file prog.linked.opt.aa, line 133
  // rowI_2
  call_stmt_351_call <=> (assign_stmt_208_to_assign_stmt_577/call_stmt_351_Sample/crr assign_stmt_208_to_assign_stmt_577/call_stmt_351_Update/ccr) (assign_stmt_208_to_assign_stmt_577/call_stmt_351_Sample/cra assign_stmt_208_to_assign_stmt_577/call_stmt_351_Update/cca)
  // 	$guard (~checkJZero) ifmaps[2 ][0 ] := rdata_I20// bits of buffering = 16. 
  //  file prog.linked.opt.aa, line 134
  // rdata_I20
  array_obj_ref_355_gather_scatter <=> (assign_stmt_208_to_assign_stmt_577/array_obj_ref_355_Sample/array_obj_ref_355_Split/split_req) (assign_stmt_208_to_assign_stmt_577/array_obj_ref_355_Sample/array_obj_ref_355_Split/split_ack)
  array_obj_ref_355_store_0 <=> (assign_stmt_208_to_assign_stmt_577/array_obj_ref_355_Sample/word_access_start/word_0/rr assign_stmt_208_to_assign_stmt_577/array_obj_ref_355_Update/word_access_complete/word_0/cr) (assign_stmt_208_to_assign_stmt_577/array_obj_ref_355_Sample/word_access_start/word_0/ra assign_stmt_208_to_assign_stmt_577/array_obj_ref_355_Update/word_access_complete/word_0/ca)
  // 	$guard (~checkJZero) ifmaps2[1 ][0 ] := rdata_I20// bits of buffering = 16. 
  //  file prog.linked.opt.aa, line 135
  // rdata_I20
  array_obj_ref_361_gather_scatter <=> (assign_stmt_208_to_assign_stmt_577/array_obj_ref_361_Sample/array_obj_ref_361_Split/split_req) (assign_stmt_208_to_assign_stmt_577/array_obj_ref_361_Sample/array_obj_ref_361_Split/split_ack)
  array_obj_ref_361_store_0 <=> (assign_stmt_208_to_assign_stmt_577/array_obj_ref_361_Sample/word_access_start/word_0/rr assign_stmt_208_to_assign_stmt_577/array_obj_ref_361_Update/word_access_complete/word_0/cr) (assign_stmt_208_to_assign_stmt_577/array_obj_ref_361_Sample/word_access_start/word_0/ra assign_stmt_208_to_assign_stmt_577/array_obj_ref_361_Update/word_access_complete/word_0/ca)
  // 	$guard (~checkJZero) $call accessMem (read_signal rowI_2 col1 write_data_zero ) (rdata_I21 ) 
  //  file prog.linked.opt.aa, line 136
  // rowI_2
  call_stmt_370_call <=> (assign_stmt_208_to_assign_stmt_577/call_stmt_370_Sample/crr assign_stmt_208_to_assign_stmt_577/call_stmt_370_Update/ccr) (assign_stmt_208_to_assign_stmt_577/call_stmt_370_Sample/cra assign_stmt_208_to_assign_stmt_577/call_stmt_370_Update/cca)
  // 	$guard (~checkJZero) ifmaps[2 ][1 ] := rdata_I21// bits of buffering = 16. 
  //  file prog.linked.opt.aa, line 137
  // rdata_I21
  array_obj_ref_374_gather_scatter <=> (assign_stmt_208_to_assign_stmt_577/array_obj_ref_374_Sample/array_obj_ref_374_Split/split_req) (assign_stmt_208_to_assign_stmt_577/array_obj_ref_374_Sample/array_obj_ref_374_Split/split_ack)
  array_obj_ref_374_store_0 <=> (assign_stmt_208_to_assign_stmt_577/array_obj_ref_374_Sample/word_access_start/word_0/rr assign_stmt_208_to_assign_stmt_577/array_obj_ref_374_Update/word_access_complete/word_0/cr) (assign_stmt_208_to_assign_stmt_577/array_obj_ref_374_Sample/word_access_start/word_0/ra assign_stmt_208_to_assign_stmt_577/array_obj_ref_374_Update/word_access_complete/word_0/ca)
  // 	$guard (~checkJZero) ifmaps2[1 ][1 ] := rdata_I21// bits of buffering = 16. 
  //  file prog.linked.opt.aa, line 138
  // rdata_I21
  array_obj_ref_380_gather_scatter <=> (assign_stmt_208_to_assign_stmt_577/array_obj_ref_380_Sample/array_obj_ref_380_Split/split_req) (assign_stmt_208_to_assign_stmt_577/array_obj_ref_380_Sample/array_obj_ref_380_Split/split_ack)
  array_obj_ref_380_store_0 <=> (assign_stmt_208_to_assign_stmt_577/array_obj_ref_380_Sample/word_access_start/word_0/rr assign_stmt_208_to_assign_stmt_577/array_obj_ref_380_Update/word_access_complete/word_0/cr) (assign_stmt_208_to_assign_stmt_577/array_obj_ref_380_Sample/word_access_start/word_0/ra assign_stmt_208_to_assign_stmt_577/array_obj_ref_380_Update/word_access_complete/word_0/ca)
  // 	$guard (~checkJZero) $call accessMem (read_signal rowI_2 col2 write_data_zero ) (rdata_I22 ) 
  //  file prog.linked.opt.aa, line 139
  // rowI_2
  call_stmt_389_call <=> (assign_stmt_208_to_assign_stmt_577/call_stmt_389_Sample/crr assign_stmt_208_to_assign_stmt_577/call_stmt_389_Update/ccr) (assign_stmt_208_to_assign_stmt_577/call_stmt_389_Sample/cra assign_stmt_208_to_assign_stmt_577/call_stmt_389_Update/cca)
  // 	$guard (~checkJZero) ifmaps[2 ][2 ] := rdata_I22// bits of buffering = 16. 
  //  file prog.linked.opt.aa, line 140
  // rdata_I22
  array_obj_ref_393_gather_scatter <=> (assign_stmt_208_to_assign_stmt_577/array_obj_ref_393_Sample/array_obj_ref_393_Split/split_req) (assign_stmt_208_to_assign_stmt_577/array_obj_ref_393_Sample/array_obj_ref_393_Split/split_ack)
  array_obj_ref_393_store_0 <=> (assign_stmt_208_to_assign_stmt_577/array_obj_ref_393_Sample/word_access_start/word_0/rr assign_stmt_208_to_assign_stmt_577/array_obj_ref_393_Update/word_access_complete/word_0/cr) (assign_stmt_208_to_assign_stmt_577/array_obj_ref_393_Sample/word_access_start/word_0/ra assign_stmt_208_to_assign_stmt_577/array_obj_ref_393_Update/word_access_complete/word_0/ca)
  // 	$guard (~checkJZero) ifmaps2[1 ][2 ] := rdata_I22// bits of buffering = 16. 
  //  file prog.linked.opt.aa, line 141
  // rdata_I22
  array_obj_ref_399_gather_scatter <=> (assign_stmt_208_to_assign_stmt_577/array_obj_ref_399_Sample/array_obj_ref_399_Split/split_req) (assign_stmt_208_to_assign_stmt_577/array_obj_ref_399_Sample/array_obj_ref_399_Split/split_ack)
  array_obj_ref_399_store_0 <=> (assign_stmt_208_to_assign_stmt_577/array_obj_ref_399_Sample/word_access_start/word_0/rr assign_stmt_208_to_assign_stmt_577/array_obj_ref_399_Update/word_access_complete/word_0/cr) (assign_stmt_208_to_assign_stmt_577/array_obj_ref_399_Sample/word_access_start/word_0/ra assign_stmt_208_to_assign_stmt_577/array_obj_ref_399_Update/word_access_complete/word_0/ca)
  // 	$guard (~checkJZero) $call accessMem (read_signal rowI_3 col0 write_data_zero ) (rdata_I30 ) 
  //  file prog.linked.opt.aa, line 142
  // rowI_3
  call_stmt_408_call <=> (assign_stmt_208_to_assign_stmt_577/call_stmt_408_Sample/crr assign_stmt_208_to_assign_stmt_577/call_stmt_408_Update/ccr) (assign_stmt_208_to_assign_stmt_577/call_stmt_408_Sample/cra assign_stmt_208_to_assign_stmt_577/call_stmt_408_Update/cca)
  // 	$guard (~checkJZero) ifmaps[3 ][0 ] := rdata_I30// bits of buffering = 16. 
  //  file prog.linked.opt.aa, line 143
  // rdata_I30
  array_obj_ref_412_gather_scatter <=> (assign_stmt_208_to_assign_stmt_577/array_obj_ref_412_Sample/array_obj_ref_412_Split/split_req) (assign_stmt_208_to_assign_stmt_577/array_obj_ref_412_Sample/array_obj_ref_412_Split/split_ack)
  array_obj_ref_412_store_0 <=> (assign_stmt_208_to_assign_stmt_577/array_obj_ref_412_Sample/word_access_start/word_0/rr assign_stmt_208_to_assign_stmt_577/array_obj_ref_412_Update/word_access_complete/word_0/cr) (assign_stmt_208_to_assign_stmt_577/array_obj_ref_412_Sample/word_access_start/word_0/ra assign_stmt_208_to_assign_stmt_577/array_obj_ref_412_Update/word_access_complete/word_0/ca)
  // 	$guard (~checkJZero) ifmaps2[2 ][0 ] := rdata_I30// bits of buffering = 16. 
  //  file prog.linked.opt.aa, line 144
  // rdata_I30
  array_obj_ref_418_gather_scatter <=> (assign_stmt_208_to_assign_stmt_577/array_obj_ref_418_Sample/array_obj_ref_418_Split/split_req) (assign_stmt_208_to_assign_stmt_577/array_obj_ref_418_Sample/array_obj_ref_418_Split/split_ack)
  array_obj_ref_418_store_0 <=> (assign_stmt_208_to_assign_stmt_577/array_obj_ref_418_Sample/word_access_start/word_0/rr assign_stmt_208_to_assign_stmt_577/array_obj_ref_418_Update/word_access_complete/word_0/cr) (assign_stmt_208_to_assign_stmt_577/array_obj_ref_418_Sample/word_access_start/word_0/ra assign_stmt_208_to_assign_stmt_577/array_obj_ref_418_Update/word_access_complete/word_0/ca)
  // 	$guard (~checkJZero) $call accessMem (read_signal rowI_3 col1 write_data_zero ) (rdata_I31 ) 
  //  file prog.linked.opt.aa, line 145
  // rowI_3
  call_stmt_427_call <=> (assign_stmt_208_to_assign_stmt_577/call_stmt_427_Sample/crr assign_stmt_208_to_assign_stmt_577/call_stmt_427_Update/ccr) (assign_stmt_208_to_assign_stmt_577/call_stmt_427_Sample/cra assign_stmt_208_to_assign_stmt_577/call_stmt_427_Update/cca)
  // 	$guard (~checkJZero) ifmaps[3 ][1 ] := rdata_I31// bits of buffering = 16. 
  //  file prog.linked.opt.aa, line 146
  // rdata_I31
  array_obj_ref_431_gather_scatter <=> (assign_stmt_208_to_assign_stmt_577/array_obj_ref_431_Sample/array_obj_ref_431_Split/split_req) (assign_stmt_208_to_assign_stmt_577/array_obj_ref_431_Sample/array_obj_ref_431_Split/split_ack)
  array_obj_ref_431_store_0 <=> (assign_stmt_208_to_assign_stmt_577/array_obj_ref_431_Sample/word_access_start/word_0/rr assign_stmt_208_to_assign_stmt_577/array_obj_ref_431_Update/word_access_complete/word_0/cr) (assign_stmt_208_to_assign_stmt_577/array_obj_ref_431_Sample/word_access_start/word_0/ra assign_stmt_208_to_assign_stmt_577/array_obj_ref_431_Update/word_access_complete/word_0/ca)
  // 	$guard (~checkJZero) ifmaps2[2 ][1 ] := rdata_I31// bits of buffering = 16. 
  //  file prog.linked.opt.aa, line 147
  // rdata_I31
  array_obj_ref_437_gather_scatter <=> (assign_stmt_208_to_assign_stmt_577/array_obj_ref_437_Sample/array_obj_ref_437_Split/split_req) (assign_stmt_208_to_assign_stmt_577/array_obj_ref_437_Sample/array_obj_ref_437_Split/split_ack)
  array_obj_ref_437_store_0 <=> (assign_stmt_208_to_assign_stmt_577/array_obj_ref_437_Sample/word_access_start/word_0/rr assign_stmt_208_to_assign_stmt_577/array_obj_ref_437_Update/word_access_complete/word_0/cr) (assign_stmt_208_to_assign_stmt_577/array_obj_ref_437_Sample/word_access_start/word_0/ra assign_stmt_208_to_assign_stmt_577/array_obj_ref_437_Update/word_access_complete/word_0/ca)
  // 	$guard (~checkJZero) $call accessMem (read_signal rowI_3 col2 write_data_zero ) (rdata_I32 ) 
  //  file prog.linked.opt.aa, line 148
  // rowI_3
  call_stmt_446_call <=> (assign_stmt_208_to_assign_stmt_577/call_stmt_446_Sample/crr assign_stmt_208_to_assign_stmt_577/call_stmt_446_Update/ccr) (assign_stmt_208_to_assign_stmt_577/call_stmt_446_Sample/cra assign_stmt_208_to_assign_stmt_577/call_stmt_446_Update/cca)
  // 	$guard (~checkJZero) ifmaps[3 ][2 ] := rdata_I32// bits of buffering = 16. 
  //  file prog.linked.opt.aa, line 149
  // rdata_I32
  array_obj_ref_450_gather_scatter <=> (assign_stmt_208_to_assign_stmt_577/array_obj_ref_450_Sample/array_obj_ref_450_Split/split_req) (assign_stmt_208_to_assign_stmt_577/array_obj_ref_450_Sample/array_obj_ref_450_Split/split_ack)
  array_obj_ref_450_store_0 <=> (assign_stmt_208_to_assign_stmt_577/array_obj_ref_450_Sample/word_access_start/word_0/rr assign_stmt_208_to_assign_stmt_577/array_obj_ref_450_Update/word_access_complete/word_0/cr) (assign_stmt_208_to_assign_stmt_577/array_obj_ref_450_Sample/word_access_start/word_0/ra assign_stmt_208_to_assign_stmt_577/array_obj_ref_450_Update/word_access_complete/word_0/ca)
  // 	$guard (~checkJZero) ifmaps2[2 ][2 ] := rdata_I32// bits of buffering = 16. 
  //  file prog.linked.opt.aa, line 150
  // rdata_I32
  array_obj_ref_456_gather_scatter <=> (assign_stmt_208_to_assign_stmt_577/array_obj_ref_456_Sample/array_obj_ref_456_Split/split_req) (assign_stmt_208_to_assign_stmt_577/array_obj_ref_456_Sample/array_obj_ref_456_Split/split_ack)
  array_obj_ref_456_store_0 <=> (assign_stmt_208_to_assign_stmt_577/array_obj_ref_456_Sample/word_access_start/word_0/rr assign_stmt_208_to_assign_stmt_577/array_obj_ref_456_Update/word_access_complete/word_0/cr) (assign_stmt_208_to_assign_stmt_577/array_obj_ref_456_Sample/word_access_start/word_0/ra assign_stmt_208_to_assign_stmt_577/array_obj_ref_456_Update/word_access_complete/word_0/ca)
  // 	$guard (~checkJZero) $call accessMem (read_signal rowI_4 col0 write_data_zero ) (rdata_I40 ) 
  //  file prog.linked.opt.aa, line 151
  // rowI_4
  call_stmt_465_call <=> (assign_stmt_208_to_assign_stmt_577/call_stmt_465_Sample/crr assign_stmt_208_to_assign_stmt_577/call_stmt_465_Update/ccr) (assign_stmt_208_to_assign_stmt_577/call_stmt_465_Sample/cra assign_stmt_208_to_assign_stmt_577/call_stmt_465_Update/cca)
  // 	$guard (~checkJZero) ifmaps2[3 ][0 ] := rdata_I40// bits of buffering = 16. 
  //  file prog.linked.opt.aa, line 152
  // rdata_I40
  array_obj_ref_469_gather_scatter <=> (assign_stmt_208_to_assign_stmt_577/array_obj_ref_469_Sample/array_obj_ref_469_Split/split_req) (assign_stmt_208_to_assign_stmt_577/array_obj_ref_469_Sample/array_obj_ref_469_Split/split_ack)
  array_obj_ref_469_store_0 <=> (assign_stmt_208_to_assign_stmt_577/array_obj_ref_469_Sample/word_access_start/word_0/rr assign_stmt_208_to_assign_stmt_577/array_obj_ref_469_Update/word_access_complete/word_0/cr) (assign_stmt_208_to_assign_stmt_577/array_obj_ref_469_Sample/word_access_start/word_0/ra assign_stmt_208_to_assign_stmt_577/array_obj_ref_469_Update/word_access_complete/word_0/ca)
  // 	$guard (~checkJZero) $call accessMem (read_signal rowI_4 col1 write_data_zero ) (rdata_I41 ) 
  //  file prog.linked.opt.aa, line 153
  // rowI_4
  call_stmt_478_call <=> (assign_stmt_208_to_assign_stmt_577/call_stmt_478_Sample/crr assign_stmt_208_to_assign_stmt_577/call_stmt_478_Update/ccr) (assign_stmt_208_to_assign_stmt_577/call_stmt_478_Sample/cra assign_stmt_208_to_assign_stmt_577/call_stmt_478_Update/cca)
  // 	$guard (~checkJZero) ifmaps2[3 ][1 ] := rdata_I41// bits of buffering = 16. 
  //  file prog.linked.opt.aa, line 154
  // rdata_I41
  array_obj_ref_482_gather_scatter <=> (assign_stmt_208_to_assign_stmt_577/array_obj_ref_482_Sample/array_obj_ref_482_Split/split_req) (assign_stmt_208_to_assign_stmt_577/array_obj_ref_482_Sample/array_obj_ref_482_Split/split_ack)
  array_obj_ref_482_store_0 <=> (assign_stmt_208_to_assign_stmt_577/array_obj_ref_482_Sample/word_access_start/word_0/rr assign_stmt_208_to_assign_stmt_577/array_obj_ref_482_Update/word_access_complete/word_0/cr) (assign_stmt_208_to_assign_stmt_577/array_obj_ref_482_Sample/word_access_start/word_0/ra assign_stmt_208_to_assign_stmt_577/array_obj_ref_482_Update/word_access_complete/word_0/ca)
  // 	$guard (~checkJZero) $call accessMem (read_signal rowI_4 col2 write_data_zero ) (rdata_I42 ) 
  //  file prog.linked.opt.aa, line 155
  // rowI_4
  call_stmt_491_call <=> (assign_stmt_208_to_assign_stmt_577/call_stmt_491_Sample/crr assign_stmt_208_to_assign_stmt_577/call_stmt_491_Update/ccr) (assign_stmt_208_to_assign_stmt_577/call_stmt_491_Sample/cra assign_stmt_208_to_assign_stmt_577/call_stmt_491_Update/cca)
  // 	$guard (~checkJZero) ifmaps2[3 ][2 ] := rdata_I42// bits of buffering = 16. 
  //  file prog.linked.opt.aa, line 156
  // rdata_I42
  array_obj_ref_495_gather_scatter <=> (assign_stmt_208_to_assign_stmt_577/array_obj_ref_495_Sample/array_obj_ref_495_Split/split_req) (assign_stmt_208_to_assign_stmt_577/array_obj_ref_495_Sample/array_obj_ref_495_Split/split_ack)
  array_obj_ref_495_store_0 <=> (assign_stmt_208_to_assign_stmt_577/array_obj_ref_495_Sample/word_access_start/word_0/rr assign_stmt_208_to_assign_stmt_577/array_obj_ref_495_Update/word_access_complete/word_0/cr) (assign_stmt_208_to_assign_stmt_577/array_obj_ref_495_Sample/word_access_start/word_0/ra assign_stmt_208_to_assign_stmt_577/array_obj_ref_495_Update/word_access_complete/word_0/ca)
  // 	J_3 := ($bitcast ($uint<5>) (J + 3 ) )// bits of buffering = 5. 
  //  file prog.linked.opt.aa, line 157
  // (J + 3 )
  // J
  // ($bitcast ($uint<5>) (J + 3 ) )
  type_cast_502_inst <=> (assign_stmt_208_to_assign_stmt_577/type_cast_502_Sample/rr assign_stmt_208_to_assign_stmt_577/type_cast_502_Update/cr) (assign_stmt_208_to_assign_stmt_577/type_cast_502_Sample/ra assign_stmt_208_to_assign_stmt_577/type_cast_502_Update/ca)
  // 	$call accessMem (read_signal rowI J_3 write_data_zero ) (rdata_ifmap0 ) 
  //  file prog.linked.opt.aa, line 158
  // rowI
  // J_3
  call_stmt_509_call <=> (assign_stmt_208_to_assign_stmt_577/call_stmt_509_Sample/crr assign_stmt_208_to_assign_stmt_577/call_stmt_509_Update/ccr) (assign_stmt_208_to_assign_stmt_577/call_stmt_509_Sample/cra assign_stmt_208_to_assign_stmt_577/call_stmt_509_Update/cca)
  // 	ifmaps[0 ][col_to_be_replaced] := rdata_ifmap0// bits of buffering = 16. 
  //  file prog.linked.opt.aa, line 159
  // rdata_ifmap0
  // col_to_be_replaced
  array_obj_ref_512_index_1_resize <=> (assign_stmt_208_to_assign_stmt_577/array_obj_ref_512_index_resize_1/index_resize_req) (assign_stmt_208_to_assign_stmt_577/array_obj_ref_512_index_resize_1/index_resize_ack)
  array_obj_ref_512_index_1_rename <=> (assign_stmt_208_to_assign_stmt_577/array_obj_ref_512_index_scale_1/scale_rename_req) (assign_stmt_208_to_assign_stmt_577/array_obj_ref_512_index_scale_1/scale_rename_ack)
  array_obj_ref_512_index_offset <=> (assign_stmt_208_to_assign_stmt_577/array_obj_ref_512_final_index_sum_regn_Sample/req assign_stmt_208_to_assign_stmt_577/array_obj_ref_512_final_index_sum_regn_Update/req) (assign_stmt_208_to_assign_stmt_577/array_obj_ref_512_final_index_sum_regn_Sample/ack assign_stmt_208_to_assign_stmt_577/array_obj_ref_512_final_index_sum_regn_Update/ack)
  array_obj_ref_512_root_address_inst <=> (assign_stmt_208_to_assign_stmt_577/array_obj_ref_512_base_plus_offset/sum_rename_req) (assign_stmt_208_to_assign_stmt_577/array_obj_ref_512_base_plus_offset/sum_rename_ack)
  array_obj_ref_512_addr_0 <=> (assign_stmt_208_to_assign_stmt_577/array_obj_ref_512_word_addrgen/root_register_req) (assign_stmt_208_to_assign_stmt_577/array_obj_ref_512_word_addrgen/root_register_ack)
  array_obj_ref_512_gather_scatter <=> (assign_stmt_208_to_assign_stmt_577/array_obj_ref_512_Sample/array_obj_ref_512_Split/split_req) (assign_stmt_208_to_assign_stmt_577/array_obj_ref_512_Sample/array_obj_ref_512_Split/split_ack)
  array_obj_ref_512_store_0 <=> (assign_stmt_208_to_assign_stmt_577/array_obj_ref_512_Sample/word_access_start/word_0/rr assign_stmt_208_to_assign_stmt_577/array_obj_ref_512_Update/word_access_complete/word_0/cr) (assign_stmt_208_to_assign_stmt_577/array_obj_ref_512_Sample/word_access_start/word_0/ra assign_stmt_208_to_assign_stmt_577/array_obj_ref_512_Update/word_access_complete/word_0/ca)
  // 	$call accessMem (read_signal rowI_1 J_3 write_data_zero ) (rdata_ifmap1 ) 
  //  file prog.linked.opt.aa, line 160
  // rowI_1
  // J_3
  call_stmt_520_call <=> (assign_stmt_208_to_assign_stmt_577/call_stmt_520_Sample/crr assign_stmt_208_to_assign_stmt_577/call_stmt_520_Update/ccr) (assign_stmt_208_to_assign_stmt_577/call_stmt_520_Sample/cra assign_stmt_208_to_assign_stmt_577/call_stmt_520_Update/cca)
  // 	ifmaps[1 ][col_to_be_replaced] := rdata_ifmap1// bits of buffering = 16. 
  //  file prog.linked.opt.aa, line 161
  // rdata_ifmap1
  // col_to_be_replaced
  array_obj_ref_523_index_1_resize <=> (assign_stmt_208_to_assign_stmt_577/array_obj_ref_523_index_resize_1/index_resize_req) (assign_stmt_208_to_assign_stmt_577/array_obj_ref_523_index_resize_1/index_resize_ack)
  array_obj_ref_523_index_1_rename <=> (assign_stmt_208_to_assign_stmt_577/array_obj_ref_523_index_scale_1/scale_rename_req) (assign_stmt_208_to_assign_stmt_577/array_obj_ref_523_index_scale_1/scale_rename_ack)
  array_obj_ref_523_index_offset <=> (assign_stmt_208_to_assign_stmt_577/array_obj_ref_523_final_index_sum_regn_Sample/req assign_stmt_208_to_assign_stmt_577/array_obj_ref_523_final_index_sum_regn_Update/req) (assign_stmt_208_to_assign_stmt_577/array_obj_ref_523_final_index_sum_regn_Sample/ack assign_stmt_208_to_assign_stmt_577/array_obj_ref_523_final_index_sum_regn_Update/ack)
  array_obj_ref_523_root_address_inst <=> (assign_stmt_208_to_assign_stmt_577/array_obj_ref_523_base_plus_offset/sum_rename_req) (assign_stmt_208_to_assign_stmt_577/array_obj_ref_523_base_plus_offset/sum_rename_ack)
  array_obj_ref_523_addr_0 <=> (assign_stmt_208_to_assign_stmt_577/array_obj_ref_523_word_addrgen/root_register_req) (assign_stmt_208_to_assign_stmt_577/array_obj_ref_523_word_addrgen/root_register_ack)
  array_obj_ref_523_gather_scatter <=> (assign_stmt_208_to_assign_stmt_577/array_obj_ref_523_Sample/array_obj_ref_523_Split/split_req) (assign_stmt_208_to_assign_stmt_577/array_obj_ref_523_Sample/array_obj_ref_523_Split/split_ack)
  array_obj_ref_523_store_0 <=> (assign_stmt_208_to_assign_stmt_577/array_obj_ref_523_Sample/word_access_start/word_0/rr assign_stmt_208_to_assign_stmt_577/array_obj_ref_523_Update/word_access_complete/word_0/cr) (assign_stmt_208_to_assign_stmt_577/array_obj_ref_523_Sample/word_access_start/word_0/ra assign_stmt_208_to_assign_stmt_577/array_obj_ref_523_Update/word_access_complete/word_0/ca)
  // 	ifmaps2[0 ][col_to_be_replaced] := rdata_ifmap1// bits of buffering = 16. 
  //  file prog.linked.opt.aa, line 162
  // rdata_ifmap1
  // col_to_be_replaced
  array_obj_ref_528_index_1_resize <=> (assign_stmt_208_to_assign_stmt_577/array_obj_ref_528_index_resize_1/index_resize_req) (assign_stmt_208_to_assign_stmt_577/array_obj_ref_528_index_resize_1/index_resize_ack)
  array_obj_ref_528_index_1_rename <=> (assign_stmt_208_to_assign_stmt_577/array_obj_ref_528_index_scale_1/scale_rename_req) (assign_stmt_208_to_assign_stmt_577/array_obj_ref_528_index_scale_1/scale_rename_ack)
  array_obj_ref_528_index_offset <=> (assign_stmt_208_to_assign_stmt_577/array_obj_ref_528_final_index_sum_regn_Sample/req assign_stmt_208_to_assign_stmt_577/array_obj_ref_528_final_index_sum_regn_Update/req) (assign_stmt_208_to_assign_stmt_577/array_obj_ref_528_final_index_sum_regn_Sample/ack assign_stmt_208_to_assign_stmt_577/array_obj_ref_528_final_index_sum_regn_Update/ack)
  array_obj_ref_528_root_address_inst <=> (assign_stmt_208_to_assign_stmt_577/array_obj_ref_528_base_plus_offset/sum_rename_req) (assign_stmt_208_to_assign_stmt_577/array_obj_ref_528_base_plus_offset/sum_rename_ack)
  array_obj_ref_528_addr_0 <=> (assign_stmt_208_to_assign_stmt_577/array_obj_ref_528_word_addrgen/root_register_req) (assign_stmt_208_to_assign_stmt_577/array_obj_ref_528_word_addrgen/root_register_ack)
  array_obj_ref_528_gather_scatter <=> (assign_stmt_208_to_assign_stmt_577/array_obj_ref_528_Sample/array_obj_ref_528_Split/split_req) (assign_stmt_208_to_assign_stmt_577/array_obj_ref_528_Sample/array_obj_ref_528_Split/split_ack)
  array_obj_ref_528_store_0 <=> (assign_stmt_208_to_assign_stmt_577/array_obj_ref_528_Sample/word_access_start/word_0/rr assign_stmt_208_to_assign_stmt_577/array_obj_ref_528_Update/word_access_complete/word_0/cr) (assign_stmt_208_to_assign_stmt_577/array_obj_ref_528_Sample/word_access_start/word_0/ra assign_stmt_208_to_assign_stmt_577/array_obj_ref_528_Update/word_access_complete/word_0/ca)
  // 	$call accessMem (read_signal rowI_2 J_3 write_data_zero ) (rdata_ifmap2 ) 
  //  file prog.linked.opt.aa, line 163
  // rowI_2
  // J_3
  call_stmt_536_call <=> (assign_stmt_208_to_assign_stmt_577/call_stmt_536_Sample/crr assign_stmt_208_to_assign_stmt_577/call_stmt_536_Update/ccr) (assign_stmt_208_to_assign_stmt_577/call_stmt_536_Sample/cra assign_stmt_208_to_assign_stmt_577/call_stmt_536_Update/cca)
  // 	ifmaps[2 ][col_to_be_replaced] := rdata_ifmap2// bits of buffering = 16. 
  //  file prog.linked.opt.aa, line 164
  // rdata_ifmap2
  // col_to_be_replaced
  array_obj_ref_539_index_1_resize <=> (assign_stmt_208_to_assign_stmt_577/array_obj_ref_539_index_resize_1/index_resize_req) (assign_stmt_208_to_assign_stmt_577/array_obj_ref_539_index_resize_1/index_resize_ack)
  array_obj_ref_539_index_1_rename <=> (assign_stmt_208_to_assign_stmt_577/array_obj_ref_539_index_scale_1/scale_rename_req) (assign_stmt_208_to_assign_stmt_577/array_obj_ref_539_index_scale_1/scale_rename_ack)
  array_obj_ref_539_index_offset <=> (assign_stmt_208_to_assign_stmt_577/array_obj_ref_539_final_index_sum_regn_Sample/req assign_stmt_208_to_assign_stmt_577/array_obj_ref_539_final_index_sum_regn_Update/req) (assign_stmt_208_to_assign_stmt_577/array_obj_ref_539_final_index_sum_regn_Sample/ack assign_stmt_208_to_assign_stmt_577/array_obj_ref_539_final_index_sum_regn_Update/ack)
  array_obj_ref_539_root_address_inst <=> (assign_stmt_208_to_assign_stmt_577/array_obj_ref_539_base_plus_offset/sum_rename_req) (assign_stmt_208_to_assign_stmt_577/array_obj_ref_539_base_plus_offset/sum_rename_ack)
  array_obj_ref_539_addr_0 <=> (assign_stmt_208_to_assign_stmt_577/array_obj_ref_539_word_addrgen/root_register_req) (assign_stmt_208_to_assign_stmt_577/array_obj_ref_539_word_addrgen/root_register_ack)
  array_obj_ref_539_gather_scatter <=> (assign_stmt_208_to_assign_stmt_577/array_obj_ref_539_Sample/array_obj_ref_539_Split/split_req) (assign_stmt_208_to_assign_stmt_577/array_obj_ref_539_Sample/array_obj_ref_539_Split/split_ack)
  array_obj_ref_539_store_0 <=> (assign_stmt_208_to_assign_stmt_577/array_obj_ref_539_Sample/word_access_start/word_0/rr assign_stmt_208_to_assign_stmt_577/array_obj_ref_539_Update/word_access_complete/word_0/cr) (assign_stmt_208_to_assign_stmt_577/array_obj_ref_539_Sample/word_access_start/word_0/ra assign_stmt_208_to_assign_stmt_577/array_obj_ref_539_Update/word_access_complete/word_0/ca)
  // 	ifmaps2[1 ][col_to_be_replaced] := rdata_ifmap2// bits of buffering = 16. 
  //  file prog.linked.opt.aa, line 165
  // rdata_ifmap2
  // col_to_be_replaced
  array_obj_ref_544_index_1_resize <=> (assign_stmt_208_to_assign_stmt_577/array_obj_ref_544_index_resize_1/index_resize_req) (assign_stmt_208_to_assign_stmt_577/array_obj_ref_544_index_resize_1/index_resize_ack)
  array_obj_ref_544_index_1_rename <=> (assign_stmt_208_to_assign_stmt_577/array_obj_ref_544_index_scale_1/scale_rename_req) (assign_stmt_208_to_assign_stmt_577/array_obj_ref_544_index_scale_1/scale_rename_ack)
  array_obj_ref_544_index_offset <=> (assign_stmt_208_to_assign_stmt_577/array_obj_ref_544_final_index_sum_regn_Sample/req assign_stmt_208_to_assign_stmt_577/array_obj_ref_544_final_index_sum_regn_Update/req) (assign_stmt_208_to_assign_stmt_577/array_obj_ref_544_final_index_sum_regn_Sample/ack assign_stmt_208_to_assign_stmt_577/array_obj_ref_544_final_index_sum_regn_Update/ack)
  array_obj_ref_544_root_address_inst <=> (assign_stmt_208_to_assign_stmt_577/array_obj_ref_544_base_plus_offset/sum_rename_req) (assign_stmt_208_to_assign_stmt_577/array_obj_ref_544_base_plus_offset/sum_rename_ack)
  array_obj_ref_544_addr_0 <=> (assign_stmt_208_to_assign_stmt_577/array_obj_ref_544_word_addrgen/root_register_req) (assign_stmt_208_to_assign_stmt_577/array_obj_ref_544_word_addrgen/root_register_ack)
  array_obj_ref_544_gather_scatter <=> (assign_stmt_208_to_assign_stmt_577/array_obj_ref_544_Sample/array_obj_ref_544_Split/split_req) (assign_stmt_208_to_assign_stmt_577/array_obj_ref_544_Sample/array_obj_ref_544_Split/split_ack)
  array_obj_ref_544_store_0 <=> (assign_stmt_208_to_assign_stmt_577/array_obj_ref_544_Sample/word_access_start/word_0/rr assign_stmt_208_to_assign_stmt_577/array_obj_ref_544_Update/word_access_complete/word_0/cr) (assign_stmt_208_to_assign_stmt_577/array_obj_ref_544_Sample/word_access_start/word_0/ra assign_stmt_208_to_assign_stmt_577/array_obj_ref_544_Update/word_access_complete/word_0/ca)
  // 	$call accessMem (read_signal rowI_3 J_3 write_data_zero ) (rdata_ifmap3 ) 
  //  file prog.linked.opt.aa, line 166
  // rowI_3
  // J_3
  call_stmt_552_call <=> (assign_stmt_208_to_assign_stmt_577/call_stmt_552_Sample/crr assign_stmt_208_to_assign_stmt_577/call_stmt_552_Update/ccr) (assign_stmt_208_to_assign_stmt_577/call_stmt_552_Sample/cra assign_stmt_208_to_assign_stmt_577/call_stmt_552_Update/cca)
  // 	ifmaps[3 ][col_to_be_replaced] := rdata_ifmap3// bits of buffering = 16. 
  //  file prog.linked.opt.aa, line 167
  // rdata_ifmap3
  // col_to_be_replaced
  array_obj_ref_555_index_1_resize <=> (assign_stmt_208_to_assign_stmt_577/array_obj_ref_555_index_resize_1/index_resize_req) (assign_stmt_208_to_assign_stmt_577/array_obj_ref_555_index_resize_1/index_resize_ack)
  array_obj_ref_555_index_1_rename <=> (assign_stmt_208_to_assign_stmt_577/array_obj_ref_555_index_scale_1/scale_rename_req) (assign_stmt_208_to_assign_stmt_577/array_obj_ref_555_index_scale_1/scale_rename_ack)
  array_obj_ref_555_index_offset <=> (assign_stmt_208_to_assign_stmt_577/array_obj_ref_555_final_index_sum_regn_Sample/req assign_stmt_208_to_assign_stmt_577/array_obj_ref_555_final_index_sum_regn_Update/req) (assign_stmt_208_to_assign_stmt_577/array_obj_ref_555_final_index_sum_regn_Sample/ack assign_stmt_208_to_assign_stmt_577/array_obj_ref_555_final_index_sum_regn_Update/ack)
  array_obj_ref_555_root_address_inst <=> (assign_stmt_208_to_assign_stmt_577/array_obj_ref_555_base_plus_offset/sum_rename_req) (assign_stmt_208_to_assign_stmt_577/array_obj_ref_555_base_plus_offset/sum_rename_ack)
  array_obj_ref_555_addr_0 <=> (assign_stmt_208_to_assign_stmt_577/array_obj_ref_555_word_addrgen/root_register_req) (assign_stmt_208_to_assign_stmt_577/array_obj_ref_555_word_addrgen/root_register_ack)
  array_obj_ref_555_gather_scatter <=> (assign_stmt_208_to_assign_stmt_577/array_obj_ref_555_Sample/array_obj_ref_555_Split/split_req) (assign_stmt_208_to_assign_stmt_577/array_obj_ref_555_Sample/array_obj_ref_555_Split/split_ack)
  array_obj_ref_555_store_0 <=> (assign_stmt_208_to_assign_stmt_577/array_obj_ref_555_Sample/word_access_start/word_0/rr assign_stmt_208_to_assign_stmt_577/array_obj_ref_555_Update/word_access_complete/word_0/cr) (assign_stmt_208_to_assign_stmt_577/array_obj_ref_555_Sample/word_access_start/word_0/ra assign_stmt_208_to_assign_stmt_577/array_obj_ref_555_Update/word_access_complete/word_0/ca)
  // 	ifmaps2[2 ][col_to_be_replaced] := rdata_ifmap3// bits of buffering = 16. 
  //  file prog.linked.opt.aa, line 168
  // rdata_ifmap3
  // col_to_be_replaced
  array_obj_ref_560_index_1_resize <=> (assign_stmt_208_to_assign_stmt_577/array_obj_ref_560_index_resize_1/index_resize_req) (assign_stmt_208_to_assign_stmt_577/array_obj_ref_560_index_resize_1/index_resize_ack)
  array_obj_ref_560_index_1_rename <=> (assign_stmt_208_to_assign_stmt_577/array_obj_ref_560_index_scale_1/scale_rename_req) (assign_stmt_208_to_assign_stmt_577/array_obj_ref_560_index_scale_1/scale_rename_ack)
  array_obj_ref_560_index_offset <=> (assign_stmt_208_to_assign_stmt_577/array_obj_ref_560_final_index_sum_regn_Sample/req assign_stmt_208_to_assign_stmt_577/array_obj_ref_560_final_index_sum_regn_Update/req) (assign_stmt_208_to_assign_stmt_577/array_obj_ref_560_final_index_sum_regn_Sample/ack assign_stmt_208_to_assign_stmt_577/array_obj_ref_560_final_index_sum_regn_Update/ack)
  array_obj_ref_560_root_address_inst <=> (assign_stmt_208_to_assign_stmt_577/array_obj_ref_560_base_plus_offset/sum_rename_req) (assign_stmt_208_to_assign_stmt_577/array_obj_ref_560_base_plus_offset/sum_rename_ack)
  array_obj_ref_560_addr_0 <=> (assign_stmt_208_to_assign_stmt_577/array_obj_ref_560_word_addrgen/root_register_req) (assign_stmt_208_to_assign_stmt_577/array_obj_ref_560_word_addrgen/root_register_ack)
  array_obj_ref_560_gather_scatter <=> (assign_stmt_208_to_assign_stmt_577/array_obj_ref_560_Sample/array_obj_ref_560_Split/split_req) (assign_stmt_208_to_assign_stmt_577/array_obj_ref_560_Sample/array_obj_ref_560_Split/split_ack)
  array_obj_ref_560_store_0 <=> (assign_stmt_208_to_assign_stmt_577/array_obj_ref_560_Sample/word_access_start/word_0/rr assign_stmt_208_to_assign_stmt_577/array_obj_ref_560_Update/word_access_complete/word_0/cr) (assign_stmt_208_to_assign_stmt_577/array_obj_ref_560_Sample/word_access_start/word_0/ra assign_stmt_208_to_assign_stmt_577/array_obj_ref_560_Update/word_access_complete/word_0/ca)
  // 	$call accessMem (read_signal rowI_4 J_3 write_data_zero ) (rdata_ifmap4 ) 
  //  file prog.linked.opt.aa, line 169
  // rowI_4
  // J_3
  call_stmt_568_call <=> (assign_stmt_208_to_assign_stmt_577/call_stmt_568_Sample/crr assign_stmt_208_to_assign_stmt_577/call_stmt_568_Update/ccr) (assign_stmt_208_to_assign_stmt_577/call_stmt_568_Sample/cra assign_stmt_208_to_assign_stmt_577/call_stmt_568_Update/cca)
  // 	ifmaps2[3 ][col_to_be_replaced] := rdata_ifmap4// bits of buffering = 16. 
  //  file prog.linked.opt.aa, line 170
  // rdata_ifmap4
  // col_to_be_replaced
  array_obj_ref_571_index_1_resize <=> (assign_stmt_208_to_assign_stmt_577/array_obj_ref_571_index_resize_1/index_resize_req) (assign_stmt_208_to_assign_stmt_577/array_obj_ref_571_index_resize_1/index_resize_ack)
  array_obj_ref_571_index_1_rename <=> (assign_stmt_208_to_assign_stmt_577/array_obj_ref_571_index_scale_1/scale_rename_req) (assign_stmt_208_to_assign_stmt_577/array_obj_ref_571_index_scale_1/scale_rename_ack)
  array_obj_ref_571_index_offset <=> (assign_stmt_208_to_assign_stmt_577/array_obj_ref_571_final_index_sum_regn_Sample/req assign_stmt_208_to_assign_stmt_577/array_obj_ref_571_final_index_sum_regn_Update/req) (assign_stmt_208_to_assign_stmt_577/array_obj_ref_571_final_index_sum_regn_Sample/ack assign_stmt_208_to_assign_stmt_577/array_obj_ref_571_final_index_sum_regn_Update/ack)
  array_obj_ref_571_root_address_inst <=> (assign_stmt_208_to_assign_stmt_577/array_obj_ref_571_base_plus_offset/sum_rename_req) (assign_stmt_208_to_assign_stmt_577/array_obj_ref_571_base_plus_offset/sum_rename_ack)
  array_obj_ref_571_addr_0 <=> (assign_stmt_208_to_assign_stmt_577/array_obj_ref_571_word_addrgen/root_register_req) (assign_stmt_208_to_assign_stmt_577/array_obj_ref_571_word_addrgen/root_register_ack)
  array_obj_ref_571_gather_scatter <=> (assign_stmt_208_to_assign_stmt_577/array_obj_ref_571_Sample/array_obj_ref_571_Split/split_req) (assign_stmt_208_to_assign_stmt_577/array_obj_ref_571_Sample/array_obj_ref_571_Split/split_ack)
  array_obj_ref_571_store_0 <=> (assign_stmt_208_to_assign_stmt_577/array_obj_ref_571_Sample/word_access_start/word_0/rr assign_stmt_208_to_assign_stmt_577/array_obj_ref_571_Update/word_access_complete/word_0/cr) (assign_stmt_208_to_assign_stmt_577/array_obj_ref_571_Sample/word_access_start/word_0/ra assign_stmt_208_to_assign_stmt_577/array_obj_ref_571_Update/word_access_complete/word_0/ca)
}
$module [cal_col_to_be_replaced] 
{
  $in J:$int<5>
  // can point into 
  col_to_be_replaced:$int<2>
  // can point into 
  $out new_col_to_be_replaced:$int<2>
  // can point into 
  // pipe-declarations for block %cal_col_to_be_replaced
  //  file prog.linked.opt.aa, line 173
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    ::[assign_stmt_586_to_assign_stmt_614] 
    {
      // start:  	col_to_be_replaced_3 := ($bitcast ($uint<2>) 3  )// bits of buffering = 2. 
      //  file prog.linked.opt.aa, line 178
      // constant! 
      // end:  	col_to_be_replaced_3 := ($bitcast ($uint<2>) 3  )// bits of buffering = 2. 
      // start:  	col_to_be_replaced_other := ( $mux (col_to_be_replaced == 3 ) ($bitcast ($uint<2>) 0  )  ($bitcast ($uint<2>) (col_to_be_replaced + 1 ) ) ) // bits of buffering = 2. 
      //  file prog.linked.opt.aa, line 179
      // Source expression
      // ( $mux (col_to_be_replaced == 3 ) ($bitcast ($uint<2>) 0  )  ($bitcast ($uint<2>) (col_to_be_replaced + 1 ) ) ) 
      $T[MUX_597_sample_start_] 
      $T[MUX_597_sample_completed_] 
      $T[MUX_597_update_start_] 
      $T[MUX_597_update_completed_] 
      // (col_to_be_replaced == 3 )
      // col_to_be_replaced
      // ($bitcast ($uint<2>) (col_to_be_replaced + 1 ) )
      // (col_to_be_replaced + 1 )
      // col_to_be_replaced
      // start: Forward dependencies from (col_to_be_replaced == 3 ) to transition MUX_597_sample_start_
      // done: Forward dependencies from (col_to_be_replaced == 3 ) to transition MUX_597_sample_start_
      // start: Forward dependencies from ($bitcast ($uint<2>) (col_to_be_replaced + 1 ) ) to transition MUX_597_sample_start_
      // done: Forward dependencies from ($bitcast ($uint<2>) (col_to_be_replaced + 1 ) ) to transition MUX_597_sample_start_
      ;;[MUX_597_start] 
      {
        // ternary expression: 
        $T [req] $T [ack] // sample req/ack
      }
      ;;[MUX_597_complete] 
      {
        // ternary expression: 
        $T [req] $T [ack] // update req/ack
      }
      MUX_597_sample_start_ &-> (MUX_597_start)
      MUX_597_sample_completed_ <-& (MUX_597_start)
      MUX_597_sample_completed_ &-> ($null)
      MUX_597_update_start_ &-> (MUX_597_complete)
      MUX_597_update_completed_ <-& (MUX_597_complete)
      // Target expression
      // (as target) col_to_be_replaced_other
      // start: WAR dependencies for col_to_be_replaced_other
      // done: WAR dependencies for col_to_be_replaced_other
      // end:  	col_to_be_replaced_other := ( $mux (col_to_be_replaced == 3 ) ($bitcast ($uint<2>) 0  )  ($bitcast ($uint<2>) (col_to_be_replaced + 1 ) ) ) // bits of buffering = 2. 
      // start: WAR dependencies for checkJZero
      // ignored out-of-scope w_root  J : $uint<5> 
      // done: WAR dependencies for checkJZero
      // start:  	$volatile checkJZero := ( $mux (J == last_value_J) ($bitcast ($uint<1>) 0  )  ($bitcast ($uint<1>) 1  ) ) 
      //  file prog.linked.opt.aa, line 180
      // volatile! 
      // Source expression
      // ( $mux (J == last_value_J) ($bitcast ($uint<1>) 0  )  ($bitcast ($uint<1>) 1  ) ) 
      // (J == last_value_J)
      // J
      // Target expression
      // (as target) checkJZero
      // start: WAR dependencies for checkJZero
      // ignored out-of-scope w_root  J : $uint<5> 
      // done: WAR dependencies for checkJZero
      // end:  	$volatile checkJZero := ( $mux (J == last_value_J) ($bitcast ($uint<1>) 0  )  ($bitcast ($uint<1>) 1  ) ) 
      // start:  	new_col_to_be_replaced := ( $mux checkJZero col_to_be_replaced_other  col_to_be_replaced_3 ) // bits of buffering = 2. 
      //  file prog.linked.opt.aa, line 181
      // Source expression
      // ( $mux checkJZero col_to_be_replaced_other  col_to_be_replaced_3 ) 
      $T[MUX_613_sample_start_] 
      $T[MUX_613_sample_completed_] 
      $T[MUX_613_update_start_] 
      $T[MUX_613_update_completed_] 
      // checkJZero
      // col_to_be_replaced_other
      // start: Forward dependencies from checkJZero to transition MUX_613_sample_start_
      // done: Forward dependencies from checkJZero to transition MUX_613_sample_start_
      // start: Forward dependencies from col_to_be_replaced_other to transition MUX_613_sample_start_
      MUX_613_sample_start_ <-& (MUX_597_update_completed_)
      // done: Forward dependencies from col_to_be_replaced_other to transition MUX_613_sample_start_
      ;;[MUX_613_start] 
      {
        // ternary expression: 
        $T [req] $T [ack] // sample req/ack
      }
      ;;[MUX_613_complete] 
      {
        // ternary expression: 
        $T [req] $T [ack] // update req/ack
      }
      MUX_613_sample_start_ &-> (MUX_613_start)
      MUX_613_sample_completed_ <-& (MUX_613_start)
      MUX_613_sample_completed_ &-> ($null)
      MUX_613_update_start_ &-> (MUX_613_complete)
      MUX_613_update_completed_ <-& (MUX_613_complete)
      // Target expression
      // (as target) new_col_to_be_replaced
      // new_col_to_be_replaced
      // write to interface object
      // start: WAR dependencies for new_col_to_be_replaced
      // done: WAR dependencies for new_col_to_be_replaced
      // new_col_to_be_replaced
      // write to interface object
      // end:  	new_col_to_be_replaced := ( $mux checkJZero col_to_be_replaced_other  col_to_be_replaced_3 ) // bits of buffering = 2. 
      // load-store dependencies..
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %cal_col_to_be_replaced
    //  file prog.linked.opt.aa, line 173
    // 	col_to_be_replaced_3 := ($bitcast ($uint<2>) 3  )// bits of buffering = 2. 
    //  file prog.linked.opt.aa, line 178
    $constant $W[col_to_be_replaced_3_586] : $int<2> := _b11 // 3
    // ( $mux (col_to_be_replaced == 3 ) ($bitcast ($uint<2>) 0  )  ($bitcast ($uint<2>) (col_to_be_replaced + 1 ) ) ) 
    // 3 
    $constant $W[konst_589_wire_constant] : $int<2> := _b11// 3
    // ($bitcast ($uint<2>) 0  )
    $constant $W[type_cast_592_wire_constant] : $int<2> := _b00// 0
    // 1 
    $constant $W[konst_594_wire_constant] : $int<2> := _b01// 1
    // ( $mux (J == last_value_J) ($bitcast ($uint<1>) 0  )  ($bitcast ($uint<1>) 1  ) ) 
    // last_value_J
    $constant $W[R_last_value_J_601_wire_constant] : $int<5> := _b00100// 4
    // ($bitcast ($uint<1>) 0  )
    $constant $W[type_cast_604_wire_constant] : $int<1> := _b0// 0
    // ($bitcast ($uint<1>) 1  )
    $constant $W[type_cast_606_wire_constant] : $int<1> := _b1// 1
    // ( $mux checkJZero col_to_be_replaced_other  col_to_be_replaced_3 ) 
    // 	col_to_be_replaced_other := ( $mux (col_to_be_replaced == 3 ) ($bitcast ($uint<2>) 0  )  ($bitcast ($uint<2>) (col_to_be_replaced + 1 ) ) ) // bits of buffering = 2. 
    //  file prog.linked.opt.aa, line 179
    // (col_to_be_replaced == 3 )
    $intermediate $W[EQ_u2_u1_590_wire] : $int<1>
    // (col_to_be_replaced + 1 )
    $intermediate $W[ADD_u2_u2_595_wire] : $int<2>
    // ($bitcast ($uint<2>) (col_to_be_replaced + 1 ) )
    $intermediate $W[type_cast_596_wire] : $int<2>
    // col_to_be_replaced_other
    $W[col_to_be_replaced_other_598] : $int<2>
    // 	$volatile checkJZero := ( $mux (J == last_value_J) ($bitcast ($uint<1>) 0  )  ($bitcast ($uint<1>) 1  ) ) 
    //  file prog.linked.opt.aa, line 180
    // (J == last_value_J)
    $intermediate $W[EQ_u5_u1_602_wire] : $int<1>
    // checkJZero
    $W[checkJZero_608] : $int<1>
    // 	new_col_to_be_replaced := ( $mux checkJZero col_to_be_replaced_other  col_to_be_replaced_3 ) // bits of buffering = 2. 
    //  file prog.linked.opt.aa, line 181
    // new_col_to_be_replaced
    // 	col_to_be_replaced_other := ( $mux (col_to_be_replaced == 3 ) ($bitcast ($uint<2>) 0  )  ($bitcast ($uint<2>) (col_to_be_replaced + 1 ) ) ) // bits of buffering = 2. 
    //  file prog.linked.opt.aa, line 179
    // (col_to_be_replaced == 3 )
    ==[EQ_u2_u1_590_inst] (col_to_be_replaced konst_589_wire_constant) (EQ_u2_u1_590_wire)   $flowthrough 
    $delay EQ_u2_u1_590_inst 0
    // (col_to_be_replaced + 1 )
    +[ADD_u2_u2_595_inst] (col_to_be_replaced konst_594_wire_constant) (ADD_u2_u2_595_wire)   $flowthrough 
    $delay ADD_u2_u2_595_inst 0
    // ($bitcast ($uint<2>) (col_to_be_replaced + 1 ) )
    # := [type_cast_596_inst] (ADD_u2_u2_595_wire) (type_cast_596_wire)   $flowthrough
    $delay type_cast_596_inst 0
    // ( $mux (col_to_be_replaced == 3 ) ($bitcast ($uint<2>) 0  )  ($bitcast ($uint<2>) (col_to_be_replaced + 1 ) ) ) 
    ? [MUX_597_inst] (EQ_u2_u1_590_wire type_cast_592_wire_constant type_cast_596_wire) (col_to_be_replaced_other_598) 
    $buffering  $out MUX_597_inst col_to_be_replaced_other_598 1
    // 	$volatile checkJZero := ( $mux (J == last_value_J) ($bitcast ($uint<1>) 0  )  ($bitcast ($uint<1>) 1  ) ) 
    //  file prog.linked.opt.aa, line 180
    // (J == last_value_J)
    ==[EQ_u5_u1_602_inst] (J R_last_value_J_601_wire_constant) (EQ_u5_u1_602_wire)   $flowthrough 
    $delay EQ_u5_u1_602_inst 0
    // ( $mux (J == last_value_J) ($bitcast ($uint<1>) 0  )  ($bitcast ($uint<1>) 1  ) ) 
    ? [MUX_607_inst] (EQ_u5_u1_602_wire type_cast_604_wire_constant type_cast_606_wire_constant) (checkJZero_608)  $flowthrough
    // 	new_col_to_be_replaced := ( $mux checkJZero col_to_be_replaced_other  col_to_be_replaced_3 ) // bits of buffering = 2. 
    //  file prog.linked.opt.aa, line 181
    // ( $mux checkJZero col_to_be_replaced_other  col_to_be_replaced_3 ) 
    ? [MUX_613_inst] (checkJZero_608 col_to_be_replaced_other_598 col_to_be_replaced_3_586) (new_col_to_be_replaced) 
    $buffering  $out MUX_613_inst new_col_to_be_replaced 1
  }
  // end data-path
  // 	col_to_be_replaced_other := ( $mux (col_to_be_replaced == 3 ) ($bitcast ($uint<2>) 0  )  ($bitcast ($uint<2>) (col_to_be_replaced + 1 ) ) ) // bits of buffering = 2. 
  //  file prog.linked.opt.aa, line 179
  // (col_to_be_replaced == 3 )
  // col_to_be_replaced
  // (col_to_be_replaced + 1 )
  // col_to_be_replaced
  // ( $mux (col_to_be_replaced == 3 ) ($bitcast ($uint<2>) 0  )  ($bitcast ($uint<2>) (col_to_be_replaced + 1 ) ) ) 
  MUX_597_inst <=> (assign_stmt_586_to_assign_stmt_614/MUX_597_start/req assign_stmt_586_to_assign_stmt_614/MUX_597_complete/req) (assign_stmt_586_to_assign_stmt_614/MUX_597_start/ack assign_stmt_586_to_assign_stmt_614/MUX_597_complete/ack)
  // 	$volatile checkJZero := ( $mux (J == last_value_J) ($bitcast ($uint<1>) 0  )  ($bitcast ($uint<1>) 1  ) ) 
  //  file prog.linked.opt.aa, line 180
  // (J == last_value_J)
  // J
  // ( $mux (J == last_value_J) ($bitcast ($uint<1>) 0  )  ($bitcast ($uint<1>) 1  ) ) 
  // 	new_col_to_be_replaced := ( $mux checkJZero col_to_be_replaced_other  col_to_be_replaced_3 ) // bits of buffering = 2. 
  //  file prog.linked.opt.aa, line 181
  // checkJZero
  // col_to_be_replaced_other
  // ( $mux checkJZero col_to_be_replaced_other  col_to_be_replaced_3 ) 
  MUX_613_inst <=> (assign_stmt_586_to_assign_stmt_614/MUX_613_start/req assign_stmt_586_to_assign_stmt_614/MUX_613_complete/req) (assign_stmt_586_to_assign_stmt_614/MUX_613_start/ack assign_stmt_586_to_assign_stmt_614/MUX_613_complete/ack)
}
$module [mainAcc] 
{
  $in I:$int<6>
  // can point into 
  J:$int<5>
  // can point into 
  col_to_be_replaced:$int<2>
  // can point into 
  $out ofmap_pixel:$int<16>
  // can point into 
  // pipe-declarations for block %mainAcc
  //  file prog.linked.opt.aa, line 183
  // memory-space 0 is read from.
  // memory-space 1 is read from.
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    ::[assign_stmt_624_to_assign_stmt_924] 
    {
      // start:  	zero := ($bitcast ($uint<2>) 0  )// bits of buffering = 2. 
      //  file prog.linked.opt.aa, line 188
      // constant! 
      // end:  	zero := ($bitcast ($uint<2>) 0  )// bits of buffering = 2. 
      // start:  	one := ($bitcast ($uint<2>) 1  )// bits of buffering = 2. 
      //  file prog.linked.opt.aa, line 189
      // constant! 
      // end:  	one := ($bitcast ($uint<2>) 1  )// bits of buffering = 2. 
      // start:  	two := ($bitcast ($uint<2>) 2  )// bits of buffering = 2. 
      //  file prog.linked.opt.aa, line 190
      // constant! 
      // end:  	two := ($bitcast ($uint<2>) 2  )// bits of buffering = 2. 
      // start:  	three := ($bitcast ($uint<2>) 3  )// bits of buffering = 2. 
      //  file prog.linked.opt.aa, line 191
      // constant! 
      // end:  	three := ($bitcast ($uint<2>) 3  )// bits of buffering = 2. 
      // start:  	col_to_be_replaced_1 := ( $mux (col_to_be_replaced == 0 ) ($bitcast ($uint<2>) 3  )  ($bitcast ($uint<2>) (col_to_be_replaced - 1 ) ) ) // bits of buffering = 2. 
      //  file prog.linked.opt.aa, line 192
      // Source expression
      // ( $mux (col_to_be_replaced == 0 ) ($bitcast ($uint<2>) 3  )  ($bitcast ($uint<2>) (col_to_be_replaced - 1 ) ) ) 
      $T[MUX_647_sample_start_] 
      $T[MUX_647_sample_completed_] 
      $T[MUX_647_update_start_] 
      $T[MUX_647_update_completed_] 
      // (col_to_be_replaced == 0 )
      // col_to_be_replaced
      // ($bitcast ($uint<2>) (col_to_be_replaced - 1 ) )
      // (col_to_be_replaced - 1 )
      // col_to_be_replaced
      // start: Forward dependencies from (col_to_be_replaced == 0 ) to transition MUX_647_sample_start_
      // done: Forward dependencies from (col_to_be_replaced == 0 ) to transition MUX_647_sample_start_
      // start: Forward dependencies from ($bitcast ($uint<2>) (col_to_be_replaced - 1 ) ) to transition MUX_647_sample_start_
      // done: Forward dependencies from ($bitcast ($uint<2>) (col_to_be_replaced - 1 ) ) to transition MUX_647_sample_start_
      ;;[MUX_647_start] 
      {
        // ternary expression: 
        $T [req] $T [ack] // sample req/ack
      }
      ;;[MUX_647_complete] 
      {
        // ternary expression: 
        $T [req] $T [ack] // update req/ack
      }
      MUX_647_sample_start_ &-> (MUX_647_start)
      MUX_647_sample_completed_ <-& (MUX_647_start)
      MUX_647_sample_completed_ &-> ($null)
      MUX_647_update_start_ &-> (MUX_647_complete)
      MUX_647_update_completed_ <-& (MUX_647_complete)
      // Target expression
      // (as target) col_to_be_replaced_1
      // start: WAR dependencies for col_to_be_replaced_1
      // done: WAR dependencies for col_to_be_replaced_1
      // end:  	col_to_be_replaced_1 := ( $mux (col_to_be_replaced == 0 ) ($bitcast ($uint<2>) 3  )  ($bitcast ($uint<2>) (col_to_be_replaced - 1 ) ) ) // bits of buffering = 2. 
      // start:  	col_to_be_replaced_2 := ( $mux (col_to_be_replaced >= 2 ) ($bitcast ($uint<2>) (col_to_be_replaced - 2 ) )  ($bitcast ($uint<2>) (col_to_be_replaced + 2 ) ) ) // bits of buffering = 2. 
      //  file prog.linked.opt.aa, line 193
      // Source expression
      // ( $mux (col_to_be_replaced >= 2 ) ($bitcast ($uint<2>) (col_to_be_replaced - 2 ) )  ($bitcast ($uint<2>) (col_to_be_replaced + 2 ) ) ) 
      $T[MUX_661_sample_start_] 
      $T[MUX_661_sample_completed_] 
      $T[MUX_661_update_start_] 
      $T[MUX_661_update_completed_] 
      // (col_to_be_replaced >= 2 )
      // col_to_be_replaced
      // ($bitcast ($uint<2>) (col_to_be_replaced - 2 ) )
      // (col_to_be_replaced - 2 )
      // col_to_be_replaced
      // ($bitcast ($uint<2>) (col_to_be_replaced + 2 ) )
      // (col_to_be_replaced + 2 )
      // col_to_be_replaced
      // start: Forward dependencies from (col_to_be_replaced >= 2 ) to transition MUX_661_sample_start_
      // done: Forward dependencies from (col_to_be_replaced >= 2 ) to transition MUX_661_sample_start_
      // start: Forward dependencies from ($bitcast ($uint<2>) (col_to_be_replaced - 2 ) ) to transition MUX_661_sample_start_
      // done: Forward dependencies from ($bitcast ($uint<2>) (col_to_be_replaced - 2 ) ) to transition MUX_661_sample_start_
      // start: Forward dependencies from ($bitcast ($uint<2>) (col_to_be_replaced + 2 ) ) to transition MUX_661_sample_start_
      // done: Forward dependencies from ($bitcast ($uint<2>) (col_to_be_replaced + 2 ) ) to transition MUX_661_sample_start_
      ;;[MUX_661_start] 
      {
        // ternary expression: 
        $T [req] $T [ack] // sample req/ack
      }
      ;;[MUX_661_complete] 
      {
        // ternary expression: 
        $T [req] $T [ack] // update req/ack
      }
      MUX_661_sample_start_ &-> (MUX_661_start)
      MUX_661_sample_completed_ <-& (MUX_661_start)
      MUX_661_sample_completed_ &-> ($null)
      MUX_661_update_start_ &-> (MUX_661_complete)
      MUX_661_update_completed_ <-& (MUX_661_complete)
      // Target expression
      // (as target) col_to_be_replaced_2
      // start: WAR dependencies for col_to_be_replaced_2
      // done: WAR dependencies for col_to_be_replaced_2
      // end:  	col_to_be_replaced_2 := ( $mux (col_to_be_replaced >= 2 ) ($bitcast ($uint<2>) (col_to_be_replaced - 2 ) )  ($bitcast ($uint<2>) (col_to_be_replaced + 2 ) ) ) // bits of buffering = 2. 
      // start:  	col_to_be_replaced_3 := ( $mux (col_to_be_replaced == 3 ) ($bitcast ($uint<2>) 0  )  ($bitcast ($uint<2>) (col_to_be_replaced + 1 ) ) ) // bits of buffering = 2. 
      //  file prog.linked.opt.aa, line 194
      // Source expression
      // ( $mux (col_to_be_replaced == 3 ) ($bitcast ($uint<2>) 0  )  ($bitcast ($uint<2>) (col_to_be_replaced + 1 ) ) ) 
      $T[MUX_673_sample_start_] 
      $T[MUX_673_sample_completed_] 
      $T[MUX_673_update_start_] 
      $T[MUX_673_update_completed_] 
      // (col_to_be_replaced == 3 )
      // col_to_be_replaced
      // ($bitcast ($uint<2>) (col_to_be_replaced + 1 ) )
      // (col_to_be_replaced + 1 )
      // col_to_be_replaced
      // start: Forward dependencies from (col_to_be_replaced == 3 ) to transition MUX_673_sample_start_
      // done: Forward dependencies from (col_to_be_replaced == 3 ) to transition MUX_673_sample_start_
      // start: Forward dependencies from ($bitcast ($uint<2>) (col_to_be_replaced + 1 ) ) to transition MUX_673_sample_start_
      // done: Forward dependencies from ($bitcast ($uint<2>) (col_to_be_replaced + 1 ) ) to transition MUX_673_sample_start_
      ;;[MUX_673_start] 
      {
        // ternary expression: 
        $T [req] $T [ack] // sample req/ack
      }
      ;;[MUX_673_complete] 
      {
        // ternary expression: 
        $T [req] $T [ack] // update req/ack
      }
      MUX_673_sample_start_ &-> (MUX_673_start)
      MUX_673_sample_completed_ <-& (MUX_673_start)
      MUX_673_sample_completed_ &-> ($null)
      MUX_673_update_start_ &-> (MUX_673_complete)
      MUX_673_update_completed_ <-& (MUX_673_complete)
      // Target expression
      // (as target) col_to_be_replaced_3
      // start: WAR dependencies for col_to_be_replaced_3
      // done: WAR dependencies for col_to_be_replaced_3
      // end:  	col_to_be_replaced_3 := ( $mux (col_to_be_replaced == 3 ) ($bitcast ($uint<2>) 0  )  ($bitcast ($uint<2>) (col_to_be_replaced + 1 ) ) ) // bits of buffering = 2. 
      // start:  	pp03 := ($bitcast ($uint<16>) (ifmaps[0 ][col_to_be_replaced] * filter[zero][three]) )// bits of buffering = 16. 
      //  file prog.linked.opt.aa, line 195
      // Source expression
      // ($bitcast ($uint<16>) (ifmaps[0 ][col_to_be_replaced] * filter[zero][three]) )
      $T[type_cast_683_sample_start_] 
      $T[type_cast_683_sample_completed_] 
      $T[type_cast_683_update_start_] 
      $T[type_cast_683_update_completed_] 
      // (ifmaps[0 ][col_to_be_replaced] * filter[zero][three])
      // ifmaps[0 ][col_to_be_replaced]
      $T[array_obj_ref_678_base_address_calculated] 
      $T[array_obj_ref_678_sample_start_] 
      $T[array_obj_ref_678_sample_completed_] 
      $T[array_obj_ref_678_update_start_] 
      $T[array_obj_ref_678_update_completed_] 
      $T[array_obj_ref_678_word_address_calculated] 
      $T[array_obj_ref_678_root_address_calculated] 
      $T[array_obj_ref_678_offset_calculated] 
      $T[array_obj_ref_678_index_resized_1] 
      $T[array_obj_ref_678_index_scaled_1] 
      $T[array_obj_ref_678_index_computed_1] 
      // col_to_be_replaced
      // start: Forward dependencies from col_to_be_replaced to transition array_obj_ref_678_index_computed_1
      // done: Forward dependencies from col_to_be_replaced to transition array_obj_ref_678_index_computed_1
      ;;[array_obj_ref_678_index_resize_1] 
      {
        $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
      }
      array_obj_ref_678_index_computed_1 &-> (array_obj_ref_678_index_resize_1)
      array_obj_ref_678_index_resized_1 <-& (array_obj_ref_678_index_resize_1)
      ;;[array_obj_ref_678_index_scale_1] 
      {
        $T [scale_rename_req] $T [scale_rename_ack] // rename 
      }
      array_obj_ref_678_index_resized_1 &-> (array_obj_ref_678_index_scale_1)
      array_obj_ref_678_index_scaled_1 <-& (array_obj_ref_678_index_scale_1)
      $T[array_obj_ref_678_final_index_sum_regn_sample_complete] 
      $T[array_obj_ref_678_final_index_sum_regn_update_start] 
      ;;[array_obj_ref_678_final_index_sum_regn_Sample] 
      {
        $T [req] $T [ack] 
      }
      ;;[array_obj_ref_678_final_index_sum_regn_Update] 
      {
        $T [req] $T [ack] 
      }
      array_obj_ref_678_index_scaled_1 &-> (array_obj_ref_678_final_index_sum_regn_Sample)
      array_obj_ref_678_final_index_sum_regn_sample_complete <-& (array_obj_ref_678_final_index_sum_regn_Sample)
      array_obj_ref_678_final_index_sum_regn_update_start &-> (array_obj_ref_678_final_index_sum_regn_Update)
      array_obj_ref_678_offset_calculated <-& (array_obj_ref_678_final_index_sum_regn_Update)
      ;;[array_obj_ref_678_base_plus_offset] 
      {
        $T [sum_rename_req] $T [sum_rename_ack] // one gets through 
      }
      array_obj_ref_678_offset_calculated &-> (array_obj_ref_678_base_plus_offset)
      array_obj_ref_678_root_address_calculated <-& (array_obj_ref_678_base_plus_offset)
      ;;[array_obj_ref_678_word_addrgen] 
      {
        $T [root_register_req] $T [root_register_ack]
      }
      array_obj_ref_678_root_address_calculated &-> (array_obj_ref_678_word_addrgen)
      array_obj_ref_678_word_address_calculated <-& (array_obj_ref_678_word_addrgen)
      ;;[array_obj_ref_678_Sample] 
      {
        ||[word_access_start] 
        {
          ;;[word_0] 
          {
            $T [rr] $T [ra] 
          }
        }
      }
      ;;[array_obj_ref_678_Update] 
      {
        ||[word_access_complete] 
        {
          ;;[word_0] 
          {
            $T [cr] $T [ca] 
          }
        }
        ;;[array_obj_ref_678_Merge] 
        {
          $T [merge_req] $T [merge_ack]
        }
      }
      array_obj_ref_678_sample_start_ <-& (array_obj_ref_678_word_address_calculated)
      array_obj_ref_678_sample_start_ &-> (array_obj_ref_678_Sample)
      array_obj_ref_678_sample_completed_ <-& (array_obj_ref_678_Sample)
      array_obj_ref_678_sample_completed_ &-> ($null)
      array_obj_ref_678_update_start_ &-> (array_obj_ref_678_Update)
      array_obj_ref_678_update_completed_ <-& (array_obj_ref_678_Update)
      // filter[zero][three]
      $T[array_obj_ref_681_base_address_calculated] 
      $T[array_obj_ref_681_sample_start_] 
      $T[array_obj_ref_681_sample_completed_] 
      $T[array_obj_ref_681_update_start_] 
      $T[array_obj_ref_681_update_completed_] 
      $T[array_obj_ref_681_word_address_calculated] 
      $T[array_obj_ref_681_root_address_calculated] 
      array_obj_ref_681_word_address_calculated <-& (array_obj_ref_681_root_address_calculated)
      ;;[array_obj_ref_681_Sample] 
      {
        ||[word_access_start] 
        {
          ;;[word_0] 
          {
            $T [rr] $T [ra] 
          }
        }
      }
      ;;[array_obj_ref_681_Update] 
      {
        ||[word_access_complete] 
        {
          ;;[word_0] 
          {
            $T [cr] $T [ca] 
          }
        }
        ;;[array_obj_ref_681_Merge] 
        {
          $T [merge_req] $T [merge_ack]
        }
      }
      array_obj_ref_681_sample_start_ <-& (array_obj_ref_681_word_address_calculated)
      array_obj_ref_681_sample_start_ &-> (array_obj_ref_681_Sample)
      array_obj_ref_681_sample_completed_ <-& (array_obj_ref_681_Sample)
      array_obj_ref_681_sample_completed_ &-> ($null)
      array_obj_ref_681_update_start_ &-> (array_obj_ref_681_Update)
      array_obj_ref_681_update_completed_ <-& (array_obj_ref_681_Update)
      // start: Forward dependencies from (ifmaps[0 ][col_to_be_replaced] * filter[zero][three]) to transition type_cast_683_sample_start_
      type_cast_683_sample_start_ <-& (array_obj_ref_678_update_completed_)
      type_cast_683_sample_start_ <-& (array_obj_ref_681_update_completed_)
      // done: Forward dependencies from (ifmaps[0 ][col_to_be_replaced] * filter[zero][three]) to transition type_cast_683_sample_start_
      ;;[type_cast_683_Sample] 
      {
        // unary expression 
        $T [rr] $T [ra] // (split) unary operation
      }
      ;;[type_cast_683_Update] 
      {
        // unary expression 
        $T [cr] $T [ca] //(split) unary operation
      }
      type_cast_683_sample_start_ &-> (type_cast_683_Sample)
      type_cast_683_sample_completed_ <-& (type_cast_683_Sample)
      type_cast_683_sample_completed_ &-> ($null)
      type_cast_683_update_start_ &-> (type_cast_683_Update)
      type_cast_683_update_completed_ <-& (type_cast_683_Update)
      // Target expression
      // (as target) pp03
      // start: WAR dependencies for pp03
      // done: WAR dependencies for pp03
      // end:  	pp03 := ($bitcast ($uint<16>) (ifmaps[0 ][col_to_be_replaced] * filter[zero][three]) )// bits of buffering = 16. 
      // start:  	pp13 := ($bitcast ($uint<16>) (ifmaps[1 ][col_to_be_replaced] * filter[one][three]) )// bits of buffering = 16. 
      //  file prog.linked.opt.aa, line 196
      // Source expression
      // ($bitcast ($uint<16>) (ifmaps[1 ][col_to_be_replaced] * filter[one][three]) )
      $T[type_cast_693_sample_start_] 
      $T[type_cast_693_sample_completed_] 
      $T[type_cast_693_update_start_] 
      $T[type_cast_693_update_completed_] 
      // (ifmaps[1 ][col_to_be_replaced] * filter[one][three])
      // ifmaps[1 ][col_to_be_replaced]
      $T[array_obj_ref_688_base_address_calculated] 
      $T[array_obj_ref_688_sample_start_] 
      $T[array_obj_ref_688_sample_completed_] 
      $T[array_obj_ref_688_update_start_] 
      $T[array_obj_ref_688_update_completed_] 
      $T[array_obj_ref_688_word_address_calculated] 
      $T[array_obj_ref_688_root_address_calculated] 
      $T[array_obj_ref_688_offset_calculated] 
      $T[array_obj_ref_688_index_resized_1] 
      $T[array_obj_ref_688_index_scaled_1] 
      $T[array_obj_ref_688_index_computed_1] 
      // col_to_be_replaced
      // start: Forward dependencies from col_to_be_replaced to transition array_obj_ref_688_index_computed_1
      // done: Forward dependencies from col_to_be_replaced to transition array_obj_ref_688_index_computed_1
      ;;[array_obj_ref_688_index_resize_1] 
      {
        $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
      }
      array_obj_ref_688_index_computed_1 &-> (array_obj_ref_688_index_resize_1)
      array_obj_ref_688_index_resized_1 <-& (array_obj_ref_688_index_resize_1)
      ;;[array_obj_ref_688_index_scale_1] 
      {
        $T [scale_rename_req] $T [scale_rename_ack] // rename 
      }
      array_obj_ref_688_index_resized_1 &-> (array_obj_ref_688_index_scale_1)
      array_obj_ref_688_index_scaled_1 <-& (array_obj_ref_688_index_scale_1)
      $T[array_obj_ref_688_final_index_sum_regn_sample_complete] 
      $T[array_obj_ref_688_final_index_sum_regn_update_start] 
      ;;[array_obj_ref_688_final_index_sum_regn_Sample] 
      {
        $T [req] $T [ack] 
      }
      ;;[array_obj_ref_688_final_index_sum_regn_Update] 
      {
        $T [req] $T [ack] 
      }
      array_obj_ref_688_index_scaled_1 &-> (array_obj_ref_688_final_index_sum_regn_Sample)
      array_obj_ref_688_final_index_sum_regn_sample_complete <-& (array_obj_ref_688_final_index_sum_regn_Sample)
      array_obj_ref_688_final_index_sum_regn_update_start &-> (array_obj_ref_688_final_index_sum_regn_Update)
      array_obj_ref_688_offset_calculated <-& (array_obj_ref_688_final_index_sum_regn_Update)
      ;;[array_obj_ref_688_base_plus_offset] 
      {
        $T [sum_rename_req] $T [sum_rename_ack] // one gets through 
      }
      array_obj_ref_688_offset_calculated &-> (array_obj_ref_688_base_plus_offset)
      array_obj_ref_688_root_address_calculated <-& (array_obj_ref_688_base_plus_offset)
      ;;[array_obj_ref_688_word_addrgen] 
      {
        $T [root_register_req] $T [root_register_ack]
      }
      array_obj_ref_688_root_address_calculated &-> (array_obj_ref_688_word_addrgen)
      array_obj_ref_688_word_address_calculated <-& (array_obj_ref_688_word_addrgen)
      ;;[array_obj_ref_688_Sample] 
      {
        ||[word_access_start] 
        {
          ;;[word_0] 
          {
            $T [rr] $T [ra] 
          }
        }
      }
      ;;[array_obj_ref_688_Update] 
      {
        ||[word_access_complete] 
        {
          ;;[word_0] 
          {
            $T [cr] $T [ca] 
          }
        }
        ;;[array_obj_ref_688_Merge] 
        {
          $T [merge_req] $T [merge_ack]
        }
      }
      array_obj_ref_688_sample_start_ <-& (array_obj_ref_688_word_address_calculated)
      array_obj_ref_688_sample_start_ &-> (array_obj_ref_688_Sample)
      array_obj_ref_688_sample_completed_ <-& (array_obj_ref_688_Sample)
      array_obj_ref_688_sample_completed_ &-> ($null)
      array_obj_ref_688_update_start_ &-> (array_obj_ref_688_Update)
      array_obj_ref_688_update_completed_ <-& (array_obj_ref_688_Update)
      // filter[one][three]
      $T[array_obj_ref_691_base_address_calculated] 
      $T[array_obj_ref_691_sample_start_] 
      $T[array_obj_ref_691_sample_completed_] 
      $T[array_obj_ref_691_update_start_] 
      $T[array_obj_ref_691_update_completed_] 
      $T[array_obj_ref_691_word_address_calculated] 
      $T[array_obj_ref_691_root_address_calculated] 
      array_obj_ref_691_word_address_calculated <-& (array_obj_ref_691_root_address_calculated)
      ;;[array_obj_ref_691_Sample] 
      {
        ||[word_access_start] 
        {
          ;;[word_0] 
          {
            $T [rr] $T [ra] 
          }
        }
      }
      ;;[array_obj_ref_691_Update] 
      {
        ||[word_access_complete] 
        {
          ;;[word_0] 
          {
            $T [cr] $T [ca] 
          }
        }
        ;;[array_obj_ref_691_Merge] 
        {
          $T [merge_req] $T [merge_ack]
        }
      }
      array_obj_ref_691_sample_start_ <-& (array_obj_ref_691_word_address_calculated)
      array_obj_ref_691_sample_start_ &-> (array_obj_ref_691_Sample)
      array_obj_ref_691_sample_completed_ <-& (array_obj_ref_691_Sample)
      array_obj_ref_691_sample_completed_ &-> ($null)
      array_obj_ref_691_update_start_ &-> (array_obj_ref_691_Update)
      array_obj_ref_691_update_completed_ <-& (array_obj_ref_691_Update)
      // start: Forward dependencies from (ifmaps[1 ][col_to_be_replaced] * filter[one][three]) to transition type_cast_693_sample_start_
      type_cast_693_sample_start_ <-& (array_obj_ref_688_update_completed_)
      type_cast_693_sample_start_ <-& (array_obj_ref_691_update_completed_)
      // done: Forward dependencies from (ifmaps[1 ][col_to_be_replaced] * filter[one][three]) to transition type_cast_693_sample_start_
      ;;[type_cast_693_Sample] 
      {
        // unary expression 
        $T [rr] $T [ra] // (split) unary operation
      }
      ;;[type_cast_693_Update] 
      {
        // unary expression 
        $T [cr] $T [ca] //(split) unary operation
      }
      type_cast_693_sample_start_ &-> (type_cast_693_Sample)
      type_cast_693_sample_completed_ <-& (type_cast_693_Sample)
      type_cast_693_sample_completed_ &-> ($null)
      type_cast_693_update_start_ &-> (type_cast_693_Update)
      type_cast_693_update_completed_ <-& (type_cast_693_Update)
      // Target expression
      // (as target) pp13
      // start: WAR dependencies for pp13
      // done: WAR dependencies for pp13
      // end:  	pp13 := ($bitcast ($uint<16>) (ifmaps[1 ][col_to_be_replaced] * filter[one][three]) )// bits of buffering = 16. 
      // start:  	pp23 := ($bitcast ($uint<16>) (ifmaps[2 ][col_to_be_replaced] * filter[two][three]) )// bits of buffering = 16. 
      //  file prog.linked.opt.aa, line 197
      // Source expression
      // ($bitcast ($uint<16>) (ifmaps[2 ][col_to_be_replaced] * filter[two][three]) )
      $T[type_cast_703_sample_start_] 
      $T[type_cast_703_sample_completed_] 
      $T[type_cast_703_update_start_] 
      $T[type_cast_703_update_completed_] 
      // (ifmaps[2 ][col_to_be_replaced] * filter[two][three])
      // ifmaps[2 ][col_to_be_replaced]
      $T[array_obj_ref_698_base_address_calculated] 
      $T[array_obj_ref_698_sample_start_] 
      $T[array_obj_ref_698_sample_completed_] 
      $T[array_obj_ref_698_update_start_] 
      $T[array_obj_ref_698_update_completed_] 
      $T[array_obj_ref_698_word_address_calculated] 
      $T[array_obj_ref_698_root_address_calculated] 
      $T[array_obj_ref_698_offset_calculated] 
      $T[array_obj_ref_698_index_resized_1] 
      $T[array_obj_ref_698_index_scaled_1] 
      $T[array_obj_ref_698_index_computed_1] 
      // col_to_be_replaced
      // start: Forward dependencies from col_to_be_replaced to transition array_obj_ref_698_index_computed_1
      // done: Forward dependencies from col_to_be_replaced to transition array_obj_ref_698_index_computed_1
      ;;[array_obj_ref_698_index_resize_1] 
      {
        $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
      }
      array_obj_ref_698_index_computed_1 &-> (array_obj_ref_698_index_resize_1)
      array_obj_ref_698_index_resized_1 <-& (array_obj_ref_698_index_resize_1)
      ;;[array_obj_ref_698_index_scale_1] 
      {
        $T [scale_rename_req] $T [scale_rename_ack] // rename 
      }
      array_obj_ref_698_index_resized_1 &-> (array_obj_ref_698_index_scale_1)
      array_obj_ref_698_index_scaled_1 <-& (array_obj_ref_698_index_scale_1)
      $T[array_obj_ref_698_final_index_sum_regn_sample_complete] 
      $T[array_obj_ref_698_final_index_sum_regn_update_start] 
      ;;[array_obj_ref_698_final_index_sum_regn_Sample] 
      {
        $T [req] $T [ack] 
      }
      ;;[array_obj_ref_698_final_index_sum_regn_Update] 
      {
        $T [req] $T [ack] 
      }
      array_obj_ref_698_index_scaled_1 &-> (array_obj_ref_698_final_index_sum_regn_Sample)
      array_obj_ref_698_final_index_sum_regn_sample_complete <-& (array_obj_ref_698_final_index_sum_regn_Sample)
      array_obj_ref_698_final_index_sum_regn_update_start &-> (array_obj_ref_698_final_index_sum_regn_Update)
      array_obj_ref_698_offset_calculated <-& (array_obj_ref_698_final_index_sum_regn_Update)
      ;;[array_obj_ref_698_base_plus_offset] 
      {
        $T [sum_rename_req] $T [sum_rename_ack] // one gets through 
      }
      array_obj_ref_698_offset_calculated &-> (array_obj_ref_698_base_plus_offset)
      array_obj_ref_698_root_address_calculated <-& (array_obj_ref_698_base_plus_offset)
      ;;[array_obj_ref_698_word_addrgen] 
      {
        $T [root_register_req] $T [root_register_ack]
      }
      array_obj_ref_698_root_address_calculated &-> (array_obj_ref_698_word_addrgen)
      array_obj_ref_698_word_address_calculated <-& (array_obj_ref_698_word_addrgen)
      ;;[array_obj_ref_698_Sample] 
      {
        ||[word_access_start] 
        {
          ;;[word_0] 
          {
            $T [rr] $T [ra] 
          }
        }
      }
      ;;[array_obj_ref_698_Update] 
      {
        ||[word_access_complete] 
        {
          ;;[word_0] 
          {
            $T [cr] $T [ca] 
          }
        }
        ;;[array_obj_ref_698_Merge] 
        {
          $T [merge_req] $T [merge_ack]
        }
      }
      array_obj_ref_698_sample_start_ <-& (array_obj_ref_698_word_address_calculated)
      array_obj_ref_698_sample_start_ &-> (array_obj_ref_698_Sample)
      array_obj_ref_698_sample_completed_ <-& (array_obj_ref_698_Sample)
      array_obj_ref_698_sample_completed_ &-> ($null)
      array_obj_ref_698_update_start_ &-> (array_obj_ref_698_Update)
      array_obj_ref_698_update_completed_ <-& (array_obj_ref_698_Update)
      // filter[two][three]
      $T[array_obj_ref_701_base_address_calculated] 
      $T[array_obj_ref_701_sample_start_] 
      $T[array_obj_ref_701_sample_completed_] 
      $T[array_obj_ref_701_update_start_] 
      $T[array_obj_ref_701_update_completed_] 
      $T[array_obj_ref_701_word_address_calculated] 
      $T[array_obj_ref_701_root_address_calculated] 
      array_obj_ref_701_word_address_calculated <-& (array_obj_ref_701_root_address_calculated)
      ;;[array_obj_ref_701_Sample] 
      {
        ||[word_access_start] 
        {
          ;;[word_0] 
          {
            $T [rr] $T [ra] 
          }
        }
      }
      ;;[array_obj_ref_701_Update] 
      {
        ||[word_access_complete] 
        {
          ;;[word_0] 
          {
            $T [cr] $T [ca] 
          }
        }
        ;;[array_obj_ref_701_Merge] 
        {
          $T [merge_req] $T [merge_ack]
        }
      }
      array_obj_ref_701_sample_start_ <-& (array_obj_ref_701_word_address_calculated)
      array_obj_ref_701_sample_start_ &-> (array_obj_ref_701_Sample)
      array_obj_ref_701_sample_completed_ <-& (array_obj_ref_701_Sample)
      array_obj_ref_701_sample_completed_ &-> ($null)
      array_obj_ref_701_update_start_ &-> (array_obj_ref_701_Update)
      array_obj_ref_701_update_completed_ <-& (array_obj_ref_701_Update)
      // start: Forward dependencies from (ifmaps[2 ][col_to_be_replaced] * filter[two][three]) to transition type_cast_703_sample_start_
      type_cast_703_sample_start_ <-& (array_obj_ref_698_update_completed_)
      type_cast_703_sample_start_ <-& (array_obj_ref_701_update_completed_)
      // done: Forward dependencies from (ifmaps[2 ][col_to_be_replaced] * filter[two][three]) to transition type_cast_703_sample_start_
      ;;[type_cast_703_Sample] 
      {
        // unary expression 
        $T [rr] $T [ra] // (split) unary operation
      }
      ;;[type_cast_703_Update] 
      {
        // unary expression 
        $T [cr] $T [ca] //(split) unary operation
      }
      type_cast_703_sample_start_ &-> (type_cast_703_Sample)
      type_cast_703_sample_completed_ <-& (type_cast_703_Sample)
      type_cast_703_sample_completed_ &-> ($null)
      type_cast_703_update_start_ &-> (type_cast_703_Update)
      type_cast_703_update_completed_ <-& (type_cast_703_Update)
      // Target expression
      // (as target) pp23
      // start: WAR dependencies for pp23
      // done: WAR dependencies for pp23
      // end:  	pp23 := ($bitcast ($uint<16>) (ifmaps[2 ][col_to_be_replaced] * filter[two][three]) )// bits of buffering = 16. 
      // start:  	pp33 := ($bitcast ($uint<16>) (ifmaps[3 ][col_to_be_replaced] * filter[three][three]) )// bits of buffering = 16. 
      //  file prog.linked.opt.aa, line 198
      // Source expression
      // ($bitcast ($uint<16>) (ifmaps[3 ][col_to_be_replaced] * filter[three][three]) )
      $T[type_cast_713_sample_start_] 
      $T[type_cast_713_sample_completed_] 
      $T[type_cast_713_update_start_] 
      $T[type_cast_713_update_completed_] 
      // (ifmaps[3 ][col_to_be_replaced] * filter[three][three])
      // ifmaps[3 ][col_to_be_replaced]
      $T[array_obj_ref_708_base_address_calculated] 
      $T[array_obj_ref_708_sample_start_] 
      $T[array_obj_ref_708_sample_completed_] 
      $T[array_obj_ref_708_update_start_] 
      $T[array_obj_ref_708_update_completed_] 
      $T[array_obj_ref_708_word_address_calculated] 
      $T[array_obj_ref_708_root_address_calculated] 
      $T[array_obj_ref_708_offset_calculated] 
      $T[array_obj_ref_708_index_resized_1] 
      $T[array_obj_ref_708_index_scaled_1] 
      $T[array_obj_ref_708_index_computed_1] 
      // col_to_be_replaced
      // start: Forward dependencies from col_to_be_replaced to transition array_obj_ref_708_index_computed_1
      // done: Forward dependencies from col_to_be_replaced to transition array_obj_ref_708_index_computed_1
      ;;[array_obj_ref_708_index_resize_1] 
      {
        $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
      }
      array_obj_ref_708_index_computed_1 &-> (array_obj_ref_708_index_resize_1)
      array_obj_ref_708_index_resized_1 <-& (array_obj_ref_708_index_resize_1)
      ;;[array_obj_ref_708_index_scale_1] 
      {
        $T [scale_rename_req] $T [scale_rename_ack] // rename 
      }
      array_obj_ref_708_index_resized_1 &-> (array_obj_ref_708_index_scale_1)
      array_obj_ref_708_index_scaled_1 <-& (array_obj_ref_708_index_scale_1)
      $T[array_obj_ref_708_final_index_sum_regn_sample_complete] 
      $T[array_obj_ref_708_final_index_sum_regn_update_start] 
      ;;[array_obj_ref_708_final_index_sum_regn_Sample] 
      {
        $T [req] $T [ack] 
      }
      ;;[array_obj_ref_708_final_index_sum_regn_Update] 
      {
        $T [req] $T [ack] 
      }
      array_obj_ref_708_index_scaled_1 &-> (array_obj_ref_708_final_index_sum_regn_Sample)
      array_obj_ref_708_final_index_sum_regn_sample_complete <-& (array_obj_ref_708_final_index_sum_regn_Sample)
      array_obj_ref_708_final_index_sum_regn_update_start &-> (array_obj_ref_708_final_index_sum_regn_Update)
      array_obj_ref_708_offset_calculated <-& (array_obj_ref_708_final_index_sum_regn_Update)
      ;;[array_obj_ref_708_base_plus_offset] 
      {
        $T [sum_rename_req] $T [sum_rename_ack] // one gets through 
      }
      array_obj_ref_708_offset_calculated &-> (array_obj_ref_708_base_plus_offset)
      array_obj_ref_708_root_address_calculated <-& (array_obj_ref_708_base_plus_offset)
      ;;[array_obj_ref_708_word_addrgen] 
      {
        $T [root_register_req] $T [root_register_ack]
      }
      array_obj_ref_708_root_address_calculated &-> (array_obj_ref_708_word_addrgen)
      array_obj_ref_708_word_address_calculated <-& (array_obj_ref_708_word_addrgen)
      ;;[array_obj_ref_708_Sample] 
      {
        ||[word_access_start] 
        {
          ;;[word_0] 
          {
            $T [rr] $T [ra] 
          }
        }
      }
      ;;[array_obj_ref_708_Update] 
      {
        ||[word_access_complete] 
        {
          ;;[word_0] 
          {
            $T [cr] $T [ca] 
          }
        }
        ;;[array_obj_ref_708_Merge] 
        {
          $T [merge_req] $T [merge_ack]
        }
      }
      array_obj_ref_708_sample_start_ <-& (array_obj_ref_708_word_address_calculated)
      array_obj_ref_708_sample_start_ &-> (array_obj_ref_708_Sample)
      array_obj_ref_708_sample_completed_ <-& (array_obj_ref_708_Sample)
      array_obj_ref_708_sample_completed_ &-> ($null)
      array_obj_ref_708_update_start_ &-> (array_obj_ref_708_Update)
      array_obj_ref_708_update_completed_ <-& (array_obj_ref_708_Update)
      // filter[three][three]
      $T[array_obj_ref_711_base_address_calculated] 
      $T[array_obj_ref_711_sample_start_] 
      $T[array_obj_ref_711_sample_completed_] 
      $T[array_obj_ref_711_update_start_] 
      $T[array_obj_ref_711_update_completed_] 
      $T[array_obj_ref_711_word_address_calculated] 
      $T[array_obj_ref_711_root_address_calculated] 
      array_obj_ref_711_word_address_calculated <-& (array_obj_ref_711_root_address_calculated)
      ;;[array_obj_ref_711_Sample] 
      {
        ||[word_access_start] 
        {
          ;;[word_0] 
          {
            $T [rr] $T [ra] 
          }
        }
      }
      ;;[array_obj_ref_711_Update] 
      {
        ||[word_access_complete] 
        {
          ;;[word_0] 
          {
            $T [cr] $T [ca] 
          }
        }
        ;;[array_obj_ref_711_Merge] 
        {
          $T [merge_req] $T [merge_ack]
        }
      }
      array_obj_ref_711_sample_start_ <-& (array_obj_ref_711_word_address_calculated)
      array_obj_ref_711_sample_start_ &-> (array_obj_ref_711_Sample)
      array_obj_ref_711_sample_completed_ <-& (array_obj_ref_711_Sample)
      array_obj_ref_711_sample_completed_ &-> ($null)
      array_obj_ref_711_update_start_ &-> (array_obj_ref_711_Update)
      array_obj_ref_711_update_completed_ <-& (array_obj_ref_711_Update)
      // start: Forward dependencies from (ifmaps[3 ][col_to_be_replaced] * filter[three][three]) to transition type_cast_713_sample_start_
      type_cast_713_sample_start_ <-& (array_obj_ref_708_update_completed_)
      type_cast_713_sample_start_ <-& (array_obj_ref_711_update_completed_)
      // done: Forward dependencies from (ifmaps[3 ][col_to_be_replaced] * filter[three][three]) to transition type_cast_713_sample_start_
      ;;[type_cast_713_Sample] 
      {
        // unary expression 
        $T [rr] $T [ra] // (split) unary operation
      }
      ;;[type_cast_713_Update] 
      {
        // unary expression 
        $T [cr] $T [ca] //(split) unary operation
      }
      type_cast_713_sample_start_ &-> (type_cast_713_Sample)
      type_cast_713_sample_completed_ <-& (type_cast_713_Sample)
      type_cast_713_sample_completed_ &-> ($null)
      type_cast_713_update_start_ &-> (type_cast_713_Update)
      type_cast_713_update_completed_ <-& (type_cast_713_Update)
      // Target expression
      // (as target) pp33
      // start: WAR dependencies for pp33
      // done: WAR dependencies for pp33
      // end:  	pp33 := ($bitcast ($uint<16>) (ifmaps[3 ][col_to_be_replaced] * filter[three][three]) )// bits of buffering = 16. 
      // start:  	pp02 := ($bitcast ($uint<16>) (ifmaps[0 ][col_to_be_replaced_1] * filter[zero][two]) )// bits of buffering = 16. 
      //  file prog.linked.opt.aa, line 199
      // Source expression
      // ($bitcast ($uint<16>) (ifmaps[0 ][col_to_be_replaced_1] * filter[zero][two]) )
      $T[type_cast_723_sample_start_] 
      $T[type_cast_723_sample_completed_] 
      $T[type_cast_723_update_start_] 
      $T[type_cast_723_update_completed_] 
      // (ifmaps[0 ][col_to_be_replaced_1] * filter[zero][two])
      // ifmaps[0 ][col_to_be_replaced_1]
      $T[array_obj_ref_718_base_address_calculated] 
      $T[array_obj_ref_718_sample_start_] 
      $T[array_obj_ref_718_sample_completed_] 
      $T[array_obj_ref_718_update_start_] 
      $T[array_obj_ref_718_update_completed_] 
      $T[array_obj_ref_718_word_address_calculated] 
      $T[array_obj_ref_718_root_address_calculated] 
      $T[array_obj_ref_718_offset_calculated] 
      $T[array_obj_ref_718_index_resized_1] 
      $T[array_obj_ref_718_index_scaled_1] 
      $T[array_obj_ref_718_index_computed_1] 
      // col_to_be_replaced_1
      // start: Forward dependencies from col_to_be_replaced_1 to transition array_obj_ref_718_index_computed_1
      array_obj_ref_718_index_computed_1 <-& (MUX_647_update_completed_)
      // done: Forward dependencies from col_to_be_replaced_1 to transition array_obj_ref_718_index_computed_1
      ;;[array_obj_ref_718_index_resize_1] 
      {
        $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
      }
      array_obj_ref_718_index_computed_1 &-> (array_obj_ref_718_index_resize_1)
      array_obj_ref_718_index_resized_1 <-& (array_obj_ref_718_index_resize_1)
      ;;[array_obj_ref_718_index_scale_1] 
      {
        $T [scale_rename_req] $T [scale_rename_ack] // rename 
      }
      array_obj_ref_718_index_resized_1 &-> (array_obj_ref_718_index_scale_1)
      array_obj_ref_718_index_scaled_1 <-& (array_obj_ref_718_index_scale_1)
      $T[array_obj_ref_718_final_index_sum_regn_sample_complete] 
      $T[array_obj_ref_718_final_index_sum_regn_update_start] 
      ;;[array_obj_ref_718_final_index_sum_regn_Sample] 
      {
        $T [req] $T [ack] 
      }
      ;;[array_obj_ref_718_final_index_sum_regn_Update] 
      {
        $T [req] $T [ack] 
      }
      array_obj_ref_718_index_scaled_1 &-> (array_obj_ref_718_final_index_sum_regn_Sample)
      array_obj_ref_718_final_index_sum_regn_sample_complete <-& (array_obj_ref_718_final_index_sum_regn_Sample)
      array_obj_ref_718_final_index_sum_regn_update_start &-> (array_obj_ref_718_final_index_sum_regn_Update)
      array_obj_ref_718_offset_calculated <-& (array_obj_ref_718_final_index_sum_regn_Update)
      ;;[array_obj_ref_718_base_plus_offset] 
      {
        $T [sum_rename_req] $T [sum_rename_ack] // one gets through 
      }
      array_obj_ref_718_offset_calculated &-> (array_obj_ref_718_base_plus_offset)
      array_obj_ref_718_root_address_calculated <-& (array_obj_ref_718_base_plus_offset)
      ;;[array_obj_ref_718_word_addrgen] 
      {
        $T [root_register_req] $T [root_register_ack]
      }
      array_obj_ref_718_root_address_calculated &-> (array_obj_ref_718_word_addrgen)
      array_obj_ref_718_word_address_calculated <-& (array_obj_ref_718_word_addrgen)
      ;;[array_obj_ref_718_Sample] 
      {
        ||[word_access_start] 
        {
          ;;[word_0] 
          {
            $T [rr] $T [ra] 
          }
        }
      }
      ;;[array_obj_ref_718_Update] 
      {
        ||[word_access_complete] 
        {
          ;;[word_0] 
          {
            $T [cr] $T [ca] 
          }
        }
        ;;[array_obj_ref_718_Merge] 
        {
          $T [merge_req] $T [merge_ack]
        }
      }
      array_obj_ref_718_sample_start_ <-& (array_obj_ref_718_word_address_calculated)
      array_obj_ref_718_sample_start_ &-> (array_obj_ref_718_Sample)
      array_obj_ref_718_sample_completed_ <-& (array_obj_ref_718_Sample)
      array_obj_ref_718_sample_completed_ &-> ($null)
      array_obj_ref_718_update_start_ &-> (array_obj_ref_718_Update)
      array_obj_ref_718_update_completed_ <-& (array_obj_ref_718_Update)
      // filter[zero][two]
      $T[array_obj_ref_721_base_address_calculated] 
      $T[array_obj_ref_721_sample_start_] 
      $T[array_obj_ref_721_sample_completed_] 
      $T[array_obj_ref_721_update_start_] 
      $T[array_obj_ref_721_update_completed_] 
      $T[array_obj_ref_721_word_address_calculated] 
      $T[array_obj_ref_721_root_address_calculated] 
      array_obj_ref_721_word_address_calculated <-& (array_obj_ref_721_root_address_calculated)
      ;;[array_obj_ref_721_Sample] 
      {
        ||[word_access_start] 
        {
          ;;[word_0] 
          {
            $T [rr] $T [ra] 
          }
        }
      }
      ;;[array_obj_ref_721_Update] 
      {
        ||[word_access_complete] 
        {
          ;;[word_0] 
          {
            $T [cr] $T [ca] 
          }
        }
        ;;[array_obj_ref_721_Merge] 
        {
          $T [merge_req] $T [merge_ack]
        }
      }
      array_obj_ref_721_sample_start_ <-& (array_obj_ref_721_word_address_calculated)
      array_obj_ref_721_sample_start_ &-> (array_obj_ref_721_Sample)
      array_obj_ref_721_sample_completed_ <-& (array_obj_ref_721_Sample)
      array_obj_ref_721_sample_completed_ &-> ($null)
      array_obj_ref_721_update_start_ &-> (array_obj_ref_721_Update)
      array_obj_ref_721_update_completed_ <-& (array_obj_ref_721_Update)
      // start: Forward dependencies from (ifmaps[0 ][col_to_be_replaced_1] * filter[zero][two]) to transition type_cast_723_sample_start_
      type_cast_723_sample_start_ <-& (array_obj_ref_718_update_completed_)
      type_cast_723_sample_start_ <-& (array_obj_ref_721_update_completed_)
      // done: Forward dependencies from (ifmaps[0 ][col_to_be_replaced_1] * filter[zero][two]) to transition type_cast_723_sample_start_
      ;;[type_cast_723_Sample] 
      {
        // unary expression 
        $T [rr] $T [ra] // (split) unary operation
      }
      ;;[type_cast_723_Update] 
      {
        // unary expression 
        $T [cr] $T [ca] //(split) unary operation
      }
      type_cast_723_sample_start_ &-> (type_cast_723_Sample)
      type_cast_723_sample_completed_ <-& (type_cast_723_Sample)
      type_cast_723_sample_completed_ &-> ($null)
      type_cast_723_update_start_ &-> (type_cast_723_Update)
      type_cast_723_update_completed_ <-& (type_cast_723_Update)
      // Target expression
      // (as target) pp02
      // start: WAR dependencies for pp02
      // done: WAR dependencies for pp02
      // end:  	pp02 := ($bitcast ($uint<16>) (ifmaps[0 ][col_to_be_replaced_1] * filter[zero][two]) )// bits of buffering = 16. 
      // start:  	pp12 := ($bitcast ($uint<16>) (ifmaps[1 ][col_to_be_replaced_1] * filter[one][two]) )// bits of buffering = 16. 
      //  file prog.linked.opt.aa, line 200
      // Source expression
      // ($bitcast ($uint<16>) (ifmaps[1 ][col_to_be_replaced_1] * filter[one][two]) )
      $T[type_cast_733_sample_start_] 
      $T[type_cast_733_sample_completed_] 
      $T[type_cast_733_update_start_] 
      $T[type_cast_733_update_completed_] 
      // (ifmaps[1 ][col_to_be_replaced_1] * filter[one][two])
      // ifmaps[1 ][col_to_be_replaced_1]
      $T[array_obj_ref_728_base_address_calculated] 
      $T[array_obj_ref_728_sample_start_] 
      $T[array_obj_ref_728_sample_completed_] 
      $T[array_obj_ref_728_update_start_] 
      $T[array_obj_ref_728_update_completed_] 
      $T[array_obj_ref_728_word_address_calculated] 
      $T[array_obj_ref_728_root_address_calculated] 
      $T[array_obj_ref_728_offset_calculated] 
      $T[array_obj_ref_728_index_resized_1] 
      $T[array_obj_ref_728_index_scaled_1] 
      $T[array_obj_ref_728_index_computed_1] 
      // col_to_be_replaced_1
      // start: Forward dependencies from col_to_be_replaced_1 to transition array_obj_ref_728_index_computed_1
      array_obj_ref_728_index_computed_1 <-& (MUX_647_update_completed_)
      // done: Forward dependencies from col_to_be_replaced_1 to transition array_obj_ref_728_index_computed_1
      ;;[array_obj_ref_728_index_resize_1] 
      {
        $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
      }
      array_obj_ref_728_index_computed_1 &-> (array_obj_ref_728_index_resize_1)
      array_obj_ref_728_index_resized_1 <-& (array_obj_ref_728_index_resize_1)
      ;;[array_obj_ref_728_index_scale_1] 
      {
        $T [scale_rename_req] $T [scale_rename_ack] // rename 
      }
      array_obj_ref_728_index_resized_1 &-> (array_obj_ref_728_index_scale_1)
      array_obj_ref_728_index_scaled_1 <-& (array_obj_ref_728_index_scale_1)
      $T[array_obj_ref_728_final_index_sum_regn_sample_complete] 
      $T[array_obj_ref_728_final_index_sum_regn_update_start] 
      ;;[array_obj_ref_728_final_index_sum_regn_Sample] 
      {
        $T [req] $T [ack] 
      }
      ;;[array_obj_ref_728_final_index_sum_regn_Update] 
      {
        $T [req] $T [ack] 
      }
      array_obj_ref_728_index_scaled_1 &-> (array_obj_ref_728_final_index_sum_regn_Sample)
      array_obj_ref_728_final_index_sum_regn_sample_complete <-& (array_obj_ref_728_final_index_sum_regn_Sample)
      array_obj_ref_728_final_index_sum_regn_update_start &-> (array_obj_ref_728_final_index_sum_regn_Update)
      array_obj_ref_728_offset_calculated <-& (array_obj_ref_728_final_index_sum_regn_Update)
      ;;[array_obj_ref_728_base_plus_offset] 
      {
        $T [sum_rename_req] $T [sum_rename_ack] // one gets through 
      }
      array_obj_ref_728_offset_calculated &-> (array_obj_ref_728_base_plus_offset)
      array_obj_ref_728_root_address_calculated <-& (array_obj_ref_728_base_plus_offset)
      ;;[array_obj_ref_728_word_addrgen] 
      {
        $T [root_register_req] $T [root_register_ack]
      }
      array_obj_ref_728_root_address_calculated &-> (array_obj_ref_728_word_addrgen)
      array_obj_ref_728_word_address_calculated <-& (array_obj_ref_728_word_addrgen)
      ;;[array_obj_ref_728_Sample] 
      {
        ||[word_access_start] 
        {
          ;;[word_0] 
          {
            $T [rr] $T [ra] 
          }
        }
      }
      ;;[array_obj_ref_728_Update] 
      {
        ||[word_access_complete] 
        {
          ;;[word_0] 
          {
            $T [cr] $T [ca] 
          }
        }
        ;;[array_obj_ref_728_Merge] 
        {
          $T [merge_req] $T [merge_ack]
        }
      }
      array_obj_ref_728_sample_start_ <-& (array_obj_ref_728_word_address_calculated)
      array_obj_ref_728_sample_start_ &-> (array_obj_ref_728_Sample)
      array_obj_ref_728_sample_completed_ <-& (array_obj_ref_728_Sample)
      array_obj_ref_728_sample_completed_ &-> ($null)
      array_obj_ref_728_update_start_ &-> (array_obj_ref_728_Update)
      array_obj_ref_728_update_completed_ <-& (array_obj_ref_728_Update)
      // filter[one][two]
      $T[array_obj_ref_731_base_address_calculated] 
      $T[array_obj_ref_731_sample_start_] 
      $T[array_obj_ref_731_sample_completed_] 
      $T[array_obj_ref_731_update_start_] 
      $T[array_obj_ref_731_update_completed_] 
      $T[array_obj_ref_731_word_address_calculated] 
      $T[array_obj_ref_731_root_address_calculated] 
      array_obj_ref_731_word_address_calculated <-& (array_obj_ref_731_root_address_calculated)
      ;;[array_obj_ref_731_Sample] 
      {
        ||[word_access_start] 
        {
          ;;[word_0] 
          {
            $T [rr] $T [ra] 
          }
        }
      }
      ;;[array_obj_ref_731_Update] 
      {
        ||[word_access_complete] 
        {
          ;;[word_0] 
          {
            $T [cr] $T [ca] 
          }
        }
        ;;[array_obj_ref_731_Merge] 
        {
          $T [merge_req] $T [merge_ack]
        }
      }
      array_obj_ref_731_sample_start_ <-& (array_obj_ref_731_word_address_calculated)
      array_obj_ref_731_sample_start_ &-> (array_obj_ref_731_Sample)
      array_obj_ref_731_sample_completed_ <-& (array_obj_ref_731_Sample)
      array_obj_ref_731_sample_completed_ &-> ($null)
      array_obj_ref_731_update_start_ &-> (array_obj_ref_731_Update)
      array_obj_ref_731_update_completed_ <-& (array_obj_ref_731_Update)
      // start: Forward dependencies from (ifmaps[1 ][col_to_be_replaced_1] * filter[one][two]) to transition type_cast_733_sample_start_
      type_cast_733_sample_start_ <-& (array_obj_ref_728_update_completed_)
      type_cast_733_sample_start_ <-& (array_obj_ref_731_update_completed_)
      // done: Forward dependencies from (ifmaps[1 ][col_to_be_replaced_1] * filter[one][two]) to transition type_cast_733_sample_start_
      ;;[type_cast_733_Sample] 
      {
        // unary expression 
        $T [rr] $T [ra] // (split) unary operation
      }
      ;;[type_cast_733_Update] 
      {
        // unary expression 
        $T [cr] $T [ca] //(split) unary operation
      }
      type_cast_733_sample_start_ &-> (type_cast_733_Sample)
      type_cast_733_sample_completed_ <-& (type_cast_733_Sample)
      type_cast_733_sample_completed_ &-> ($null)
      type_cast_733_update_start_ &-> (type_cast_733_Update)
      type_cast_733_update_completed_ <-& (type_cast_733_Update)
      // Target expression
      // (as target) pp12
      // start: WAR dependencies for pp12
      // done: WAR dependencies for pp12
      // end:  	pp12 := ($bitcast ($uint<16>) (ifmaps[1 ][col_to_be_replaced_1] * filter[one][two]) )// bits of buffering = 16. 
      // start:  	pp22 := ($bitcast ($uint<16>) (ifmaps[2 ][col_to_be_replaced_1] * filter[two][two]) )// bits of buffering = 16. 
      //  file prog.linked.opt.aa, line 201
      // Source expression
      // ($bitcast ($uint<16>) (ifmaps[2 ][col_to_be_replaced_1] * filter[two][two]) )
      $T[type_cast_743_sample_start_] 
      $T[type_cast_743_sample_completed_] 
      $T[type_cast_743_update_start_] 
      $T[type_cast_743_update_completed_] 
      // (ifmaps[2 ][col_to_be_replaced_1] * filter[two][two])
      // ifmaps[2 ][col_to_be_replaced_1]
      $T[array_obj_ref_738_base_address_calculated] 
      $T[array_obj_ref_738_sample_start_] 
      $T[array_obj_ref_738_sample_completed_] 
      $T[array_obj_ref_738_update_start_] 
      $T[array_obj_ref_738_update_completed_] 
      $T[array_obj_ref_738_word_address_calculated] 
      $T[array_obj_ref_738_root_address_calculated] 
      $T[array_obj_ref_738_offset_calculated] 
      $T[array_obj_ref_738_index_resized_1] 
      $T[array_obj_ref_738_index_scaled_1] 
      $T[array_obj_ref_738_index_computed_1] 
      // col_to_be_replaced_1
      // start: Forward dependencies from col_to_be_replaced_1 to transition array_obj_ref_738_index_computed_1
      array_obj_ref_738_index_computed_1 <-& (MUX_647_update_completed_)
      // done: Forward dependencies from col_to_be_replaced_1 to transition array_obj_ref_738_index_computed_1
      ;;[array_obj_ref_738_index_resize_1] 
      {
        $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
      }
      array_obj_ref_738_index_computed_1 &-> (array_obj_ref_738_index_resize_1)
      array_obj_ref_738_index_resized_1 <-& (array_obj_ref_738_index_resize_1)
      ;;[array_obj_ref_738_index_scale_1] 
      {
        $T [scale_rename_req] $T [scale_rename_ack] // rename 
      }
      array_obj_ref_738_index_resized_1 &-> (array_obj_ref_738_index_scale_1)
      array_obj_ref_738_index_scaled_1 <-& (array_obj_ref_738_index_scale_1)
      $T[array_obj_ref_738_final_index_sum_regn_sample_complete] 
      $T[array_obj_ref_738_final_index_sum_regn_update_start] 
      ;;[array_obj_ref_738_final_index_sum_regn_Sample] 
      {
        $T [req] $T [ack] 
      }
      ;;[array_obj_ref_738_final_index_sum_regn_Update] 
      {
        $T [req] $T [ack] 
      }
      array_obj_ref_738_index_scaled_1 &-> (array_obj_ref_738_final_index_sum_regn_Sample)
      array_obj_ref_738_final_index_sum_regn_sample_complete <-& (array_obj_ref_738_final_index_sum_regn_Sample)
      array_obj_ref_738_final_index_sum_regn_update_start &-> (array_obj_ref_738_final_index_sum_regn_Update)
      array_obj_ref_738_offset_calculated <-& (array_obj_ref_738_final_index_sum_regn_Update)
      ;;[array_obj_ref_738_base_plus_offset] 
      {
        $T [sum_rename_req] $T [sum_rename_ack] // one gets through 
      }
      array_obj_ref_738_offset_calculated &-> (array_obj_ref_738_base_plus_offset)
      array_obj_ref_738_root_address_calculated <-& (array_obj_ref_738_base_plus_offset)
      ;;[array_obj_ref_738_word_addrgen] 
      {
        $T [root_register_req] $T [root_register_ack]
      }
      array_obj_ref_738_root_address_calculated &-> (array_obj_ref_738_word_addrgen)
      array_obj_ref_738_word_address_calculated <-& (array_obj_ref_738_word_addrgen)
      ;;[array_obj_ref_738_Sample] 
      {
        ||[word_access_start] 
        {
          ;;[word_0] 
          {
            $T [rr] $T [ra] 
          }
        }
      }
      ;;[array_obj_ref_738_Update] 
      {
        ||[word_access_complete] 
        {
          ;;[word_0] 
          {
            $T [cr] $T [ca] 
          }
        }
        ;;[array_obj_ref_738_Merge] 
        {
          $T [merge_req] $T [merge_ack]
        }
      }
      array_obj_ref_738_sample_start_ <-& (array_obj_ref_738_word_address_calculated)
      array_obj_ref_738_sample_start_ &-> (array_obj_ref_738_Sample)
      array_obj_ref_738_sample_completed_ <-& (array_obj_ref_738_Sample)
      array_obj_ref_738_sample_completed_ &-> ($null)
      array_obj_ref_738_update_start_ &-> (array_obj_ref_738_Update)
      array_obj_ref_738_update_completed_ <-& (array_obj_ref_738_Update)
      // filter[two][two]
      $T[array_obj_ref_741_base_address_calculated] 
      $T[array_obj_ref_741_sample_start_] 
      $T[array_obj_ref_741_sample_completed_] 
      $T[array_obj_ref_741_update_start_] 
      $T[array_obj_ref_741_update_completed_] 
      $T[array_obj_ref_741_word_address_calculated] 
      $T[array_obj_ref_741_root_address_calculated] 
      array_obj_ref_741_word_address_calculated <-& (array_obj_ref_741_root_address_calculated)
      ;;[array_obj_ref_741_Sample] 
      {
        ||[word_access_start] 
        {
          ;;[word_0] 
          {
            $T [rr] $T [ra] 
          }
        }
      }
      ;;[array_obj_ref_741_Update] 
      {
        ||[word_access_complete] 
        {
          ;;[word_0] 
          {
            $T [cr] $T [ca] 
          }
        }
        ;;[array_obj_ref_741_Merge] 
        {
          $T [merge_req] $T [merge_ack]
        }
      }
      array_obj_ref_741_sample_start_ <-& (array_obj_ref_741_word_address_calculated)
      array_obj_ref_741_sample_start_ &-> (array_obj_ref_741_Sample)
      array_obj_ref_741_sample_completed_ <-& (array_obj_ref_741_Sample)
      array_obj_ref_741_sample_completed_ &-> ($null)
      array_obj_ref_741_update_start_ &-> (array_obj_ref_741_Update)
      array_obj_ref_741_update_completed_ <-& (array_obj_ref_741_Update)
      // start: Forward dependencies from (ifmaps[2 ][col_to_be_replaced_1] * filter[two][two]) to transition type_cast_743_sample_start_
      type_cast_743_sample_start_ <-& (array_obj_ref_741_update_completed_)
      type_cast_743_sample_start_ <-& (array_obj_ref_738_update_completed_)
      // done: Forward dependencies from (ifmaps[2 ][col_to_be_replaced_1] * filter[two][two]) to transition type_cast_743_sample_start_
      ;;[type_cast_743_Sample] 
      {
        // unary expression 
        $T [rr] $T [ra] // (split) unary operation
      }
      ;;[type_cast_743_Update] 
      {
        // unary expression 
        $T [cr] $T [ca] //(split) unary operation
      }
      type_cast_743_sample_start_ &-> (type_cast_743_Sample)
      type_cast_743_sample_completed_ <-& (type_cast_743_Sample)
      type_cast_743_sample_completed_ &-> ($null)
      type_cast_743_update_start_ &-> (type_cast_743_Update)
      type_cast_743_update_completed_ <-& (type_cast_743_Update)
      // Target expression
      // (as target) pp22
      // start: WAR dependencies for pp22
      // done: WAR dependencies for pp22
      // end:  	pp22 := ($bitcast ($uint<16>) (ifmaps[2 ][col_to_be_replaced_1] * filter[two][two]) )// bits of buffering = 16. 
      // start:  	pp32 := ($bitcast ($uint<16>) (ifmaps[3 ][col_to_be_replaced_1] * filter[three][two]) )// bits of buffering = 16. 
      //  file prog.linked.opt.aa, line 202
      // Source expression
      // ($bitcast ($uint<16>) (ifmaps[3 ][col_to_be_replaced_1] * filter[three][two]) )
      $T[type_cast_753_sample_start_] 
      $T[type_cast_753_sample_completed_] 
      $T[type_cast_753_update_start_] 
      $T[type_cast_753_update_completed_] 
      // (ifmaps[3 ][col_to_be_replaced_1] * filter[three][two])
      // ifmaps[3 ][col_to_be_replaced_1]
      $T[array_obj_ref_748_base_address_calculated] 
      $T[array_obj_ref_748_sample_start_] 
      $T[array_obj_ref_748_sample_completed_] 
      $T[array_obj_ref_748_update_start_] 
      $T[array_obj_ref_748_update_completed_] 
      $T[array_obj_ref_748_word_address_calculated] 
      $T[array_obj_ref_748_root_address_calculated] 
      $T[array_obj_ref_748_offset_calculated] 
      $T[array_obj_ref_748_index_resized_1] 
      $T[array_obj_ref_748_index_scaled_1] 
      $T[array_obj_ref_748_index_computed_1] 
      // col_to_be_replaced_1
      // start: Forward dependencies from col_to_be_replaced_1 to transition array_obj_ref_748_index_computed_1
      array_obj_ref_748_index_computed_1 <-& (MUX_647_update_completed_)
      // done: Forward dependencies from col_to_be_replaced_1 to transition array_obj_ref_748_index_computed_1
      ;;[array_obj_ref_748_index_resize_1] 
      {
        $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
      }
      array_obj_ref_748_index_computed_1 &-> (array_obj_ref_748_index_resize_1)
      array_obj_ref_748_index_resized_1 <-& (array_obj_ref_748_index_resize_1)
      ;;[array_obj_ref_748_index_scale_1] 
      {
        $T [scale_rename_req] $T [scale_rename_ack] // rename 
      }
      array_obj_ref_748_index_resized_1 &-> (array_obj_ref_748_index_scale_1)
      array_obj_ref_748_index_scaled_1 <-& (array_obj_ref_748_index_scale_1)
      $T[array_obj_ref_748_final_index_sum_regn_sample_complete] 
      $T[array_obj_ref_748_final_index_sum_regn_update_start] 
      ;;[array_obj_ref_748_final_index_sum_regn_Sample] 
      {
        $T [req] $T [ack] 
      }
      ;;[array_obj_ref_748_final_index_sum_regn_Update] 
      {
        $T [req] $T [ack] 
      }
      array_obj_ref_748_index_scaled_1 &-> (array_obj_ref_748_final_index_sum_regn_Sample)
      array_obj_ref_748_final_index_sum_regn_sample_complete <-& (array_obj_ref_748_final_index_sum_regn_Sample)
      array_obj_ref_748_final_index_sum_regn_update_start &-> (array_obj_ref_748_final_index_sum_regn_Update)
      array_obj_ref_748_offset_calculated <-& (array_obj_ref_748_final_index_sum_regn_Update)
      ;;[array_obj_ref_748_base_plus_offset] 
      {
        $T [sum_rename_req] $T [sum_rename_ack] // one gets through 
      }
      array_obj_ref_748_offset_calculated &-> (array_obj_ref_748_base_plus_offset)
      array_obj_ref_748_root_address_calculated <-& (array_obj_ref_748_base_plus_offset)
      ;;[array_obj_ref_748_word_addrgen] 
      {
        $T [root_register_req] $T [root_register_ack]
      }
      array_obj_ref_748_root_address_calculated &-> (array_obj_ref_748_word_addrgen)
      array_obj_ref_748_word_address_calculated <-& (array_obj_ref_748_word_addrgen)
      ;;[array_obj_ref_748_Sample] 
      {
        ||[word_access_start] 
        {
          ;;[word_0] 
          {
            $T [rr] $T [ra] 
          }
        }
      }
      ;;[array_obj_ref_748_Update] 
      {
        ||[word_access_complete] 
        {
          ;;[word_0] 
          {
            $T [cr] $T [ca] 
          }
        }
        ;;[array_obj_ref_748_Merge] 
        {
          $T [merge_req] $T [merge_ack]
        }
      }
      array_obj_ref_748_sample_start_ <-& (array_obj_ref_748_word_address_calculated)
      array_obj_ref_748_sample_start_ &-> (array_obj_ref_748_Sample)
      array_obj_ref_748_sample_completed_ <-& (array_obj_ref_748_Sample)
      array_obj_ref_748_sample_completed_ &-> ($null)
      array_obj_ref_748_update_start_ &-> (array_obj_ref_748_Update)
      array_obj_ref_748_update_completed_ <-& (array_obj_ref_748_Update)
      // filter[three][two]
      $T[array_obj_ref_751_base_address_calculated] 
      $T[array_obj_ref_751_sample_start_] 
      $T[array_obj_ref_751_sample_completed_] 
      $T[array_obj_ref_751_update_start_] 
      $T[array_obj_ref_751_update_completed_] 
      $T[array_obj_ref_751_word_address_calculated] 
      $T[array_obj_ref_751_root_address_calculated] 
      array_obj_ref_751_word_address_calculated <-& (array_obj_ref_751_root_address_calculated)
      ;;[array_obj_ref_751_Sample] 
      {
        ||[word_access_start] 
        {
          ;;[word_0] 
          {
            $T [rr] $T [ra] 
          }
        }
      }
      ;;[array_obj_ref_751_Update] 
      {
        ||[word_access_complete] 
        {
          ;;[word_0] 
          {
            $T [cr] $T [ca] 
          }
        }
        ;;[array_obj_ref_751_Merge] 
        {
          $T [merge_req] $T [merge_ack]
        }
      }
      array_obj_ref_751_sample_start_ <-& (array_obj_ref_751_word_address_calculated)
      array_obj_ref_751_sample_start_ &-> (array_obj_ref_751_Sample)
      array_obj_ref_751_sample_completed_ <-& (array_obj_ref_751_Sample)
      array_obj_ref_751_sample_completed_ &-> ($null)
      array_obj_ref_751_update_start_ &-> (array_obj_ref_751_Update)
      array_obj_ref_751_update_completed_ <-& (array_obj_ref_751_Update)
      // start: Forward dependencies from (ifmaps[3 ][col_to_be_replaced_1] * filter[three][two]) to transition type_cast_753_sample_start_
      type_cast_753_sample_start_ <-& (array_obj_ref_748_update_completed_)
      type_cast_753_sample_start_ <-& (array_obj_ref_751_update_completed_)
      // done: Forward dependencies from (ifmaps[3 ][col_to_be_replaced_1] * filter[three][two]) to transition type_cast_753_sample_start_
      ;;[type_cast_753_Sample] 
      {
        // unary expression 
        $T [rr] $T [ra] // (split) unary operation
      }
      ;;[type_cast_753_Update] 
      {
        // unary expression 
        $T [cr] $T [ca] //(split) unary operation
      }
      type_cast_753_sample_start_ &-> (type_cast_753_Sample)
      type_cast_753_sample_completed_ <-& (type_cast_753_Sample)
      type_cast_753_sample_completed_ &-> ($null)
      type_cast_753_update_start_ &-> (type_cast_753_Update)
      type_cast_753_update_completed_ <-& (type_cast_753_Update)
      // Target expression
      // (as target) pp32
      // start: WAR dependencies for pp32
      // done: WAR dependencies for pp32
      // end:  	pp32 := ($bitcast ($uint<16>) (ifmaps[3 ][col_to_be_replaced_1] * filter[three][two]) )// bits of buffering = 16. 
      // start:  	pp01 := ($bitcast ($uint<16>) (ifmaps[0 ][col_to_be_replaced_2] * filter[zero][one]) )// bits of buffering = 16. 
      //  file prog.linked.opt.aa, line 203
      // Source expression
      // ($bitcast ($uint<16>) (ifmaps[0 ][col_to_be_replaced_2] * filter[zero][one]) )
      $T[type_cast_763_sample_start_] 
      $T[type_cast_763_sample_completed_] 
      $T[type_cast_763_update_start_] 
      $T[type_cast_763_update_completed_] 
      // (ifmaps[0 ][col_to_be_replaced_2] * filter[zero][one])
      // ifmaps[0 ][col_to_be_replaced_2]
      $T[array_obj_ref_758_base_address_calculated] 
      $T[array_obj_ref_758_sample_start_] 
      $T[array_obj_ref_758_sample_completed_] 
      $T[array_obj_ref_758_update_start_] 
      $T[array_obj_ref_758_update_completed_] 
      $T[array_obj_ref_758_word_address_calculated] 
      $T[array_obj_ref_758_root_address_calculated] 
      $T[array_obj_ref_758_offset_calculated] 
      $T[array_obj_ref_758_index_resized_1] 
      $T[array_obj_ref_758_index_scaled_1] 
      $T[array_obj_ref_758_index_computed_1] 
      // col_to_be_replaced_2
      // start: Forward dependencies from col_to_be_replaced_2 to transition array_obj_ref_758_index_computed_1
      array_obj_ref_758_index_computed_1 <-& (MUX_661_update_completed_)
      // done: Forward dependencies from col_to_be_replaced_2 to transition array_obj_ref_758_index_computed_1
      ;;[array_obj_ref_758_index_resize_1] 
      {
        $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
      }
      array_obj_ref_758_index_computed_1 &-> (array_obj_ref_758_index_resize_1)
      array_obj_ref_758_index_resized_1 <-& (array_obj_ref_758_index_resize_1)
      ;;[array_obj_ref_758_index_scale_1] 
      {
        $T [scale_rename_req] $T [scale_rename_ack] // rename 
      }
      array_obj_ref_758_index_resized_1 &-> (array_obj_ref_758_index_scale_1)
      array_obj_ref_758_index_scaled_1 <-& (array_obj_ref_758_index_scale_1)
      $T[array_obj_ref_758_final_index_sum_regn_sample_complete] 
      $T[array_obj_ref_758_final_index_sum_regn_update_start] 
      ;;[array_obj_ref_758_final_index_sum_regn_Sample] 
      {
        $T [req] $T [ack] 
      }
      ;;[array_obj_ref_758_final_index_sum_regn_Update] 
      {
        $T [req] $T [ack] 
      }
      array_obj_ref_758_index_scaled_1 &-> (array_obj_ref_758_final_index_sum_regn_Sample)
      array_obj_ref_758_final_index_sum_regn_sample_complete <-& (array_obj_ref_758_final_index_sum_regn_Sample)
      array_obj_ref_758_final_index_sum_regn_update_start &-> (array_obj_ref_758_final_index_sum_regn_Update)
      array_obj_ref_758_offset_calculated <-& (array_obj_ref_758_final_index_sum_regn_Update)
      ;;[array_obj_ref_758_base_plus_offset] 
      {
        $T [sum_rename_req] $T [sum_rename_ack] // one gets through 
      }
      array_obj_ref_758_offset_calculated &-> (array_obj_ref_758_base_plus_offset)
      array_obj_ref_758_root_address_calculated <-& (array_obj_ref_758_base_plus_offset)
      ;;[array_obj_ref_758_word_addrgen] 
      {
        $T [root_register_req] $T [root_register_ack]
      }
      array_obj_ref_758_root_address_calculated &-> (array_obj_ref_758_word_addrgen)
      array_obj_ref_758_word_address_calculated <-& (array_obj_ref_758_word_addrgen)
      ;;[array_obj_ref_758_Sample] 
      {
        ||[word_access_start] 
        {
          ;;[word_0] 
          {
            $T [rr] $T [ra] 
          }
        }
      }
      ;;[array_obj_ref_758_Update] 
      {
        ||[word_access_complete] 
        {
          ;;[word_0] 
          {
            $T [cr] $T [ca] 
          }
        }
        ;;[array_obj_ref_758_Merge] 
        {
          $T [merge_req] $T [merge_ack]
        }
      }
      array_obj_ref_758_sample_start_ <-& (array_obj_ref_758_word_address_calculated)
      array_obj_ref_758_sample_start_ &-> (array_obj_ref_758_Sample)
      array_obj_ref_758_sample_completed_ <-& (array_obj_ref_758_Sample)
      array_obj_ref_758_sample_completed_ &-> ($null)
      array_obj_ref_758_update_start_ &-> (array_obj_ref_758_Update)
      array_obj_ref_758_update_completed_ <-& (array_obj_ref_758_Update)
      // filter[zero][one]
      $T[array_obj_ref_761_base_address_calculated] 
      $T[array_obj_ref_761_sample_start_] 
      $T[array_obj_ref_761_sample_completed_] 
      $T[array_obj_ref_761_update_start_] 
      $T[array_obj_ref_761_update_completed_] 
      $T[array_obj_ref_761_word_address_calculated] 
      $T[array_obj_ref_761_root_address_calculated] 
      array_obj_ref_761_word_address_calculated <-& (array_obj_ref_761_root_address_calculated)
      ;;[array_obj_ref_761_Sample] 
      {
        ||[word_access_start] 
        {
          ;;[word_0] 
          {
            $T [rr] $T [ra] 
          }
        }
      }
      ;;[array_obj_ref_761_Update] 
      {
        ||[word_access_complete] 
        {
          ;;[word_0] 
          {
            $T [cr] $T [ca] 
          }
        }
        ;;[array_obj_ref_761_Merge] 
        {
          $T [merge_req] $T [merge_ack]
        }
      }
      array_obj_ref_761_sample_start_ <-& (array_obj_ref_761_word_address_calculated)
      array_obj_ref_761_sample_start_ &-> (array_obj_ref_761_Sample)
      array_obj_ref_761_sample_completed_ <-& (array_obj_ref_761_Sample)
      array_obj_ref_761_sample_completed_ &-> ($null)
      array_obj_ref_761_update_start_ &-> (array_obj_ref_761_Update)
      array_obj_ref_761_update_completed_ <-& (array_obj_ref_761_Update)
      // start: Forward dependencies from (ifmaps[0 ][col_to_be_replaced_2] * filter[zero][one]) to transition type_cast_763_sample_start_
      type_cast_763_sample_start_ <-& (array_obj_ref_758_update_completed_)
      type_cast_763_sample_start_ <-& (array_obj_ref_761_update_completed_)
      // done: Forward dependencies from (ifmaps[0 ][col_to_be_replaced_2] * filter[zero][one]) to transition type_cast_763_sample_start_
      ;;[type_cast_763_Sample] 
      {
        // unary expression 
        $T [rr] $T [ra] // (split) unary operation
      }
      ;;[type_cast_763_Update] 
      {
        // unary expression 
        $T [cr] $T [ca] //(split) unary operation
      }
      type_cast_763_sample_start_ &-> (type_cast_763_Sample)
      type_cast_763_sample_completed_ <-& (type_cast_763_Sample)
      type_cast_763_sample_completed_ &-> ($null)
      type_cast_763_update_start_ &-> (type_cast_763_Update)
      type_cast_763_update_completed_ <-& (type_cast_763_Update)
      // Target expression
      // (as target) pp01
      // start: WAR dependencies for pp01
      // done: WAR dependencies for pp01
      // end:  	pp01 := ($bitcast ($uint<16>) (ifmaps[0 ][col_to_be_replaced_2] * filter[zero][one]) )// bits of buffering = 16. 
      // start:  	pp11 := ($bitcast ($uint<16>) (ifmaps[1 ][col_to_be_replaced_2] * filter[one][one]) )// bits of buffering = 16. 
      //  file prog.linked.opt.aa, line 204
      // Source expression
      // ($bitcast ($uint<16>) (ifmaps[1 ][col_to_be_replaced_2] * filter[one][one]) )
      $T[type_cast_773_sample_start_] 
      $T[type_cast_773_sample_completed_] 
      $T[type_cast_773_update_start_] 
      $T[type_cast_773_update_completed_] 
      // (ifmaps[1 ][col_to_be_replaced_2] * filter[one][one])
      // ifmaps[1 ][col_to_be_replaced_2]
      $T[array_obj_ref_768_base_address_calculated] 
      $T[array_obj_ref_768_sample_start_] 
      $T[array_obj_ref_768_sample_completed_] 
      $T[array_obj_ref_768_update_start_] 
      $T[array_obj_ref_768_update_completed_] 
      $T[array_obj_ref_768_word_address_calculated] 
      $T[array_obj_ref_768_root_address_calculated] 
      $T[array_obj_ref_768_offset_calculated] 
      $T[array_obj_ref_768_index_resized_1] 
      $T[array_obj_ref_768_index_scaled_1] 
      $T[array_obj_ref_768_index_computed_1] 
      // col_to_be_replaced_2
      // start: Forward dependencies from col_to_be_replaced_2 to transition array_obj_ref_768_index_computed_1
      array_obj_ref_768_index_computed_1 <-& (MUX_661_update_completed_)
      // done: Forward dependencies from col_to_be_replaced_2 to transition array_obj_ref_768_index_computed_1
      ;;[array_obj_ref_768_index_resize_1] 
      {
        $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
      }
      array_obj_ref_768_index_computed_1 &-> (array_obj_ref_768_index_resize_1)
      array_obj_ref_768_index_resized_1 <-& (array_obj_ref_768_index_resize_1)
      ;;[array_obj_ref_768_index_scale_1] 
      {
        $T [scale_rename_req] $T [scale_rename_ack] // rename 
      }
      array_obj_ref_768_index_resized_1 &-> (array_obj_ref_768_index_scale_1)
      array_obj_ref_768_index_scaled_1 <-& (array_obj_ref_768_index_scale_1)
      $T[array_obj_ref_768_final_index_sum_regn_sample_complete] 
      $T[array_obj_ref_768_final_index_sum_regn_update_start] 
      ;;[array_obj_ref_768_final_index_sum_regn_Sample] 
      {
        $T [req] $T [ack] 
      }
      ;;[array_obj_ref_768_final_index_sum_regn_Update] 
      {
        $T [req] $T [ack] 
      }
      array_obj_ref_768_index_scaled_1 &-> (array_obj_ref_768_final_index_sum_regn_Sample)
      array_obj_ref_768_final_index_sum_regn_sample_complete <-& (array_obj_ref_768_final_index_sum_regn_Sample)
      array_obj_ref_768_final_index_sum_regn_update_start &-> (array_obj_ref_768_final_index_sum_regn_Update)
      array_obj_ref_768_offset_calculated <-& (array_obj_ref_768_final_index_sum_regn_Update)
      ;;[array_obj_ref_768_base_plus_offset] 
      {
        $T [sum_rename_req] $T [sum_rename_ack] // one gets through 
      }
      array_obj_ref_768_offset_calculated &-> (array_obj_ref_768_base_plus_offset)
      array_obj_ref_768_root_address_calculated <-& (array_obj_ref_768_base_plus_offset)
      ;;[array_obj_ref_768_word_addrgen] 
      {
        $T [root_register_req] $T [root_register_ack]
      }
      array_obj_ref_768_root_address_calculated &-> (array_obj_ref_768_word_addrgen)
      array_obj_ref_768_word_address_calculated <-& (array_obj_ref_768_word_addrgen)
      ;;[array_obj_ref_768_Sample] 
      {
        ||[word_access_start] 
        {
          ;;[word_0] 
          {
            $T [rr] $T [ra] 
          }
        }
      }
      ;;[array_obj_ref_768_Update] 
      {
        ||[word_access_complete] 
        {
          ;;[word_0] 
          {
            $T [cr] $T [ca] 
          }
        }
        ;;[array_obj_ref_768_Merge] 
        {
          $T [merge_req] $T [merge_ack]
        }
      }
      array_obj_ref_768_sample_start_ <-& (array_obj_ref_768_word_address_calculated)
      array_obj_ref_768_sample_start_ &-> (array_obj_ref_768_Sample)
      array_obj_ref_768_sample_completed_ <-& (array_obj_ref_768_Sample)
      array_obj_ref_768_sample_completed_ &-> ($null)
      array_obj_ref_768_update_start_ &-> (array_obj_ref_768_Update)
      array_obj_ref_768_update_completed_ <-& (array_obj_ref_768_Update)
      // filter[one][one]
      $T[array_obj_ref_771_base_address_calculated] 
      $T[array_obj_ref_771_sample_start_] 
      $T[array_obj_ref_771_sample_completed_] 
      $T[array_obj_ref_771_update_start_] 
      $T[array_obj_ref_771_update_completed_] 
      $T[array_obj_ref_771_word_address_calculated] 
      $T[array_obj_ref_771_root_address_calculated] 
      array_obj_ref_771_word_address_calculated <-& (array_obj_ref_771_root_address_calculated)
      ;;[array_obj_ref_771_Sample] 
      {
        ||[word_access_start] 
        {
          ;;[word_0] 
          {
            $T [rr] $T [ra] 
          }
        }
      }
      ;;[array_obj_ref_771_Update] 
      {
        ||[word_access_complete] 
        {
          ;;[word_0] 
          {
            $T [cr] $T [ca] 
          }
        }
        ;;[array_obj_ref_771_Merge] 
        {
          $T [merge_req] $T [merge_ack]
        }
      }
      array_obj_ref_771_sample_start_ <-& (array_obj_ref_771_word_address_calculated)
      array_obj_ref_771_sample_start_ &-> (array_obj_ref_771_Sample)
      array_obj_ref_771_sample_completed_ <-& (array_obj_ref_771_Sample)
      array_obj_ref_771_sample_completed_ &-> ($null)
      array_obj_ref_771_update_start_ &-> (array_obj_ref_771_Update)
      array_obj_ref_771_update_completed_ <-& (array_obj_ref_771_Update)
      // start: Forward dependencies from (ifmaps[1 ][col_to_be_replaced_2] * filter[one][one]) to transition type_cast_773_sample_start_
      type_cast_773_sample_start_ <-& (array_obj_ref_768_update_completed_)
      type_cast_773_sample_start_ <-& (array_obj_ref_771_update_completed_)
      // done: Forward dependencies from (ifmaps[1 ][col_to_be_replaced_2] * filter[one][one]) to transition type_cast_773_sample_start_
      ;;[type_cast_773_Sample] 
      {
        // unary expression 
        $T [rr] $T [ra] // (split) unary operation
      }
      ;;[type_cast_773_Update] 
      {
        // unary expression 
        $T [cr] $T [ca] //(split) unary operation
      }
      type_cast_773_sample_start_ &-> (type_cast_773_Sample)
      type_cast_773_sample_completed_ <-& (type_cast_773_Sample)
      type_cast_773_sample_completed_ &-> ($null)
      type_cast_773_update_start_ &-> (type_cast_773_Update)
      type_cast_773_update_completed_ <-& (type_cast_773_Update)
      // Target expression
      // (as target) pp11
      // start: WAR dependencies for pp11
      // done: WAR dependencies for pp11
      // end:  	pp11 := ($bitcast ($uint<16>) (ifmaps[1 ][col_to_be_replaced_2] * filter[one][one]) )// bits of buffering = 16. 
      // start:  	pp21 := ($bitcast ($uint<16>) (ifmaps[2 ][col_to_be_replaced_2] * filter[two][one]) )// bits of buffering = 16. 
      //  file prog.linked.opt.aa, line 205
      // Source expression
      // ($bitcast ($uint<16>) (ifmaps[2 ][col_to_be_replaced_2] * filter[two][one]) )
      $T[type_cast_783_sample_start_] 
      $T[type_cast_783_sample_completed_] 
      $T[type_cast_783_update_start_] 
      $T[type_cast_783_update_completed_] 
      // (ifmaps[2 ][col_to_be_replaced_2] * filter[two][one])
      // ifmaps[2 ][col_to_be_replaced_2]
      $T[array_obj_ref_778_base_address_calculated] 
      $T[array_obj_ref_778_sample_start_] 
      $T[array_obj_ref_778_sample_completed_] 
      $T[array_obj_ref_778_update_start_] 
      $T[array_obj_ref_778_update_completed_] 
      $T[array_obj_ref_778_word_address_calculated] 
      $T[array_obj_ref_778_root_address_calculated] 
      $T[array_obj_ref_778_offset_calculated] 
      $T[array_obj_ref_778_index_resized_1] 
      $T[array_obj_ref_778_index_scaled_1] 
      $T[array_obj_ref_778_index_computed_1] 
      // col_to_be_replaced_2
      // start: Forward dependencies from col_to_be_replaced_2 to transition array_obj_ref_778_index_computed_1
      array_obj_ref_778_index_computed_1 <-& (MUX_661_update_completed_)
      // done: Forward dependencies from col_to_be_replaced_2 to transition array_obj_ref_778_index_computed_1
      ;;[array_obj_ref_778_index_resize_1] 
      {
        $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
      }
      array_obj_ref_778_index_computed_1 &-> (array_obj_ref_778_index_resize_1)
      array_obj_ref_778_index_resized_1 <-& (array_obj_ref_778_index_resize_1)
      ;;[array_obj_ref_778_index_scale_1] 
      {
        $T [scale_rename_req] $T [scale_rename_ack] // rename 
      }
      array_obj_ref_778_index_resized_1 &-> (array_obj_ref_778_index_scale_1)
      array_obj_ref_778_index_scaled_1 <-& (array_obj_ref_778_index_scale_1)
      $T[array_obj_ref_778_final_index_sum_regn_sample_complete] 
      $T[array_obj_ref_778_final_index_sum_regn_update_start] 
      ;;[array_obj_ref_778_final_index_sum_regn_Sample] 
      {
        $T [req] $T [ack] 
      }
      ;;[array_obj_ref_778_final_index_sum_regn_Update] 
      {
        $T [req] $T [ack] 
      }
      array_obj_ref_778_index_scaled_1 &-> (array_obj_ref_778_final_index_sum_regn_Sample)
      array_obj_ref_778_final_index_sum_regn_sample_complete <-& (array_obj_ref_778_final_index_sum_regn_Sample)
      array_obj_ref_778_final_index_sum_regn_update_start &-> (array_obj_ref_778_final_index_sum_regn_Update)
      array_obj_ref_778_offset_calculated <-& (array_obj_ref_778_final_index_sum_regn_Update)
      ;;[array_obj_ref_778_base_plus_offset] 
      {
        $T [sum_rename_req] $T [sum_rename_ack] // one gets through 
      }
      array_obj_ref_778_offset_calculated &-> (array_obj_ref_778_base_plus_offset)
      array_obj_ref_778_root_address_calculated <-& (array_obj_ref_778_base_plus_offset)
      ;;[array_obj_ref_778_word_addrgen] 
      {
        $T [root_register_req] $T [root_register_ack]
      }
      array_obj_ref_778_root_address_calculated &-> (array_obj_ref_778_word_addrgen)
      array_obj_ref_778_word_address_calculated <-& (array_obj_ref_778_word_addrgen)
      ;;[array_obj_ref_778_Sample] 
      {
        ||[word_access_start] 
        {
          ;;[word_0] 
          {
            $T [rr] $T [ra] 
          }
        }
      }
      ;;[array_obj_ref_778_Update] 
      {
        ||[word_access_complete] 
        {
          ;;[word_0] 
          {
            $T [cr] $T [ca] 
          }
        }
        ;;[array_obj_ref_778_Merge] 
        {
          $T [merge_req] $T [merge_ack]
        }
      }
      array_obj_ref_778_sample_start_ <-& (array_obj_ref_778_word_address_calculated)
      array_obj_ref_778_sample_start_ &-> (array_obj_ref_778_Sample)
      array_obj_ref_778_sample_completed_ <-& (array_obj_ref_778_Sample)
      array_obj_ref_778_sample_completed_ &-> ($null)
      array_obj_ref_778_update_start_ &-> (array_obj_ref_778_Update)
      array_obj_ref_778_update_completed_ <-& (array_obj_ref_778_Update)
      // filter[two][one]
      $T[array_obj_ref_781_base_address_calculated] 
      $T[array_obj_ref_781_sample_start_] 
      $T[array_obj_ref_781_sample_completed_] 
      $T[array_obj_ref_781_update_start_] 
      $T[array_obj_ref_781_update_completed_] 
      $T[array_obj_ref_781_word_address_calculated] 
      $T[array_obj_ref_781_root_address_calculated] 
      array_obj_ref_781_word_address_calculated <-& (array_obj_ref_781_root_address_calculated)
      ;;[array_obj_ref_781_Sample] 
      {
        ||[word_access_start] 
        {
          ;;[word_0] 
          {
            $T [rr] $T [ra] 
          }
        }
      }
      ;;[array_obj_ref_781_Update] 
      {
        ||[word_access_complete] 
        {
          ;;[word_0] 
          {
            $T [cr] $T [ca] 
          }
        }
        ;;[array_obj_ref_781_Merge] 
        {
          $T [merge_req] $T [merge_ack]
        }
      }
      array_obj_ref_781_sample_start_ <-& (array_obj_ref_781_word_address_calculated)
      array_obj_ref_781_sample_start_ &-> (array_obj_ref_781_Sample)
      array_obj_ref_781_sample_completed_ <-& (array_obj_ref_781_Sample)
      array_obj_ref_781_sample_completed_ &-> ($null)
      array_obj_ref_781_update_start_ &-> (array_obj_ref_781_Update)
      array_obj_ref_781_update_completed_ <-& (array_obj_ref_781_Update)
      // start: Forward dependencies from (ifmaps[2 ][col_to_be_replaced_2] * filter[two][one]) to transition type_cast_783_sample_start_
      type_cast_783_sample_start_ <-& (array_obj_ref_778_update_completed_)
      type_cast_783_sample_start_ <-& (array_obj_ref_781_update_completed_)
      // done: Forward dependencies from (ifmaps[2 ][col_to_be_replaced_2] * filter[two][one]) to transition type_cast_783_sample_start_
      ;;[type_cast_783_Sample] 
      {
        // unary expression 
        $T [rr] $T [ra] // (split) unary operation
      }
      ;;[type_cast_783_Update] 
      {
        // unary expression 
        $T [cr] $T [ca] //(split) unary operation
      }
      type_cast_783_sample_start_ &-> (type_cast_783_Sample)
      type_cast_783_sample_completed_ <-& (type_cast_783_Sample)
      type_cast_783_sample_completed_ &-> ($null)
      type_cast_783_update_start_ &-> (type_cast_783_Update)
      type_cast_783_update_completed_ <-& (type_cast_783_Update)
      // Target expression
      // (as target) pp21
      // start: WAR dependencies for pp21
      // done: WAR dependencies for pp21
      // end:  	pp21 := ($bitcast ($uint<16>) (ifmaps[2 ][col_to_be_replaced_2] * filter[two][one]) )// bits of buffering = 16. 
      // start:  	pp31 := ($bitcast ($uint<16>) (ifmaps[3 ][col_to_be_replaced_2] * filter[three][one]) )// bits of buffering = 16. 
      //  file prog.linked.opt.aa, line 206
      // Source expression
      // ($bitcast ($uint<16>) (ifmaps[3 ][col_to_be_replaced_2] * filter[three][one]) )
      $T[type_cast_793_sample_start_] 
      $T[type_cast_793_sample_completed_] 
      $T[type_cast_793_update_start_] 
      $T[type_cast_793_update_completed_] 
      // (ifmaps[3 ][col_to_be_replaced_2] * filter[three][one])
      // ifmaps[3 ][col_to_be_replaced_2]
      $T[array_obj_ref_788_base_address_calculated] 
      $T[array_obj_ref_788_sample_start_] 
      $T[array_obj_ref_788_sample_completed_] 
      $T[array_obj_ref_788_update_start_] 
      $T[array_obj_ref_788_update_completed_] 
      $T[array_obj_ref_788_word_address_calculated] 
      $T[array_obj_ref_788_root_address_calculated] 
      $T[array_obj_ref_788_offset_calculated] 
      $T[array_obj_ref_788_index_resized_1] 
      $T[array_obj_ref_788_index_scaled_1] 
      $T[array_obj_ref_788_index_computed_1] 
      // col_to_be_replaced_2
      // start: Forward dependencies from col_to_be_replaced_2 to transition array_obj_ref_788_index_computed_1
      array_obj_ref_788_index_computed_1 <-& (MUX_661_update_completed_)
      // done: Forward dependencies from col_to_be_replaced_2 to transition array_obj_ref_788_index_computed_1
      ;;[array_obj_ref_788_index_resize_1] 
      {
        $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
      }
      array_obj_ref_788_index_computed_1 &-> (array_obj_ref_788_index_resize_1)
      array_obj_ref_788_index_resized_1 <-& (array_obj_ref_788_index_resize_1)
      ;;[array_obj_ref_788_index_scale_1] 
      {
        $T [scale_rename_req] $T [scale_rename_ack] // rename 
      }
      array_obj_ref_788_index_resized_1 &-> (array_obj_ref_788_index_scale_1)
      array_obj_ref_788_index_scaled_1 <-& (array_obj_ref_788_index_scale_1)
      $T[array_obj_ref_788_final_index_sum_regn_sample_complete] 
      $T[array_obj_ref_788_final_index_sum_regn_update_start] 
      ;;[array_obj_ref_788_final_index_sum_regn_Sample] 
      {
        $T [req] $T [ack] 
      }
      ;;[array_obj_ref_788_final_index_sum_regn_Update] 
      {
        $T [req] $T [ack] 
      }
      array_obj_ref_788_index_scaled_1 &-> (array_obj_ref_788_final_index_sum_regn_Sample)
      array_obj_ref_788_final_index_sum_regn_sample_complete <-& (array_obj_ref_788_final_index_sum_regn_Sample)
      array_obj_ref_788_final_index_sum_regn_update_start &-> (array_obj_ref_788_final_index_sum_regn_Update)
      array_obj_ref_788_offset_calculated <-& (array_obj_ref_788_final_index_sum_regn_Update)
      ;;[array_obj_ref_788_base_plus_offset] 
      {
        $T [sum_rename_req] $T [sum_rename_ack] // one gets through 
      }
      array_obj_ref_788_offset_calculated &-> (array_obj_ref_788_base_plus_offset)
      array_obj_ref_788_root_address_calculated <-& (array_obj_ref_788_base_plus_offset)
      ;;[array_obj_ref_788_word_addrgen] 
      {
        $T [root_register_req] $T [root_register_ack]
      }
      array_obj_ref_788_root_address_calculated &-> (array_obj_ref_788_word_addrgen)
      array_obj_ref_788_word_address_calculated <-& (array_obj_ref_788_word_addrgen)
      ;;[array_obj_ref_788_Sample] 
      {
        ||[word_access_start] 
        {
          ;;[word_0] 
          {
            $T [rr] $T [ra] 
          }
        }
      }
      ;;[array_obj_ref_788_Update] 
      {
        ||[word_access_complete] 
        {
          ;;[word_0] 
          {
            $T [cr] $T [ca] 
          }
        }
        ;;[array_obj_ref_788_Merge] 
        {
          $T [merge_req] $T [merge_ack]
        }
      }
      array_obj_ref_788_sample_start_ <-& (array_obj_ref_788_word_address_calculated)
      array_obj_ref_788_sample_start_ &-> (array_obj_ref_788_Sample)
      array_obj_ref_788_sample_completed_ <-& (array_obj_ref_788_Sample)
      array_obj_ref_788_sample_completed_ &-> ($null)
      array_obj_ref_788_update_start_ &-> (array_obj_ref_788_Update)
      array_obj_ref_788_update_completed_ <-& (array_obj_ref_788_Update)
      // filter[three][one]
      $T[array_obj_ref_791_base_address_calculated] 
      $T[array_obj_ref_791_sample_start_] 
      $T[array_obj_ref_791_sample_completed_] 
      $T[array_obj_ref_791_update_start_] 
      $T[array_obj_ref_791_update_completed_] 
      $T[array_obj_ref_791_word_address_calculated] 
      $T[array_obj_ref_791_root_address_calculated] 
      array_obj_ref_791_word_address_calculated <-& (array_obj_ref_791_root_address_calculated)
      ;;[array_obj_ref_791_Sample] 
      {
        ||[word_access_start] 
        {
          ;;[word_0] 
          {
            $T [rr] $T [ra] 
          }
        }
      }
      ;;[array_obj_ref_791_Update] 
      {
        ||[word_access_complete] 
        {
          ;;[word_0] 
          {
            $T [cr] $T [ca] 
          }
        }
        ;;[array_obj_ref_791_Merge] 
        {
          $T [merge_req] $T [merge_ack]
        }
      }
      array_obj_ref_791_sample_start_ <-& (array_obj_ref_791_word_address_calculated)
      array_obj_ref_791_sample_start_ &-> (array_obj_ref_791_Sample)
      array_obj_ref_791_sample_completed_ <-& (array_obj_ref_791_Sample)
      array_obj_ref_791_sample_completed_ &-> ($null)
      array_obj_ref_791_update_start_ &-> (array_obj_ref_791_Update)
      array_obj_ref_791_update_completed_ <-& (array_obj_ref_791_Update)
      // start: Forward dependencies from (ifmaps[3 ][col_to_be_replaced_2] * filter[three][one]) to transition type_cast_793_sample_start_
      type_cast_793_sample_start_ <-& (array_obj_ref_788_update_completed_)
      type_cast_793_sample_start_ <-& (array_obj_ref_791_update_completed_)
      // done: Forward dependencies from (ifmaps[3 ][col_to_be_replaced_2] * filter[three][one]) to transition type_cast_793_sample_start_
      ;;[type_cast_793_Sample] 
      {
        // unary expression 
        $T [rr] $T [ra] // (split) unary operation
      }
      ;;[type_cast_793_Update] 
      {
        // unary expression 
        $T [cr] $T [ca] //(split) unary operation
      }
      type_cast_793_sample_start_ &-> (type_cast_793_Sample)
      type_cast_793_sample_completed_ <-& (type_cast_793_Sample)
      type_cast_793_sample_completed_ &-> ($null)
      type_cast_793_update_start_ &-> (type_cast_793_Update)
      type_cast_793_update_completed_ <-& (type_cast_793_Update)
      // Target expression
      // (as target) pp31
      // start: WAR dependencies for pp31
      // done: WAR dependencies for pp31
      // end:  	pp31 := ($bitcast ($uint<16>) (ifmaps[3 ][col_to_be_replaced_2] * filter[three][one]) )// bits of buffering = 16. 
      // start:  	pp00 := ($bitcast ($uint<16>) (ifmaps[0 ][col_to_be_replaced_3] * filter[zero][zero]) )// bits of buffering = 16. 
      //  file prog.linked.opt.aa, line 207
      // Source expression
      // ($bitcast ($uint<16>) (ifmaps[0 ][col_to_be_replaced_3] * filter[zero][zero]) )
      $T[type_cast_803_sample_start_] 
      $T[type_cast_803_sample_completed_] 
      $T[type_cast_803_update_start_] 
      $T[type_cast_803_update_completed_] 
      // (ifmaps[0 ][col_to_be_replaced_3] * filter[zero][zero])
      // ifmaps[0 ][col_to_be_replaced_3]
      $T[array_obj_ref_798_base_address_calculated] 
      $T[array_obj_ref_798_sample_start_] 
      $T[array_obj_ref_798_sample_completed_] 
      $T[array_obj_ref_798_update_start_] 
      $T[array_obj_ref_798_update_completed_] 
      $T[array_obj_ref_798_word_address_calculated] 
      $T[array_obj_ref_798_root_address_calculated] 
      $T[array_obj_ref_798_offset_calculated] 
      $T[array_obj_ref_798_index_resized_1] 
      $T[array_obj_ref_798_index_scaled_1] 
      $T[array_obj_ref_798_index_computed_1] 
      // col_to_be_replaced_3
      // start: Forward dependencies from col_to_be_replaced_3 to transition array_obj_ref_798_index_computed_1
      array_obj_ref_798_index_computed_1 <-& (MUX_673_update_completed_)
      // done: Forward dependencies from col_to_be_replaced_3 to transition array_obj_ref_798_index_computed_1
      ;;[array_obj_ref_798_index_resize_1] 
      {
        $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
      }
      array_obj_ref_798_index_computed_1 &-> (array_obj_ref_798_index_resize_1)
      array_obj_ref_798_index_resized_1 <-& (array_obj_ref_798_index_resize_1)
      ;;[array_obj_ref_798_index_scale_1] 
      {
        $T [scale_rename_req] $T [scale_rename_ack] // rename 
      }
      array_obj_ref_798_index_resized_1 &-> (array_obj_ref_798_index_scale_1)
      array_obj_ref_798_index_scaled_1 <-& (array_obj_ref_798_index_scale_1)
      $T[array_obj_ref_798_final_index_sum_regn_sample_complete] 
      $T[array_obj_ref_798_final_index_sum_regn_update_start] 
      ;;[array_obj_ref_798_final_index_sum_regn_Sample] 
      {
        $T [req] $T [ack] 
      }
      ;;[array_obj_ref_798_final_index_sum_regn_Update] 
      {
        $T [req] $T [ack] 
      }
      array_obj_ref_798_index_scaled_1 &-> (array_obj_ref_798_final_index_sum_regn_Sample)
      array_obj_ref_798_final_index_sum_regn_sample_complete <-& (array_obj_ref_798_final_index_sum_regn_Sample)
      array_obj_ref_798_final_index_sum_regn_update_start &-> (array_obj_ref_798_final_index_sum_regn_Update)
      array_obj_ref_798_offset_calculated <-& (array_obj_ref_798_final_index_sum_regn_Update)
      ;;[array_obj_ref_798_base_plus_offset] 
      {
        $T [sum_rename_req] $T [sum_rename_ack] // one gets through 
      }
      array_obj_ref_798_offset_calculated &-> (array_obj_ref_798_base_plus_offset)
      array_obj_ref_798_root_address_calculated <-& (array_obj_ref_798_base_plus_offset)
      ;;[array_obj_ref_798_word_addrgen] 
      {
        $T [root_register_req] $T [root_register_ack]
      }
      array_obj_ref_798_root_address_calculated &-> (array_obj_ref_798_word_addrgen)
      array_obj_ref_798_word_address_calculated <-& (array_obj_ref_798_word_addrgen)
      ;;[array_obj_ref_798_Sample] 
      {
        ||[word_access_start] 
        {
          ;;[word_0] 
          {
            $T [rr] $T [ra] 
          }
        }
      }
      ;;[array_obj_ref_798_Update] 
      {
        ||[word_access_complete] 
        {
          ;;[word_0] 
          {
            $T [cr] $T [ca] 
          }
        }
        ;;[array_obj_ref_798_Merge] 
        {
          $T [merge_req] $T [merge_ack]
        }
      }
      array_obj_ref_798_sample_start_ <-& (array_obj_ref_798_word_address_calculated)
      array_obj_ref_798_sample_start_ &-> (array_obj_ref_798_Sample)
      array_obj_ref_798_sample_completed_ <-& (array_obj_ref_798_Sample)
      array_obj_ref_798_sample_completed_ &-> ($null)
      array_obj_ref_798_update_start_ &-> (array_obj_ref_798_Update)
      array_obj_ref_798_update_completed_ <-& (array_obj_ref_798_Update)
      // filter[zero][zero]
      $T[array_obj_ref_801_base_address_calculated] 
      $T[array_obj_ref_801_sample_start_] 
      $T[array_obj_ref_801_sample_completed_] 
      $T[array_obj_ref_801_update_start_] 
      $T[array_obj_ref_801_update_completed_] 
      $T[array_obj_ref_801_word_address_calculated] 
      $T[array_obj_ref_801_root_address_calculated] 
      array_obj_ref_801_word_address_calculated <-& (array_obj_ref_801_root_address_calculated)
      ;;[array_obj_ref_801_Sample] 
      {
        ||[word_access_start] 
        {
          ;;[word_0] 
          {
            $T [rr] $T [ra] 
          }
        }
      }
      ;;[array_obj_ref_801_Update] 
      {
        ||[word_access_complete] 
        {
          ;;[word_0] 
          {
            $T [cr] $T [ca] 
          }
        }
        ;;[array_obj_ref_801_Merge] 
        {
          $T [merge_req] $T [merge_ack]
        }
      }
      array_obj_ref_801_sample_start_ <-& (array_obj_ref_801_word_address_calculated)
      array_obj_ref_801_sample_start_ &-> (array_obj_ref_801_Sample)
      array_obj_ref_801_sample_completed_ <-& (array_obj_ref_801_Sample)
      array_obj_ref_801_sample_completed_ &-> ($null)
      array_obj_ref_801_update_start_ &-> (array_obj_ref_801_Update)
      array_obj_ref_801_update_completed_ <-& (array_obj_ref_801_Update)
      // start: Forward dependencies from (ifmaps[0 ][col_to_be_replaced_3] * filter[zero][zero]) to transition type_cast_803_sample_start_
      type_cast_803_sample_start_ <-& (array_obj_ref_798_update_completed_)
      type_cast_803_sample_start_ <-& (array_obj_ref_801_update_completed_)
      // done: Forward dependencies from (ifmaps[0 ][col_to_be_replaced_3] * filter[zero][zero]) to transition type_cast_803_sample_start_
      ;;[type_cast_803_Sample] 
      {
        // unary expression 
        $T [rr] $T [ra] // (split) unary operation
      }
      ;;[type_cast_803_Update] 
      {
        // unary expression 
        $T [cr] $T [ca] //(split) unary operation
      }
      type_cast_803_sample_start_ &-> (type_cast_803_Sample)
      type_cast_803_sample_completed_ <-& (type_cast_803_Sample)
      type_cast_803_sample_completed_ &-> ($null)
      type_cast_803_update_start_ &-> (type_cast_803_Update)
      type_cast_803_update_completed_ <-& (type_cast_803_Update)
      // Target expression
      // (as target) pp00
      // start: WAR dependencies for pp00
      // done: WAR dependencies for pp00
      // end:  	pp00 := ($bitcast ($uint<16>) (ifmaps[0 ][col_to_be_replaced_3] * filter[zero][zero]) )// bits of buffering = 16. 
      // start:  	pp10 := ($bitcast ($uint<16>) (ifmaps[1 ][col_to_be_replaced_3] * filter[one][zero]) )// bits of buffering = 16. 
      //  file prog.linked.opt.aa, line 208
      // Source expression
      // ($bitcast ($uint<16>) (ifmaps[1 ][col_to_be_replaced_3] * filter[one][zero]) )
      $T[type_cast_813_sample_start_] 
      $T[type_cast_813_sample_completed_] 
      $T[type_cast_813_update_start_] 
      $T[type_cast_813_update_completed_] 
      // (ifmaps[1 ][col_to_be_replaced_3] * filter[one][zero])
      // ifmaps[1 ][col_to_be_replaced_3]
      $T[array_obj_ref_808_base_address_calculated] 
      $T[array_obj_ref_808_sample_start_] 
      $T[array_obj_ref_808_sample_completed_] 
      $T[array_obj_ref_808_update_start_] 
      $T[array_obj_ref_808_update_completed_] 
      $T[array_obj_ref_808_word_address_calculated] 
      $T[array_obj_ref_808_root_address_calculated] 
      $T[array_obj_ref_808_offset_calculated] 
      $T[array_obj_ref_808_index_resized_1] 
      $T[array_obj_ref_808_index_scaled_1] 
      $T[array_obj_ref_808_index_computed_1] 
      // col_to_be_replaced_3
      // start: Forward dependencies from col_to_be_replaced_3 to transition array_obj_ref_808_index_computed_1
      array_obj_ref_808_index_computed_1 <-& (MUX_673_update_completed_)
      // done: Forward dependencies from col_to_be_replaced_3 to transition array_obj_ref_808_index_computed_1
      ;;[array_obj_ref_808_index_resize_1] 
      {
        $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
      }
      array_obj_ref_808_index_computed_1 &-> (array_obj_ref_808_index_resize_1)
      array_obj_ref_808_index_resized_1 <-& (array_obj_ref_808_index_resize_1)
      ;;[array_obj_ref_808_index_scale_1] 
      {
        $T [scale_rename_req] $T [scale_rename_ack] // rename 
      }
      array_obj_ref_808_index_resized_1 &-> (array_obj_ref_808_index_scale_1)
      array_obj_ref_808_index_scaled_1 <-& (array_obj_ref_808_index_scale_1)
      $T[array_obj_ref_808_final_index_sum_regn_sample_complete] 
      $T[array_obj_ref_808_final_index_sum_regn_update_start] 
      ;;[array_obj_ref_808_final_index_sum_regn_Sample] 
      {
        $T [req] $T [ack] 
      }
      ;;[array_obj_ref_808_final_index_sum_regn_Update] 
      {
        $T [req] $T [ack] 
      }
      array_obj_ref_808_index_scaled_1 &-> (array_obj_ref_808_final_index_sum_regn_Sample)
      array_obj_ref_808_final_index_sum_regn_sample_complete <-& (array_obj_ref_808_final_index_sum_regn_Sample)
      array_obj_ref_808_final_index_sum_regn_update_start &-> (array_obj_ref_808_final_index_sum_regn_Update)
      array_obj_ref_808_offset_calculated <-& (array_obj_ref_808_final_index_sum_regn_Update)
      ;;[array_obj_ref_808_base_plus_offset] 
      {
        $T [sum_rename_req] $T [sum_rename_ack] // one gets through 
      }
      array_obj_ref_808_offset_calculated &-> (array_obj_ref_808_base_plus_offset)
      array_obj_ref_808_root_address_calculated <-& (array_obj_ref_808_base_plus_offset)
      ;;[array_obj_ref_808_word_addrgen] 
      {
        $T [root_register_req] $T [root_register_ack]
      }
      array_obj_ref_808_root_address_calculated &-> (array_obj_ref_808_word_addrgen)
      array_obj_ref_808_word_address_calculated <-& (array_obj_ref_808_word_addrgen)
      ;;[array_obj_ref_808_Sample] 
      {
        ||[word_access_start] 
        {
          ;;[word_0] 
          {
            $T [rr] $T [ra] 
          }
        }
      }
      ;;[array_obj_ref_808_Update] 
      {
        ||[word_access_complete] 
        {
          ;;[word_0] 
          {
            $T [cr] $T [ca] 
          }
        }
        ;;[array_obj_ref_808_Merge] 
        {
          $T [merge_req] $T [merge_ack]
        }
      }
      array_obj_ref_808_sample_start_ <-& (array_obj_ref_808_word_address_calculated)
      array_obj_ref_808_sample_start_ &-> (array_obj_ref_808_Sample)
      array_obj_ref_808_sample_completed_ <-& (array_obj_ref_808_Sample)
      array_obj_ref_808_sample_completed_ &-> ($null)
      array_obj_ref_808_update_start_ &-> (array_obj_ref_808_Update)
      array_obj_ref_808_update_completed_ <-& (array_obj_ref_808_Update)
      // filter[one][zero]
      $T[array_obj_ref_811_base_address_calculated] 
      $T[array_obj_ref_811_sample_start_] 
      $T[array_obj_ref_811_sample_completed_] 
      $T[array_obj_ref_811_update_start_] 
      $T[array_obj_ref_811_update_completed_] 
      $T[array_obj_ref_811_word_address_calculated] 
      $T[array_obj_ref_811_root_address_calculated] 
      array_obj_ref_811_word_address_calculated <-& (array_obj_ref_811_root_address_calculated)
      ;;[array_obj_ref_811_Sample] 
      {
        ||[word_access_start] 
        {
          ;;[word_0] 
          {
            $T [rr] $T [ra] 
          }
        }
      }
      ;;[array_obj_ref_811_Update] 
      {
        ||[word_access_complete] 
        {
          ;;[word_0] 
          {
            $T [cr] $T [ca] 
          }
        }
        ;;[array_obj_ref_811_Merge] 
        {
          $T [merge_req] $T [merge_ack]
        }
      }
      array_obj_ref_811_sample_start_ <-& (array_obj_ref_811_word_address_calculated)
      array_obj_ref_811_sample_start_ &-> (array_obj_ref_811_Sample)
      array_obj_ref_811_sample_completed_ <-& (array_obj_ref_811_Sample)
      array_obj_ref_811_sample_completed_ &-> ($null)
      array_obj_ref_811_update_start_ &-> (array_obj_ref_811_Update)
      array_obj_ref_811_update_completed_ <-& (array_obj_ref_811_Update)
      // start: Forward dependencies from (ifmaps[1 ][col_to_be_replaced_3] * filter[one][zero]) to transition type_cast_813_sample_start_
      type_cast_813_sample_start_ <-& (array_obj_ref_808_update_completed_)
      type_cast_813_sample_start_ <-& (array_obj_ref_811_update_completed_)
      // done: Forward dependencies from (ifmaps[1 ][col_to_be_replaced_3] * filter[one][zero]) to transition type_cast_813_sample_start_
      ;;[type_cast_813_Sample] 
      {
        // unary expression 
        $T [rr] $T [ra] // (split) unary operation
      }
      ;;[type_cast_813_Update] 
      {
        // unary expression 
        $T [cr] $T [ca] //(split) unary operation
      }
      type_cast_813_sample_start_ &-> (type_cast_813_Sample)
      type_cast_813_sample_completed_ <-& (type_cast_813_Sample)
      type_cast_813_sample_completed_ &-> ($null)
      type_cast_813_update_start_ &-> (type_cast_813_Update)
      type_cast_813_update_completed_ <-& (type_cast_813_Update)
      // Target expression
      // (as target) pp10
      // start: WAR dependencies for pp10
      // done: WAR dependencies for pp10
      // end:  	pp10 := ($bitcast ($uint<16>) (ifmaps[1 ][col_to_be_replaced_3] * filter[one][zero]) )// bits of buffering = 16. 
      // start:  	pp20 := ($bitcast ($uint<16>) (ifmaps[2 ][col_to_be_replaced_3] * filter[two][zero]) )// bits of buffering = 16. 
      //  file prog.linked.opt.aa, line 209
      // Source expression
      // ($bitcast ($uint<16>) (ifmaps[2 ][col_to_be_replaced_3] * filter[two][zero]) )
      $T[type_cast_823_sample_start_] 
      $T[type_cast_823_sample_completed_] 
      $T[type_cast_823_update_start_] 
      $T[type_cast_823_update_completed_] 
      // (ifmaps[2 ][col_to_be_replaced_3] * filter[two][zero])
      // ifmaps[2 ][col_to_be_replaced_3]
      $T[array_obj_ref_818_base_address_calculated] 
      $T[array_obj_ref_818_sample_start_] 
      $T[array_obj_ref_818_sample_completed_] 
      $T[array_obj_ref_818_update_start_] 
      $T[array_obj_ref_818_update_completed_] 
      $T[array_obj_ref_818_word_address_calculated] 
      $T[array_obj_ref_818_root_address_calculated] 
      $T[array_obj_ref_818_offset_calculated] 
      $T[array_obj_ref_818_index_resized_1] 
      $T[array_obj_ref_818_index_scaled_1] 
      $T[array_obj_ref_818_index_computed_1] 
      // col_to_be_replaced_3
      // start: Forward dependencies from col_to_be_replaced_3 to transition array_obj_ref_818_index_computed_1
      array_obj_ref_818_index_computed_1 <-& (MUX_673_update_completed_)
      // done: Forward dependencies from col_to_be_replaced_3 to transition array_obj_ref_818_index_computed_1
      ;;[array_obj_ref_818_index_resize_1] 
      {
        $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
      }
      array_obj_ref_818_index_computed_1 &-> (array_obj_ref_818_index_resize_1)
      array_obj_ref_818_index_resized_1 <-& (array_obj_ref_818_index_resize_1)
      ;;[array_obj_ref_818_index_scale_1] 
      {
        $T [scale_rename_req] $T [scale_rename_ack] // rename 
      }
      array_obj_ref_818_index_resized_1 &-> (array_obj_ref_818_index_scale_1)
      array_obj_ref_818_index_scaled_1 <-& (array_obj_ref_818_index_scale_1)
      $T[array_obj_ref_818_final_index_sum_regn_sample_complete] 
      $T[array_obj_ref_818_final_index_sum_regn_update_start] 
      ;;[array_obj_ref_818_final_index_sum_regn_Sample] 
      {
        $T [req] $T [ack] 
      }
      ;;[array_obj_ref_818_final_index_sum_regn_Update] 
      {
        $T [req] $T [ack] 
      }
      array_obj_ref_818_index_scaled_1 &-> (array_obj_ref_818_final_index_sum_regn_Sample)
      array_obj_ref_818_final_index_sum_regn_sample_complete <-& (array_obj_ref_818_final_index_sum_regn_Sample)
      array_obj_ref_818_final_index_sum_regn_update_start &-> (array_obj_ref_818_final_index_sum_regn_Update)
      array_obj_ref_818_offset_calculated <-& (array_obj_ref_818_final_index_sum_regn_Update)
      ;;[array_obj_ref_818_base_plus_offset] 
      {
        $T [sum_rename_req] $T [sum_rename_ack] // one gets through 
      }
      array_obj_ref_818_offset_calculated &-> (array_obj_ref_818_base_plus_offset)
      array_obj_ref_818_root_address_calculated <-& (array_obj_ref_818_base_plus_offset)
      ;;[array_obj_ref_818_word_addrgen] 
      {
        $T [root_register_req] $T [root_register_ack]
      }
      array_obj_ref_818_root_address_calculated &-> (array_obj_ref_818_word_addrgen)
      array_obj_ref_818_word_address_calculated <-& (array_obj_ref_818_word_addrgen)
      ;;[array_obj_ref_818_Sample] 
      {
        ||[word_access_start] 
        {
          ;;[word_0] 
          {
            $T [rr] $T [ra] 
          }
        }
      }
      ;;[array_obj_ref_818_Update] 
      {
        ||[word_access_complete] 
        {
          ;;[word_0] 
          {
            $T [cr] $T [ca] 
          }
        }
        ;;[array_obj_ref_818_Merge] 
        {
          $T [merge_req] $T [merge_ack]
        }
      }
      array_obj_ref_818_sample_start_ <-& (array_obj_ref_818_word_address_calculated)
      array_obj_ref_818_sample_start_ &-> (array_obj_ref_818_Sample)
      array_obj_ref_818_sample_completed_ <-& (array_obj_ref_818_Sample)
      array_obj_ref_818_sample_completed_ &-> ($null)
      array_obj_ref_818_update_start_ &-> (array_obj_ref_818_Update)
      array_obj_ref_818_update_completed_ <-& (array_obj_ref_818_Update)
      // filter[two][zero]
      $T[array_obj_ref_821_base_address_calculated] 
      $T[array_obj_ref_821_sample_start_] 
      $T[array_obj_ref_821_sample_completed_] 
      $T[array_obj_ref_821_update_start_] 
      $T[array_obj_ref_821_update_completed_] 
      $T[array_obj_ref_821_word_address_calculated] 
      $T[array_obj_ref_821_root_address_calculated] 
      array_obj_ref_821_word_address_calculated <-& (array_obj_ref_821_root_address_calculated)
      ;;[array_obj_ref_821_Sample] 
      {
        ||[word_access_start] 
        {
          ;;[word_0] 
          {
            $T [rr] $T [ra] 
          }
        }
      }
      ;;[array_obj_ref_821_Update] 
      {
        ||[word_access_complete] 
        {
          ;;[word_0] 
          {
            $T [cr] $T [ca] 
          }
        }
        ;;[array_obj_ref_821_Merge] 
        {
          $T [merge_req] $T [merge_ack]
        }
      }
      array_obj_ref_821_sample_start_ <-& (array_obj_ref_821_word_address_calculated)
      array_obj_ref_821_sample_start_ &-> (array_obj_ref_821_Sample)
      array_obj_ref_821_sample_completed_ <-& (array_obj_ref_821_Sample)
      array_obj_ref_821_sample_completed_ &-> ($null)
      array_obj_ref_821_update_start_ &-> (array_obj_ref_821_Update)
      array_obj_ref_821_update_completed_ <-& (array_obj_ref_821_Update)
      // start: Forward dependencies from (ifmaps[2 ][col_to_be_replaced_3] * filter[two][zero]) to transition type_cast_823_sample_start_
      type_cast_823_sample_start_ <-& (array_obj_ref_818_update_completed_)
      type_cast_823_sample_start_ <-& (array_obj_ref_821_update_completed_)
      // done: Forward dependencies from (ifmaps[2 ][col_to_be_replaced_3] * filter[two][zero]) to transition type_cast_823_sample_start_
      ;;[type_cast_823_Sample] 
      {
        // unary expression 
        $T [rr] $T [ra] // (split) unary operation
      }
      ;;[type_cast_823_Update] 
      {
        // unary expression 
        $T [cr] $T [ca] //(split) unary operation
      }
      type_cast_823_sample_start_ &-> (type_cast_823_Sample)
      type_cast_823_sample_completed_ <-& (type_cast_823_Sample)
      type_cast_823_sample_completed_ &-> ($null)
      type_cast_823_update_start_ &-> (type_cast_823_Update)
      type_cast_823_update_completed_ <-& (type_cast_823_Update)
      // Target expression
      // (as target) pp20
      // start: WAR dependencies for pp20
      // done: WAR dependencies for pp20
      // end:  	pp20 := ($bitcast ($uint<16>) (ifmaps[2 ][col_to_be_replaced_3] * filter[two][zero]) )// bits of buffering = 16. 
      // start:  	pp30 := ($bitcast ($uint<16>) (ifmaps[3 ][col_to_be_replaced_3] * filter[three][zero]) )// bits of buffering = 16. 
      //  file prog.linked.opt.aa, line 210
      // Source expression
      // ($bitcast ($uint<16>) (ifmaps[3 ][col_to_be_replaced_3] * filter[three][zero]) )
      $T[type_cast_833_sample_start_] 
      $T[type_cast_833_sample_completed_] 
      $T[type_cast_833_update_start_] 
      $T[type_cast_833_update_completed_] 
      // (ifmaps[3 ][col_to_be_replaced_3] * filter[three][zero])
      // ifmaps[3 ][col_to_be_replaced_3]
      $T[array_obj_ref_828_base_address_calculated] 
      $T[array_obj_ref_828_sample_start_] 
      $T[array_obj_ref_828_sample_completed_] 
      $T[array_obj_ref_828_update_start_] 
      $T[array_obj_ref_828_update_completed_] 
      $T[array_obj_ref_828_word_address_calculated] 
      $T[array_obj_ref_828_root_address_calculated] 
      $T[array_obj_ref_828_offset_calculated] 
      $T[array_obj_ref_828_index_resized_1] 
      $T[array_obj_ref_828_index_scaled_1] 
      $T[array_obj_ref_828_index_computed_1] 
      // col_to_be_replaced_3
      // start: Forward dependencies from col_to_be_replaced_3 to transition array_obj_ref_828_index_computed_1
      array_obj_ref_828_index_computed_1 <-& (MUX_673_update_completed_)
      // done: Forward dependencies from col_to_be_replaced_3 to transition array_obj_ref_828_index_computed_1
      ;;[array_obj_ref_828_index_resize_1] 
      {
        $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
      }
      array_obj_ref_828_index_computed_1 &-> (array_obj_ref_828_index_resize_1)
      array_obj_ref_828_index_resized_1 <-& (array_obj_ref_828_index_resize_1)
      ;;[array_obj_ref_828_index_scale_1] 
      {
        $T [scale_rename_req] $T [scale_rename_ack] // rename 
      }
      array_obj_ref_828_index_resized_1 &-> (array_obj_ref_828_index_scale_1)
      array_obj_ref_828_index_scaled_1 <-& (array_obj_ref_828_index_scale_1)
      $T[array_obj_ref_828_final_index_sum_regn_sample_complete] 
      $T[array_obj_ref_828_final_index_sum_regn_update_start] 
      ;;[array_obj_ref_828_final_index_sum_regn_Sample] 
      {
        $T [req] $T [ack] 
      }
      ;;[array_obj_ref_828_final_index_sum_regn_Update] 
      {
        $T [req] $T [ack] 
      }
      array_obj_ref_828_index_scaled_1 &-> (array_obj_ref_828_final_index_sum_regn_Sample)
      array_obj_ref_828_final_index_sum_regn_sample_complete <-& (array_obj_ref_828_final_index_sum_regn_Sample)
      array_obj_ref_828_final_index_sum_regn_update_start &-> (array_obj_ref_828_final_index_sum_regn_Update)
      array_obj_ref_828_offset_calculated <-& (array_obj_ref_828_final_index_sum_regn_Update)
      ;;[array_obj_ref_828_base_plus_offset] 
      {
        $T [sum_rename_req] $T [sum_rename_ack] // one gets through 
      }
      array_obj_ref_828_offset_calculated &-> (array_obj_ref_828_base_plus_offset)
      array_obj_ref_828_root_address_calculated <-& (array_obj_ref_828_base_plus_offset)
      ;;[array_obj_ref_828_word_addrgen] 
      {
        $T [root_register_req] $T [root_register_ack]
      }
      array_obj_ref_828_root_address_calculated &-> (array_obj_ref_828_word_addrgen)
      array_obj_ref_828_word_address_calculated <-& (array_obj_ref_828_word_addrgen)
      ;;[array_obj_ref_828_Sample] 
      {
        ||[word_access_start] 
        {
          ;;[word_0] 
          {
            $T [rr] $T [ra] 
          }
        }
      }
      ;;[array_obj_ref_828_Update] 
      {
        ||[word_access_complete] 
        {
          ;;[word_0] 
          {
            $T [cr] $T [ca] 
          }
        }
        ;;[array_obj_ref_828_Merge] 
        {
          $T [merge_req] $T [merge_ack]
        }
      }
      array_obj_ref_828_sample_start_ <-& (array_obj_ref_828_word_address_calculated)
      array_obj_ref_828_sample_start_ &-> (array_obj_ref_828_Sample)
      array_obj_ref_828_sample_completed_ <-& (array_obj_ref_828_Sample)
      array_obj_ref_828_sample_completed_ &-> ($null)
      array_obj_ref_828_update_start_ &-> (array_obj_ref_828_Update)
      array_obj_ref_828_update_completed_ <-& (array_obj_ref_828_Update)
      // filter[three][zero]
      $T[array_obj_ref_831_base_address_calculated] 
      $T[array_obj_ref_831_sample_start_] 
      $T[array_obj_ref_831_sample_completed_] 
      $T[array_obj_ref_831_update_start_] 
      $T[array_obj_ref_831_update_completed_] 
      $T[array_obj_ref_831_word_address_calculated] 
      $T[array_obj_ref_831_root_address_calculated] 
      array_obj_ref_831_word_address_calculated <-& (array_obj_ref_831_root_address_calculated)
      ;;[array_obj_ref_831_Sample] 
      {
        ||[word_access_start] 
        {
          ;;[word_0] 
          {
            $T [rr] $T [ra] 
          }
        }
      }
      ;;[array_obj_ref_831_Update] 
      {
        ||[word_access_complete] 
        {
          ;;[word_0] 
          {
            $T [cr] $T [ca] 
          }
        }
        ;;[array_obj_ref_831_Merge] 
        {
          $T [merge_req] $T [merge_ack]
        }
      }
      array_obj_ref_831_sample_start_ <-& (array_obj_ref_831_word_address_calculated)
      array_obj_ref_831_sample_start_ &-> (array_obj_ref_831_Sample)
      array_obj_ref_831_sample_completed_ <-& (array_obj_ref_831_Sample)
      array_obj_ref_831_sample_completed_ &-> ($null)
      array_obj_ref_831_update_start_ &-> (array_obj_ref_831_Update)
      array_obj_ref_831_update_completed_ <-& (array_obj_ref_831_Update)
      // start: Forward dependencies from (ifmaps[3 ][col_to_be_replaced_3] * filter[three][zero]) to transition type_cast_833_sample_start_
      type_cast_833_sample_start_ <-& (array_obj_ref_828_update_completed_)
      type_cast_833_sample_start_ <-& (array_obj_ref_831_update_completed_)
      // done: Forward dependencies from (ifmaps[3 ][col_to_be_replaced_3] * filter[three][zero]) to transition type_cast_833_sample_start_
      ;;[type_cast_833_Sample] 
      {
        // unary expression 
        $T [rr] $T [ra] // (split) unary operation
      }
      ;;[type_cast_833_Update] 
      {
        // unary expression 
        $T [cr] $T [ca] //(split) unary operation
      }
      type_cast_833_sample_start_ &-> (type_cast_833_Sample)
      type_cast_833_sample_completed_ <-& (type_cast_833_Sample)
      type_cast_833_sample_completed_ &-> ($null)
      type_cast_833_update_start_ &-> (type_cast_833_Update)
      type_cast_833_update_completed_ <-& (type_cast_833_Update)
      // Target expression
      // (as target) pp30
      // start: WAR dependencies for pp30
      // done: WAR dependencies for pp30
      // end:  	pp30 := ($bitcast ($uint<16>) (ifmaps[3 ][col_to_be_replaced_3] * filter[three][zero]) )// bits of buffering = 16. 
      // start:  	sum0 := ($bitcast ($uint<16>) (pp00 + pp01) )// bits of buffering = 16. 
      //  file prog.linked.opt.aa, line 211
      // Source expression
      // ($bitcast ($uint<16>) (pp00 + pp01) )
      $T[type_cast_839_sample_start_] 
      $T[type_cast_839_sample_completed_] 
      $T[type_cast_839_update_start_] 
      $T[type_cast_839_update_completed_] 
      // (pp00 + pp01)
      // pp00
      // pp01
      // start: Forward dependencies from (pp00 + pp01) to transition type_cast_839_sample_start_
      type_cast_839_sample_start_ <-& (type_cast_763_update_completed_)
      type_cast_839_sample_start_ <-& (type_cast_803_update_completed_)
      // done: Forward dependencies from (pp00 + pp01) to transition type_cast_839_sample_start_
      ;;[type_cast_839_Sample] 
      {
        // unary expression 
        $T [rr] $T [ra] // (split) unary operation
      }
      ;;[type_cast_839_Update] 
      {
        // unary expression 
        $T [cr] $T [ca] //(split) unary operation
      }
      type_cast_839_sample_start_ &-> (type_cast_839_Sample)
      type_cast_839_sample_completed_ <-& (type_cast_839_Sample)
      type_cast_839_sample_completed_ &-> ($null)
      type_cast_839_update_start_ &-> (type_cast_839_Update)
      type_cast_839_update_completed_ <-& (type_cast_839_Update)
      // Target expression
      // (as target) sum0
      // start: WAR dependencies for sum0
      // done: WAR dependencies for sum0
      // end:  	sum0 := ($bitcast ($uint<16>) (pp00 + pp01) )// bits of buffering = 16. 
      // start:  	sum1 := ($bitcast ($uint<16>) (pp02 + pp03) )// bits of buffering = 16. 
      //  file prog.linked.opt.aa, line 212
      // Source expression
      // ($bitcast ($uint<16>) (pp02 + pp03) )
      $T[type_cast_845_sample_start_] 
      $T[type_cast_845_sample_completed_] 
      $T[type_cast_845_update_start_] 
      $T[type_cast_845_update_completed_] 
      // (pp02 + pp03)
      // pp02
      // pp03
      // start: Forward dependencies from (pp02 + pp03) to transition type_cast_845_sample_start_
      type_cast_845_sample_start_ <-& (type_cast_683_update_completed_)
      type_cast_845_sample_start_ <-& (type_cast_723_update_completed_)
      // done: Forward dependencies from (pp02 + pp03) to transition type_cast_845_sample_start_
      ;;[type_cast_845_Sample] 
      {
        // unary expression 
        $T [rr] $T [ra] // (split) unary operation
      }
      ;;[type_cast_845_Update] 
      {
        // unary expression 
        $T [cr] $T [ca] //(split) unary operation
      }
      type_cast_845_sample_start_ &-> (type_cast_845_Sample)
      type_cast_845_sample_completed_ <-& (type_cast_845_Sample)
      type_cast_845_sample_completed_ &-> ($null)
      type_cast_845_update_start_ &-> (type_cast_845_Update)
      type_cast_845_update_completed_ <-& (type_cast_845_Update)
      // Target expression
      // (as target) sum1
      // start: WAR dependencies for sum1
      // done: WAR dependencies for sum1
      // end:  	sum1 := ($bitcast ($uint<16>) (pp02 + pp03) )// bits of buffering = 16. 
      // start:  	sum2 := ($bitcast ($uint<16>) (pp10 + pp11) )// bits of buffering = 16. 
      //  file prog.linked.opt.aa, line 213
      // Source expression
      // ($bitcast ($uint<16>) (pp10 + pp11) )
      $T[type_cast_851_sample_start_] 
      $T[type_cast_851_sample_completed_] 
      $T[type_cast_851_update_start_] 
      $T[type_cast_851_update_completed_] 
      // (pp10 + pp11)
      // pp10
      // pp11
      // start: Forward dependencies from (pp10 + pp11) to transition type_cast_851_sample_start_
      type_cast_851_sample_start_ <-& (type_cast_773_update_completed_)
      type_cast_851_sample_start_ <-& (type_cast_813_update_completed_)
      // done: Forward dependencies from (pp10 + pp11) to transition type_cast_851_sample_start_
      ;;[type_cast_851_Sample] 
      {
        // unary expression 
        $T [rr] $T [ra] // (split) unary operation
      }
      ;;[type_cast_851_Update] 
      {
        // unary expression 
        $T [cr] $T [ca] //(split) unary operation
      }
      type_cast_851_sample_start_ &-> (type_cast_851_Sample)
      type_cast_851_sample_completed_ <-& (type_cast_851_Sample)
      type_cast_851_sample_completed_ &-> ($null)
      type_cast_851_update_start_ &-> (type_cast_851_Update)
      type_cast_851_update_completed_ <-& (type_cast_851_Update)
      // Target expression
      // (as target) sum2
      // start: WAR dependencies for sum2
      // done: WAR dependencies for sum2
      // end:  	sum2 := ($bitcast ($uint<16>) (pp10 + pp11) )// bits of buffering = 16. 
      // start:  	sum3 := ($bitcast ($uint<16>) (pp12 + pp13) )// bits of buffering = 16. 
      //  file prog.linked.opt.aa, line 214
      // Source expression
      // ($bitcast ($uint<16>) (pp12 + pp13) )
      $T[type_cast_857_sample_start_] 
      $T[type_cast_857_sample_completed_] 
      $T[type_cast_857_update_start_] 
      $T[type_cast_857_update_completed_] 
      // (pp12 + pp13)
      // pp12
      // pp13
      // start: Forward dependencies from (pp12 + pp13) to transition type_cast_857_sample_start_
      type_cast_857_sample_start_ <-& (type_cast_693_update_completed_)
      type_cast_857_sample_start_ <-& (type_cast_733_update_completed_)
      // done: Forward dependencies from (pp12 + pp13) to transition type_cast_857_sample_start_
      ;;[type_cast_857_Sample] 
      {
        // unary expression 
        $T [rr] $T [ra] // (split) unary operation
      }
      ;;[type_cast_857_Update] 
      {
        // unary expression 
        $T [cr] $T [ca] //(split) unary operation
      }
      type_cast_857_sample_start_ &-> (type_cast_857_Sample)
      type_cast_857_sample_completed_ <-& (type_cast_857_Sample)
      type_cast_857_sample_completed_ &-> ($null)
      type_cast_857_update_start_ &-> (type_cast_857_Update)
      type_cast_857_update_completed_ <-& (type_cast_857_Update)
      // Target expression
      // (as target) sum3
      // start: WAR dependencies for sum3
      // done: WAR dependencies for sum3
      // end:  	sum3 := ($bitcast ($uint<16>) (pp12 + pp13) )// bits of buffering = 16. 
      // start:  	sum4 := ($bitcast ($uint<16>) (pp20 + pp21) )// bits of buffering = 16. 
      //  file prog.linked.opt.aa, line 215
      // Source expression
      // ($bitcast ($uint<16>) (pp20 + pp21) )
      $T[type_cast_863_sample_start_] 
      $T[type_cast_863_sample_completed_] 
      $T[type_cast_863_update_start_] 
      $T[type_cast_863_update_completed_] 
      // (pp20 + pp21)
      // pp20
      // pp21
      // start: Forward dependencies from (pp20 + pp21) to transition type_cast_863_sample_start_
      type_cast_863_sample_start_ <-& (type_cast_823_update_completed_)
      type_cast_863_sample_start_ <-& (type_cast_783_update_completed_)
      // done: Forward dependencies from (pp20 + pp21) to transition type_cast_863_sample_start_
      ;;[type_cast_863_Sample] 
      {
        // unary expression 
        $T [rr] $T [ra] // (split) unary operation
      }
      ;;[type_cast_863_Update] 
      {
        // unary expression 
        $T [cr] $T [ca] //(split) unary operation
      }
      type_cast_863_sample_start_ &-> (type_cast_863_Sample)
      type_cast_863_sample_completed_ <-& (type_cast_863_Sample)
      type_cast_863_sample_completed_ &-> ($null)
      type_cast_863_update_start_ &-> (type_cast_863_Update)
      type_cast_863_update_completed_ <-& (type_cast_863_Update)
      // Target expression
      // (as target) sum4
      // start: WAR dependencies for sum4
      // done: WAR dependencies for sum4
      // end:  	sum4 := ($bitcast ($uint<16>) (pp20 + pp21) )// bits of buffering = 16. 
      // start:  	sum5 := ($bitcast ($uint<16>) (pp22 + pp23) )// bits of buffering = 16. 
      //  file prog.linked.opt.aa, line 216
      // Source expression
      // ($bitcast ($uint<16>) (pp22 + pp23) )
      $T[type_cast_869_sample_start_] 
      $T[type_cast_869_sample_completed_] 
      $T[type_cast_869_update_start_] 
      $T[type_cast_869_update_completed_] 
      // (pp22 + pp23)
      // pp22
      // pp23
      // start: Forward dependencies from (pp22 + pp23) to transition type_cast_869_sample_start_
      type_cast_869_sample_start_ <-& (type_cast_743_update_completed_)
      type_cast_869_sample_start_ <-& (type_cast_703_update_completed_)
      // done: Forward dependencies from (pp22 + pp23) to transition type_cast_869_sample_start_
      ;;[type_cast_869_Sample] 
      {
        // unary expression 
        $T [rr] $T [ra] // (split) unary operation
      }
      ;;[type_cast_869_Update] 
      {
        // unary expression 
        $T [cr] $T [ca] //(split) unary operation
      }
      type_cast_869_sample_start_ &-> (type_cast_869_Sample)
      type_cast_869_sample_completed_ <-& (type_cast_869_Sample)
      type_cast_869_sample_completed_ &-> ($null)
      type_cast_869_update_start_ &-> (type_cast_869_Update)
      type_cast_869_update_completed_ <-& (type_cast_869_Update)
      // Target expression
      // (as target) sum5
      // start: WAR dependencies for sum5
      // done: WAR dependencies for sum5
      // end:  	sum5 := ($bitcast ($uint<16>) (pp22 + pp23) )// bits of buffering = 16. 
      // start:  	sum6 := ($bitcast ($uint<16>) (pp30 + pp31) )// bits of buffering = 16. 
      //  file prog.linked.opt.aa, line 217
      // Source expression
      // ($bitcast ($uint<16>) (pp30 + pp31) )
      $T[type_cast_875_sample_start_] 
      $T[type_cast_875_sample_completed_] 
      $T[type_cast_875_update_start_] 
      $T[type_cast_875_update_completed_] 
      // (pp30 + pp31)
      // pp30
      // pp31
      // start: Forward dependencies from (pp30 + pp31) to transition type_cast_875_sample_start_
      type_cast_875_sample_start_ <-& (type_cast_793_update_completed_)
      type_cast_875_sample_start_ <-& (type_cast_833_update_completed_)
      // done: Forward dependencies from (pp30 + pp31) to transition type_cast_875_sample_start_
      ;;[type_cast_875_Sample] 
      {
        // unary expression 
        $T [rr] $T [ra] // (split) unary operation
      }
      ;;[type_cast_875_Update] 
      {
        // unary expression 
        $T [cr] $T [ca] //(split) unary operation
      }
      type_cast_875_sample_start_ &-> (type_cast_875_Sample)
      type_cast_875_sample_completed_ <-& (type_cast_875_Sample)
      type_cast_875_sample_completed_ &-> ($null)
      type_cast_875_update_start_ &-> (type_cast_875_Update)
      type_cast_875_update_completed_ <-& (type_cast_875_Update)
      // Target expression
      // (as target) sum6
      // start: WAR dependencies for sum6
      // done: WAR dependencies for sum6
      // end:  	sum6 := ($bitcast ($uint<16>) (pp30 + pp31) )// bits of buffering = 16. 
      // start:  	sum7 := ($bitcast ($uint<16>) (pp32 + pp33) )// bits of buffering = 16. 
      //  file prog.linked.opt.aa, line 218
      // Source expression
      // ($bitcast ($uint<16>) (pp32 + pp33) )
      $T[type_cast_881_sample_start_] 
      $T[type_cast_881_sample_completed_] 
      $T[type_cast_881_update_start_] 
      $T[type_cast_881_update_completed_] 
      // (pp32 + pp33)
      // pp32
      // pp33
      // start: Forward dependencies from (pp32 + pp33) to transition type_cast_881_sample_start_
      type_cast_881_sample_start_ <-& (type_cast_753_update_completed_)
      type_cast_881_sample_start_ <-& (type_cast_713_update_completed_)
      // done: Forward dependencies from (pp32 + pp33) to transition type_cast_881_sample_start_
      ;;[type_cast_881_Sample] 
      {
        // unary expression 
        $T [rr] $T [ra] // (split) unary operation
      }
      ;;[type_cast_881_Update] 
      {
        // unary expression 
        $T [cr] $T [ca] //(split) unary operation
      }
      type_cast_881_sample_start_ &-> (type_cast_881_Sample)
      type_cast_881_sample_completed_ <-& (type_cast_881_Sample)
      type_cast_881_sample_completed_ &-> ($null)
      type_cast_881_update_start_ &-> (type_cast_881_Update)
      type_cast_881_update_completed_ <-& (type_cast_881_Update)
      // Target expression
      // (as target) sum7
      // start: WAR dependencies for sum7
      // done: WAR dependencies for sum7
      // end:  	sum7 := ($bitcast ($uint<16>) (pp32 + pp33) )// bits of buffering = 16. 
      // start:  	sum10 := ($bitcast ($uint<16>) (sum0 + sum1) )// bits of buffering = 16. 
      //  file prog.linked.opt.aa, line 219
      // Source expression
      // ($bitcast ($uint<16>) (sum0 + sum1) )
      $T[type_cast_887_sample_start_] 
      $T[type_cast_887_sample_completed_] 
      $T[type_cast_887_update_start_] 
      $T[type_cast_887_update_completed_] 
      // (sum0 + sum1)
      // sum0
      // sum1
      // start: Forward dependencies from (sum0 + sum1) to transition type_cast_887_sample_start_
      type_cast_887_sample_start_ <-& (type_cast_839_update_completed_)
      type_cast_887_sample_start_ <-& (type_cast_845_update_completed_)
      // done: Forward dependencies from (sum0 + sum1) to transition type_cast_887_sample_start_
      ;;[type_cast_887_Sample] 
      {
        // unary expression 
        $T [rr] $T [ra] // (split) unary operation
      }
      ;;[type_cast_887_Update] 
      {
        // unary expression 
        $T [cr] $T [ca] //(split) unary operation
      }
      type_cast_887_sample_start_ &-> (type_cast_887_Sample)
      type_cast_887_sample_completed_ <-& (type_cast_887_Sample)
      type_cast_887_sample_completed_ &-> ($null)
      type_cast_887_update_start_ &-> (type_cast_887_Update)
      type_cast_887_update_completed_ <-& (type_cast_887_Update)
      // Target expression
      // (as target) sum10
      // start: WAR dependencies for sum10
      // done: WAR dependencies for sum10
      // end:  	sum10 := ($bitcast ($uint<16>) (sum0 + sum1) )// bits of buffering = 16. 
      // start:  	sum11 := ($bitcast ($uint<16>) (sum2 + sum3) )// bits of buffering = 16. 
      //  file prog.linked.opt.aa, line 220
      // Source expression
      // ($bitcast ($uint<16>) (sum2 + sum3) )
      $T[type_cast_893_sample_start_] 
      $T[type_cast_893_sample_completed_] 
      $T[type_cast_893_update_start_] 
      $T[type_cast_893_update_completed_] 
      // (sum2 + sum3)
      // sum2
      // sum3
      // start: Forward dependencies from (sum2 + sum3) to transition type_cast_893_sample_start_
      type_cast_893_sample_start_ <-& (type_cast_851_update_completed_)
      type_cast_893_sample_start_ <-& (type_cast_857_update_completed_)
      // done: Forward dependencies from (sum2 + sum3) to transition type_cast_893_sample_start_
      ;;[type_cast_893_Sample] 
      {
        // unary expression 
        $T [rr] $T [ra] // (split) unary operation
      }
      ;;[type_cast_893_Update] 
      {
        // unary expression 
        $T [cr] $T [ca] //(split) unary operation
      }
      type_cast_893_sample_start_ &-> (type_cast_893_Sample)
      type_cast_893_sample_completed_ <-& (type_cast_893_Sample)
      type_cast_893_sample_completed_ &-> ($null)
      type_cast_893_update_start_ &-> (type_cast_893_Update)
      type_cast_893_update_completed_ <-& (type_cast_893_Update)
      // Target expression
      // (as target) sum11
      // start: WAR dependencies for sum11
      // done: WAR dependencies for sum11
      // end:  	sum11 := ($bitcast ($uint<16>) (sum2 + sum3) )// bits of buffering = 16. 
      // start:  	sum12 := ($bitcast ($uint<16>) (sum4 + sum5) )// bits of buffering = 16. 
      //  file prog.linked.opt.aa, line 221
      // Source expression
      // ($bitcast ($uint<16>) (sum4 + sum5) )
      $T[type_cast_899_sample_start_] 
      $T[type_cast_899_sample_completed_] 
      $T[type_cast_899_update_start_] 
      $T[type_cast_899_update_completed_] 
      // (sum4 + sum5)
      // sum4
      // sum5
      // start: Forward dependencies from (sum4 + sum5) to transition type_cast_899_sample_start_
      type_cast_899_sample_start_ <-& (type_cast_863_update_completed_)
      type_cast_899_sample_start_ <-& (type_cast_869_update_completed_)
      // done: Forward dependencies from (sum4 + sum5) to transition type_cast_899_sample_start_
      ;;[type_cast_899_Sample] 
      {
        // unary expression 
        $T [rr] $T [ra] // (split) unary operation
      }
      ;;[type_cast_899_Update] 
      {
        // unary expression 
        $T [cr] $T [ca] //(split) unary operation
      }
      type_cast_899_sample_start_ &-> (type_cast_899_Sample)
      type_cast_899_sample_completed_ <-& (type_cast_899_Sample)
      type_cast_899_sample_completed_ &-> ($null)
      type_cast_899_update_start_ &-> (type_cast_899_Update)
      type_cast_899_update_completed_ <-& (type_cast_899_Update)
      // Target expression
      // (as target) sum12
      // start: WAR dependencies for sum12
      // done: WAR dependencies for sum12
      // end:  	sum12 := ($bitcast ($uint<16>) (sum4 + sum5) )// bits of buffering = 16. 
      // start:  	sum13 := ($bitcast ($uint<16>) (sum6 + sum7) )// bits of buffering = 16. 
      //  file prog.linked.opt.aa, line 222
      // Source expression
      // ($bitcast ($uint<16>) (sum6 + sum7) )
      $T[type_cast_905_sample_start_] 
      $T[type_cast_905_sample_completed_] 
      $T[type_cast_905_update_start_] 
      $T[type_cast_905_update_completed_] 
      // (sum6 + sum7)
      // sum6
      // sum7
      // start: Forward dependencies from (sum6 + sum7) to transition type_cast_905_sample_start_
      type_cast_905_sample_start_ <-& (type_cast_875_update_completed_)
      type_cast_905_sample_start_ <-& (type_cast_881_update_completed_)
      // done: Forward dependencies from (sum6 + sum7) to transition type_cast_905_sample_start_
      ;;[type_cast_905_Sample] 
      {
        // unary expression 
        $T [rr] $T [ra] // (split) unary operation
      }
      ;;[type_cast_905_Update] 
      {
        // unary expression 
        $T [cr] $T [ca] //(split) unary operation
      }
      type_cast_905_sample_start_ &-> (type_cast_905_Sample)
      type_cast_905_sample_completed_ <-& (type_cast_905_Sample)
      type_cast_905_sample_completed_ &-> ($null)
      type_cast_905_update_start_ &-> (type_cast_905_Update)
      type_cast_905_update_completed_ <-& (type_cast_905_Update)
      // Target expression
      // (as target) sum13
      // start: WAR dependencies for sum13
      // done: WAR dependencies for sum13
      // end:  	sum13 := ($bitcast ($uint<16>) (sum6 + sum7) )// bits of buffering = 16. 
      // start:  	sum20 := ($bitcast ($uint<16>) (sum10 + sum11) )// bits of buffering = 16. 
      //  file prog.linked.opt.aa, line 223
      // Source expression
      // ($bitcast ($uint<16>) (sum10 + sum11) )
      $T[type_cast_911_sample_start_] 
      $T[type_cast_911_sample_completed_] 
      $T[type_cast_911_update_start_] 
      $T[type_cast_911_update_completed_] 
      // (sum10 + sum11)
      // sum10
      // sum11
      // start: Forward dependencies from (sum10 + sum11) to transition type_cast_911_sample_start_
      type_cast_911_sample_start_ <-& (type_cast_887_update_completed_)
      type_cast_911_sample_start_ <-& (type_cast_893_update_completed_)
      // done: Forward dependencies from (sum10 + sum11) to transition type_cast_911_sample_start_
      ;;[type_cast_911_Sample] 
      {
        // unary expression 
        $T [rr] $T [ra] // (split) unary operation
      }
      ;;[type_cast_911_Update] 
      {
        // unary expression 
        $T [cr] $T [ca] //(split) unary operation
      }
      type_cast_911_sample_start_ &-> (type_cast_911_Sample)
      type_cast_911_sample_completed_ <-& (type_cast_911_Sample)
      type_cast_911_sample_completed_ &-> ($null)
      type_cast_911_update_start_ &-> (type_cast_911_Update)
      type_cast_911_update_completed_ <-& (type_cast_911_Update)
      // Target expression
      // (as target) sum20
      // start: WAR dependencies for sum20
      // done: WAR dependencies for sum20
      // end:  	sum20 := ($bitcast ($uint<16>) (sum10 + sum11) )// bits of buffering = 16. 
      // start:  	sum21 := ($bitcast ($uint<16>) (sum12 + sum13) )// bits of buffering = 16. 
      //  file prog.linked.opt.aa, line 224
      // Source expression
      // ($bitcast ($uint<16>) (sum12 + sum13) )
      $T[type_cast_917_sample_start_] 
      $T[type_cast_917_sample_completed_] 
      $T[type_cast_917_update_start_] 
      $T[type_cast_917_update_completed_] 
      // (sum12 + sum13)
      // sum12
      // sum13
      // start: Forward dependencies from (sum12 + sum13) to transition type_cast_917_sample_start_
      type_cast_917_sample_start_ <-& (type_cast_899_update_completed_)
      type_cast_917_sample_start_ <-& (type_cast_905_update_completed_)
      // done: Forward dependencies from (sum12 + sum13) to transition type_cast_917_sample_start_
      ;;[type_cast_917_Sample] 
      {
        // unary expression 
        $T [rr] $T [ra] // (split) unary operation
      }
      ;;[type_cast_917_Update] 
      {
        // unary expression 
        $T [cr] $T [ca] //(split) unary operation
      }
      type_cast_917_sample_start_ &-> (type_cast_917_Sample)
      type_cast_917_sample_completed_ <-& (type_cast_917_Sample)
      type_cast_917_sample_completed_ &-> ($null)
      type_cast_917_update_start_ &-> (type_cast_917_Update)
      type_cast_917_update_completed_ <-& (type_cast_917_Update)
      // Target expression
      // (as target) sum21
      // start: WAR dependencies for sum21
      // done: WAR dependencies for sum21
      // end:  	sum21 := ($bitcast ($uint<16>) (sum12 + sum13) )// bits of buffering = 16. 
      // start:  	ofmap_pixel := ($bitcast ($uint<16>) (sum20 + sum21) )// bits of buffering = 16. 
      //  file prog.linked.opt.aa, line 225
      // Source expression
      // ($bitcast ($uint<16>) (sum20 + sum21) )
      $T[type_cast_923_sample_start_] 
      $T[type_cast_923_sample_completed_] 
      $T[type_cast_923_update_start_] 
      $T[type_cast_923_update_completed_] 
      // (sum20 + sum21)
      // sum20
      // sum21
      // start: Forward dependencies from (sum20 + sum21) to transition type_cast_923_sample_start_
      type_cast_923_sample_start_ <-& (type_cast_911_update_completed_)
      type_cast_923_sample_start_ <-& (type_cast_917_update_completed_)
      // done: Forward dependencies from (sum20 + sum21) to transition type_cast_923_sample_start_
      ;;[type_cast_923_Sample] 
      {
        // unary expression 
        $T [rr] $T [ra] // (split) unary operation
      }
      ;;[type_cast_923_Update] 
      {
        // unary expression 
        $T [cr] $T [ca] //(split) unary operation
      }
      type_cast_923_sample_start_ &-> (type_cast_923_Sample)
      type_cast_923_sample_completed_ <-& (type_cast_923_Sample)
      type_cast_923_sample_completed_ &-> ($null)
      type_cast_923_update_start_ &-> (type_cast_923_Update)
      type_cast_923_update_completed_ <-& (type_cast_923_Update)
      // Target expression
      // (as target) ofmap_pixel
      // ofmap_pixel
      // write to interface object
      // start: WAR dependencies for ofmap_pixel
      // done: WAR dependencies for ofmap_pixel
      // ofmap_pixel
      // write to interface object
      // end:  	ofmap_pixel := ($bitcast ($uint<16>) (sum20 + sum21) )// bits of buffering = 16. 
      // load-store dependencies..
      // memory-space  memory_space_0
      //  array_obj_ref_681 load
      //  array_obj_ref_691 load
      //  array_obj_ref_701 load
      //  array_obj_ref_711 load
      //  array_obj_ref_721 load
      //  array_obj_ref_731 load
      //  array_obj_ref_741 load
      //  array_obj_ref_751 load
      //  array_obj_ref_761 load
      //  array_obj_ref_771 load
      //  array_obj_ref_781 load
      //  array_obj_ref_791 load
      //  array_obj_ref_801 load
      //  array_obj_ref_811 load
      //  array_obj_ref_821 load
      //  array_obj_ref_831 load
      // memory-space  memory_space_1
      //  array_obj_ref_678 load
      //  array_obj_ref_688 load
      //  array_obj_ref_698 load
      //  array_obj_ref_708 load
      //  array_obj_ref_718 load
      //  array_obj_ref_728 load
      //  array_obj_ref_738 load
      //  array_obj_ref_748 load
      //  array_obj_ref_758 load
      //  array_obj_ref_768 load
      //  array_obj_ref_778 load
      //  array_obj_ref_788 load
      //  array_obj_ref_798 load
      //  array_obj_ref_808 load
      //  array_obj_ref_818 load
      //  array_obj_ref_828 load
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %mainAcc
    //  file prog.linked.opt.aa, line 183
    // 	zero := ($bitcast ($uint<2>) 0  )// bits of buffering = 2. 
    //  file prog.linked.opt.aa, line 188
    $constant $W[zero_624] : $int<2> := _b00 // 0
    // 	one := ($bitcast ($uint<2>) 1  )// bits of buffering = 2. 
    //  file prog.linked.opt.aa, line 189
    $constant $W[one_628] : $int<2> := _b01 // 1
    // 	two := ($bitcast ($uint<2>) 2  )// bits of buffering = 2. 
    //  file prog.linked.opt.aa, line 190
    $constant $W[two_632] : $int<2> := _b10 // 2
    // 	three := ($bitcast ($uint<2>) 3  )// bits of buffering = 2. 
    //  file prog.linked.opt.aa, line 191
    $constant $W[three_636] : $int<2> := _b11 // 3
    // ( $mux (col_to_be_replaced == 0 ) ($bitcast ($uint<2>) 3  )  ($bitcast ($uint<2>) (col_to_be_replaced - 1 ) ) ) 
    // 0 
    $constant $W[konst_639_wire_constant] : $int<2> := _b00// 0
    // ($bitcast ($uint<2>) 3  )
    $constant $W[type_cast_642_wire_constant] : $int<2> := _b11// 3
    // 1 
    $constant $W[konst_644_wire_constant] : $int<2> := _b01// 1
    // ( $mux (col_to_be_replaced >= 2 ) ($bitcast ($uint<2>) (col_to_be_replaced - 2 ) )  ($bitcast ($uint<2>) (col_to_be_replaced + 2 ) ) ) 
    // 2 
    $constant $W[konst_651_wire_constant] : $int<2> := _b10// 2
    // 2 
    $constant $W[konst_654_wire_constant] : $int<2> := _b10// 2
    // 2 
    $constant $W[konst_658_wire_constant] : $int<2> := _b10// 2
    // ( $mux (col_to_be_replaced == 3 ) ($bitcast ($uint<2>) 0  )  ($bitcast ($uint<2>) (col_to_be_replaced + 1 ) ) ) 
    // 3 
    $constant $W[konst_665_wire_constant] : $int<2> := _b11// 3
    // ($bitcast ($uint<2>) 0  )
    $constant $W[type_cast_668_wire_constant] : $int<2> := _b00// 0
    // 1 
    $constant $W[konst_670_wire_constant] : $int<2> := _b01// 1
    // ifmaps[0 ][col_to_be_replaced]
    $constant $W[array_obj_ref_678_constant_part_of_offset] : $int<4> := _b0000// 0
    $constant $W[array_obj_ref_678_resized_base_address] : $int<4> := _b0000// 0
    $constant $W[array_obj_ref_678_offset_scale_factor_0] : $int<4> := _b0100// 4
    $constant $W[array_obj_ref_678_offset_scale_factor_1] : $int<4> := _b0001// 1
    $constant $W[array_obj_ref_678_word_offset_0] : $int<4> := _b0000// 0
    // filter[zero][three]
    $constant $W[array_obj_ref_681_word_address_0] : $pointer<memory_space_0> := _b0011
    // ifmaps[1 ][col_to_be_replaced]
    $constant $W[array_obj_ref_688_constant_part_of_offset] : $int<4> := _b0100// 4
    $constant $W[array_obj_ref_688_resized_base_address] : $int<4> := _b0000// 0
    $constant $W[array_obj_ref_688_offset_scale_factor_0] : $int<4> := _b0100// 4
    $constant $W[array_obj_ref_688_offset_scale_factor_1] : $int<4> := _b0001// 1
    $constant $W[array_obj_ref_688_word_offset_0] : $int<4> := _b0000// 0
    // filter[one][three]
    $constant $W[array_obj_ref_691_word_address_0] : $pointer<memory_space_0> := _b0111
    // ifmaps[2 ][col_to_be_replaced]
    $constant $W[array_obj_ref_698_constant_part_of_offset] : $int<4> := _b1000// 8
    $constant $W[array_obj_ref_698_resized_base_address] : $int<4> := _b0000// 0
    $constant $W[array_obj_ref_698_offset_scale_factor_0] : $int<4> := _b0100// 4
    $constant $W[array_obj_ref_698_offset_scale_factor_1] : $int<4> := _b0001// 1
    $constant $W[array_obj_ref_698_word_offset_0] : $int<4> := _b0000// 0
    // filter[two][three]
    $constant $W[array_obj_ref_701_word_address_0] : $pointer<memory_space_0> := _b1011
    // ifmaps[3 ][col_to_be_replaced]
    $constant $W[array_obj_ref_708_constant_part_of_offset] : $int<4> := _b1100// 12
    $constant $W[array_obj_ref_708_resized_base_address] : $int<4> := _b0000// 0
    $constant $W[array_obj_ref_708_offset_scale_factor_0] : $int<4> := _b0100// 4
    $constant $W[array_obj_ref_708_offset_scale_factor_1] : $int<4> := _b0001// 1
    $constant $W[array_obj_ref_708_word_offset_0] : $int<4> := _b0000// 0
    // filter[three][three]
    $constant $W[array_obj_ref_711_word_address_0] : $pointer<memory_space_0> := _b1111
    // ifmaps[0 ][col_to_be_replaced_1]
    $constant $W[array_obj_ref_718_constant_part_of_offset] : $int<4> := _b0000// 0
    $constant $W[array_obj_ref_718_resized_base_address] : $int<4> := _b0000// 0
    $constant $W[array_obj_ref_718_offset_scale_factor_0] : $int<4> := _b0100// 4
    $constant $W[array_obj_ref_718_offset_scale_factor_1] : $int<4> := _b0001// 1
    $constant $W[array_obj_ref_718_word_offset_0] : $int<4> := _b0000// 0
    // filter[zero][two]
    $constant $W[array_obj_ref_721_word_address_0] : $pointer<memory_space_0> := _b0010
    // ifmaps[1 ][col_to_be_replaced_1]
    $constant $W[array_obj_ref_728_constant_part_of_offset] : $int<4> := _b0100// 4
    $constant $W[array_obj_ref_728_resized_base_address] : $int<4> := _b0000// 0
    $constant $W[array_obj_ref_728_offset_scale_factor_0] : $int<4> := _b0100// 4
    $constant $W[array_obj_ref_728_offset_scale_factor_1] : $int<4> := _b0001// 1
    $constant $W[array_obj_ref_728_word_offset_0] : $int<4> := _b0000// 0
    // filter[one][two]
    $constant $W[array_obj_ref_731_word_address_0] : $pointer<memory_space_0> := _b0110
    // ifmaps[2 ][col_to_be_replaced_1]
    $constant $W[array_obj_ref_738_constant_part_of_offset] : $int<4> := _b1000// 8
    $constant $W[array_obj_ref_738_resized_base_address] : $int<4> := _b0000// 0
    $constant $W[array_obj_ref_738_offset_scale_factor_0] : $int<4> := _b0100// 4
    $constant $W[array_obj_ref_738_offset_scale_factor_1] : $int<4> := _b0001// 1
    $constant $W[array_obj_ref_738_word_offset_0] : $int<4> := _b0000// 0
    // filter[two][two]
    $constant $W[array_obj_ref_741_word_address_0] : $pointer<memory_space_0> := _b1010
    // ifmaps[3 ][col_to_be_replaced_1]
    $constant $W[array_obj_ref_748_constant_part_of_offset] : $int<4> := _b1100// 12
    $constant $W[array_obj_ref_748_resized_base_address] : $int<4> := _b0000// 0
    $constant $W[array_obj_ref_748_offset_scale_factor_0] : $int<4> := _b0100// 4
    $constant $W[array_obj_ref_748_offset_scale_factor_1] : $int<4> := _b0001// 1
    $constant $W[array_obj_ref_748_word_offset_0] : $int<4> := _b0000// 0
    // filter[three][two]
    $constant $W[array_obj_ref_751_word_address_0] : $pointer<memory_space_0> := _b1110
    // ifmaps[0 ][col_to_be_replaced_2]
    $constant $W[array_obj_ref_758_constant_part_of_offset] : $int<4> := _b0000// 0
    $constant $W[array_obj_ref_758_resized_base_address] : $int<4> := _b0000// 0
    $constant $W[array_obj_ref_758_offset_scale_factor_0] : $int<4> := _b0100// 4
    $constant $W[array_obj_ref_758_offset_scale_factor_1] : $int<4> := _b0001// 1
    $constant $W[array_obj_ref_758_word_offset_0] : $int<4> := _b0000// 0
    // filter[zero][one]
    $constant $W[array_obj_ref_761_word_address_0] : $pointer<memory_space_0> := _b0001
    // ifmaps[1 ][col_to_be_replaced_2]
    $constant $W[array_obj_ref_768_constant_part_of_offset] : $int<4> := _b0100// 4
    $constant $W[array_obj_ref_768_resized_base_address] : $int<4> := _b0000// 0
    $constant $W[array_obj_ref_768_offset_scale_factor_0] : $int<4> := _b0100// 4
    $constant $W[array_obj_ref_768_offset_scale_factor_1] : $int<4> := _b0001// 1
    $constant $W[array_obj_ref_768_word_offset_0] : $int<4> := _b0000// 0
    // filter[one][one]
    $constant $W[array_obj_ref_771_word_address_0] : $pointer<memory_space_0> := _b0101
    // ifmaps[2 ][col_to_be_replaced_2]
    $constant $W[array_obj_ref_778_constant_part_of_offset] : $int<4> := _b1000// 8
    $constant $W[array_obj_ref_778_resized_base_address] : $int<4> := _b0000// 0
    $constant $W[array_obj_ref_778_offset_scale_factor_0] : $int<4> := _b0100// 4
    $constant $W[array_obj_ref_778_offset_scale_factor_1] : $int<4> := _b0001// 1
    $constant $W[array_obj_ref_778_word_offset_0] : $int<4> := _b0000// 0
    // filter[two][one]
    $constant $W[array_obj_ref_781_word_address_0] : $pointer<memory_space_0> := _b1001
    // ifmaps[3 ][col_to_be_replaced_2]
    $constant $W[array_obj_ref_788_constant_part_of_offset] : $int<4> := _b1100// 12
    $constant $W[array_obj_ref_788_resized_base_address] : $int<4> := _b0000// 0
    $constant $W[array_obj_ref_788_offset_scale_factor_0] : $int<4> := _b0100// 4
    $constant $W[array_obj_ref_788_offset_scale_factor_1] : $int<4> := _b0001// 1
    $constant $W[array_obj_ref_788_word_offset_0] : $int<4> := _b0000// 0
    // filter[three][one]
    $constant $W[array_obj_ref_791_word_address_0] : $pointer<memory_space_0> := _b1101
    // ifmaps[0 ][col_to_be_replaced_3]
    $constant $W[array_obj_ref_798_constant_part_of_offset] : $int<4> := _b0000// 0
    $constant $W[array_obj_ref_798_resized_base_address] : $int<4> := _b0000// 0
    $constant $W[array_obj_ref_798_offset_scale_factor_0] : $int<4> := _b0100// 4
    $constant $W[array_obj_ref_798_offset_scale_factor_1] : $int<4> := _b0001// 1
    $constant $W[array_obj_ref_798_word_offset_0] : $int<4> := _b0000// 0
    // filter[zero][zero]
    $constant $W[array_obj_ref_801_word_address_0] : $pointer<memory_space_0> := _b0000
    // ifmaps[1 ][col_to_be_replaced_3]
    $constant $W[array_obj_ref_808_constant_part_of_offset] : $int<4> := _b0100// 4
    $constant $W[array_obj_ref_808_resized_base_address] : $int<4> := _b0000// 0
    $constant $W[array_obj_ref_808_offset_scale_factor_0] : $int<4> := _b0100// 4
    $constant $W[array_obj_ref_808_offset_scale_factor_1] : $int<4> := _b0001// 1
    $constant $W[array_obj_ref_808_word_offset_0] : $int<4> := _b0000// 0
    // filter[one][zero]
    $constant $W[array_obj_ref_811_word_address_0] : $pointer<memory_space_0> := _b0100
    // ifmaps[2 ][col_to_be_replaced_3]
    $constant $W[array_obj_ref_818_constant_part_of_offset] : $int<4> := _b1000// 8
    $constant $W[array_obj_ref_818_resized_base_address] : $int<4> := _b0000// 0
    $constant $W[array_obj_ref_818_offset_scale_factor_0] : $int<4> := _b0100// 4
    $constant $W[array_obj_ref_818_offset_scale_factor_1] : $int<4> := _b0001// 1
    $constant $W[array_obj_ref_818_word_offset_0] : $int<4> := _b0000// 0
    // filter[two][zero]
    $constant $W[array_obj_ref_821_word_address_0] : $pointer<memory_space_0> := _b1000
    // ifmaps[3 ][col_to_be_replaced_3]
    $constant $W[array_obj_ref_828_constant_part_of_offset] : $int<4> := _b1100// 12
    $constant $W[array_obj_ref_828_resized_base_address] : $int<4> := _b0000// 0
    $constant $W[array_obj_ref_828_offset_scale_factor_0] : $int<4> := _b0100// 4
    $constant $W[array_obj_ref_828_offset_scale_factor_1] : $int<4> := _b0001// 1
    $constant $W[array_obj_ref_828_word_offset_0] : $int<4> := _b0000// 0
    // filter[three][zero]
    $constant $W[array_obj_ref_831_word_address_0] : $pointer<memory_space_0> := _b1100
    // 	col_to_be_replaced_1 := ( $mux (col_to_be_replaced == 0 ) ($bitcast ($uint<2>) 3  )  ($bitcast ($uint<2>) (col_to_be_replaced - 1 ) ) ) // bits of buffering = 2. 
    //  file prog.linked.opt.aa, line 192
    // (col_to_be_replaced == 0 )
    $intermediate $W[EQ_u2_u1_640_wire] : $int<1>
    // (col_to_be_replaced - 1 )
    $intermediate $W[SUB_u2_u2_645_wire] : $int<2>
    // ($bitcast ($uint<2>) (col_to_be_replaced - 1 ) )
    $intermediate $W[type_cast_646_wire] : $int<2>
    // col_to_be_replaced_1
    $W[col_to_be_replaced_1_648] : $int<2>
    // 	col_to_be_replaced_2 := ( $mux (col_to_be_replaced >= 2 ) ($bitcast ($uint<2>) (col_to_be_replaced - 2 ) )  ($bitcast ($uint<2>) (col_to_be_replaced + 2 ) ) ) // bits of buffering = 2. 
    //  file prog.linked.opt.aa, line 193
    // (col_to_be_replaced >= 2 )
    $intermediate $W[UGE_u2_u1_652_wire] : $int<1>
    // (col_to_be_replaced - 2 )
    $intermediate $W[SUB_u2_u2_655_wire] : $int<2>
    // ($bitcast ($uint<2>) (col_to_be_replaced - 2 ) )
    $intermediate $W[type_cast_656_wire] : $int<2>
    // (col_to_be_replaced + 2 )
    $intermediate $W[ADD_u2_u2_659_wire] : $int<2>
    // ($bitcast ($uint<2>) (col_to_be_replaced + 2 ) )
    $intermediate $W[type_cast_660_wire] : $int<2>
    // col_to_be_replaced_2
    $W[col_to_be_replaced_2_662] : $int<2>
    // 	col_to_be_replaced_3 := ( $mux (col_to_be_replaced == 3 ) ($bitcast ($uint<2>) 0  )  ($bitcast ($uint<2>) (col_to_be_replaced + 1 ) ) ) // bits of buffering = 2. 
    //  file prog.linked.opt.aa, line 194
    // (col_to_be_replaced == 3 )
    $intermediate $W[EQ_u2_u1_666_wire] : $int<1>
    // (col_to_be_replaced + 1 )
    $intermediate $W[ADD_u2_u2_671_wire] : $int<2>
    // ($bitcast ($uint<2>) (col_to_be_replaced + 1 ) )
    $intermediate $W[type_cast_672_wire] : $int<2>
    // col_to_be_replaced_3
    $W[col_to_be_replaced_3_674] : $int<2>
    // 	pp03 := ($bitcast ($uint<16>) (ifmaps[0 ][col_to_be_replaced] * filter[zero][three]) )// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 195
    // ifmaps[0 ][col_to_be_replaced]
    $intermediate $W[R_col_to_be_replaced_677_resized] : $int<4>
    $intermediate $W[R_col_to_be_replaced_677_scaled] : $int<4>
    $intermediate $W[array_obj_ref_678_final_offset] : $int<4>
    $intermediate $W[array_obj_ref_678_root_address] : $int<4>
    $W[array_obj_ref_678_word_address_0] : $pointer<memory_space_1>
    $W[array_obj_ref_678_data_0] : $int<16>
    $W[array_obj_ref_678_wire] : $int<16>
    // filter[zero][three]
    $W[array_obj_ref_681_data_0] : $int<16>
    $W[array_obj_ref_681_wire] : $int<16>
    // (ifmaps[0 ][col_to_be_replaced] * filter[zero][three])
    $intermediate $W[MUL_u16_u16_682_wire] : $int<16>
    // pp03
    $W[pp03_684] : $int<16>
    // 	pp13 := ($bitcast ($uint<16>) (ifmaps[1 ][col_to_be_replaced] * filter[one][three]) )// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 196
    // ifmaps[1 ][col_to_be_replaced]
    $intermediate $W[R_col_to_be_replaced_687_resized] : $int<4>
    $intermediate $W[R_col_to_be_replaced_687_scaled] : $int<4>
    $intermediate $W[array_obj_ref_688_final_offset] : $int<4>
    $intermediate $W[array_obj_ref_688_root_address] : $int<4>
    $W[array_obj_ref_688_word_address_0] : $pointer<memory_space_1>
    $W[array_obj_ref_688_data_0] : $int<16>
    $W[array_obj_ref_688_wire] : $int<16>
    // filter[one][three]
    $W[array_obj_ref_691_data_0] : $int<16>
    $W[array_obj_ref_691_wire] : $int<16>
    // (ifmaps[1 ][col_to_be_replaced] * filter[one][three])
    $intermediate $W[MUL_u16_u16_692_wire] : $int<16>
    // pp13
    $W[pp13_694] : $int<16>
    // 	pp23 := ($bitcast ($uint<16>) (ifmaps[2 ][col_to_be_replaced] * filter[two][three]) )// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 197
    // ifmaps[2 ][col_to_be_replaced]
    $intermediate $W[R_col_to_be_replaced_697_resized] : $int<4>
    $intermediate $W[R_col_to_be_replaced_697_scaled] : $int<4>
    $intermediate $W[array_obj_ref_698_final_offset] : $int<4>
    $intermediate $W[array_obj_ref_698_root_address] : $int<4>
    $W[array_obj_ref_698_word_address_0] : $pointer<memory_space_1>
    $W[array_obj_ref_698_data_0] : $int<16>
    $W[array_obj_ref_698_wire] : $int<16>
    // filter[two][three]
    $W[array_obj_ref_701_data_0] : $int<16>
    $W[array_obj_ref_701_wire] : $int<16>
    // (ifmaps[2 ][col_to_be_replaced] * filter[two][three])
    $intermediate $W[MUL_u16_u16_702_wire] : $int<16>
    // pp23
    $W[pp23_704] : $int<16>
    // 	pp33 := ($bitcast ($uint<16>) (ifmaps[3 ][col_to_be_replaced] * filter[three][three]) )// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 198
    // ifmaps[3 ][col_to_be_replaced]
    $intermediate $W[R_col_to_be_replaced_707_resized] : $int<4>
    $intermediate $W[R_col_to_be_replaced_707_scaled] : $int<4>
    $intermediate $W[array_obj_ref_708_final_offset] : $int<4>
    $intermediate $W[array_obj_ref_708_root_address] : $int<4>
    $W[array_obj_ref_708_word_address_0] : $pointer<memory_space_1>
    $W[array_obj_ref_708_data_0] : $int<16>
    $W[array_obj_ref_708_wire] : $int<16>
    // filter[three][three]
    $W[array_obj_ref_711_data_0] : $int<16>
    $W[array_obj_ref_711_wire] : $int<16>
    // (ifmaps[3 ][col_to_be_replaced] * filter[three][three])
    $intermediate $W[MUL_u16_u16_712_wire] : $int<16>
    // pp33
    $W[pp33_714] : $int<16>
    // 	pp02 := ($bitcast ($uint<16>) (ifmaps[0 ][col_to_be_replaced_1] * filter[zero][two]) )// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 199
    // ifmaps[0 ][col_to_be_replaced_1]
    $intermediate $W[R_col_to_be_replaced_1_717_resized] : $int<4>
    $intermediate $W[R_col_to_be_replaced_1_717_scaled] : $int<4>
    $intermediate $W[array_obj_ref_718_final_offset] : $int<4>
    $intermediate $W[array_obj_ref_718_root_address] : $int<4>
    $W[array_obj_ref_718_word_address_0] : $pointer<memory_space_1>
    $W[array_obj_ref_718_data_0] : $int<16>
    $W[array_obj_ref_718_wire] : $int<16>
    // filter[zero][two]
    $W[array_obj_ref_721_data_0] : $int<16>
    $W[array_obj_ref_721_wire] : $int<16>
    // (ifmaps[0 ][col_to_be_replaced_1] * filter[zero][two])
    $intermediate $W[MUL_u16_u16_722_wire] : $int<16>
    // pp02
    $W[pp02_724] : $int<16>
    // 	pp12 := ($bitcast ($uint<16>) (ifmaps[1 ][col_to_be_replaced_1] * filter[one][two]) )// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 200
    // ifmaps[1 ][col_to_be_replaced_1]
    $intermediate $W[R_col_to_be_replaced_1_727_resized] : $int<4>
    $intermediate $W[R_col_to_be_replaced_1_727_scaled] : $int<4>
    $intermediate $W[array_obj_ref_728_final_offset] : $int<4>
    $intermediate $W[array_obj_ref_728_root_address] : $int<4>
    $W[array_obj_ref_728_word_address_0] : $pointer<memory_space_1>
    $W[array_obj_ref_728_data_0] : $int<16>
    $W[array_obj_ref_728_wire] : $int<16>
    // filter[one][two]
    $W[array_obj_ref_731_data_0] : $int<16>
    $W[array_obj_ref_731_wire] : $int<16>
    // (ifmaps[1 ][col_to_be_replaced_1] * filter[one][two])
    $intermediate $W[MUL_u16_u16_732_wire] : $int<16>
    // pp12
    $W[pp12_734] : $int<16>
    // 	pp22 := ($bitcast ($uint<16>) (ifmaps[2 ][col_to_be_replaced_1] * filter[two][two]) )// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 201
    // ifmaps[2 ][col_to_be_replaced_1]
    $intermediate $W[R_col_to_be_replaced_1_737_resized] : $int<4>
    $intermediate $W[R_col_to_be_replaced_1_737_scaled] : $int<4>
    $intermediate $W[array_obj_ref_738_final_offset] : $int<4>
    $intermediate $W[array_obj_ref_738_root_address] : $int<4>
    $W[array_obj_ref_738_word_address_0] : $pointer<memory_space_1>
    $W[array_obj_ref_738_data_0] : $int<16>
    $W[array_obj_ref_738_wire] : $int<16>
    // filter[two][two]
    $W[array_obj_ref_741_data_0] : $int<16>
    $W[array_obj_ref_741_wire] : $int<16>
    // (ifmaps[2 ][col_to_be_replaced_1] * filter[two][two])
    $intermediate $W[MUL_u16_u16_742_wire] : $int<16>
    // pp22
    $W[pp22_744] : $int<16>
    // 	pp32 := ($bitcast ($uint<16>) (ifmaps[3 ][col_to_be_replaced_1] * filter[three][two]) )// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 202
    // ifmaps[3 ][col_to_be_replaced_1]
    $intermediate $W[R_col_to_be_replaced_1_747_resized] : $int<4>
    $intermediate $W[R_col_to_be_replaced_1_747_scaled] : $int<4>
    $intermediate $W[array_obj_ref_748_final_offset] : $int<4>
    $intermediate $W[array_obj_ref_748_root_address] : $int<4>
    $W[array_obj_ref_748_word_address_0] : $pointer<memory_space_1>
    $W[array_obj_ref_748_data_0] : $int<16>
    $W[array_obj_ref_748_wire] : $int<16>
    // filter[three][two]
    $W[array_obj_ref_751_data_0] : $int<16>
    $W[array_obj_ref_751_wire] : $int<16>
    // (ifmaps[3 ][col_to_be_replaced_1] * filter[three][two])
    $intermediate $W[MUL_u16_u16_752_wire] : $int<16>
    // pp32
    $W[pp32_754] : $int<16>
    // 	pp01 := ($bitcast ($uint<16>) (ifmaps[0 ][col_to_be_replaced_2] * filter[zero][one]) )// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 203
    // ifmaps[0 ][col_to_be_replaced_2]
    $intermediate $W[R_col_to_be_replaced_2_757_resized] : $int<4>
    $intermediate $W[R_col_to_be_replaced_2_757_scaled] : $int<4>
    $intermediate $W[array_obj_ref_758_final_offset] : $int<4>
    $intermediate $W[array_obj_ref_758_root_address] : $int<4>
    $W[array_obj_ref_758_word_address_0] : $pointer<memory_space_1>
    $W[array_obj_ref_758_data_0] : $int<16>
    $W[array_obj_ref_758_wire] : $int<16>
    // filter[zero][one]
    $W[array_obj_ref_761_data_0] : $int<16>
    $W[array_obj_ref_761_wire] : $int<16>
    // (ifmaps[0 ][col_to_be_replaced_2] * filter[zero][one])
    $intermediate $W[MUL_u16_u16_762_wire] : $int<16>
    // pp01
    $W[pp01_764] : $int<16>
    // 	pp11 := ($bitcast ($uint<16>) (ifmaps[1 ][col_to_be_replaced_2] * filter[one][one]) )// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 204
    // ifmaps[1 ][col_to_be_replaced_2]
    $intermediate $W[R_col_to_be_replaced_2_767_resized] : $int<4>
    $intermediate $W[R_col_to_be_replaced_2_767_scaled] : $int<4>
    $intermediate $W[array_obj_ref_768_final_offset] : $int<4>
    $intermediate $W[array_obj_ref_768_root_address] : $int<4>
    $W[array_obj_ref_768_word_address_0] : $pointer<memory_space_1>
    $W[array_obj_ref_768_data_0] : $int<16>
    $W[array_obj_ref_768_wire] : $int<16>
    // filter[one][one]
    $W[array_obj_ref_771_data_0] : $int<16>
    $W[array_obj_ref_771_wire] : $int<16>
    // (ifmaps[1 ][col_to_be_replaced_2] * filter[one][one])
    $intermediate $W[MUL_u16_u16_772_wire] : $int<16>
    // pp11
    $W[pp11_774] : $int<16>
    // 	pp21 := ($bitcast ($uint<16>) (ifmaps[2 ][col_to_be_replaced_2] * filter[two][one]) )// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 205
    // ifmaps[2 ][col_to_be_replaced_2]
    $intermediate $W[R_col_to_be_replaced_2_777_resized] : $int<4>
    $intermediate $W[R_col_to_be_replaced_2_777_scaled] : $int<4>
    $intermediate $W[array_obj_ref_778_final_offset] : $int<4>
    $intermediate $W[array_obj_ref_778_root_address] : $int<4>
    $W[array_obj_ref_778_word_address_0] : $pointer<memory_space_1>
    $W[array_obj_ref_778_data_0] : $int<16>
    $W[array_obj_ref_778_wire] : $int<16>
    // filter[two][one]
    $W[array_obj_ref_781_data_0] : $int<16>
    $W[array_obj_ref_781_wire] : $int<16>
    // (ifmaps[2 ][col_to_be_replaced_2] * filter[two][one])
    $intermediate $W[MUL_u16_u16_782_wire] : $int<16>
    // pp21
    $W[pp21_784] : $int<16>
    // 	pp31 := ($bitcast ($uint<16>) (ifmaps[3 ][col_to_be_replaced_2] * filter[three][one]) )// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 206
    // ifmaps[3 ][col_to_be_replaced_2]
    $intermediate $W[R_col_to_be_replaced_2_787_resized] : $int<4>
    $intermediate $W[R_col_to_be_replaced_2_787_scaled] : $int<4>
    $intermediate $W[array_obj_ref_788_final_offset] : $int<4>
    $intermediate $W[array_obj_ref_788_root_address] : $int<4>
    $W[array_obj_ref_788_word_address_0] : $pointer<memory_space_1>
    $W[array_obj_ref_788_data_0] : $int<16>
    $W[array_obj_ref_788_wire] : $int<16>
    // filter[three][one]
    $W[array_obj_ref_791_data_0] : $int<16>
    $W[array_obj_ref_791_wire] : $int<16>
    // (ifmaps[3 ][col_to_be_replaced_2] * filter[three][one])
    $intermediate $W[MUL_u16_u16_792_wire] : $int<16>
    // pp31
    $W[pp31_794] : $int<16>
    // 	pp00 := ($bitcast ($uint<16>) (ifmaps[0 ][col_to_be_replaced_3] * filter[zero][zero]) )// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 207
    // ifmaps[0 ][col_to_be_replaced_3]
    $intermediate $W[R_col_to_be_replaced_3_797_resized] : $int<4>
    $intermediate $W[R_col_to_be_replaced_3_797_scaled] : $int<4>
    $intermediate $W[array_obj_ref_798_final_offset] : $int<4>
    $intermediate $W[array_obj_ref_798_root_address] : $int<4>
    $W[array_obj_ref_798_word_address_0] : $pointer<memory_space_1>
    $W[array_obj_ref_798_data_0] : $int<16>
    $W[array_obj_ref_798_wire] : $int<16>
    // filter[zero][zero]
    $W[array_obj_ref_801_data_0] : $int<16>
    $W[array_obj_ref_801_wire] : $int<16>
    // (ifmaps[0 ][col_to_be_replaced_3] * filter[zero][zero])
    $intermediate $W[MUL_u16_u16_802_wire] : $int<16>
    // pp00
    $W[pp00_804] : $int<16>
    // 	pp10 := ($bitcast ($uint<16>) (ifmaps[1 ][col_to_be_replaced_3] * filter[one][zero]) )// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 208
    // ifmaps[1 ][col_to_be_replaced_3]
    $intermediate $W[R_col_to_be_replaced_3_807_resized] : $int<4>
    $intermediate $W[R_col_to_be_replaced_3_807_scaled] : $int<4>
    $intermediate $W[array_obj_ref_808_final_offset] : $int<4>
    $intermediate $W[array_obj_ref_808_root_address] : $int<4>
    $W[array_obj_ref_808_word_address_0] : $pointer<memory_space_1>
    $W[array_obj_ref_808_data_0] : $int<16>
    $W[array_obj_ref_808_wire] : $int<16>
    // filter[one][zero]
    $W[array_obj_ref_811_data_0] : $int<16>
    $W[array_obj_ref_811_wire] : $int<16>
    // (ifmaps[1 ][col_to_be_replaced_3] * filter[one][zero])
    $intermediate $W[MUL_u16_u16_812_wire] : $int<16>
    // pp10
    $W[pp10_814] : $int<16>
    // 	pp20 := ($bitcast ($uint<16>) (ifmaps[2 ][col_to_be_replaced_3] * filter[two][zero]) )// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 209
    // ifmaps[2 ][col_to_be_replaced_3]
    $intermediate $W[R_col_to_be_replaced_3_817_resized] : $int<4>
    $intermediate $W[R_col_to_be_replaced_3_817_scaled] : $int<4>
    $intermediate $W[array_obj_ref_818_final_offset] : $int<4>
    $intermediate $W[array_obj_ref_818_root_address] : $int<4>
    $W[array_obj_ref_818_word_address_0] : $pointer<memory_space_1>
    $W[array_obj_ref_818_data_0] : $int<16>
    $W[array_obj_ref_818_wire] : $int<16>
    // filter[two][zero]
    $W[array_obj_ref_821_data_0] : $int<16>
    $W[array_obj_ref_821_wire] : $int<16>
    // (ifmaps[2 ][col_to_be_replaced_3] * filter[two][zero])
    $intermediate $W[MUL_u16_u16_822_wire] : $int<16>
    // pp20
    $W[pp20_824] : $int<16>
    // 	pp30 := ($bitcast ($uint<16>) (ifmaps[3 ][col_to_be_replaced_3] * filter[three][zero]) )// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 210
    // ifmaps[3 ][col_to_be_replaced_3]
    $intermediate $W[R_col_to_be_replaced_3_827_resized] : $int<4>
    $intermediate $W[R_col_to_be_replaced_3_827_scaled] : $int<4>
    $intermediate $W[array_obj_ref_828_final_offset] : $int<4>
    $intermediate $W[array_obj_ref_828_root_address] : $int<4>
    $W[array_obj_ref_828_word_address_0] : $pointer<memory_space_1>
    $W[array_obj_ref_828_data_0] : $int<16>
    $W[array_obj_ref_828_wire] : $int<16>
    // filter[three][zero]
    $W[array_obj_ref_831_data_0] : $int<16>
    $W[array_obj_ref_831_wire] : $int<16>
    // (ifmaps[3 ][col_to_be_replaced_3] * filter[three][zero])
    $intermediate $W[MUL_u16_u16_832_wire] : $int<16>
    // pp30
    $W[pp30_834] : $int<16>
    // 	sum0 := ($bitcast ($uint<16>) (pp00 + pp01) )// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 211
    // (pp00 + pp01)
    $intermediate $W[ADD_u16_u16_838_wire] : $int<16>
    // sum0
    $W[sum0_840] : $int<16>
    // 	sum1 := ($bitcast ($uint<16>) (pp02 + pp03) )// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 212
    // (pp02 + pp03)
    $intermediate $W[ADD_u16_u16_844_wire] : $int<16>
    // sum1
    $W[sum1_846] : $int<16>
    // 	sum2 := ($bitcast ($uint<16>) (pp10 + pp11) )// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 213
    // (pp10 + pp11)
    $intermediate $W[ADD_u16_u16_850_wire] : $int<16>
    // sum2
    $W[sum2_852] : $int<16>
    // 	sum3 := ($bitcast ($uint<16>) (pp12 + pp13) )// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 214
    // (pp12 + pp13)
    $intermediate $W[ADD_u16_u16_856_wire] : $int<16>
    // sum3
    $W[sum3_858] : $int<16>
    // 	sum4 := ($bitcast ($uint<16>) (pp20 + pp21) )// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 215
    // (pp20 + pp21)
    $intermediate $W[ADD_u16_u16_862_wire] : $int<16>
    // sum4
    $W[sum4_864] : $int<16>
    // 	sum5 := ($bitcast ($uint<16>) (pp22 + pp23) )// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 216
    // (pp22 + pp23)
    $intermediate $W[ADD_u16_u16_868_wire] : $int<16>
    // sum5
    $W[sum5_870] : $int<16>
    // 	sum6 := ($bitcast ($uint<16>) (pp30 + pp31) )// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 217
    // (pp30 + pp31)
    $intermediate $W[ADD_u16_u16_874_wire] : $int<16>
    // sum6
    $W[sum6_876] : $int<16>
    // 	sum7 := ($bitcast ($uint<16>) (pp32 + pp33) )// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 218
    // (pp32 + pp33)
    $intermediate $W[ADD_u16_u16_880_wire] : $int<16>
    // sum7
    $W[sum7_882] : $int<16>
    // 	sum10 := ($bitcast ($uint<16>) (sum0 + sum1) )// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 219
    // (sum0 + sum1)
    $intermediate $W[ADD_u16_u16_886_wire] : $int<16>
    // sum10
    $W[sum10_888] : $int<16>
    // 	sum11 := ($bitcast ($uint<16>) (sum2 + sum3) )// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 220
    // (sum2 + sum3)
    $intermediate $W[ADD_u16_u16_892_wire] : $int<16>
    // sum11
    $W[sum11_894] : $int<16>
    // 	sum12 := ($bitcast ($uint<16>) (sum4 + sum5) )// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 221
    // (sum4 + sum5)
    $intermediate $W[ADD_u16_u16_898_wire] : $int<16>
    // sum12
    $W[sum12_900] : $int<16>
    // 	sum13 := ($bitcast ($uint<16>) (sum6 + sum7) )// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 222
    // (sum6 + sum7)
    $intermediate $W[ADD_u16_u16_904_wire] : $int<16>
    // sum13
    $W[sum13_906] : $int<16>
    // 	sum20 := ($bitcast ($uint<16>) (sum10 + sum11) )// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 223
    // (sum10 + sum11)
    $intermediate $W[ADD_u16_u16_910_wire] : $int<16>
    // sum20
    $W[sum20_912] : $int<16>
    // 	sum21 := ($bitcast ($uint<16>) (sum12 + sum13) )// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 224
    // (sum12 + sum13)
    $intermediate $W[ADD_u16_u16_916_wire] : $int<16>
    // sum21
    $W[sum21_918] : $int<16>
    // 	ofmap_pixel := ($bitcast ($uint<16>) (sum20 + sum21) )// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 225
    // (sum20 + sum21)
    $intermediate $W[ADD_u16_u16_922_wire] : $int<16>
    // ofmap_pixel
    // 	col_to_be_replaced_1 := ( $mux (col_to_be_replaced == 0 ) ($bitcast ($uint<2>) 3  )  ($bitcast ($uint<2>) (col_to_be_replaced - 1 ) ) ) // bits of buffering = 2. 
    //  file prog.linked.opt.aa, line 192
    // (col_to_be_replaced == 0 )
    ==[EQ_u2_u1_640_inst] (col_to_be_replaced konst_639_wire_constant) (EQ_u2_u1_640_wire)   $flowthrough 
    $delay EQ_u2_u1_640_inst 0
    // (col_to_be_replaced - 1 )
    -[SUB_u2_u2_645_inst] (col_to_be_replaced konst_644_wire_constant) (SUB_u2_u2_645_wire)   $flowthrough 
    $delay SUB_u2_u2_645_inst 0
    // ($bitcast ($uint<2>) (col_to_be_replaced - 1 ) )
    # := [type_cast_646_inst] (SUB_u2_u2_645_wire) (type_cast_646_wire)   $flowthrough
    $delay type_cast_646_inst 0
    // ( $mux (col_to_be_replaced == 0 ) ($bitcast ($uint<2>) 3  )  ($bitcast ($uint<2>) (col_to_be_replaced - 1 ) ) ) 
    ? [MUX_647_inst] (EQ_u2_u1_640_wire type_cast_642_wire_constant type_cast_646_wire) (col_to_be_replaced_1_648) 
    $buffering  $out MUX_647_inst col_to_be_replaced_1_648 1
    // 	col_to_be_replaced_2 := ( $mux (col_to_be_replaced >= 2 ) ($bitcast ($uint<2>) (col_to_be_replaced - 2 ) )  ($bitcast ($uint<2>) (col_to_be_replaced + 2 ) ) ) // bits of buffering = 2. 
    //  file prog.linked.opt.aa, line 193
    // (col_to_be_replaced >= 2 )
    >=[UGE_u2_u1_652_inst] (col_to_be_replaced konst_651_wire_constant) (UGE_u2_u1_652_wire)   $flowthrough 
    $delay UGE_u2_u1_652_inst 0
    // (col_to_be_replaced - 2 )
    -[SUB_u2_u2_655_inst] (col_to_be_replaced konst_654_wire_constant) (SUB_u2_u2_655_wire)   $flowthrough 
    $delay SUB_u2_u2_655_inst 0
    // ($bitcast ($uint<2>) (col_to_be_replaced - 2 ) )
    # := [type_cast_656_inst] (SUB_u2_u2_655_wire) (type_cast_656_wire)   $flowthrough
    $delay type_cast_656_inst 0
    // (col_to_be_replaced + 2 )
    +[ADD_u2_u2_659_inst] (col_to_be_replaced konst_658_wire_constant) (ADD_u2_u2_659_wire)   $flowthrough 
    $delay ADD_u2_u2_659_inst 0
    // ($bitcast ($uint<2>) (col_to_be_replaced + 2 ) )
    # := [type_cast_660_inst] (ADD_u2_u2_659_wire) (type_cast_660_wire)   $flowthrough
    $delay type_cast_660_inst 0
    // ( $mux (col_to_be_replaced >= 2 ) ($bitcast ($uint<2>) (col_to_be_replaced - 2 ) )  ($bitcast ($uint<2>) (col_to_be_replaced + 2 ) ) ) 
    ? [MUX_661_inst] (UGE_u2_u1_652_wire type_cast_656_wire type_cast_660_wire) (col_to_be_replaced_2_662) 
    $buffering  $out MUX_661_inst col_to_be_replaced_2_662 1
    // 	col_to_be_replaced_3 := ( $mux (col_to_be_replaced == 3 ) ($bitcast ($uint<2>) 0  )  ($bitcast ($uint<2>) (col_to_be_replaced + 1 ) ) ) // bits of buffering = 2. 
    //  file prog.linked.opt.aa, line 194
    // (col_to_be_replaced == 3 )
    ==[EQ_u2_u1_666_inst] (col_to_be_replaced konst_665_wire_constant) (EQ_u2_u1_666_wire)   $flowthrough 
    $delay EQ_u2_u1_666_inst 0
    // (col_to_be_replaced + 1 )
    +[ADD_u2_u2_671_inst] (col_to_be_replaced konst_670_wire_constant) (ADD_u2_u2_671_wire)   $flowthrough 
    $delay ADD_u2_u2_671_inst 0
    // ($bitcast ($uint<2>) (col_to_be_replaced + 1 ) )
    # := [type_cast_672_inst] (ADD_u2_u2_671_wire) (type_cast_672_wire)   $flowthrough
    $delay type_cast_672_inst 0
    // ( $mux (col_to_be_replaced == 3 ) ($bitcast ($uint<2>) 0  )  ($bitcast ($uint<2>) (col_to_be_replaced + 1 ) ) ) 
    ? [MUX_673_inst] (EQ_u2_u1_666_wire type_cast_668_wire_constant type_cast_672_wire) (col_to_be_replaced_3_674) 
    $buffering  $out MUX_673_inst col_to_be_replaced_3_674 1
    // 	pp03 := ($bitcast ($uint<16>) (ifmaps[0 ][col_to_be_replaced] * filter[zero][three]) )// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 195
    // ifmaps[0 ][col_to_be_replaced]
    &/ [array_obj_ref_678_index_1_resize] (col_to_be_replaced) (R_col_to_be_replaced_677_resized) 
    $flowthrough 
    &/ [array_obj_ref_678_index_1_rename] (R_col_to_be_replaced_677_resized) (R_col_to_be_replaced_677_scaled) 
    $flowthrough 
    +[array_obj_ref_678_index_offset] (R_col_to_be_replaced_677_scaled array_obj_ref_678_constant_part_of_offset) (array_obj_ref_678_final_offset)   
    $delay array_obj_ref_678_index_offset 2
    &/ [array_obj_ref_678_root_address_inst] (array_obj_ref_678_final_offset) (array_obj_ref_678_root_address) 
    $flowthrough 
    &/ [array_obj_ref_678_addr_0] (array_obj_ref_678_root_address) (array_obj_ref_678_word_address_0) 
    $flowthrough 
    $load [array_obj_ref_678_load_0] $from memory_space_1 (array_obj_ref_678_word_address_0) (array_obj_ref_678_data_0) 
    $delay array_obj_ref_678_load_0 5
    &/ [array_obj_ref_678_gather_scatter] (array_obj_ref_678_data_0) (array_obj_ref_678_wire) 
    $flowthrough 
    // filter[zero][three]
    $load [array_obj_ref_681_load_0] $from memory_space_0 (array_obj_ref_681_word_address_0) (array_obj_ref_681_data_0) 
    $delay array_obj_ref_681_load_0 5
    &/ [array_obj_ref_681_gather_scatter] (array_obj_ref_681_data_0) (array_obj_ref_681_wire) 
    $flowthrough 
    // (ifmaps[0 ][col_to_be_replaced] * filter[zero][three])
    *[MUL_u16_u16_682_inst] (array_obj_ref_678_wire array_obj_ref_681_wire) (MUL_u16_u16_682_wire)   $flowthrough 
    $delay MUL_u16_u16_682_inst 0
    // ($bitcast ($uint<16>) (ifmaps[0 ][col_to_be_replaced] * filter[zero][three]) )
    # := [type_cast_683_inst] (MUL_u16_u16_682_wire) (pp03_684)   
    $buffering  $out type_cast_683_inst pp03_684 1
    $delay type_cast_683_inst 1
    // 	pp13 := ($bitcast ($uint<16>) (ifmaps[1 ][col_to_be_replaced] * filter[one][three]) )// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 196
    // ifmaps[1 ][col_to_be_replaced]
    &/ [array_obj_ref_688_index_1_resize] (col_to_be_replaced) (R_col_to_be_replaced_687_resized) 
    $flowthrough 
    &/ [array_obj_ref_688_index_1_rename] (R_col_to_be_replaced_687_resized) (R_col_to_be_replaced_687_scaled) 
    $flowthrough 
    +[array_obj_ref_688_index_offset] (R_col_to_be_replaced_687_scaled array_obj_ref_688_constant_part_of_offset) (array_obj_ref_688_final_offset)   
    $delay array_obj_ref_688_index_offset 2
    &/ [array_obj_ref_688_root_address_inst] (array_obj_ref_688_final_offset) (array_obj_ref_688_root_address) 
    $flowthrough 
    &/ [array_obj_ref_688_addr_0] (array_obj_ref_688_root_address) (array_obj_ref_688_word_address_0) 
    $flowthrough 
    $load [array_obj_ref_688_load_0] $from memory_space_1 (array_obj_ref_688_word_address_0) (array_obj_ref_688_data_0) 
    $delay array_obj_ref_688_load_0 5
    &/ [array_obj_ref_688_gather_scatter] (array_obj_ref_688_data_0) (array_obj_ref_688_wire) 
    $flowthrough 
    // filter[one][three]
    $load [array_obj_ref_691_load_0] $from memory_space_0 (array_obj_ref_691_word_address_0) (array_obj_ref_691_data_0) 
    $delay array_obj_ref_691_load_0 5
    &/ [array_obj_ref_691_gather_scatter] (array_obj_ref_691_data_0) (array_obj_ref_691_wire) 
    $flowthrough 
    // (ifmaps[1 ][col_to_be_replaced] * filter[one][three])
    *[MUL_u16_u16_692_inst] (array_obj_ref_688_wire array_obj_ref_691_wire) (MUL_u16_u16_692_wire)   $flowthrough 
    $delay MUL_u16_u16_692_inst 0
    // ($bitcast ($uint<16>) (ifmaps[1 ][col_to_be_replaced] * filter[one][three]) )
    # := [type_cast_693_inst] (MUL_u16_u16_692_wire) (pp13_694)   
    $buffering  $out type_cast_693_inst pp13_694 1
    $delay type_cast_693_inst 1
    // 	pp23 := ($bitcast ($uint<16>) (ifmaps[2 ][col_to_be_replaced] * filter[two][three]) )// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 197
    // ifmaps[2 ][col_to_be_replaced]
    &/ [array_obj_ref_698_index_1_resize] (col_to_be_replaced) (R_col_to_be_replaced_697_resized) 
    $flowthrough 
    &/ [array_obj_ref_698_index_1_rename] (R_col_to_be_replaced_697_resized) (R_col_to_be_replaced_697_scaled) 
    $flowthrough 
    +[array_obj_ref_698_index_offset] (R_col_to_be_replaced_697_scaled array_obj_ref_698_constant_part_of_offset) (array_obj_ref_698_final_offset)   
    $delay array_obj_ref_698_index_offset 2
    &/ [array_obj_ref_698_root_address_inst] (array_obj_ref_698_final_offset) (array_obj_ref_698_root_address) 
    $flowthrough 
    &/ [array_obj_ref_698_addr_0] (array_obj_ref_698_root_address) (array_obj_ref_698_word_address_0) 
    $flowthrough 
    $load [array_obj_ref_698_load_0] $from memory_space_1 (array_obj_ref_698_word_address_0) (array_obj_ref_698_data_0) 
    $delay array_obj_ref_698_load_0 5
    &/ [array_obj_ref_698_gather_scatter] (array_obj_ref_698_data_0) (array_obj_ref_698_wire) 
    $flowthrough 
    // filter[two][three]
    $load [array_obj_ref_701_load_0] $from memory_space_0 (array_obj_ref_701_word_address_0) (array_obj_ref_701_data_0) 
    $delay array_obj_ref_701_load_0 5
    &/ [array_obj_ref_701_gather_scatter] (array_obj_ref_701_data_0) (array_obj_ref_701_wire) 
    $flowthrough 
    // (ifmaps[2 ][col_to_be_replaced] * filter[two][three])
    *[MUL_u16_u16_702_inst] (array_obj_ref_698_wire array_obj_ref_701_wire) (MUL_u16_u16_702_wire)   $flowthrough 
    $delay MUL_u16_u16_702_inst 0
    // ($bitcast ($uint<16>) (ifmaps[2 ][col_to_be_replaced] * filter[two][three]) )
    # := [type_cast_703_inst] (MUL_u16_u16_702_wire) (pp23_704)   
    $buffering  $out type_cast_703_inst pp23_704 1
    $delay type_cast_703_inst 1
    // 	pp33 := ($bitcast ($uint<16>) (ifmaps[3 ][col_to_be_replaced] * filter[three][three]) )// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 198
    // ifmaps[3 ][col_to_be_replaced]
    &/ [array_obj_ref_708_index_1_resize] (col_to_be_replaced) (R_col_to_be_replaced_707_resized) 
    $flowthrough 
    &/ [array_obj_ref_708_index_1_rename] (R_col_to_be_replaced_707_resized) (R_col_to_be_replaced_707_scaled) 
    $flowthrough 
    +[array_obj_ref_708_index_offset] (R_col_to_be_replaced_707_scaled array_obj_ref_708_constant_part_of_offset) (array_obj_ref_708_final_offset)   
    $delay array_obj_ref_708_index_offset 2
    &/ [array_obj_ref_708_root_address_inst] (array_obj_ref_708_final_offset) (array_obj_ref_708_root_address) 
    $flowthrough 
    &/ [array_obj_ref_708_addr_0] (array_obj_ref_708_root_address) (array_obj_ref_708_word_address_0) 
    $flowthrough 
    $load [array_obj_ref_708_load_0] $from memory_space_1 (array_obj_ref_708_word_address_0) (array_obj_ref_708_data_0) 
    $delay array_obj_ref_708_load_0 5
    &/ [array_obj_ref_708_gather_scatter] (array_obj_ref_708_data_0) (array_obj_ref_708_wire) 
    $flowthrough 
    // filter[three][three]
    $load [array_obj_ref_711_load_0] $from memory_space_0 (array_obj_ref_711_word_address_0) (array_obj_ref_711_data_0) 
    $delay array_obj_ref_711_load_0 5
    &/ [array_obj_ref_711_gather_scatter] (array_obj_ref_711_data_0) (array_obj_ref_711_wire) 
    $flowthrough 
    // (ifmaps[3 ][col_to_be_replaced] * filter[three][three])
    *[MUL_u16_u16_712_inst] (array_obj_ref_708_wire array_obj_ref_711_wire) (MUL_u16_u16_712_wire)   $flowthrough 
    $delay MUL_u16_u16_712_inst 0
    // ($bitcast ($uint<16>) (ifmaps[3 ][col_to_be_replaced] * filter[three][three]) )
    # := [type_cast_713_inst] (MUL_u16_u16_712_wire) (pp33_714)   
    $buffering  $out type_cast_713_inst pp33_714 1
    $delay type_cast_713_inst 1
    // 	pp02 := ($bitcast ($uint<16>) (ifmaps[0 ][col_to_be_replaced_1] * filter[zero][two]) )// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 199
    // ifmaps[0 ][col_to_be_replaced_1]
    &/ [array_obj_ref_718_index_1_resize] (col_to_be_replaced_1_648) (R_col_to_be_replaced_1_717_resized) 
    $flowthrough 
    &/ [array_obj_ref_718_index_1_rename] (R_col_to_be_replaced_1_717_resized) (R_col_to_be_replaced_1_717_scaled) 
    $flowthrough 
    +[array_obj_ref_718_index_offset] (R_col_to_be_replaced_1_717_scaled array_obj_ref_718_constant_part_of_offset) (array_obj_ref_718_final_offset)   
    $delay array_obj_ref_718_index_offset 2
    &/ [array_obj_ref_718_root_address_inst] (array_obj_ref_718_final_offset) (array_obj_ref_718_root_address) 
    $flowthrough 
    &/ [array_obj_ref_718_addr_0] (array_obj_ref_718_root_address) (array_obj_ref_718_word_address_0) 
    $flowthrough 
    $load [array_obj_ref_718_load_0] $from memory_space_1 (array_obj_ref_718_word_address_0) (array_obj_ref_718_data_0) 
    $delay array_obj_ref_718_load_0 5
    &/ [array_obj_ref_718_gather_scatter] (array_obj_ref_718_data_0) (array_obj_ref_718_wire) 
    $flowthrough 
    // filter[zero][two]
    $load [array_obj_ref_721_load_0] $from memory_space_0 (array_obj_ref_721_word_address_0) (array_obj_ref_721_data_0) 
    $delay array_obj_ref_721_load_0 5
    &/ [array_obj_ref_721_gather_scatter] (array_obj_ref_721_data_0) (array_obj_ref_721_wire) 
    $flowthrough 
    // (ifmaps[0 ][col_to_be_replaced_1] * filter[zero][two])
    *[MUL_u16_u16_722_inst] (array_obj_ref_718_wire array_obj_ref_721_wire) (MUL_u16_u16_722_wire)   $flowthrough 
    $delay MUL_u16_u16_722_inst 0
    // ($bitcast ($uint<16>) (ifmaps[0 ][col_to_be_replaced_1] * filter[zero][two]) )
    # := [type_cast_723_inst] (MUL_u16_u16_722_wire) (pp02_724)   
    $buffering  $out type_cast_723_inst pp02_724 1
    $delay type_cast_723_inst 1
    // 	pp12 := ($bitcast ($uint<16>) (ifmaps[1 ][col_to_be_replaced_1] * filter[one][two]) )// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 200
    // ifmaps[1 ][col_to_be_replaced_1]
    &/ [array_obj_ref_728_index_1_resize] (col_to_be_replaced_1_648) (R_col_to_be_replaced_1_727_resized) 
    $flowthrough 
    &/ [array_obj_ref_728_index_1_rename] (R_col_to_be_replaced_1_727_resized) (R_col_to_be_replaced_1_727_scaled) 
    $flowthrough 
    +[array_obj_ref_728_index_offset] (R_col_to_be_replaced_1_727_scaled array_obj_ref_728_constant_part_of_offset) (array_obj_ref_728_final_offset)   
    $delay array_obj_ref_728_index_offset 2
    &/ [array_obj_ref_728_root_address_inst] (array_obj_ref_728_final_offset) (array_obj_ref_728_root_address) 
    $flowthrough 
    &/ [array_obj_ref_728_addr_0] (array_obj_ref_728_root_address) (array_obj_ref_728_word_address_0) 
    $flowthrough 
    $load [array_obj_ref_728_load_0] $from memory_space_1 (array_obj_ref_728_word_address_0) (array_obj_ref_728_data_0) 
    $delay array_obj_ref_728_load_0 5
    &/ [array_obj_ref_728_gather_scatter] (array_obj_ref_728_data_0) (array_obj_ref_728_wire) 
    $flowthrough 
    // filter[one][two]
    $load [array_obj_ref_731_load_0] $from memory_space_0 (array_obj_ref_731_word_address_0) (array_obj_ref_731_data_0) 
    $delay array_obj_ref_731_load_0 5
    &/ [array_obj_ref_731_gather_scatter] (array_obj_ref_731_data_0) (array_obj_ref_731_wire) 
    $flowthrough 
    // (ifmaps[1 ][col_to_be_replaced_1] * filter[one][two])
    *[MUL_u16_u16_732_inst] (array_obj_ref_728_wire array_obj_ref_731_wire) (MUL_u16_u16_732_wire)   $flowthrough 
    $delay MUL_u16_u16_732_inst 0
    // ($bitcast ($uint<16>) (ifmaps[1 ][col_to_be_replaced_1] * filter[one][two]) )
    # := [type_cast_733_inst] (MUL_u16_u16_732_wire) (pp12_734)   
    $buffering  $out type_cast_733_inst pp12_734 1
    $delay type_cast_733_inst 1
    // 	pp22 := ($bitcast ($uint<16>) (ifmaps[2 ][col_to_be_replaced_1] * filter[two][two]) )// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 201
    // ifmaps[2 ][col_to_be_replaced_1]
    &/ [array_obj_ref_738_index_1_resize] (col_to_be_replaced_1_648) (R_col_to_be_replaced_1_737_resized) 
    $flowthrough 
    &/ [array_obj_ref_738_index_1_rename] (R_col_to_be_replaced_1_737_resized) (R_col_to_be_replaced_1_737_scaled) 
    $flowthrough 
    +[array_obj_ref_738_index_offset] (R_col_to_be_replaced_1_737_scaled array_obj_ref_738_constant_part_of_offset) (array_obj_ref_738_final_offset)   
    $delay array_obj_ref_738_index_offset 2
    &/ [array_obj_ref_738_root_address_inst] (array_obj_ref_738_final_offset) (array_obj_ref_738_root_address) 
    $flowthrough 
    &/ [array_obj_ref_738_addr_0] (array_obj_ref_738_root_address) (array_obj_ref_738_word_address_0) 
    $flowthrough 
    $load [array_obj_ref_738_load_0] $from memory_space_1 (array_obj_ref_738_word_address_0) (array_obj_ref_738_data_0) 
    $delay array_obj_ref_738_load_0 5
    &/ [array_obj_ref_738_gather_scatter] (array_obj_ref_738_data_0) (array_obj_ref_738_wire) 
    $flowthrough 
    // filter[two][two]
    $load [array_obj_ref_741_load_0] $from memory_space_0 (array_obj_ref_741_word_address_0) (array_obj_ref_741_data_0) 
    $delay array_obj_ref_741_load_0 5
    &/ [array_obj_ref_741_gather_scatter] (array_obj_ref_741_data_0) (array_obj_ref_741_wire) 
    $flowthrough 
    // (ifmaps[2 ][col_to_be_replaced_1] * filter[two][two])
    *[MUL_u16_u16_742_inst] (array_obj_ref_738_wire array_obj_ref_741_wire) (MUL_u16_u16_742_wire)   $flowthrough 
    $delay MUL_u16_u16_742_inst 0
    // ($bitcast ($uint<16>) (ifmaps[2 ][col_to_be_replaced_1] * filter[two][two]) )
    # := [type_cast_743_inst] (MUL_u16_u16_742_wire) (pp22_744)   
    $buffering  $out type_cast_743_inst pp22_744 1
    $delay type_cast_743_inst 1
    // 	pp32 := ($bitcast ($uint<16>) (ifmaps[3 ][col_to_be_replaced_1] * filter[three][two]) )// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 202
    // ifmaps[3 ][col_to_be_replaced_1]
    &/ [array_obj_ref_748_index_1_resize] (col_to_be_replaced_1_648) (R_col_to_be_replaced_1_747_resized) 
    $flowthrough 
    &/ [array_obj_ref_748_index_1_rename] (R_col_to_be_replaced_1_747_resized) (R_col_to_be_replaced_1_747_scaled) 
    $flowthrough 
    +[array_obj_ref_748_index_offset] (R_col_to_be_replaced_1_747_scaled array_obj_ref_748_constant_part_of_offset) (array_obj_ref_748_final_offset)   
    $delay array_obj_ref_748_index_offset 2
    &/ [array_obj_ref_748_root_address_inst] (array_obj_ref_748_final_offset) (array_obj_ref_748_root_address) 
    $flowthrough 
    &/ [array_obj_ref_748_addr_0] (array_obj_ref_748_root_address) (array_obj_ref_748_word_address_0) 
    $flowthrough 
    $load [array_obj_ref_748_load_0] $from memory_space_1 (array_obj_ref_748_word_address_0) (array_obj_ref_748_data_0) 
    $delay array_obj_ref_748_load_0 5
    &/ [array_obj_ref_748_gather_scatter] (array_obj_ref_748_data_0) (array_obj_ref_748_wire) 
    $flowthrough 
    // filter[three][two]
    $load [array_obj_ref_751_load_0] $from memory_space_0 (array_obj_ref_751_word_address_0) (array_obj_ref_751_data_0) 
    $delay array_obj_ref_751_load_0 5
    &/ [array_obj_ref_751_gather_scatter] (array_obj_ref_751_data_0) (array_obj_ref_751_wire) 
    $flowthrough 
    // (ifmaps[3 ][col_to_be_replaced_1] * filter[three][two])
    *[MUL_u16_u16_752_inst] (array_obj_ref_748_wire array_obj_ref_751_wire) (MUL_u16_u16_752_wire)   $flowthrough 
    $delay MUL_u16_u16_752_inst 0
    // ($bitcast ($uint<16>) (ifmaps[3 ][col_to_be_replaced_1] * filter[three][two]) )
    # := [type_cast_753_inst] (MUL_u16_u16_752_wire) (pp32_754)   
    $buffering  $out type_cast_753_inst pp32_754 1
    $delay type_cast_753_inst 1
    // 	pp01 := ($bitcast ($uint<16>) (ifmaps[0 ][col_to_be_replaced_2] * filter[zero][one]) )// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 203
    // ifmaps[0 ][col_to_be_replaced_2]
    &/ [array_obj_ref_758_index_1_resize] (col_to_be_replaced_2_662) (R_col_to_be_replaced_2_757_resized) 
    $flowthrough 
    &/ [array_obj_ref_758_index_1_rename] (R_col_to_be_replaced_2_757_resized) (R_col_to_be_replaced_2_757_scaled) 
    $flowthrough 
    +[array_obj_ref_758_index_offset] (R_col_to_be_replaced_2_757_scaled array_obj_ref_758_constant_part_of_offset) (array_obj_ref_758_final_offset)   
    $delay array_obj_ref_758_index_offset 2
    &/ [array_obj_ref_758_root_address_inst] (array_obj_ref_758_final_offset) (array_obj_ref_758_root_address) 
    $flowthrough 
    &/ [array_obj_ref_758_addr_0] (array_obj_ref_758_root_address) (array_obj_ref_758_word_address_0) 
    $flowthrough 
    $load [array_obj_ref_758_load_0] $from memory_space_1 (array_obj_ref_758_word_address_0) (array_obj_ref_758_data_0) 
    $delay array_obj_ref_758_load_0 5
    &/ [array_obj_ref_758_gather_scatter] (array_obj_ref_758_data_0) (array_obj_ref_758_wire) 
    $flowthrough 
    // filter[zero][one]
    $load [array_obj_ref_761_load_0] $from memory_space_0 (array_obj_ref_761_word_address_0) (array_obj_ref_761_data_0) 
    $delay array_obj_ref_761_load_0 5
    &/ [array_obj_ref_761_gather_scatter] (array_obj_ref_761_data_0) (array_obj_ref_761_wire) 
    $flowthrough 
    // (ifmaps[0 ][col_to_be_replaced_2] * filter[zero][one])
    *[MUL_u16_u16_762_inst] (array_obj_ref_758_wire array_obj_ref_761_wire) (MUL_u16_u16_762_wire)   $flowthrough 
    $delay MUL_u16_u16_762_inst 0
    // ($bitcast ($uint<16>) (ifmaps[0 ][col_to_be_replaced_2] * filter[zero][one]) )
    # := [type_cast_763_inst] (MUL_u16_u16_762_wire) (pp01_764)   
    $buffering  $out type_cast_763_inst pp01_764 1
    $delay type_cast_763_inst 1
    // 	pp11 := ($bitcast ($uint<16>) (ifmaps[1 ][col_to_be_replaced_2] * filter[one][one]) )// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 204
    // ifmaps[1 ][col_to_be_replaced_2]
    &/ [array_obj_ref_768_index_1_resize] (col_to_be_replaced_2_662) (R_col_to_be_replaced_2_767_resized) 
    $flowthrough 
    &/ [array_obj_ref_768_index_1_rename] (R_col_to_be_replaced_2_767_resized) (R_col_to_be_replaced_2_767_scaled) 
    $flowthrough 
    +[array_obj_ref_768_index_offset] (R_col_to_be_replaced_2_767_scaled array_obj_ref_768_constant_part_of_offset) (array_obj_ref_768_final_offset)   
    $delay array_obj_ref_768_index_offset 2
    &/ [array_obj_ref_768_root_address_inst] (array_obj_ref_768_final_offset) (array_obj_ref_768_root_address) 
    $flowthrough 
    &/ [array_obj_ref_768_addr_0] (array_obj_ref_768_root_address) (array_obj_ref_768_word_address_0) 
    $flowthrough 
    $load [array_obj_ref_768_load_0] $from memory_space_1 (array_obj_ref_768_word_address_0) (array_obj_ref_768_data_0) 
    $delay array_obj_ref_768_load_0 5
    &/ [array_obj_ref_768_gather_scatter] (array_obj_ref_768_data_0) (array_obj_ref_768_wire) 
    $flowthrough 
    // filter[one][one]
    $load [array_obj_ref_771_load_0] $from memory_space_0 (array_obj_ref_771_word_address_0) (array_obj_ref_771_data_0) 
    $delay array_obj_ref_771_load_0 5
    &/ [array_obj_ref_771_gather_scatter] (array_obj_ref_771_data_0) (array_obj_ref_771_wire) 
    $flowthrough 
    // (ifmaps[1 ][col_to_be_replaced_2] * filter[one][one])
    *[MUL_u16_u16_772_inst] (array_obj_ref_768_wire array_obj_ref_771_wire) (MUL_u16_u16_772_wire)   $flowthrough 
    $delay MUL_u16_u16_772_inst 0
    // ($bitcast ($uint<16>) (ifmaps[1 ][col_to_be_replaced_2] * filter[one][one]) )
    # := [type_cast_773_inst] (MUL_u16_u16_772_wire) (pp11_774)   
    $buffering  $out type_cast_773_inst pp11_774 1
    $delay type_cast_773_inst 1
    // 	pp21 := ($bitcast ($uint<16>) (ifmaps[2 ][col_to_be_replaced_2] * filter[two][one]) )// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 205
    // ifmaps[2 ][col_to_be_replaced_2]
    &/ [array_obj_ref_778_index_1_resize] (col_to_be_replaced_2_662) (R_col_to_be_replaced_2_777_resized) 
    $flowthrough 
    &/ [array_obj_ref_778_index_1_rename] (R_col_to_be_replaced_2_777_resized) (R_col_to_be_replaced_2_777_scaled) 
    $flowthrough 
    +[array_obj_ref_778_index_offset] (R_col_to_be_replaced_2_777_scaled array_obj_ref_778_constant_part_of_offset) (array_obj_ref_778_final_offset)   
    $delay array_obj_ref_778_index_offset 2
    &/ [array_obj_ref_778_root_address_inst] (array_obj_ref_778_final_offset) (array_obj_ref_778_root_address) 
    $flowthrough 
    &/ [array_obj_ref_778_addr_0] (array_obj_ref_778_root_address) (array_obj_ref_778_word_address_0) 
    $flowthrough 
    $load [array_obj_ref_778_load_0] $from memory_space_1 (array_obj_ref_778_word_address_0) (array_obj_ref_778_data_0) 
    $delay array_obj_ref_778_load_0 5
    &/ [array_obj_ref_778_gather_scatter] (array_obj_ref_778_data_0) (array_obj_ref_778_wire) 
    $flowthrough 
    // filter[two][one]
    $load [array_obj_ref_781_load_0] $from memory_space_0 (array_obj_ref_781_word_address_0) (array_obj_ref_781_data_0) 
    $delay array_obj_ref_781_load_0 5
    &/ [array_obj_ref_781_gather_scatter] (array_obj_ref_781_data_0) (array_obj_ref_781_wire) 
    $flowthrough 
    // (ifmaps[2 ][col_to_be_replaced_2] * filter[two][one])
    *[MUL_u16_u16_782_inst] (array_obj_ref_778_wire array_obj_ref_781_wire) (MUL_u16_u16_782_wire)   $flowthrough 
    $delay MUL_u16_u16_782_inst 0
    // ($bitcast ($uint<16>) (ifmaps[2 ][col_to_be_replaced_2] * filter[two][one]) )
    # := [type_cast_783_inst] (MUL_u16_u16_782_wire) (pp21_784)   
    $buffering  $out type_cast_783_inst pp21_784 1
    $delay type_cast_783_inst 1
    // 	pp31 := ($bitcast ($uint<16>) (ifmaps[3 ][col_to_be_replaced_2] * filter[three][one]) )// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 206
    // ifmaps[3 ][col_to_be_replaced_2]
    &/ [array_obj_ref_788_index_1_resize] (col_to_be_replaced_2_662) (R_col_to_be_replaced_2_787_resized) 
    $flowthrough 
    &/ [array_obj_ref_788_index_1_rename] (R_col_to_be_replaced_2_787_resized) (R_col_to_be_replaced_2_787_scaled) 
    $flowthrough 
    +[array_obj_ref_788_index_offset] (R_col_to_be_replaced_2_787_scaled array_obj_ref_788_constant_part_of_offset) (array_obj_ref_788_final_offset)   
    $delay array_obj_ref_788_index_offset 2
    &/ [array_obj_ref_788_root_address_inst] (array_obj_ref_788_final_offset) (array_obj_ref_788_root_address) 
    $flowthrough 
    &/ [array_obj_ref_788_addr_0] (array_obj_ref_788_root_address) (array_obj_ref_788_word_address_0) 
    $flowthrough 
    $load [array_obj_ref_788_load_0] $from memory_space_1 (array_obj_ref_788_word_address_0) (array_obj_ref_788_data_0) 
    $delay array_obj_ref_788_load_0 5
    &/ [array_obj_ref_788_gather_scatter] (array_obj_ref_788_data_0) (array_obj_ref_788_wire) 
    $flowthrough 
    // filter[three][one]
    $load [array_obj_ref_791_load_0] $from memory_space_0 (array_obj_ref_791_word_address_0) (array_obj_ref_791_data_0) 
    $delay array_obj_ref_791_load_0 5
    &/ [array_obj_ref_791_gather_scatter] (array_obj_ref_791_data_0) (array_obj_ref_791_wire) 
    $flowthrough 
    // (ifmaps[3 ][col_to_be_replaced_2] * filter[three][one])
    *[MUL_u16_u16_792_inst] (array_obj_ref_788_wire array_obj_ref_791_wire) (MUL_u16_u16_792_wire)   $flowthrough 
    $delay MUL_u16_u16_792_inst 0
    // ($bitcast ($uint<16>) (ifmaps[3 ][col_to_be_replaced_2] * filter[three][one]) )
    # := [type_cast_793_inst] (MUL_u16_u16_792_wire) (pp31_794)   
    $buffering  $out type_cast_793_inst pp31_794 1
    $delay type_cast_793_inst 1
    // 	pp00 := ($bitcast ($uint<16>) (ifmaps[0 ][col_to_be_replaced_3] * filter[zero][zero]) )// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 207
    // ifmaps[0 ][col_to_be_replaced_3]
    &/ [array_obj_ref_798_index_1_resize] (col_to_be_replaced_3_674) (R_col_to_be_replaced_3_797_resized) 
    $flowthrough 
    &/ [array_obj_ref_798_index_1_rename] (R_col_to_be_replaced_3_797_resized) (R_col_to_be_replaced_3_797_scaled) 
    $flowthrough 
    +[array_obj_ref_798_index_offset] (R_col_to_be_replaced_3_797_scaled array_obj_ref_798_constant_part_of_offset) (array_obj_ref_798_final_offset)   
    $delay array_obj_ref_798_index_offset 2
    &/ [array_obj_ref_798_root_address_inst] (array_obj_ref_798_final_offset) (array_obj_ref_798_root_address) 
    $flowthrough 
    &/ [array_obj_ref_798_addr_0] (array_obj_ref_798_root_address) (array_obj_ref_798_word_address_0) 
    $flowthrough 
    $load [array_obj_ref_798_load_0] $from memory_space_1 (array_obj_ref_798_word_address_0) (array_obj_ref_798_data_0) 
    $delay array_obj_ref_798_load_0 5
    &/ [array_obj_ref_798_gather_scatter] (array_obj_ref_798_data_0) (array_obj_ref_798_wire) 
    $flowthrough 
    // filter[zero][zero]
    $load [array_obj_ref_801_load_0] $from memory_space_0 (array_obj_ref_801_word_address_0) (array_obj_ref_801_data_0) 
    $delay array_obj_ref_801_load_0 5
    &/ [array_obj_ref_801_gather_scatter] (array_obj_ref_801_data_0) (array_obj_ref_801_wire) 
    $flowthrough 
    // (ifmaps[0 ][col_to_be_replaced_3] * filter[zero][zero])
    *[MUL_u16_u16_802_inst] (array_obj_ref_798_wire array_obj_ref_801_wire) (MUL_u16_u16_802_wire)   $flowthrough 
    $delay MUL_u16_u16_802_inst 0
    // ($bitcast ($uint<16>) (ifmaps[0 ][col_to_be_replaced_3] * filter[zero][zero]) )
    # := [type_cast_803_inst] (MUL_u16_u16_802_wire) (pp00_804)   
    $buffering  $out type_cast_803_inst pp00_804 1
    $delay type_cast_803_inst 1
    // 	pp10 := ($bitcast ($uint<16>) (ifmaps[1 ][col_to_be_replaced_3] * filter[one][zero]) )// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 208
    // ifmaps[1 ][col_to_be_replaced_3]
    &/ [array_obj_ref_808_index_1_resize] (col_to_be_replaced_3_674) (R_col_to_be_replaced_3_807_resized) 
    $flowthrough 
    &/ [array_obj_ref_808_index_1_rename] (R_col_to_be_replaced_3_807_resized) (R_col_to_be_replaced_3_807_scaled) 
    $flowthrough 
    +[array_obj_ref_808_index_offset] (R_col_to_be_replaced_3_807_scaled array_obj_ref_808_constant_part_of_offset) (array_obj_ref_808_final_offset)   
    $delay array_obj_ref_808_index_offset 2
    &/ [array_obj_ref_808_root_address_inst] (array_obj_ref_808_final_offset) (array_obj_ref_808_root_address) 
    $flowthrough 
    &/ [array_obj_ref_808_addr_0] (array_obj_ref_808_root_address) (array_obj_ref_808_word_address_0) 
    $flowthrough 
    $load [array_obj_ref_808_load_0] $from memory_space_1 (array_obj_ref_808_word_address_0) (array_obj_ref_808_data_0) 
    $delay array_obj_ref_808_load_0 5
    &/ [array_obj_ref_808_gather_scatter] (array_obj_ref_808_data_0) (array_obj_ref_808_wire) 
    $flowthrough 
    // filter[one][zero]
    $load [array_obj_ref_811_load_0] $from memory_space_0 (array_obj_ref_811_word_address_0) (array_obj_ref_811_data_0) 
    $delay array_obj_ref_811_load_0 5
    &/ [array_obj_ref_811_gather_scatter] (array_obj_ref_811_data_0) (array_obj_ref_811_wire) 
    $flowthrough 
    // (ifmaps[1 ][col_to_be_replaced_3] * filter[one][zero])
    *[MUL_u16_u16_812_inst] (array_obj_ref_808_wire array_obj_ref_811_wire) (MUL_u16_u16_812_wire)   $flowthrough 
    $delay MUL_u16_u16_812_inst 0
    // ($bitcast ($uint<16>) (ifmaps[1 ][col_to_be_replaced_3] * filter[one][zero]) )
    # := [type_cast_813_inst] (MUL_u16_u16_812_wire) (pp10_814)   
    $buffering  $out type_cast_813_inst pp10_814 1
    $delay type_cast_813_inst 1
    // 	pp20 := ($bitcast ($uint<16>) (ifmaps[2 ][col_to_be_replaced_3] * filter[two][zero]) )// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 209
    // ifmaps[2 ][col_to_be_replaced_3]
    &/ [array_obj_ref_818_index_1_resize] (col_to_be_replaced_3_674) (R_col_to_be_replaced_3_817_resized) 
    $flowthrough 
    &/ [array_obj_ref_818_index_1_rename] (R_col_to_be_replaced_3_817_resized) (R_col_to_be_replaced_3_817_scaled) 
    $flowthrough 
    +[array_obj_ref_818_index_offset] (R_col_to_be_replaced_3_817_scaled array_obj_ref_818_constant_part_of_offset) (array_obj_ref_818_final_offset)   
    $delay array_obj_ref_818_index_offset 2
    &/ [array_obj_ref_818_root_address_inst] (array_obj_ref_818_final_offset) (array_obj_ref_818_root_address) 
    $flowthrough 
    &/ [array_obj_ref_818_addr_0] (array_obj_ref_818_root_address) (array_obj_ref_818_word_address_0) 
    $flowthrough 
    $load [array_obj_ref_818_load_0] $from memory_space_1 (array_obj_ref_818_word_address_0) (array_obj_ref_818_data_0) 
    $delay array_obj_ref_818_load_0 5
    &/ [array_obj_ref_818_gather_scatter] (array_obj_ref_818_data_0) (array_obj_ref_818_wire) 
    $flowthrough 
    // filter[two][zero]
    $load [array_obj_ref_821_load_0] $from memory_space_0 (array_obj_ref_821_word_address_0) (array_obj_ref_821_data_0) 
    $delay array_obj_ref_821_load_0 5
    &/ [array_obj_ref_821_gather_scatter] (array_obj_ref_821_data_0) (array_obj_ref_821_wire) 
    $flowthrough 
    // (ifmaps[2 ][col_to_be_replaced_3] * filter[two][zero])
    *[MUL_u16_u16_822_inst] (array_obj_ref_818_wire array_obj_ref_821_wire) (MUL_u16_u16_822_wire)   $flowthrough 
    $delay MUL_u16_u16_822_inst 0
    // ($bitcast ($uint<16>) (ifmaps[2 ][col_to_be_replaced_3] * filter[two][zero]) )
    # := [type_cast_823_inst] (MUL_u16_u16_822_wire) (pp20_824)   
    $buffering  $out type_cast_823_inst pp20_824 1
    $delay type_cast_823_inst 1
    // 	pp30 := ($bitcast ($uint<16>) (ifmaps[3 ][col_to_be_replaced_3] * filter[three][zero]) )// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 210
    // ifmaps[3 ][col_to_be_replaced_3]
    &/ [array_obj_ref_828_index_1_resize] (col_to_be_replaced_3_674) (R_col_to_be_replaced_3_827_resized) 
    $flowthrough 
    &/ [array_obj_ref_828_index_1_rename] (R_col_to_be_replaced_3_827_resized) (R_col_to_be_replaced_3_827_scaled) 
    $flowthrough 
    +[array_obj_ref_828_index_offset] (R_col_to_be_replaced_3_827_scaled array_obj_ref_828_constant_part_of_offset) (array_obj_ref_828_final_offset)   
    $delay array_obj_ref_828_index_offset 2
    &/ [array_obj_ref_828_root_address_inst] (array_obj_ref_828_final_offset) (array_obj_ref_828_root_address) 
    $flowthrough 
    &/ [array_obj_ref_828_addr_0] (array_obj_ref_828_root_address) (array_obj_ref_828_word_address_0) 
    $flowthrough 
    $load [array_obj_ref_828_load_0] $from memory_space_1 (array_obj_ref_828_word_address_0) (array_obj_ref_828_data_0) 
    $delay array_obj_ref_828_load_0 5
    &/ [array_obj_ref_828_gather_scatter] (array_obj_ref_828_data_0) (array_obj_ref_828_wire) 
    $flowthrough 
    // filter[three][zero]
    $load [array_obj_ref_831_load_0] $from memory_space_0 (array_obj_ref_831_word_address_0) (array_obj_ref_831_data_0) 
    $delay array_obj_ref_831_load_0 5
    &/ [array_obj_ref_831_gather_scatter] (array_obj_ref_831_data_0) (array_obj_ref_831_wire) 
    $flowthrough 
    // (ifmaps[3 ][col_to_be_replaced_3] * filter[three][zero])
    *[MUL_u16_u16_832_inst] (array_obj_ref_828_wire array_obj_ref_831_wire) (MUL_u16_u16_832_wire)   $flowthrough 
    $delay MUL_u16_u16_832_inst 0
    // ($bitcast ($uint<16>) (ifmaps[3 ][col_to_be_replaced_3] * filter[three][zero]) )
    # := [type_cast_833_inst] (MUL_u16_u16_832_wire) (pp30_834)   
    $buffering  $out type_cast_833_inst pp30_834 1
    $delay type_cast_833_inst 1
    // 	sum0 := ($bitcast ($uint<16>) (pp00 + pp01) )// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 211
    // (pp00 + pp01)
    +[ADD_u16_u16_838_inst] (pp00_804 pp01_764) (ADD_u16_u16_838_wire)   $flowthrough 
    $delay ADD_u16_u16_838_inst 0
    // ($bitcast ($uint<16>) (pp00 + pp01) )
    # := [type_cast_839_inst] (ADD_u16_u16_838_wire) (sum0_840)   
    $buffering  $out type_cast_839_inst sum0_840 1
    $delay type_cast_839_inst 1
    // 	sum1 := ($bitcast ($uint<16>) (pp02 + pp03) )// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 212
    // (pp02 + pp03)
    +[ADD_u16_u16_844_inst] (pp02_724 pp03_684) (ADD_u16_u16_844_wire)   $flowthrough 
    $delay ADD_u16_u16_844_inst 0
    // ($bitcast ($uint<16>) (pp02 + pp03) )
    # := [type_cast_845_inst] (ADD_u16_u16_844_wire) (sum1_846)   
    $buffering  $out type_cast_845_inst sum1_846 1
    $delay type_cast_845_inst 1
    // 	sum2 := ($bitcast ($uint<16>) (pp10 + pp11) )// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 213
    // (pp10 + pp11)
    +[ADD_u16_u16_850_inst] (pp10_814 pp11_774) (ADD_u16_u16_850_wire)   $flowthrough 
    $delay ADD_u16_u16_850_inst 0
    // ($bitcast ($uint<16>) (pp10 + pp11) )
    # := [type_cast_851_inst] (ADD_u16_u16_850_wire) (sum2_852)   
    $buffering  $out type_cast_851_inst sum2_852 1
    $delay type_cast_851_inst 1
    // 	sum3 := ($bitcast ($uint<16>) (pp12 + pp13) )// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 214
    // (pp12 + pp13)
    +[ADD_u16_u16_856_inst] (pp12_734 pp13_694) (ADD_u16_u16_856_wire)   $flowthrough 
    $delay ADD_u16_u16_856_inst 0
    // ($bitcast ($uint<16>) (pp12 + pp13) )
    # := [type_cast_857_inst] (ADD_u16_u16_856_wire) (sum3_858)   
    $buffering  $out type_cast_857_inst sum3_858 1
    $delay type_cast_857_inst 1
    // 	sum4 := ($bitcast ($uint<16>) (pp20 + pp21) )// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 215
    // (pp20 + pp21)
    +[ADD_u16_u16_862_inst] (pp20_824 pp21_784) (ADD_u16_u16_862_wire)   $flowthrough 
    $delay ADD_u16_u16_862_inst 0
    // ($bitcast ($uint<16>) (pp20 + pp21) )
    # := [type_cast_863_inst] (ADD_u16_u16_862_wire) (sum4_864)   
    $buffering  $out type_cast_863_inst sum4_864 1
    $delay type_cast_863_inst 1
    // 	sum5 := ($bitcast ($uint<16>) (pp22 + pp23) )// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 216
    // (pp22 + pp23)
    +[ADD_u16_u16_868_inst] (pp22_744 pp23_704) (ADD_u16_u16_868_wire)   $flowthrough 
    $delay ADD_u16_u16_868_inst 0
    // ($bitcast ($uint<16>) (pp22 + pp23) )
    # := [type_cast_869_inst] (ADD_u16_u16_868_wire) (sum5_870)   
    $buffering  $out type_cast_869_inst sum5_870 1
    $delay type_cast_869_inst 1
    // 	sum6 := ($bitcast ($uint<16>) (pp30 + pp31) )// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 217
    // (pp30 + pp31)
    +[ADD_u16_u16_874_inst] (pp30_834 pp31_794) (ADD_u16_u16_874_wire)   $flowthrough 
    $delay ADD_u16_u16_874_inst 0
    // ($bitcast ($uint<16>) (pp30 + pp31) )
    # := [type_cast_875_inst] (ADD_u16_u16_874_wire) (sum6_876)   
    $buffering  $out type_cast_875_inst sum6_876 1
    $delay type_cast_875_inst 1
    // 	sum7 := ($bitcast ($uint<16>) (pp32 + pp33) )// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 218
    // (pp32 + pp33)
    +[ADD_u16_u16_880_inst] (pp32_754 pp33_714) (ADD_u16_u16_880_wire)   $flowthrough 
    $delay ADD_u16_u16_880_inst 0
    // ($bitcast ($uint<16>) (pp32 + pp33) )
    # := [type_cast_881_inst] (ADD_u16_u16_880_wire) (sum7_882)   
    $buffering  $out type_cast_881_inst sum7_882 1
    $delay type_cast_881_inst 1
    // 	sum10 := ($bitcast ($uint<16>) (sum0 + sum1) )// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 219
    // (sum0 + sum1)
    +[ADD_u16_u16_886_inst] (sum0_840 sum1_846) (ADD_u16_u16_886_wire)   $flowthrough 
    $delay ADD_u16_u16_886_inst 0
    // ($bitcast ($uint<16>) (sum0 + sum1) )
    # := [type_cast_887_inst] (ADD_u16_u16_886_wire) (sum10_888)   
    $buffering  $out type_cast_887_inst sum10_888 1
    $delay type_cast_887_inst 1
    // 	sum11 := ($bitcast ($uint<16>) (sum2 + sum3) )// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 220
    // (sum2 + sum3)
    +[ADD_u16_u16_892_inst] (sum2_852 sum3_858) (ADD_u16_u16_892_wire)   $flowthrough 
    $delay ADD_u16_u16_892_inst 0
    // ($bitcast ($uint<16>) (sum2 + sum3) )
    # := [type_cast_893_inst] (ADD_u16_u16_892_wire) (sum11_894)   
    $buffering  $out type_cast_893_inst sum11_894 1
    $delay type_cast_893_inst 1
    // 	sum12 := ($bitcast ($uint<16>) (sum4 + sum5) )// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 221
    // (sum4 + sum5)
    +[ADD_u16_u16_898_inst] (sum4_864 sum5_870) (ADD_u16_u16_898_wire)   $flowthrough 
    $delay ADD_u16_u16_898_inst 0
    // ($bitcast ($uint<16>) (sum4 + sum5) )
    # := [type_cast_899_inst] (ADD_u16_u16_898_wire) (sum12_900)   
    $buffering  $out type_cast_899_inst sum12_900 1
    $delay type_cast_899_inst 1
    // 	sum13 := ($bitcast ($uint<16>) (sum6 + sum7) )// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 222
    // (sum6 + sum7)
    +[ADD_u16_u16_904_inst] (sum6_876 sum7_882) (ADD_u16_u16_904_wire)   $flowthrough 
    $delay ADD_u16_u16_904_inst 0
    // ($bitcast ($uint<16>) (sum6 + sum7) )
    # := [type_cast_905_inst] (ADD_u16_u16_904_wire) (sum13_906)   
    $buffering  $out type_cast_905_inst sum13_906 1
    $delay type_cast_905_inst 1
    // 	sum20 := ($bitcast ($uint<16>) (sum10 + sum11) )// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 223
    // (sum10 + sum11)
    +[ADD_u16_u16_910_inst] (sum10_888 sum11_894) (ADD_u16_u16_910_wire)   $flowthrough 
    $delay ADD_u16_u16_910_inst 0
    // ($bitcast ($uint<16>) (sum10 + sum11) )
    # := [type_cast_911_inst] (ADD_u16_u16_910_wire) (sum20_912)   
    $buffering  $out type_cast_911_inst sum20_912 1
    $delay type_cast_911_inst 1
    // 	sum21 := ($bitcast ($uint<16>) (sum12 + sum13) )// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 224
    // (sum12 + sum13)
    +[ADD_u16_u16_916_inst] (sum12_900 sum13_906) (ADD_u16_u16_916_wire)   $flowthrough 
    $delay ADD_u16_u16_916_inst 0
    // ($bitcast ($uint<16>) (sum12 + sum13) )
    # := [type_cast_917_inst] (ADD_u16_u16_916_wire) (sum21_918)   
    $buffering  $out type_cast_917_inst sum21_918 1
    $delay type_cast_917_inst 1
    // 	ofmap_pixel := ($bitcast ($uint<16>) (sum20 + sum21) )// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 225
    // (sum20 + sum21)
    +[ADD_u16_u16_922_inst] (sum20_912 sum21_918) (ADD_u16_u16_922_wire)   $flowthrough 
    $delay ADD_u16_u16_922_inst 0
    // ($bitcast ($uint<16>) (sum20 + sum21) )
    # := [type_cast_923_inst] (ADD_u16_u16_922_wire) (ofmap_pixel)   
    $buffering  $out type_cast_923_inst ofmap_pixel 1
    $delay type_cast_923_inst 1
  }
  // end data-path
  // 	col_to_be_replaced_1 := ( $mux (col_to_be_replaced == 0 ) ($bitcast ($uint<2>) 3  )  ($bitcast ($uint<2>) (col_to_be_replaced - 1 ) ) ) // bits of buffering = 2. 
  //  file prog.linked.opt.aa, line 192
  // (col_to_be_replaced == 0 )
  // col_to_be_replaced
  // (col_to_be_replaced - 1 )
  // col_to_be_replaced
  // ( $mux (col_to_be_replaced == 0 ) ($bitcast ($uint<2>) 3  )  ($bitcast ($uint<2>) (col_to_be_replaced - 1 ) ) ) 
  MUX_647_inst <=> (assign_stmt_624_to_assign_stmt_924/MUX_647_start/req assign_stmt_624_to_assign_stmt_924/MUX_647_complete/req) (assign_stmt_624_to_assign_stmt_924/MUX_647_start/ack assign_stmt_624_to_assign_stmt_924/MUX_647_complete/ack)
  // 	col_to_be_replaced_2 := ( $mux (col_to_be_replaced >= 2 ) ($bitcast ($uint<2>) (col_to_be_replaced - 2 ) )  ($bitcast ($uint<2>) (col_to_be_replaced + 2 ) ) ) // bits of buffering = 2. 
  //  file prog.linked.opt.aa, line 193
  // (col_to_be_replaced >= 2 )
  // col_to_be_replaced
  // (col_to_be_replaced - 2 )
  // col_to_be_replaced
  // (col_to_be_replaced + 2 )
  // col_to_be_replaced
  // ( $mux (col_to_be_replaced >= 2 ) ($bitcast ($uint<2>) (col_to_be_replaced - 2 ) )  ($bitcast ($uint<2>) (col_to_be_replaced + 2 ) ) ) 
  MUX_661_inst <=> (assign_stmt_624_to_assign_stmt_924/MUX_661_start/req assign_stmt_624_to_assign_stmt_924/MUX_661_complete/req) (assign_stmt_624_to_assign_stmt_924/MUX_661_start/ack assign_stmt_624_to_assign_stmt_924/MUX_661_complete/ack)
  // 	col_to_be_replaced_3 := ( $mux (col_to_be_replaced == 3 ) ($bitcast ($uint<2>) 0  )  ($bitcast ($uint<2>) (col_to_be_replaced + 1 ) ) ) // bits of buffering = 2. 
  //  file prog.linked.opt.aa, line 194
  // (col_to_be_replaced == 3 )
  // col_to_be_replaced
  // (col_to_be_replaced + 1 )
  // col_to_be_replaced
  // ( $mux (col_to_be_replaced == 3 ) ($bitcast ($uint<2>) 0  )  ($bitcast ($uint<2>) (col_to_be_replaced + 1 ) ) ) 
  MUX_673_inst <=> (assign_stmt_624_to_assign_stmt_924/MUX_673_start/req assign_stmt_624_to_assign_stmt_924/MUX_673_complete/req) (assign_stmt_624_to_assign_stmt_924/MUX_673_start/ack assign_stmt_624_to_assign_stmt_924/MUX_673_complete/ack)
  // 	pp03 := ($bitcast ($uint<16>) (ifmaps[0 ][col_to_be_replaced] * filter[zero][three]) )// bits of buffering = 16. 
  //  file prog.linked.opt.aa, line 195
  // (ifmaps[0 ][col_to_be_replaced] * filter[zero][three])
  // ifmaps[0 ][col_to_be_replaced]
  // col_to_be_replaced
  array_obj_ref_678_index_1_resize <=> (assign_stmt_624_to_assign_stmt_924/array_obj_ref_678_index_resize_1/index_resize_req) (assign_stmt_624_to_assign_stmt_924/array_obj_ref_678_index_resize_1/index_resize_ack)
  array_obj_ref_678_index_1_rename <=> (assign_stmt_624_to_assign_stmt_924/array_obj_ref_678_index_scale_1/scale_rename_req) (assign_stmt_624_to_assign_stmt_924/array_obj_ref_678_index_scale_1/scale_rename_ack)
  array_obj_ref_678_index_offset <=> (assign_stmt_624_to_assign_stmt_924/array_obj_ref_678_final_index_sum_regn_Sample/req assign_stmt_624_to_assign_stmt_924/array_obj_ref_678_final_index_sum_regn_Update/req) (assign_stmt_624_to_assign_stmt_924/array_obj_ref_678_final_index_sum_regn_Sample/ack assign_stmt_624_to_assign_stmt_924/array_obj_ref_678_final_index_sum_regn_Update/ack)
  array_obj_ref_678_root_address_inst <=> (assign_stmt_624_to_assign_stmt_924/array_obj_ref_678_base_plus_offset/sum_rename_req) (assign_stmt_624_to_assign_stmt_924/array_obj_ref_678_base_plus_offset/sum_rename_ack)
  array_obj_ref_678_addr_0 <=> (assign_stmt_624_to_assign_stmt_924/array_obj_ref_678_word_addrgen/root_register_req) (assign_stmt_624_to_assign_stmt_924/array_obj_ref_678_word_addrgen/root_register_ack)
  array_obj_ref_678_gather_scatter <=> (assign_stmt_624_to_assign_stmt_924/array_obj_ref_678_Update/array_obj_ref_678_Merge/merge_req) (assign_stmt_624_to_assign_stmt_924/array_obj_ref_678_Update/array_obj_ref_678_Merge/merge_ack)
  array_obj_ref_678_load_0 <=> (assign_stmt_624_to_assign_stmt_924/array_obj_ref_678_Sample/word_access_start/word_0/rr assign_stmt_624_to_assign_stmt_924/array_obj_ref_678_Update/word_access_complete/word_0/cr) (assign_stmt_624_to_assign_stmt_924/array_obj_ref_678_Sample/word_access_start/word_0/ra assign_stmt_624_to_assign_stmt_924/array_obj_ref_678_Update/word_access_complete/word_0/ca)
  // filter[zero][three]
  array_obj_ref_681_gather_scatter <=> (assign_stmt_624_to_assign_stmt_924/array_obj_ref_681_Update/array_obj_ref_681_Merge/merge_req) (assign_stmt_624_to_assign_stmt_924/array_obj_ref_681_Update/array_obj_ref_681_Merge/merge_ack)
  array_obj_ref_681_load_0 <=> (assign_stmt_624_to_assign_stmt_924/array_obj_ref_681_Sample/word_access_start/word_0/rr assign_stmt_624_to_assign_stmt_924/array_obj_ref_681_Update/word_access_complete/word_0/cr) (assign_stmt_624_to_assign_stmt_924/array_obj_ref_681_Sample/word_access_start/word_0/ra assign_stmt_624_to_assign_stmt_924/array_obj_ref_681_Update/word_access_complete/word_0/ca)
  // ($bitcast ($uint<16>) (ifmaps[0 ][col_to_be_replaced] * filter[zero][three]) )
  type_cast_683_inst <=> (assign_stmt_624_to_assign_stmt_924/type_cast_683_Sample/rr assign_stmt_624_to_assign_stmt_924/type_cast_683_Update/cr) (assign_stmt_624_to_assign_stmt_924/type_cast_683_Sample/ra assign_stmt_624_to_assign_stmt_924/type_cast_683_Update/ca)
  // 	pp13 := ($bitcast ($uint<16>) (ifmaps[1 ][col_to_be_replaced] * filter[one][three]) )// bits of buffering = 16. 
  //  file prog.linked.opt.aa, line 196
  // (ifmaps[1 ][col_to_be_replaced] * filter[one][three])
  // ifmaps[1 ][col_to_be_replaced]
  // col_to_be_replaced
  array_obj_ref_688_index_1_resize <=> (assign_stmt_624_to_assign_stmt_924/array_obj_ref_688_index_resize_1/index_resize_req) (assign_stmt_624_to_assign_stmt_924/array_obj_ref_688_index_resize_1/index_resize_ack)
  array_obj_ref_688_index_1_rename <=> (assign_stmt_624_to_assign_stmt_924/array_obj_ref_688_index_scale_1/scale_rename_req) (assign_stmt_624_to_assign_stmt_924/array_obj_ref_688_index_scale_1/scale_rename_ack)
  array_obj_ref_688_index_offset <=> (assign_stmt_624_to_assign_stmt_924/array_obj_ref_688_final_index_sum_regn_Sample/req assign_stmt_624_to_assign_stmt_924/array_obj_ref_688_final_index_sum_regn_Update/req) (assign_stmt_624_to_assign_stmt_924/array_obj_ref_688_final_index_sum_regn_Sample/ack assign_stmt_624_to_assign_stmt_924/array_obj_ref_688_final_index_sum_regn_Update/ack)
  array_obj_ref_688_root_address_inst <=> (assign_stmt_624_to_assign_stmt_924/array_obj_ref_688_base_plus_offset/sum_rename_req) (assign_stmt_624_to_assign_stmt_924/array_obj_ref_688_base_plus_offset/sum_rename_ack)
  array_obj_ref_688_addr_0 <=> (assign_stmt_624_to_assign_stmt_924/array_obj_ref_688_word_addrgen/root_register_req) (assign_stmt_624_to_assign_stmt_924/array_obj_ref_688_word_addrgen/root_register_ack)
  array_obj_ref_688_gather_scatter <=> (assign_stmt_624_to_assign_stmt_924/array_obj_ref_688_Update/array_obj_ref_688_Merge/merge_req) (assign_stmt_624_to_assign_stmt_924/array_obj_ref_688_Update/array_obj_ref_688_Merge/merge_ack)
  array_obj_ref_688_load_0 <=> (assign_stmt_624_to_assign_stmt_924/array_obj_ref_688_Sample/word_access_start/word_0/rr assign_stmt_624_to_assign_stmt_924/array_obj_ref_688_Update/word_access_complete/word_0/cr) (assign_stmt_624_to_assign_stmt_924/array_obj_ref_688_Sample/word_access_start/word_0/ra assign_stmt_624_to_assign_stmt_924/array_obj_ref_688_Update/word_access_complete/word_0/ca)
  // filter[one][three]
  array_obj_ref_691_gather_scatter <=> (assign_stmt_624_to_assign_stmt_924/array_obj_ref_691_Update/array_obj_ref_691_Merge/merge_req) (assign_stmt_624_to_assign_stmt_924/array_obj_ref_691_Update/array_obj_ref_691_Merge/merge_ack)
  array_obj_ref_691_load_0 <=> (assign_stmt_624_to_assign_stmt_924/array_obj_ref_691_Sample/word_access_start/word_0/rr assign_stmt_624_to_assign_stmt_924/array_obj_ref_691_Update/word_access_complete/word_0/cr) (assign_stmt_624_to_assign_stmt_924/array_obj_ref_691_Sample/word_access_start/word_0/ra assign_stmt_624_to_assign_stmt_924/array_obj_ref_691_Update/word_access_complete/word_0/ca)
  // ($bitcast ($uint<16>) (ifmaps[1 ][col_to_be_replaced] * filter[one][three]) )
  type_cast_693_inst <=> (assign_stmt_624_to_assign_stmt_924/type_cast_693_Sample/rr assign_stmt_624_to_assign_stmt_924/type_cast_693_Update/cr) (assign_stmt_624_to_assign_stmt_924/type_cast_693_Sample/ra assign_stmt_624_to_assign_stmt_924/type_cast_693_Update/ca)
  // 	pp23 := ($bitcast ($uint<16>) (ifmaps[2 ][col_to_be_replaced] * filter[two][three]) )// bits of buffering = 16. 
  //  file prog.linked.opt.aa, line 197
  // (ifmaps[2 ][col_to_be_replaced] * filter[two][three])
  // ifmaps[2 ][col_to_be_replaced]
  // col_to_be_replaced
  array_obj_ref_698_index_1_resize <=> (assign_stmt_624_to_assign_stmt_924/array_obj_ref_698_index_resize_1/index_resize_req) (assign_stmt_624_to_assign_stmt_924/array_obj_ref_698_index_resize_1/index_resize_ack)
  array_obj_ref_698_index_1_rename <=> (assign_stmt_624_to_assign_stmt_924/array_obj_ref_698_index_scale_1/scale_rename_req) (assign_stmt_624_to_assign_stmt_924/array_obj_ref_698_index_scale_1/scale_rename_ack)
  array_obj_ref_698_index_offset <=> (assign_stmt_624_to_assign_stmt_924/array_obj_ref_698_final_index_sum_regn_Sample/req assign_stmt_624_to_assign_stmt_924/array_obj_ref_698_final_index_sum_regn_Update/req) (assign_stmt_624_to_assign_stmt_924/array_obj_ref_698_final_index_sum_regn_Sample/ack assign_stmt_624_to_assign_stmt_924/array_obj_ref_698_final_index_sum_regn_Update/ack)
  array_obj_ref_698_root_address_inst <=> (assign_stmt_624_to_assign_stmt_924/array_obj_ref_698_base_plus_offset/sum_rename_req) (assign_stmt_624_to_assign_stmt_924/array_obj_ref_698_base_plus_offset/sum_rename_ack)
  array_obj_ref_698_addr_0 <=> (assign_stmt_624_to_assign_stmt_924/array_obj_ref_698_word_addrgen/root_register_req) (assign_stmt_624_to_assign_stmt_924/array_obj_ref_698_word_addrgen/root_register_ack)
  array_obj_ref_698_gather_scatter <=> (assign_stmt_624_to_assign_stmt_924/array_obj_ref_698_Update/array_obj_ref_698_Merge/merge_req) (assign_stmt_624_to_assign_stmt_924/array_obj_ref_698_Update/array_obj_ref_698_Merge/merge_ack)
  array_obj_ref_698_load_0 <=> (assign_stmt_624_to_assign_stmt_924/array_obj_ref_698_Sample/word_access_start/word_0/rr assign_stmt_624_to_assign_stmt_924/array_obj_ref_698_Update/word_access_complete/word_0/cr) (assign_stmt_624_to_assign_stmt_924/array_obj_ref_698_Sample/word_access_start/word_0/ra assign_stmt_624_to_assign_stmt_924/array_obj_ref_698_Update/word_access_complete/word_0/ca)
  // filter[two][three]
  array_obj_ref_701_gather_scatter <=> (assign_stmt_624_to_assign_stmt_924/array_obj_ref_701_Update/array_obj_ref_701_Merge/merge_req) (assign_stmt_624_to_assign_stmt_924/array_obj_ref_701_Update/array_obj_ref_701_Merge/merge_ack)
  array_obj_ref_701_load_0 <=> (assign_stmt_624_to_assign_stmt_924/array_obj_ref_701_Sample/word_access_start/word_0/rr assign_stmt_624_to_assign_stmt_924/array_obj_ref_701_Update/word_access_complete/word_0/cr) (assign_stmt_624_to_assign_stmt_924/array_obj_ref_701_Sample/word_access_start/word_0/ra assign_stmt_624_to_assign_stmt_924/array_obj_ref_701_Update/word_access_complete/word_0/ca)
  // ($bitcast ($uint<16>) (ifmaps[2 ][col_to_be_replaced] * filter[two][three]) )
  type_cast_703_inst <=> (assign_stmt_624_to_assign_stmt_924/type_cast_703_Sample/rr assign_stmt_624_to_assign_stmt_924/type_cast_703_Update/cr) (assign_stmt_624_to_assign_stmt_924/type_cast_703_Sample/ra assign_stmt_624_to_assign_stmt_924/type_cast_703_Update/ca)
  // 	pp33 := ($bitcast ($uint<16>) (ifmaps[3 ][col_to_be_replaced] * filter[three][three]) )// bits of buffering = 16. 
  //  file prog.linked.opt.aa, line 198
  // (ifmaps[3 ][col_to_be_replaced] * filter[three][three])
  // ifmaps[3 ][col_to_be_replaced]
  // col_to_be_replaced
  array_obj_ref_708_index_1_resize <=> (assign_stmt_624_to_assign_stmt_924/array_obj_ref_708_index_resize_1/index_resize_req) (assign_stmt_624_to_assign_stmt_924/array_obj_ref_708_index_resize_1/index_resize_ack)
  array_obj_ref_708_index_1_rename <=> (assign_stmt_624_to_assign_stmt_924/array_obj_ref_708_index_scale_1/scale_rename_req) (assign_stmt_624_to_assign_stmt_924/array_obj_ref_708_index_scale_1/scale_rename_ack)
  array_obj_ref_708_index_offset <=> (assign_stmt_624_to_assign_stmt_924/array_obj_ref_708_final_index_sum_regn_Sample/req assign_stmt_624_to_assign_stmt_924/array_obj_ref_708_final_index_sum_regn_Update/req) (assign_stmt_624_to_assign_stmt_924/array_obj_ref_708_final_index_sum_regn_Sample/ack assign_stmt_624_to_assign_stmt_924/array_obj_ref_708_final_index_sum_regn_Update/ack)
  array_obj_ref_708_root_address_inst <=> (assign_stmt_624_to_assign_stmt_924/array_obj_ref_708_base_plus_offset/sum_rename_req) (assign_stmt_624_to_assign_stmt_924/array_obj_ref_708_base_plus_offset/sum_rename_ack)
  array_obj_ref_708_addr_0 <=> (assign_stmt_624_to_assign_stmt_924/array_obj_ref_708_word_addrgen/root_register_req) (assign_stmt_624_to_assign_stmt_924/array_obj_ref_708_word_addrgen/root_register_ack)
  array_obj_ref_708_gather_scatter <=> (assign_stmt_624_to_assign_stmt_924/array_obj_ref_708_Update/array_obj_ref_708_Merge/merge_req) (assign_stmt_624_to_assign_stmt_924/array_obj_ref_708_Update/array_obj_ref_708_Merge/merge_ack)
  array_obj_ref_708_load_0 <=> (assign_stmt_624_to_assign_stmt_924/array_obj_ref_708_Sample/word_access_start/word_0/rr assign_stmt_624_to_assign_stmt_924/array_obj_ref_708_Update/word_access_complete/word_0/cr) (assign_stmt_624_to_assign_stmt_924/array_obj_ref_708_Sample/word_access_start/word_0/ra assign_stmt_624_to_assign_stmt_924/array_obj_ref_708_Update/word_access_complete/word_0/ca)
  // filter[three][three]
  array_obj_ref_711_gather_scatter <=> (assign_stmt_624_to_assign_stmt_924/array_obj_ref_711_Update/array_obj_ref_711_Merge/merge_req) (assign_stmt_624_to_assign_stmt_924/array_obj_ref_711_Update/array_obj_ref_711_Merge/merge_ack)
  array_obj_ref_711_load_0 <=> (assign_stmt_624_to_assign_stmt_924/array_obj_ref_711_Sample/word_access_start/word_0/rr assign_stmt_624_to_assign_stmt_924/array_obj_ref_711_Update/word_access_complete/word_0/cr) (assign_stmt_624_to_assign_stmt_924/array_obj_ref_711_Sample/word_access_start/word_0/ra assign_stmt_624_to_assign_stmt_924/array_obj_ref_711_Update/word_access_complete/word_0/ca)
  // ($bitcast ($uint<16>) (ifmaps[3 ][col_to_be_replaced] * filter[three][three]) )
  type_cast_713_inst <=> (assign_stmt_624_to_assign_stmt_924/type_cast_713_Sample/rr assign_stmt_624_to_assign_stmt_924/type_cast_713_Update/cr) (assign_stmt_624_to_assign_stmt_924/type_cast_713_Sample/ra assign_stmt_624_to_assign_stmt_924/type_cast_713_Update/ca)
  // 	pp02 := ($bitcast ($uint<16>) (ifmaps[0 ][col_to_be_replaced_1] * filter[zero][two]) )// bits of buffering = 16. 
  //  file prog.linked.opt.aa, line 199
  // (ifmaps[0 ][col_to_be_replaced_1] * filter[zero][two])
  // ifmaps[0 ][col_to_be_replaced_1]
  // col_to_be_replaced_1
  array_obj_ref_718_index_1_resize <=> (assign_stmt_624_to_assign_stmt_924/array_obj_ref_718_index_resize_1/index_resize_req) (assign_stmt_624_to_assign_stmt_924/array_obj_ref_718_index_resize_1/index_resize_ack)
  array_obj_ref_718_index_1_rename <=> (assign_stmt_624_to_assign_stmt_924/array_obj_ref_718_index_scale_1/scale_rename_req) (assign_stmt_624_to_assign_stmt_924/array_obj_ref_718_index_scale_1/scale_rename_ack)
  array_obj_ref_718_index_offset <=> (assign_stmt_624_to_assign_stmt_924/array_obj_ref_718_final_index_sum_regn_Sample/req assign_stmt_624_to_assign_stmt_924/array_obj_ref_718_final_index_sum_regn_Update/req) (assign_stmt_624_to_assign_stmt_924/array_obj_ref_718_final_index_sum_regn_Sample/ack assign_stmt_624_to_assign_stmt_924/array_obj_ref_718_final_index_sum_regn_Update/ack)
  array_obj_ref_718_root_address_inst <=> (assign_stmt_624_to_assign_stmt_924/array_obj_ref_718_base_plus_offset/sum_rename_req) (assign_stmt_624_to_assign_stmt_924/array_obj_ref_718_base_plus_offset/sum_rename_ack)
  array_obj_ref_718_addr_0 <=> (assign_stmt_624_to_assign_stmt_924/array_obj_ref_718_word_addrgen/root_register_req) (assign_stmt_624_to_assign_stmt_924/array_obj_ref_718_word_addrgen/root_register_ack)
  array_obj_ref_718_gather_scatter <=> (assign_stmt_624_to_assign_stmt_924/array_obj_ref_718_Update/array_obj_ref_718_Merge/merge_req) (assign_stmt_624_to_assign_stmt_924/array_obj_ref_718_Update/array_obj_ref_718_Merge/merge_ack)
  array_obj_ref_718_load_0 <=> (assign_stmt_624_to_assign_stmt_924/array_obj_ref_718_Sample/word_access_start/word_0/rr assign_stmt_624_to_assign_stmt_924/array_obj_ref_718_Update/word_access_complete/word_0/cr) (assign_stmt_624_to_assign_stmt_924/array_obj_ref_718_Sample/word_access_start/word_0/ra assign_stmt_624_to_assign_stmt_924/array_obj_ref_718_Update/word_access_complete/word_0/ca)
  // filter[zero][two]
  array_obj_ref_721_gather_scatter <=> (assign_stmt_624_to_assign_stmt_924/array_obj_ref_721_Update/array_obj_ref_721_Merge/merge_req) (assign_stmt_624_to_assign_stmt_924/array_obj_ref_721_Update/array_obj_ref_721_Merge/merge_ack)
  array_obj_ref_721_load_0 <=> (assign_stmt_624_to_assign_stmt_924/array_obj_ref_721_Sample/word_access_start/word_0/rr assign_stmt_624_to_assign_stmt_924/array_obj_ref_721_Update/word_access_complete/word_0/cr) (assign_stmt_624_to_assign_stmt_924/array_obj_ref_721_Sample/word_access_start/word_0/ra assign_stmt_624_to_assign_stmt_924/array_obj_ref_721_Update/word_access_complete/word_0/ca)
  // ($bitcast ($uint<16>) (ifmaps[0 ][col_to_be_replaced_1] * filter[zero][two]) )
  type_cast_723_inst <=> (assign_stmt_624_to_assign_stmt_924/type_cast_723_Sample/rr assign_stmt_624_to_assign_stmt_924/type_cast_723_Update/cr) (assign_stmt_624_to_assign_stmt_924/type_cast_723_Sample/ra assign_stmt_624_to_assign_stmt_924/type_cast_723_Update/ca)
  // 	pp12 := ($bitcast ($uint<16>) (ifmaps[1 ][col_to_be_replaced_1] * filter[one][two]) )// bits of buffering = 16. 
  //  file prog.linked.opt.aa, line 200
  // (ifmaps[1 ][col_to_be_replaced_1] * filter[one][two])
  // ifmaps[1 ][col_to_be_replaced_1]
  // col_to_be_replaced_1
  array_obj_ref_728_index_1_resize <=> (assign_stmt_624_to_assign_stmt_924/array_obj_ref_728_index_resize_1/index_resize_req) (assign_stmt_624_to_assign_stmt_924/array_obj_ref_728_index_resize_1/index_resize_ack)
  array_obj_ref_728_index_1_rename <=> (assign_stmt_624_to_assign_stmt_924/array_obj_ref_728_index_scale_1/scale_rename_req) (assign_stmt_624_to_assign_stmt_924/array_obj_ref_728_index_scale_1/scale_rename_ack)
  array_obj_ref_728_index_offset <=> (assign_stmt_624_to_assign_stmt_924/array_obj_ref_728_final_index_sum_regn_Sample/req assign_stmt_624_to_assign_stmt_924/array_obj_ref_728_final_index_sum_regn_Update/req) (assign_stmt_624_to_assign_stmt_924/array_obj_ref_728_final_index_sum_regn_Sample/ack assign_stmt_624_to_assign_stmt_924/array_obj_ref_728_final_index_sum_regn_Update/ack)
  array_obj_ref_728_root_address_inst <=> (assign_stmt_624_to_assign_stmt_924/array_obj_ref_728_base_plus_offset/sum_rename_req) (assign_stmt_624_to_assign_stmt_924/array_obj_ref_728_base_plus_offset/sum_rename_ack)
  array_obj_ref_728_addr_0 <=> (assign_stmt_624_to_assign_stmt_924/array_obj_ref_728_word_addrgen/root_register_req) (assign_stmt_624_to_assign_stmt_924/array_obj_ref_728_word_addrgen/root_register_ack)
  array_obj_ref_728_gather_scatter <=> (assign_stmt_624_to_assign_stmt_924/array_obj_ref_728_Update/array_obj_ref_728_Merge/merge_req) (assign_stmt_624_to_assign_stmt_924/array_obj_ref_728_Update/array_obj_ref_728_Merge/merge_ack)
  array_obj_ref_728_load_0 <=> (assign_stmt_624_to_assign_stmt_924/array_obj_ref_728_Sample/word_access_start/word_0/rr assign_stmt_624_to_assign_stmt_924/array_obj_ref_728_Update/word_access_complete/word_0/cr) (assign_stmt_624_to_assign_stmt_924/array_obj_ref_728_Sample/word_access_start/word_0/ra assign_stmt_624_to_assign_stmt_924/array_obj_ref_728_Update/word_access_complete/word_0/ca)
  // filter[one][two]
  array_obj_ref_731_gather_scatter <=> (assign_stmt_624_to_assign_stmt_924/array_obj_ref_731_Update/array_obj_ref_731_Merge/merge_req) (assign_stmt_624_to_assign_stmt_924/array_obj_ref_731_Update/array_obj_ref_731_Merge/merge_ack)
  array_obj_ref_731_load_0 <=> (assign_stmt_624_to_assign_stmt_924/array_obj_ref_731_Sample/word_access_start/word_0/rr assign_stmt_624_to_assign_stmt_924/array_obj_ref_731_Update/word_access_complete/word_0/cr) (assign_stmt_624_to_assign_stmt_924/array_obj_ref_731_Sample/word_access_start/word_0/ra assign_stmt_624_to_assign_stmt_924/array_obj_ref_731_Update/word_access_complete/word_0/ca)
  // ($bitcast ($uint<16>) (ifmaps[1 ][col_to_be_replaced_1] * filter[one][two]) )
  type_cast_733_inst <=> (assign_stmt_624_to_assign_stmt_924/type_cast_733_Sample/rr assign_stmt_624_to_assign_stmt_924/type_cast_733_Update/cr) (assign_stmt_624_to_assign_stmt_924/type_cast_733_Sample/ra assign_stmt_624_to_assign_stmt_924/type_cast_733_Update/ca)
  // 	pp22 := ($bitcast ($uint<16>) (ifmaps[2 ][col_to_be_replaced_1] * filter[two][two]) )// bits of buffering = 16. 
  //  file prog.linked.opt.aa, line 201
  // (ifmaps[2 ][col_to_be_replaced_1] * filter[two][two])
  // ifmaps[2 ][col_to_be_replaced_1]
  // col_to_be_replaced_1
  array_obj_ref_738_index_1_resize <=> (assign_stmt_624_to_assign_stmt_924/array_obj_ref_738_index_resize_1/index_resize_req) (assign_stmt_624_to_assign_stmt_924/array_obj_ref_738_index_resize_1/index_resize_ack)
  array_obj_ref_738_index_1_rename <=> (assign_stmt_624_to_assign_stmt_924/array_obj_ref_738_index_scale_1/scale_rename_req) (assign_stmt_624_to_assign_stmt_924/array_obj_ref_738_index_scale_1/scale_rename_ack)
  array_obj_ref_738_index_offset <=> (assign_stmt_624_to_assign_stmt_924/array_obj_ref_738_final_index_sum_regn_Sample/req assign_stmt_624_to_assign_stmt_924/array_obj_ref_738_final_index_sum_regn_Update/req) (assign_stmt_624_to_assign_stmt_924/array_obj_ref_738_final_index_sum_regn_Sample/ack assign_stmt_624_to_assign_stmt_924/array_obj_ref_738_final_index_sum_regn_Update/ack)
  array_obj_ref_738_root_address_inst <=> (assign_stmt_624_to_assign_stmt_924/array_obj_ref_738_base_plus_offset/sum_rename_req) (assign_stmt_624_to_assign_stmt_924/array_obj_ref_738_base_plus_offset/sum_rename_ack)
  array_obj_ref_738_addr_0 <=> (assign_stmt_624_to_assign_stmt_924/array_obj_ref_738_word_addrgen/root_register_req) (assign_stmt_624_to_assign_stmt_924/array_obj_ref_738_word_addrgen/root_register_ack)
  array_obj_ref_738_gather_scatter <=> (assign_stmt_624_to_assign_stmt_924/array_obj_ref_738_Update/array_obj_ref_738_Merge/merge_req) (assign_stmt_624_to_assign_stmt_924/array_obj_ref_738_Update/array_obj_ref_738_Merge/merge_ack)
  array_obj_ref_738_load_0 <=> (assign_stmt_624_to_assign_stmt_924/array_obj_ref_738_Sample/word_access_start/word_0/rr assign_stmt_624_to_assign_stmt_924/array_obj_ref_738_Update/word_access_complete/word_0/cr) (assign_stmt_624_to_assign_stmt_924/array_obj_ref_738_Sample/word_access_start/word_0/ra assign_stmt_624_to_assign_stmt_924/array_obj_ref_738_Update/word_access_complete/word_0/ca)
  // filter[two][two]
  array_obj_ref_741_gather_scatter <=> (assign_stmt_624_to_assign_stmt_924/array_obj_ref_741_Update/array_obj_ref_741_Merge/merge_req) (assign_stmt_624_to_assign_stmt_924/array_obj_ref_741_Update/array_obj_ref_741_Merge/merge_ack)
  array_obj_ref_741_load_0 <=> (assign_stmt_624_to_assign_stmt_924/array_obj_ref_741_Sample/word_access_start/word_0/rr assign_stmt_624_to_assign_stmt_924/array_obj_ref_741_Update/word_access_complete/word_0/cr) (assign_stmt_624_to_assign_stmt_924/array_obj_ref_741_Sample/word_access_start/word_0/ra assign_stmt_624_to_assign_stmt_924/array_obj_ref_741_Update/word_access_complete/word_0/ca)
  // ($bitcast ($uint<16>) (ifmaps[2 ][col_to_be_replaced_1] * filter[two][two]) )
  type_cast_743_inst <=> (assign_stmt_624_to_assign_stmt_924/type_cast_743_Sample/rr assign_stmt_624_to_assign_stmt_924/type_cast_743_Update/cr) (assign_stmt_624_to_assign_stmt_924/type_cast_743_Sample/ra assign_stmt_624_to_assign_stmt_924/type_cast_743_Update/ca)
  // 	pp32 := ($bitcast ($uint<16>) (ifmaps[3 ][col_to_be_replaced_1] * filter[three][two]) )// bits of buffering = 16. 
  //  file prog.linked.opt.aa, line 202
  // (ifmaps[3 ][col_to_be_replaced_1] * filter[three][two])
  // ifmaps[3 ][col_to_be_replaced_1]
  // col_to_be_replaced_1
  array_obj_ref_748_index_1_resize <=> (assign_stmt_624_to_assign_stmt_924/array_obj_ref_748_index_resize_1/index_resize_req) (assign_stmt_624_to_assign_stmt_924/array_obj_ref_748_index_resize_1/index_resize_ack)
  array_obj_ref_748_index_1_rename <=> (assign_stmt_624_to_assign_stmt_924/array_obj_ref_748_index_scale_1/scale_rename_req) (assign_stmt_624_to_assign_stmt_924/array_obj_ref_748_index_scale_1/scale_rename_ack)
  array_obj_ref_748_index_offset <=> (assign_stmt_624_to_assign_stmt_924/array_obj_ref_748_final_index_sum_regn_Sample/req assign_stmt_624_to_assign_stmt_924/array_obj_ref_748_final_index_sum_regn_Update/req) (assign_stmt_624_to_assign_stmt_924/array_obj_ref_748_final_index_sum_regn_Sample/ack assign_stmt_624_to_assign_stmt_924/array_obj_ref_748_final_index_sum_regn_Update/ack)
  array_obj_ref_748_root_address_inst <=> (assign_stmt_624_to_assign_stmt_924/array_obj_ref_748_base_plus_offset/sum_rename_req) (assign_stmt_624_to_assign_stmt_924/array_obj_ref_748_base_plus_offset/sum_rename_ack)
  array_obj_ref_748_addr_0 <=> (assign_stmt_624_to_assign_stmt_924/array_obj_ref_748_word_addrgen/root_register_req) (assign_stmt_624_to_assign_stmt_924/array_obj_ref_748_word_addrgen/root_register_ack)
  array_obj_ref_748_gather_scatter <=> (assign_stmt_624_to_assign_stmt_924/array_obj_ref_748_Update/array_obj_ref_748_Merge/merge_req) (assign_stmt_624_to_assign_stmt_924/array_obj_ref_748_Update/array_obj_ref_748_Merge/merge_ack)
  array_obj_ref_748_load_0 <=> (assign_stmt_624_to_assign_stmt_924/array_obj_ref_748_Sample/word_access_start/word_0/rr assign_stmt_624_to_assign_stmt_924/array_obj_ref_748_Update/word_access_complete/word_0/cr) (assign_stmt_624_to_assign_stmt_924/array_obj_ref_748_Sample/word_access_start/word_0/ra assign_stmt_624_to_assign_stmt_924/array_obj_ref_748_Update/word_access_complete/word_0/ca)
  // filter[three][two]
  array_obj_ref_751_gather_scatter <=> (assign_stmt_624_to_assign_stmt_924/array_obj_ref_751_Update/array_obj_ref_751_Merge/merge_req) (assign_stmt_624_to_assign_stmt_924/array_obj_ref_751_Update/array_obj_ref_751_Merge/merge_ack)
  array_obj_ref_751_load_0 <=> (assign_stmt_624_to_assign_stmt_924/array_obj_ref_751_Sample/word_access_start/word_0/rr assign_stmt_624_to_assign_stmt_924/array_obj_ref_751_Update/word_access_complete/word_0/cr) (assign_stmt_624_to_assign_stmt_924/array_obj_ref_751_Sample/word_access_start/word_0/ra assign_stmt_624_to_assign_stmt_924/array_obj_ref_751_Update/word_access_complete/word_0/ca)
  // ($bitcast ($uint<16>) (ifmaps[3 ][col_to_be_replaced_1] * filter[three][two]) )
  type_cast_753_inst <=> (assign_stmt_624_to_assign_stmt_924/type_cast_753_Sample/rr assign_stmt_624_to_assign_stmt_924/type_cast_753_Update/cr) (assign_stmt_624_to_assign_stmt_924/type_cast_753_Sample/ra assign_stmt_624_to_assign_stmt_924/type_cast_753_Update/ca)
  // 	pp01 := ($bitcast ($uint<16>) (ifmaps[0 ][col_to_be_replaced_2] * filter[zero][one]) )// bits of buffering = 16. 
  //  file prog.linked.opt.aa, line 203
  // (ifmaps[0 ][col_to_be_replaced_2] * filter[zero][one])
  // ifmaps[0 ][col_to_be_replaced_2]
  // col_to_be_replaced_2
  array_obj_ref_758_index_1_resize <=> (assign_stmt_624_to_assign_stmt_924/array_obj_ref_758_index_resize_1/index_resize_req) (assign_stmt_624_to_assign_stmt_924/array_obj_ref_758_index_resize_1/index_resize_ack)
  array_obj_ref_758_index_1_rename <=> (assign_stmt_624_to_assign_stmt_924/array_obj_ref_758_index_scale_1/scale_rename_req) (assign_stmt_624_to_assign_stmt_924/array_obj_ref_758_index_scale_1/scale_rename_ack)
  array_obj_ref_758_index_offset <=> (assign_stmt_624_to_assign_stmt_924/array_obj_ref_758_final_index_sum_regn_Sample/req assign_stmt_624_to_assign_stmt_924/array_obj_ref_758_final_index_sum_regn_Update/req) (assign_stmt_624_to_assign_stmt_924/array_obj_ref_758_final_index_sum_regn_Sample/ack assign_stmt_624_to_assign_stmt_924/array_obj_ref_758_final_index_sum_regn_Update/ack)
  array_obj_ref_758_root_address_inst <=> (assign_stmt_624_to_assign_stmt_924/array_obj_ref_758_base_plus_offset/sum_rename_req) (assign_stmt_624_to_assign_stmt_924/array_obj_ref_758_base_plus_offset/sum_rename_ack)
  array_obj_ref_758_addr_0 <=> (assign_stmt_624_to_assign_stmt_924/array_obj_ref_758_word_addrgen/root_register_req) (assign_stmt_624_to_assign_stmt_924/array_obj_ref_758_word_addrgen/root_register_ack)
  array_obj_ref_758_gather_scatter <=> (assign_stmt_624_to_assign_stmt_924/array_obj_ref_758_Update/array_obj_ref_758_Merge/merge_req) (assign_stmt_624_to_assign_stmt_924/array_obj_ref_758_Update/array_obj_ref_758_Merge/merge_ack)
  array_obj_ref_758_load_0 <=> (assign_stmt_624_to_assign_stmt_924/array_obj_ref_758_Sample/word_access_start/word_0/rr assign_stmt_624_to_assign_stmt_924/array_obj_ref_758_Update/word_access_complete/word_0/cr) (assign_stmt_624_to_assign_stmt_924/array_obj_ref_758_Sample/word_access_start/word_0/ra assign_stmt_624_to_assign_stmt_924/array_obj_ref_758_Update/word_access_complete/word_0/ca)
  // filter[zero][one]
  array_obj_ref_761_gather_scatter <=> (assign_stmt_624_to_assign_stmt_924/array_obj_ref_761_Update/array_obj_ref_761_Merge/merge_req) (assign_stmt_624_to_assign_stmt_924/array_obj_ref_761_Update/array_obj_ref_761_Merge/merge_ack)
  array_obj_ref_761_load_0 <=> (assign_stmt_624_to_assign_stmt_924/array_obj_ref_761_Sample/word_access_start/word_0/rr assign_stmt_624_to_assign_stmt_924/array_obj_ref_761_Update/word_access_complete/word_0/cr) (assign_stmt_624_to_assign_stmt_924/array_obj_ref_761_Sample/word_access_start/word_0/ra assign_stmt_624_to_assign_stmt_924/array_obj_ref_761_Update/word_access_complete/word_0/ca)
  // ($bitcast ($uint<16>) (ifmaps[0 ][col_to_be_replaced_2] * filter[zero][one]) )
  type_cast_763_inst <=> (assign_stmt_624_to_assign_stmt_924/type_cast_763_Sample/rr assign_stmt_624_to_assign_stmt_924/type_cast_763_Update/cr) (assign_stmt_624_to_assign_stmt_924/type_cast_763_Sample/ra assign_stmt_624_to_assign_stmt_924/type_cast_763_Update/ca)
  // 	pp11 := ($bitcast ($uint<16>) (ifmaps[1 ][col_to_be_replaced_2] * filter[one][one]) )// bits of buffering = 16. 
  //  file prog.linked.opt.aa, line 204
  // (ifmaps[1 ][col_to_be_replaced_2] * filter[one][one])
  // ifmaps[1 ][col_to_be_replaced_2]
  // col_to_be_replaced_2
  array_obj_ref_768_index_1_resize <=> (assign_stmt_624_to_assign_stmt_924/array_obj_ref_768_index_resize_1/index_resize_req) (assign_stmt_624_to_assign_stmt_924/array_obj_ref_768_index_resize_1/index_resize_ack)
  array_obj_ref_768_index_1_rename <=> (assign_stmt_624_to_assign_stmt_924/array_obj_ref_768_index_scale_1/scale_rename_req) (assign_stmt_624_to_assign_stmt_924/array_obj_ref_768_index_scale_1/scale_rename_ack)
  array_obj_ref_768_index_offset <=> (assign_stmt_624_to_assign_stmt_924/array_obj_ref_768_final_index_sum_regn_Sample/req assign_stmt_624_to_assign_stmt_924/array_obj_ref_768_final_index_sum_regn_Update/req) (assign_stmt_624_to_assign_stmt_924/array_obj_ref_768_final_index_sum_regn_Sample/ack assign_stmt_624_to_assign_stmt_924/array_obj_ref_768_final_index_sum_regn_Update/ack)
  array_obj_ref_768_root_address_inst <=> (assign_stmt_624_to_assign_stmt_924/array_obj_ref_768_base_plus_offset/sum_rename_req) (assign_stmt_624_to_assign_stmt_924/array_obj_ref_768_base_plus_offset/sum_rename_ack)
  array_obj_ref_768_addr_0 <=> (assign_stmt_624_to_assign_stmt_924/array_obj_ref_768_word_addrgen/root_register_req) (assign_stmt_624_to_assign_stmt_924/array_obj_ref_768_word_addrgen/root_register_ack)
  array_obj_ref_768_gather_scatter <=> (assign_stmt_624_to_assign_stmt_924/array_obj_ref_768_Update/array_obj_ref_768_Merge/merge_req) (assign_stmt_624_to_assign_stmt_924/array_obj_ref_768_Update/array_obj_ref_768_Merge/merge_ack)
  array_obj_ref_768_load_0 <=> (assign_stmt_624_to_assign_stmt_924/array_obj_ref_768_Sample/word_access_start/word_0/rr assign_stmt_624_to_assign_stmt_924/array_obj_ref_768_Update/word_access_complete/word_0/cr) (assign_stmt_624_to_assign_stmt_924/array_obj_ref_768_Sample/word_access_start/word_0/ra assign_stmt_624_to_assign_stmt_924/array_obj_ref_768_Update/word_access_complete/word_0/ca)
  // filter[one][one]
  array_obj_ref_771_gather_scatter <=> (assign_stmt_624_to_assign_stmt_924/array_obj_ref_771_Update/array_obj_ref_771_Merge/merge_req) (assign_stmt_624_to_assign_stmt_924/array_obj_ref_771_Update/array_obj_ref_771_Merge/merge_ack)
  array_obj_ref_771_load_0 <=> (assign_stmt_624_to_assign_stmt_924/array_obj_ref_771_Sample/word_access_start/word_0/rr assign_stmt_624_to_assign_stmt_924/array_obj_ref_771_Update/word_access_complete/word_0/cr) (assign_stmt_624_to_assign_stmt_924/array_obj_ref_771_Sample/word_access_start/word_0/ra assign_stmt_624_to_assign_stmt_924/array_obj_ref_771_Update/word_access_complete/word_0/ca)
  // ($bitcast ($uint<16>) (ifmaps[1 ][col_to_be_replaced_2] * filter[one][one]) )
  type_cast_773_inst <=> (assign_stmt_624_to_assign_stmt_924/type_cast_773_Sample/rr assign_stmt_624_to_assign_stmt_924/type_cast_773_Update/cr) (assign_stmt_624_to_assign_stmt_924/type_cast_773_Sample/ra assign_stmt_624_to_assign_stmt_924/type_cast_773_Update/ca)
  // 	pp21 := ($bitcast ($uint<16>) (ifmaps[2 ][col_to_be_replaced_2] * filter[two][one]) )// bits of buffering = 16. 
  //  file prog.linked.opt.aa, line 205
  // (ifmaps[2 ][col_to_be_replaced_2] * filter[two][one])
  // ifmaps[2 ][col_to_be_replaced_2]
  // col_to_be_replaced_2
  array_obj_ref_778_index_1_resize <=> (assign_stmt_624_to_assign_stmt_924/array_obj_ref_778_index_resize_1/index_resize_req) (assign_stmt_624_to_assign_stmt_924/array_obj_ref_778_index_resize_1/index_resize_ack)
  array_obj_ref_778_index_1_rename <=> (assign_stmt_624_to_assign_stmt_924/array_obj_ref_778_index_scale_1/scale_rename_req) (assign_stmt_624_to_assign_stmt_924/array_obj_ref_778_index_scale_1/scale_rename_ack)
  array_obj_ref_778_index_offset <=> (assign_stmt_624_to_assign_stmt_924/array_obj_ref_778_final_index_sum_regn_Sample/req assign_stmt_624_to_assign_stmt_924/array_obj_ref_778_final_index_sum_regn_Update/req) (assign_stmt_624_to_assign_stmt_924/array_obj_ref_778_final_index_sum_regn_Sample/ack assign_stmt_624_to_assign_stmt_924/array_obj_ref_778_final_index_sum_regn_Update/ack)
  array_obj_ref_778_root_address_inst <=> (assign_stmt_624_to_assign_stmt_924/array_obj_ref_778_base_plus_offset/sum_rename_req) (assign_stmt_624_to_assign_stmt_924/array_obj_ref_778_base_plus_offset/sum_rename_ack)
  array_obj_ref_778_addr_0 <=> (assign_stmt_624_to_assign_stmt_924/array_obj_ref_778_word_addrgen/root_register_req) (assign_stmt_624_to_assign_stmt_924/array_obj_ref_778_word_addrgen/root_register_ack)
  array_obj_ref_778_gather_scatter <=> (assign_stmt_624_to_assign_stmt_924/array_obj_ref_778_Update/array_obj_ref_778_Merge/merge_req) (assign_stmt_624_to_assign_stmt_924/array_obj_ref_778_Update/array_obj_ref_778_Merge/merge_ack)
  array_obj_ref_778_load_0 <=> (assign_stmt_624_to_assign_stmt_924/array_obj_ref_778_Sample/word_access_start/word_0/rr assign_stmt_624_to_assign_stmt_924/array_obj_ref_778_Update/word_access_complete/word_0/cr) (assign_stmt_624_to_assign_stmt_924/array_obj_ref_778_Sample/word_access_start/word_0/ra assign_stmt_624_to_assign_stmt_924/array_obj_ref_778_Update/word_access_complete/word_0/ca)
  // filter[two][one]
  array_obj_ref_781_gather_scatter <=> (assign_stmt_624_to_assign_stmt_924/array_obj_ref_781_Update/array_obj_ref_781_Merge/merge_req) (assign_stmt_624_to_assign_stmt_924/array_obj_ref_781_Update/array_obj_ref_781_Merge/merge_ack)
  array_obj_ref_781_load_0 <=> (assign_stmt_624_to_assign_stmt_924/array_obj_ref_781_Sample/word_access_start/word_0/rr assign_stmt_624_to_assign_stmt_924/array_obj_ref_781_Update/word_access_complete/word_0/cr) (assign_stmt_624_to_assign_stmt_924/array_obj_ref_781_Sample/word_access_start/word_0/ra assign_stmt_624_to_assign_stmt_924/array_obj_ref_781_Update/word_access_complete/word_0/ca)
  // ($bitcast ($uint<16>) (ifmaps[2 ][col_to_be_replaced_2] * filter[two][one]) )
  type_cast_783_inst <=> (assign_stmt_624_to_assign_stmt_924/type_cast_783_Sample/rr assign_stmt_624_to_assign_stmt_924/type_cast_783_Update/cr) (assign_stmt_624_to_assign_stmt_924/type_cast_783_Sample/ra assign_stmt_624_to_assign_stmt_924/type_cast_783_Update/ca)
  // 	pp31 := ($bitcast ($uint<16>) (ifmaps[3 ][col_to_be_replaced_2] * filter[three][one]) )// bits of buffering = 16. 
  //  file prog.linked.opt.aa, line 206
  // (ifmaps[3 ][col_to_be_replaced_2] * filter[three][one])
  // ifmaps[3 ][col_to_be_replaced_2]
  // col_to_be_replaced_2
  array_obj_ref_788_index_1_resize <=> (assign_stmt_624_to_assign_stmt_924/array_obj_ref_788_index_resize_1/index_resize_req) (assign_stmt_624_to_assign_stmt_924/array_obj_ref_788_index_resize_1/index_resize_ack)
  array_obj_ref_788_index_1_rename <=> (assign_stmt_624_to_assign_stmt_924/array_obj_ref_788_index_scale_1/scale_rename_req) (assign_stmt_624_to_assign_stmt_924/array_obj_ref_788_index_scale_1/scale_rename_ack)
  array_obj_ref_788_index_offset <=> (assign_stmt_624_to_assign_stmt_924/array_obj_ref_788_final_index_sum_regn_Sample/req assign_stmt_624_to_assign_stmt_924/array_obj_ref_788_final_index_sum_regn_Update/req) (assign_stmt_624_to_assign_stmt_924/array_obj_ref_788_final_index_sum_regn_Sample/ack assign_stmt_624_to_assign_stmt_924/array_obj_ref_788_final_index_sum_regn_Update/ack)
  array_obj_ref_788_root_address_inst <=> (assign_stmt_624_to_assign_stmt_924/array_obj_ref_788_base_plus_offset/sum_rename_req) (assign_stmt_624_to_assign_stmt_924/array_obj_ref_788_base_plus_offset/sum_rename_ack)
  array_obj_ref_788_addr_0 <=> (assign_stmt_624_to_assign_stmt_924/array_obj_ref_788_word_addrgen/root_register_req) (assign_stmt_624_to_assign_stmt_924/array_obj_ref_788_word_addrgen/root_register_ack)
  array_obj_ref_788_gather_scatter <=> (assign_stmt_624_to_assign_stmt_924/array_obj_ref_788_Update/array_obj_ref_788_Merge/merge_req) (assign_stmt_624_to_assign_stmt_924/array_obj_ref_788_Update/array_obj_ref_788_Merge/merge_ack)
  array_obj_ref_788_load_0 <=> (assign_stmt_624_to_assign_stmt_924/array_obj_ref_788_Sample/word_access_start/word_0/rr assign_stmt_624_to_assign_stmt_924/array_obj_ref_788_Update/word_access_complete/word_0/cr) (assign_stmt_624_to_assign_stmt_924/array_obj_ref_788_Sample/word_access_start/word_0/ra assign_stmt_624_to_assign_stmt_924/array_obj_ref_788_Update/word_access_complete/word_0/ca)
  // filter[three][one]
  array_obj_ref_791_gather_scatter <=> (assign_stmt_624_to_assign_stmt_924/array_obj_ref_791_Update/array_obj_ref_791_Merge/merge_req) (assign_stmt_624_to_assign_stmt_924/array_obj_ref_791_Update/array_obj_ref_791_Merge/merge_ack)
  array_obj_ref_791_load_0 <=> (assign_stmt_624_to_assign_stmt_924/array_obj_ref_791_Sample/word_access_start/word_0/rr assign_stmt_624_to_assign_stmt_924/array_obj_ref_791_Update/word_access_complete/word_0/cr) (assign_stmt_624_to_assign_stmt_924/array_obj_ref_791_Sample/word_access_start/word_0/ra assign_stmt_624_to_assign_stmt_924/array_obj_ref_791_Update/word_access_complete/word_0/ca)
  // ($bitcast ($uint<16>) (ifmaps[3 ][col_to_be_replaced_2] * filter[three][one]) )
  type_cast_793_inst <=> (assign_stmt_624_to_assign_stmt_924/type_cast_793_Sample/rr assign_stmt_624_to_assign_stmt_924/type_cast_793_Update/cr) (assign_stmt_624_to_assign_stmt_924/type_cast_793_Sample/ra assign_stmt_624_to_assign_stmt_924/type_cast_793_Update/ca)
  // 	pp00 := ($bitcast ($uint<16>) (ifmaps[0 ][col_to_be_replaced_3] * filter[zero][zero]) )// bits of buffering = 16. 
  //  file prog.linked.opt.aa, line 207
  // (ifmaps[0 ][col_to_be_replaced_3] * filter[zero][zero])
  // ifmaps[0 ][col_to_be_replaced_3]
  // col_to_be_replaced_3
  array_obj_ref_798_index_1_resize <=> (assign_stmt_624_to_assign_stmt_924/array_obj_ref_798_index_resize_1/index_resize_req) (assign_stmt_624_to_assign_stmt_924/array_obj_ref_798_index_resize_1/index_resize_ack)
  array_obj_ref_798_index_1_rename <=> (assign_stmt_624_to_assign_stmt_924/array_obj_ref_798_index_scale_1/scale_rename_req) (assign_stmt_624_to_assign_stmt_924/array_obj_ref_798_index_scale_1/scale_rename_ack)
  array_obj_ref_798_index_offset <=> (assign_stmt_624_to_assign_stmt_924/array_obj_ref_798_final_index_sum_regn_Sample/req assign_stmt_624_to_assign_stmt_924/array_obj_ref_798_final_index_sum_regn_Update/req) (assign_stmt_624_to_assign_stmt_924/array_obj_ref_798_final_index_sum_regn_Sample/ack assign_stmt_624_to_assign_stmt_924/array_obj_ref_798_final_index_sum_regn_Update/ack)
  array_obj_ref_798_root_address_inst <=> (assign_stmt_624_to_assign_stmt_924/array_obj_ref_798_base_plus_offset/sum_rename_req) (assign_stmt_624_to_assign_stmt_924/array_obj_ref_798_base_plus_offset/sum_rename_ack)
  array_obj_ref_798_addr_0 <=> (assign_stmt_624_to_assign_stmt_924/array_obj_ref_798_word_addrgen/root_register_req) (assign_stmt_624_to_assign_stmt_924/array_obj_ref_798_word_addrgen/root_register_ack)
  array_obj_ref_798_gather_scatter <=> (assign_stmt_624_to_assign_stmt_924/array_obj_ref_798_Update/array_obj_ref_798_Merge/merge_req) (assign_stmt_624_to_assign_stmt_924/array_obj_ref_798_Update/array_obj_ref_798_Merge/merge_ack)
  array_obj_ref_798_load_0 <=> (assign_stmt_624_to_assign_stmt_924/array_obj_ref_798_Sample/word_access_start/word_0/rr assign_stmt_624_to_assign_stmt_924/array_obj_ref_798_Update/word_access_complete/word_0/cr) (assign_stmt_624_to_assign_stmt_924/array_obj_ref_798_Sample/word_access_start/word_0/ra assign_stmt_624_to_assign_stmt_924/array_obj_ref_798_Update/word_access_complete/word_0/ca)
  // filter[zero][zero]
  array_obj_ref_801_gather_scatter <=> (assign_stmt_624_to_assign_stmt_924/array_obj_ref_801_Update/array_obj_ref_801_Merge/merge_req) (assign_stmt_624_to_assign_stmt_924/array_obj_ref_801_Update/array_obj_ref_801_Merge/merge_ack)
  array_obj_ref_801_load_0 <=> (assign_stmt_624_to_assign_stmt_924/array_obj_ref_801_Sample/word_access_start/word_0/rr assign_stmt_624_to_assign_stmt_924/array_obj_ref_801_Update/word_access_complete/word_0/cr) (assign_stmt_624_to_assign_stmt_924/array_obj_ref_801_Sample/word_access_start/word_0/ra assign_stmt_624_to_assign_stmt_924/array_obj_ref_801_Update/word_access_complete/word_0/ca)
  // ($bitcast ($uint<16>) (ifmaps[0 ][col_to_be_replaced_3] * filter[zero][zero]) )
  type_cast_803_inst <=> (assign_stmt_624_to_assign_stmt_924/type_cast_803_Sample/rr assign_stmt_624_to_assign_stmt_924/type_cast_803_Update/cr) (assign_stmt_624_to_assign_stmt_924/type_cast_803_Sample/ra assign_stmt_624_to_assign_stmt_924/type_cast_803_Update/ca)
  // 	pp10 := ($bitcast ($uint<16>) (ifmaps[1 ][col_to_be_replaced_3] * filter[one][zero]) )// bits of buffering = 16. 
  //  file prog.linked.opt.aa, line 208
  // (ifmaps[1 ][col_to_be_replaced_3] * filter[one][zero])
  // ifmaps[1 ][col_to_be_replaced_3]
  // col_to_be_replaced_3
  array_obj_ref_808_index_1_resize <=> (assign_stmt_624_to_assign_stmt_924/array_obj_ref_808_index_resize_1/index_resize_req) (assign_stmt_624_to_assign_stmt_924/array_obj_ref_808_index_resize_1/index_resize_ack)
  array_obj_ref_808_index_1_rename <=> (assign_stmt_624_to_assign_stmt_924/array_obj_ref_808_index_scale_1/scale_rename_req) (assign_stmt_624_to_assign_stmt_924/array_obj_ref_808_index_scale_1/scale_rename_ack)
  array_obj_ref_808_index_offset <=> (assign_stmt_624_to_assign_stmt_924/array_obj_ref_808_final_index_sum_regn_Sample/req assign_stmt_624_to_assign_stmt_924/array_obj_ref_808_final_index_sum_regn_Update/req) (assign_stmt_624_to_assign_stmt_924/array_obj_ref_808_final_index_sum_regn_Sample/ack assign_stmt_624_to_assign_stmt_924/array_obj_ref_808_final_index_sum_regn_Update/ack)
  array_obj_ref_808_root_address_inst <=> (assign_stmt_624_to_assign_stmt_924/array_obj_ref_808_base_plus_offset/sum_rename_req) (assign_stmt_624_to_assign_stmt_924/array_obj_ref_808_base_plus_offset/sum_rename_ack)
  array_obj_ref_808_addr_0 <=> (assign_stmt_624_to_assign_stmt_924/array_obj_ref_808_word_addrgen/root_register_req) (assign_stmt_624_to_assign_stmt_924/array_obj_ref_808_word_addrgen/root_register_ack)
  array_obj_ref_808_gather_scatter <=> (assign_stmt_624_to_assign_stmt_924/array_obj_ref_808_Update/array_obj_ref_808_Merge/merge_req) (assign_stmt_624_to_assign_stmt_924/array_obj_ref_808_Update/array_obj_ref_808_Merge/merge_ack)
  array_obj_ref_808_load_0 <=> (assign_stmt_624_to_assign_stmt_924/array_obj_ref_808_Sample/word_access_start/word_0/rr assign_stmt_624_to_assign_stmt_924/array_obj_ref_808_Update/word_access_complete/word_0/cr) (assign_stmt_624_to_assign_stmt_924/array_obj_ref_808_Sample/word_access_start/word_0/ra assign_stmt_624_to_assign_stmt_924/array_obj_ref_808_Update/word_access_complete/word_0/ca)
  // filter[one][zero]
  array_obj_ref_811_gather_scatter <=> (assign_stmt_624_to_assign_stmt_924/array_obj_ref_811_Update/array_obj_ref_811_Merge/merge_req) (assign_stmt_624_to_assign_stmt_924/array_obj_ref_811_Update/array_obj_ref_811_Merge/merge_ack)
  array_obj_ref_811_load_0 <=> (assign_stmt_624_to_assign_stmt_924/array_obj_ref_811_Sample/word_access_start/word_0/rr assign_stmt_624_to_assign_stmt_924/array_obj_ref_811_Update/word_access_complete/word_0/cr) (assign_stmt_624_to_assign_stmt_924/array_obj_ref_811_Sample/word_access_start/word_0/ra assign_stmt_624_to_assign_stmt_924/array_obj_ref_811_Update/word_access_complete/word_0/ca)
  // ($bitcast ($uint<16>) (ifmaps[1 ][col_to_be_replaced_3] * filter[one][zero]) )
  type_cast_813_inst <=> (assign_stmt_624_to_assign_stmt_924/type_cast_813_Sample/rr assign_stmt_624_to_assign_stmt_924/type_cast_813_Update/cr) (assign_stmt_624_to_assign_stmt_924/type_cast_813_Sample/ra assign_stmt_624_to_assign_stmt_924/type_cast_813_Update/ca)
  // 	pp20 := ($bitcast ($uint<16>) (ifmaps[2 ][col_to_be_replaced_3] * filter[two][zero]) )// bits of buffering = 16. 
  //  file prog.linked.opt.aa, line 209
  // (ifmaps[2 ][col_to_be_replaced_3] * filter[two][zero])
  // ifmaps[2 ][col_to_be_replaced_3]
  // col_to_be_replaced_3
  array_obj_ref_818_index_1_resize <=> (assign_stmt_624_to_assign_stmt_924/array_obj_ref_818_index_resize_1/index_resize_req) (assign_stmt_624_to_assign_stmt_924/array_obj_ref_818_index_resize_1/index_resize_ack)
  array_obj_ref_818_index_1_rename <=> (assign_stmt_624_to_assign_stmt_924/array_obj_ref_818_index_scale_1/scale_rename_req) (assign_stmt_624_to_assign_stmt_924/array_obj_ref_818_index_scale_1/scale_rename_ack)
  array_obj_ref_818_index_offset <=> (assign_stmt_624_to_assign_stmt_924/array_obj_ref_818_final_index_sum_regn_Sample/req assign_stmt_624_to_assign_stmt_924/array_obj_ref_818_final_index_sum_regn_Update/req) (assign_stmt_624_to_assign_stmt_924/array_obj_ref_818_final_index_sum_regn_Sample/ack assign_stmt_624_to_assign_stmt_924/array_obj_ref_818_final_index_sum_regn_Update/ack)
  array_obj_ref_818_root_address_inst <=> (assign_stmt_624_to_assign_stmt_924/array_obj_ref_818_base_plus_offset/sum_rename_req) (assign_stmt_624_to_assign_stmt_924/array_obj_ref_818_base_plus_offset/sum_rename_ack)
  array_obj_ref_818_addr_0 <=> (assign_stmt_624_to_assign_stmt_924/array_obj_ref_818_word_addrgen/root_register_req) (assign_stmt_624_to_assign_stmt_924/array_obj_ref_818_word_addrgen/root_register_ack)
  array_obj_ref_818_gather_scatter <=> (assign_stmt_624_to_assign_stmt_924/array_obj_ref_818_Update/array_obj_ref_818_Merge/merge_req) (assign_stmt_624_to_assign_stmt_924/array_obj_ref_818_Update/array_obj_ref_818_Merge/merge_ack)
  array_obj_ref_818_load_0 <=> (assign_stmt_624_to_assign_stmt_924/array_obj_ref_818_Sample/word_access_start/word_0/rr assign_stmt_624_to_assign_stmt_924/array_obj_ref_818_Update/word_access_complete/word_0/cr) (assign_stmt_624_to_assign_stmt_924/array_obj_ref_818_Sample/word_access_start/word_0/ra assign_stmt_624_to_assign_stmt_924/array_obj_ref_818_Update/word_access_complete/word_0/ca)
  // filter[two][zero]
  array_obj_ref_821_gather_scatter <=> (assign_stmt_624_to_assign_stmt_924/array_obj_ref_821_Update/array_obj_ref_821_Merge/merge_req) (assign_stmt_624_to_assign_stmt_924/array_obj_ref_821_Update/array_obj_ref_821_Merge/merge_ack)
  array_obj_ref_821_load_0 <=> (assign_stmt_624_to_assign_stmt_924/array_obj_ref_821_Sample/word_access_start/word_0/rr assign_stmt_624_to_assign_stmt_924/array_obj_ref_821_Update/word_access_complete/word_0/cr) (assign_stmt_624_to_assign_stmt_924/array_obj_ref_821_Sample/word_access_start/word_0/ra assign_stmt_624_to_assign_stmt_924/array_obj_ref_821_Update/word_access_complete/word_0/ca)
  // ($bitcast ($uint<16>) (ifmaps[2 ][col_to_be_replaced_3] * filter[two][zero]) )
  type_cast_823_inst <=> (assign_stmt_624_to_assign_stmt_924/type_cast_823_Sample/rr assign_stmt_624_to_assign_stmt_924/type_cast_823_Update/cr) (assign_stmt_624_to_assign_stmt_924/type_cast_823_Sample/ra assign_stmt_624_to_assign_stmt_924/type_cast_823_Update/ca)
  // 	pp30 := ($bitcast ($uint<16>) (ifmaps[3 ][col_to_be_replaced_3] * filter[three][zero]) )// bits of buffering = 16. 
  //  file prog.linked.opt.aa, line 210
  // (ifmaps[3 ][col_to_be_replaced_3] * filter[three][zero])
  // ifmaps[3 ][col_to_be_replaced_3]
  // col_to_be_replaced_3
  array_obj_ref_828_index_1_resize <=> (assign_stmt_624_to_assign_stmt_924/array_obj_ref_828_index_resize_1/index_resize_req) (assign_stmt_624_to_assign_stmt_924/array_obj_ref_828_index_resize_1/index_resize_ack)
  array_obj_ref_828_index_1_rename <=> (assign_stmt_624_to_assign_stmt_924/array_obj_ref_828_index_scale_1/scale_rename_req) (assign_stmt_624_to_assign_stmt_924/array_obj_ref_828_index_scale_1/scale_rename_ack)
  array_obj_ref_828_index_offset <=> (assign_stmt_624_to_assign_stmt_924/array_obj_ref_828_final_index_sum_regn_Sample/req assign_stmt_624_to_assign_stmt_924/array_obj_ref_828_final_index_sum_regn_Update/req) (assign_stmt_624_to_assign_stmt_924/array_obj_ref_828_final_index_sum_regn_Sample/ack assign_stmt_624_to_assign_stmt_924/array_obj_ref_828_final_index_sum_regn_Update/ack)
  array_obj_ref_828_root_address_inst <=> (assign_stmt_624_to_assign_stmt_924/array_obj_ref_828_base_plus_offset/sum_rename_req) (assign_stmt_624_to_assign_stmt_924/array_obj_ref_828_base_plus_offset/sum_rename_ack)
  array_obj_ref_828_addr_0 <=> (assign_stmt_624_to_assign_stmt_924/array_obj_ref_828_word_addrgen/root_register_req) (assign_stmt_624_to_assign_stmt_924/array_obj_ref_828_word_addrgen/root_register_ack)
  array_obj_ref_828_gather_scatter <=> (assign_stmt_624_to_assign_stmt_924/array_obj_ref_828_Update/array_obj_ref_828_Merge/merge_req) (assign_stmt_624_to_assign_stmt_924/array_obj_ref_828_Update/array_obj_ref_828_Merge/merge_ack)
  array_obj_ref_828_load_0 <=> (assign_stmt_624_to_assign_stmt_924/array_obj_ref_828_Sample/word_access_start/word_0/rr assign_stmt_624_to_assign_stmt_924/array_obj_ref_828_Update/word_access_complete/word_0/cr) (assign_stmt_624_to_assign_stmt_924/array_obj_ref_828_Sample/word_access_start/word_0/ra assign_stmt_624_to_assign_stmt_924/array_obj_ref_828_Update/word_access_complete/word_0/ca)
  // filter[three][zero]
  array_obj_ref_831_gather_scatter <=> (assign_stmt_624_to_assign_stmt_924/array_obj_ref_831_Update/array_obj_ref_831_Merge/merge_req) (assign_stmt_624_to_assign_stmt_924/array_obj_ref_831_Update/array_obj_ref_831_Merge/merge_ack)
  array_obj_ref_831_load_0 <=> (assign_stmt_624_to_assign_stmt_924/array_obj_ref_831_Sample/word_access_start/word_0/rr assign_stmt_624_to_assign_stmt_924/array_obj_ref_831_Update/word_access_complete/word_0/cr) (assign_stmt_624_to_assign_stmt_924/array_obj_ref_831_Sample/word_access_start/word_0/ra assign_stmt_624_to_assign_stmt_924/array_obj_ref_831_Update/word_access_complete/word_0/ca)
  // ($bitcast ($uint<16>) (ifmaps[3 ][col_to_be_replaced_3] * filter[three][zero]) )
  type_cast_833_inst <=> (assign_stmt_624_to_assign_stmt_924/type_cast_833_Sample/rr assign_stmt_624_to_assign_stmt_924/type_cast_833_Update/cr) (assign_stmt_624_to_assign_stmt_924/type_cast_833_Sample/ra assign_stmt_624_to_assign_stmt_924/type_cast_833_Update/ca)
  // 	sum0 := ($bitcast ($uint<16>) (pp00 + pp01) )// bits of buffering = 16. 
  //  file prog.linked.opt.aa, line 211
  // (pp00 + pp01)
  // pp00
  // pp01
  // ($bitcast ($uint<16>) (pp00 + pp01) )
  type_cast_839_inst <=> (assign_stmt_624_to_assign_stmt_924/type_cast_839_Sample/rr assign_stmt_624_to_assign_stmt_924/type_cast_839_Update/cr) (assign_stmt_624_to_assign_stmt_924/type_cast_839_Sample/ra assign_stmt_624_to_assign_stmt_924/type_cast_839_Update/ca)
  // 	sum1 := ($bitcast ($uint<16>) (pp02 + pp03) )// bits of buffering = 16. 
  //  file prog.linked.opt.aa, line 212
  // (pp02 + pp03)
  // pp02
  // pp03
  // ($bitcast ($uint<16>) (pp02 + pp03) )
  type_cast_845_inst <=> (assign_stmt_624_to_assign_stmt_924/type_cast_845_Sample/rr assign_stmt_624_to_assign_stmt_924/type_cast_845_Update/cr) (assign_stmt_624_to_assign_stmt_924/type_cast_845_Sample/ra assign_stmt_624_to_assign_stmt_924/type_cast_845_Update/ca)
  // 	sum2 := ($bitcast ($uint<16>) (pp10 + pp11) )// bits of buffering = 16. 
  //  file prog.linked.opt.aa, line 213
  // (pp10 + pp11)
  // pp10
  // pp11
  // ($bitcast ($uint<16>) (pp10 + pp11) )
  type_cast_851_inst <=> (assign_stmt_624_to_assign_stmt_924/type_cast_851_Sample/rr assign_stmt_624_to_assign_stmt_924/type_cast_851_Update/cr) (assign_stmt_624_to_assign_stmt_924/type_cast_851_Sample/ra assign_stmt_624_to_assign_stmt_924/type_cast_851_Update/ca)
  // 	sum3 := ($bitcast ($uint<16>) (pp12 + pp13) )// bits of buffering = 16. 
  //  file prog.linked.opt.aa, line 214
  // (pp12 + pp13)
  // pp12
  // pp13
  // ($bitcast ($uint<16>) (pp12 + pp13) )
  type_cast_857_inst <=> (assign_stmt_624_to_assign_stmt_924/type_cast_857_Sample/rr assign_stmt_624_to_assign_stmt_924/type_cast_857_Update/cr) (assign_stmt_624_to_assign_stmt_924/type_cast_857_Sample/ra assign_stmt_624_to_assign_stmt_924/type_cast_857_Update/ca)
  // 	sum4 := ($bitcast ($uint<16>) (pp20 + pp21) )// bits of buffering = 16. 
  //  file prog.linked.opt.aa, line 215
  // (pp20 + pp21)
  // pp20
  // pp21
  // ($bitcast ($uint<16>) (pp20 + pp21) )
  type_cast_863_inst <=> (assign_stmt_624_to_assign_stmt_924/type_cast_863_Sample/rr assign_stmt_624_to_assign_stmt_924/type_cast_863_Update/cr) (assign_stmt_624_to_assign_stmt_924/type_cast_863_Sample/ra assign_stmt_624_to_assign_stmt_924/type_cast_863_Update/ca)
  // 	sum5 := ($bitcast ($uint<16>) (pp22 + pp23) )// bits of buffering = 16. 
  //  file prog.linked.opt.aa, line 216
  // (pp22 + pp23)
  // pp22
  // pp23
  // ($bitcast ($uint<16>) (pp22 + pp23) )
  type_cast_869_inst <=> (assign_stmt_624_to_assign_stmt_924/type_cast_869_Sample/rr assign_stmt_624_to_assign_stmt_924/type_cast_869_Update/cr) (assign_stmt_624_to_assign_stmt_924/type_cast_869_Sample/ra assign_stmt_624_to_assign_stmt_924/type_cast_869_Update/ca)
  // 	sum6 := ($bitcast ($uint<16>) (pp30 + pp31) )// bits of buffering = 16. 
  //  file prog.linked.opt.aa, line 217
  // (pp30 + pp31)
  // pp30
  // pp31
  // ($bitcast ($uint<16>) (pp30 + pp31) )
  type_cast_875_inst <=> (assign_stmt_624_to_assign_stmt_924/type_cast_875_Sample/rr assign_stmt_624_to_assign_stmt_924/type_cast_875_Update/cr) (assign_stmt_624_to_assign_stmt_924/type_cast_875_Sample/ra assign_stmt_624_to_assign_stmt_924/type_cast_875_Update/ca)
  // 	sum7 := ($bitcast ($uint<16>) (pp32 + pp33) )// bits of buffering = 16. 
  //  file prog.linked.opt.aa, line 218
  // (pp32 + pp33)
  // pp32
  // pp33
  // ($bitcast ($uint<16>) (pp32 + pp33) )
  type_cast_881_inst <=> (assign_stmt_624_to_assign_stmt_924/type_cast_881_Sample/rr assign_stmt_624_to_assign_stmt_924/type_cast_881_Update/cr) (assign_stmt_624_to_assign_stmt_924/type_cast_881_Sample/ra assign_stmt_624_to_assign_stmt_924/type_cast_881_Update/ca)
  // 	sum10 := ($bitcast ($uint<16>) (sum0 + sum1) )// bits of buffering = 16. 
  //  file prog.linked.opt.aa, line 219
  // (sum0 + sum1)
  // sum0
  // sum1
  // ($bitcast ($uint<16>) (sum0 + sum1) )
  type_cast_887_inst <=> (assign_stmt_624_to_assign_stmt_924/type_cast_887_Sample/rr assign_stmt_624_to_assign_stmt_924/type_cast_887_Update/cr) (assign_stmt_624_to_assign_stmt_924/type_cast_887_Sample/ra assign_stmt_624_to_assign_stmt_924/type_cast_887_Update/ca)
  // 	sum11 := ($bitcast ($uint<16>) (sum2 + sum3) )// bits of buffering = 16. 
  //  file prog.linked.opt.aa, line 220
  // (sum2 + sum3)
  // sum2
  // sum3
  // ($bitcast ($uint<16>) (sum2 + sum3) )
  type_cast_893_inst <=> (assign_stmt_624_to_assign_stmt_924/type_cast_893_Sample/rr assign_stmt_624_to_assign_stmt_924/type_cast_893_Update/cr) (assign_stmt_624_to_assign_stmt_924/type_cast_893_Sample/ra assign_stmt_624_to_assign_stmt_924/type_cast_893_Update/ca)
  // 	sum12 := ($bitcast ($uint<16>) (sum4 + sum5) )// bits of buffering = 16. 
  //  file prog.linked.opt.aa, line 221
  // (sum4 + sum5)
  // sum4
  // sum5
  // ($bitcast ($uint<16>) (sum4 + sum5) )
  type_cast_899_inst <=> (assign_stmt_624_to_assign_stmt_924/type_cast_899_Sample/rr assign_stmt_624_to_assign_stmt_924/type_cast_899_Update/cr) (assign_stmt_624_to_assign_stmt_924/type_cast_899_Sample/ra assign_stmt_624_to_assign_stmt_924/type_cast_899_Update/ca)
  // 	sum13 := ($bitcast ($uint<16>) (sum6 + sum7) )// bits of buffering = 16. 
  //  file prog.linked.opt.aa, line 222
  // (sum6 + sum7)
  // sum6
  // sum7
  // ($bitcast ($uint<16>) (sum6 + sum7) )
  type_cast_905_inst <=> (assign_stmt_624_to_assign_stmt_924/type_cast_905_Sample/rr assign_stmt_624_to_assign_stmt_924/type_cast_905_Update/cr) (assign_stmt_624_to_assign_stmt_924/type_cast_905_Sample/ra assign_stmt_624_to_assign_stmt_924/type_cast_905_Update/ca)
  // 	sum20 := ($bitcast ($uint<16>) (sum10 + sum11) )// bits of buffering = 16. 
  //  file prog.linked.opt.aa, line 223
  // (sum10 + sum11)
  // sum10
  // sum11
  // ($bitcast ($uint<16>) (sum10 + sum11) )
  type_cast_911_inst <=> (assign_stmt_624_to_assign_stmt_924/type_cast_911_Sample/rr assign_stmt_624_to_assign_stmt_924/type_cast_911_Update/cr) (assign_stmt_624_to_assign_stmt_924/type_cast_911_Sample/ra assign_stmt_624_to_assign_stmt_924/type_cast_911_Update/ca)
  // 	sum21 := ($bitcast ($uint<16>) (sum12 + sum13) )// bits of buffering = 16. 
  //  file prog.linked.opt.aa, line 224
  // (sum12 + sum13)
  // sum12
  // sum13
  // ($bitcast ($uint<16>) (sum12 + sum13) )
  type_cast_917_inst <=> (assign_stmt_624_to_assign_stmt_924/type_cast_917_Sample/rr assign_stmt_624_to_assign_stmt_924/type_cast_917_Update/cr) (assign_stmt_624_to_assign_stmt_924/type_cast_917_Sample/ra assign_stmt_624_to_assign_stmt_924/type_cast_917_Update/ca)
  // 	ofmap_pixel := ($bitcast ($uint<16>) (sum20 + sum21) )// bits of buffering = 16. 
  //  file prog.linked.opt.aa, line 225
  // (sum20 + sum21)
  // sum20
  // sum21
  // ($bitcast ($uint<16>) (sum20 + sum21) )
  type_cast_923_inst <=> (assign_stmt_624_to_assign_stmt_924/type_cast_923_Sample/rr assign_stmt_624_to_assign_stmt_924/type_cast_923_Update/cr) (assign_stmt_624_to_assign_stmt_924/type_cast_923_Sample/ra assign_stmt_624_to_assign_stmt_924/type_cast_923_Update/ca)
}
$module [mainAcc2] 
{
  $in I:$int<6>
  // can point into 
  J:$int<5>
  // can point into 
  col_to_be_replaced:$int<2>
  // can point into 
  $out ofmap_pixel:$int<16>
  // can point into 
  // pipe-declarations for block %mainAcc2
  //  file prog.linked.opt.aa, line 227
  // memory-space 2 is read from.
  // memory-space 0 is read from.
  // memory-space 1 is read from.
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    ::[assign_stmt_934_to_assign_stmt_1234] 
    {
      // start:  	zero := ($bitcast ($uint<2>) 0  )// bits of buffering = 2. 
      //  file prog.linked.opt.aa, line 232
      // constant! 
      // end:  	zero := ($bitcast ($uint<2>) 0  )// bits of buffering = 2. 
      // start:  	one := ($bitcast ($uint<2>) 1  )// bits of buffering = 2. 
      //  file prog.linked.opt.aa, line 233
      // constant! 
      // end:  	one := ($bitcast ($uint<2>) 1  )// bits of buffering = 2. 
      // start:  	two := ($bitcast ($uint<2>) 2  )// bits of buffering = 2. 
      //  file prog.linked.opt.aa, line 234
      // constant! 
      // end:  	two := ($bitcast ($uint<2>) 2  )// bits of buffering = 2. 
      // start:  	three := ($bitcast ($uint<2>) 3  )// bits of buffering = 2. 
      //  file prog.linked.opt.aa, line 235
      // constant! 
      // end:  	three := ($bitcast ($uint<2>) 3  )// bits of buffering = 2. 
      // start:  	col_to_be_replaced_1 := ( $mux (col_to_be_replaced == 0 ) ($bitcast ($uint<2>) 3  )  ($bitcast ($uint<2>) (col_to_be_replaced - 1 ) ) ) // bits of buffering = 2. 
      //  file prog.linked.opt.aa, line 236
      // Source expression
      // ( $mux (col_to_be_replaced == 0 ) ($bitcast ($uint<2>) 3  )  ($bitcast ($uint<2>) (col_to_be_replaced - 1 ) ) ) 
      $T[MUX_957_sample_start_] 
      $T[MUX_957_sample_completed_] 
      $T[MUX_957_update_start_] 
      $T[MUX_957_update_completed_] 
      // (col_to_be_replaced == 0 )
      // col_to_be_replaced
      // ($bitcast ($uint<2>) (col_to_be_replaced - 1 ) )
      // (col_to_be_replaced - 1 )
      // col_to_be_replaced
      // start: Forward dependencies from (col_to_be_replaced == 0 ) to transition MUX_957_sample_start_
      // done: Forward dependencies from (col_to_be_replaced == 0 ) to transition MUX_957_sample_start_
      // start: Forward dependencies from ($bitcast ($uint<2>) (col_to_be_replaced - 1 ) ) to transition MUX_957_sample_start_
      // done: Forward dependencies from ($bitcast ($uint<2>) (col_to_be_replaced - 1 ) ) to transition MUX_957_sample_start_
      ;;[MUX_957_start] 
      {
        // ternary expression: 
        $T [req] $T [ack] // sample req/ack
      }
      ;;[MUX_957_complete] 
      {
        // ternary expression: 
        $T [req] $T [ack] // update req/ack
      }
      MUX_957_sample_start_ &-> (MUX_957_start)
      MUX_957_sample_completed_ <-& (MUX_957_start)
      MUX_957_sample_completed_ &-> ($null)
      MUX_957_update_start_ &-> (MUX_957_complete)
      MUX_957_update_completed_ <-& (MUX_957_complete)
      // Target expression
      // (as target) col_to_be_replaced_1
      // start: WAR dependencies for col_to_be_replaced_1
      // done: WAR dependencies for col_to_be_replaced_1
      // end:  	col_to_be_replaced_1 := ( $mux (col_to_be_replaced == 0 ) ($bitcast ($uint<2>) 3  )  ($bitcast ($uint<2>) (col_to_be_replaced - 1 ) ) ) // bits of buffering = 2. 
      // start:  	col_to_be_replaced_2 := ( $mux (col_to_be_replaced >= 2 ) ($bitcast ($uint<2>) (col_to_be_replaced - 2 ) )  ($bitcast ($uint<2>) (col_to_be_replaced + 2 ) ) ) // bits of buffering = 2. 
      //  file prog.linked.opt.aa, line 237
      // Source expression
      // ( $mux (col_to_be_replaced >= 2 ) ($bitcast ($uint<2>) (col_to_be_replaced - 2 ) )  ($bitcast ($uint<2>) (col_to_be_replaced + 2 ) ) ) 
      $T[MUX_971_sample_start_] 
      $T[MUX_971_sample_completed_] 
      $T[MUX_971_update_start_] 
      $T[MUX_971_update_completed_] 
      // (col_to_be_replaced >= 2 )
      // col_to_be_replaced
      // ($bitcast ($uint<2>) (col_to_be_replaced - 2 ) )
      // (col_to_be_replaced - 2 )
      // col_to_be_replaced
      // ($bitcast ($uint<2>) (col_to_be_replaced + 2 ) )
      // (col_to_be_replaced + 2 )
      // col_to_be_replaced
      // start: Forward dependencies from (col_to_be_replaced >= 2 ) to transition MUX_971_sample_start_
      // done: Forward dependencies from (col_to_be_replaced >= 2 ) to transition MUX_971_sample_start_
      // start: Forward dependencies from ($bitcast ($uint<2>) (col_to_be_replaced - 2 ) ) to transition MUX_971_sample_start_
      // done: Forward dependencies from ($bitcast ($uint<2>) (col_to_be_replaced - 2 ) ) to transition MUX_971_sample_start_
      // start: Forward dependencies from ($bitcast ($uint<2>) (col_to_be_replaced + 2 ) ) to transition MUX_971_sample_start_
      // done: Forward dependencies from ($bitcast ($uint<2>) (col_to_be_replaced + 2 ) ) to transition MUX_971_sample_start_
      ;;[MUX_971_start] 
      {
        // ternary expression: 
        $T [req] $T [ack] // sample req/ack
      }
      ;;[MUX_971_complete] 
      {
        // ternary expression: 
        $T [req] $T [ack] // update req/ack
      }
      MUX_971_sample_start_ &-> (MUX_971_start)
      MUX_971_sample_completed_ <-& (MUX_971_start)
      MUX_971_sample_completed_ &-> ($null)
      MUX_971_update_start_ &-> (MUX_971_complete)
      MUX_971_update_completed_ <-& (MUX_971_complete)
      // Target expression
      // (as target) col_to_be_replaced_2
      // start: WAR dependencies for col_to_be_replaced_2
      // done: WAR dependencies for col_to_be_replaced_2
      // end:  	col_to_be_replaced_2 := ( $mux (col_to_be_replaced >= 2 ) ($bitcast ($uint<2>) (col_to_be_replaced - 2 ) )  ($bitcast ($uint<2>) (col_to_be_replaced + 2 ) ) ) // bits of buffering = 2. 
      // start:  	col_to_be_replaced_3 := ( $mux (col_to_be_replaced == 3 ) ($bitcast ($uint<2>) 0  )  ($bitcast ($uint<2>) (col_to_be_replaced + 1 ) ) ) // bits of buffering = 2. 
      //  file prog.linked.opt.aa, line 238
      // Source expression
      // ( $mux (col_to_be_replaced == 3 ) ($bitcast ($uint<2>) 0  )  ($bitcast ($uint<2>) (col_to_be_replaced + 1 ) ) ) 
      $T[MUX_983_sample_start_] 
      $T[MUX_983_sample_completed_] 
      $T[MUX_983_update_start_] 
      $T[MUX_983_update_completed_] 
      // (col_to_be_replaced == 3 )
      // col_to_be_replaced
      // ($bitcast ($uint<2>) (col_to_be_replaced + 1 ) )
      // (col_to_be_replaced + 1 )
      // col_to_be_replaced
      // start: Forward dependencies from (col_to_be_replaced == 3 ) to transition MUX_983_sample_start_
      // done: Forward dependencies from (col_to_be_replaced == 3 ) to transition MUX_983_sample_start_
      // start: Forward dependencies from ($bitcast ($uint<2>) (col_to_be_replaced + 1 ) ) to transition MUX_983_sample_start_
      // done: Forward dependencies from ($bitcast ($uint<2>) (col_to_be_replaced + 1 ) ) to transition MUX_983_sample_start_
      ;;[MUX_983_start] 
      {
        // ternary expression: 
        $T [req] $T [ack] // sample req/ack
      }
      ;;[MUX_983_complete] 
      {
        // ternary expression: 
        $T [req] $T [ack] // update req/ack
      }
      MUX_983_sample_start_ &-> (MUX_983_start)
      MUX_983_sample_completed_ <-& (MUX_983_start)
      MUX_983_sample_completed_ &-> ($null)
      MUX_983_update_start_ &-> (MUX_983_complete)
      MUX_983_update_completed_ <-& (MUX_983_complete)
      // Target expression
      // (as target) col_to_be_replaced_3
      // start: WAR dependencies for col_to_be_replaced_3
      // done: WAR dependencies for col_to_be_replaced_3
      // end:  	col_to_be_replaced_3 := ( $mux (col_to_be_replaced == 3 ) ($bitcast ($uint<2>) 0  )  ($bitcast ($uint<2>) (col_to_be_replaced + 1 ) ) ) // bits of buffering = 2. 
      // start:  	pp03 := ($bitcast ($uint<16>) (ifmaps2[0 ][col_to_be_replaced] * filter[zero][three]) )// bits of buffering = 16. 
      //  file prog.linked.opt.aa, line 239
      // Source expression
      // ($bitcast ($uint<16>) (ifmaps2[0 ][col_to_be_replaced] * filter[zero][three]) )
      $T[type_cast_993_sample_start_] 
      $T[type_cast_993_sample_completed_] 
      $T[type_cast_993_update_start_] 
      $T[type_cast_993_update_completed_] 
      // (ifmaps2[0 ][col_to_be_replaced] * filter[zero][three])
      // ifmaps2[0 ][col_to_be_replaced]
      $T[array_obj_ref_988_base_address_calculated] 
      $T[array_obj_ref_988_sample_start_] 
      $T[array_obj_ref_988_sample_completed_] 
      $T[array_obj_ref_988_update_start_] 
      $T[array_obj_ref_988_update_completed_] 
      $T[array_obj_ref_988_word_address_calculated] 
      $T[array_obj_ref_988_root_address_calculated] 
      $T[array_obj_ref_988_offset_calculated] 
      $T[array_obj_ref_988_index_resized_1] 
      $T[array_obj_ref_988_index_scaled_1] 
      $T[array_obj_ref_988_index_computed_1] 
      // col_to_be_replaced
      // start: Forward dependencies from col_to_be_replaced to transition array_obj_ref_988_index_computed_1
      // done: Forward dependencies from col_to_be_replaced to transition array_obj_ref_988_index_computed_1
      ;;[array_obj_ref_988_index_resize_1] 
      {
        $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
      }
      array_obj_ref_988_index_computed_1 &-> (array_obj_ref_988_index_resize_1)
      array_obj_ref_988_index_resized_1 <-& (array_obj_ref_988_index_resize_1)
      ;;[array_obj_ref_988_index_scale_1] 
      {
        $T [scale_rename_req] $T [scale_rename_ack] // rename 
      }
      array_obj_ref_988_index_resized_1 &-> (array_obj_ref_988_index_scale_1)
      array_obj_ref_988_index_scaled_1 <-& (array_obj_ref_988_index_scale_1)
      $T[array_obj_ref_988_final_index_sum_regn_sample_complete] 
      $T[array_obj_ref_988_final_index_sum_regn_update_start] 
      ;;[array_obj_ref_988_final_index_sum_regn_Sample] 
      {
        $T [req] $T [ack] 
      }
      ;;[array_obj_ref_988_final_index_sum_regn_Update] 
      {
        $T [req] $T [ack] 
      }
      array_obj_ref_988_index_scaled_1 &-> (array_obj_ref_988_final_index_sum_regn_Sample)
      array_obj_ref_988_final_index_sum_regn_sample_complete <-& (array_obj_ref_988_final_index_sum_regn_Sample)
      array_obj_ref_988_final_index_sum_regn_update_start &-> (array_obj_ref_988_final_index_sum_regn_Update)
      array_obj_ref_988_offset_calculated <-& (array_obj_ref_988_final_index_sum_regn_Update)
      ;;[array_obj_ref_988_base_plus_offset] 
      {
        $T [sum_rename_req] $T [sum_rename_ack] // one gets through 
      }
      array_obj_ref_988_offset_calculated &-> (array_obj_ref_988_base_plus_offset)
      array_obj_ref_988_root_address_calculated <-& (array_obj_ref_988_base_plus_offset)
      ;;[array_obj_ref_988_word_addrgen] 
      {
        $T [root_register_req] $T [root_register_ack]
      }
      array_obj_ref_988_root_address_calculated &-> (array_obj_ref_988_word_addrgen)
      array_obj_ref_988_word_address_calculated <-& (array_obj_ref_988_word_addrgen)
      ;;[array_obj_ref_988_Sample] 
      {
        ||[word_access_start] 
        {
          ;;[word_0] 
          {
            $T [rr] $T [ra] 
          }
        }
      }
      ;;[array_obj_ref_988_Update] 
      {
        ||[word_access_complete] 
        {
          ;;[word_0] 
          {
            $T [cr] $T [ca] 
          }
        }
        ;;[array_obj_ref_988_Merge] 
        {
          $T [merge_req] $T [merge_ack]
        }
      }
      array_obj_ref_988_sample_start_ <-& (array_obj_ref_988_word_address_calculated)
      array_obj_ref_988_sample_start_ &-> (array_obj_ref_988_Sample)
      array_obj_ref_988_sample_completed_ <-& (array_obj_ref_988_Sample)
      array_obj_ref_988_sample_completed_ &-> ($null)
      array_obj_ref_988_update_start_ &-> (array_obj_ref_988_Update)
      array_obj_ref_988_update_completed_ <-& (array_obj_ref_988_Update)
      // filter[zero][three]
      $T[array_obj_ref_991_base_address_calculated] 
      $T[array_obj_ref_991_sample_start_] 
      $T[array_obj_ref_991_sample_completed_] 
      $T[array_obj_ref_991_update_start_] 
      $T[array_obj_ref_991_update_completed_] 
      $T[array_obj_ref_991_word_address_calculated] 
      $T[array_obj_ref_991_root_address_calculated] 
      array_obj_ref_991_word_address_calculated <-& (array_obj_ref_991_root_address_calculated)
      ;;[array_obj_ref_991_Sample] 
      {
        ||[word_access_start] 
        {
          ;;[word_0] 
          {
            $T [rr] $T [ra] 
          }
        }
      }
      ;;[array_obj_ref_991_Update] 
      {
        ||[word_access_complete] 
        {
          ;;[word_0] 
          {
            $T [cr] $T [ca] 
          }
        }
        ;;[array_obj_ref_991_Merge] 
        {
          $T [merge_req] $T [merge_ack]
        }
      }
      array_obj_ref_991_sample_start_ <-& (array_obj_ref_991_word_address_calculated)
      array_obj_ref_991_sample_start_ &-> (array_obj_ref_991_Sample)
      array_obj_ref_991_sample_completed_ <-& (array_obj_ref_991_Sample)
      array_obj_ref_991_sample_completed_ &-> ($null)
      array_obj_ref_991_update_start_ &-> (array_obj_ref_991_Update)
      array_obj_ref_991_update_completed_ <-& (array_obj_ref_991_Update)
      // start: Forward dependencies from (ifmaps2[0 ][col_to_be_replaced] * filter[zero][three]) to transition type_cast_993_sample_start_
      type_cast_993_sample_start_ <-& (array_obj_ref_988_update_completed_)
      type_cast_993_sample_start_ <-& (array_obj_ref_991_update_completed_)
      // done: Forward dependencies from (ifmaps2[0 ][col_to_be_replaced] * filter[zero][three]) to transition type_cast_993_sample_start_
      ;;[type_cast_993_Sample] 
      {
        // unary expression 
        $T [rr] $T [ra] // (split) unary operation
      }
      ;;[type_cast_993_Update] 
      {
        // unary expression 
        $T [cr] $T [ca] //(split) unary operation
      }
      type_cast_993_sample_start_ &-> (type_cast_993_Sample)
      type_cast_993_sample_completed_ <-& (type_cast_993_Sample)
      type_cast_993_sample_completed_ &-> ($null)
      type_cast_993_update_start_ &-> (type_cast_993_Update)
      type_cast_993_update_completed_ <-& (type_cast_993_Update)
      // Target expression
      // (as target) pp03
      // start: WAR dependencies for pp03
      // done: WAR dependencies for pp03
      // end:  	pp03 := ($bitcast ($uint<16>) (ifmaps2[0 ][col_to_be_replaced] * filter[zero][three]) )// bits of buffering = 16. 
      // start:  	pp13 := ($bitcast ($uint<16>) (ifmaps2[1 ][col_to_be_replaced] * filter[one][three]) )// bits of buffering = 16. 
      //  file prog.linked.opt.aa, line 240
      // Source expression
      // ($bitcast ($uint<16>) (ifmaps2[1 ][col_to_be_replaced] * filter[one][three]) )
      $T[type_cast_1003_sample_start_] 
      $T[type_cast_1003_sample_completed_] 
      $T[type_cast_1003_update_start_] 
      $T[type_cast_1003_update_completed_] 
      // (ifmaps2[1 ][col_to_be_replaced] * filter[one][three])
      // ifmaps2[1 ][col_to_be_replaced]
      $T[array_obj_ref_998_base_address_calculated] 
      $T[array_obj_ref_998_sample_start_] 
      $T[array_obj_ref_998_sample_completed_] 
      $T[array_obj_ref_998_update_start_] 
      $T[array_obj_ref_998_update_completed_] 
      $T[array_obj_ref_998_word_address_calculated] 
      $T[array_obj_ref_998_root_address_calculated] 
      $T[array_obj_ref_998_offset_calculated] 
      $T[array_obj_ref_998_index_resized_1] 
      $T[array_obj_ref_998_index_scaled_1] 
      $T[array_obj_ref_998_index_computed_1] 
      // col_to_be_replaced
      // start: Forward dependencies from col_to_be_replaced to transition array_obj_ref_998_index_computed_1
      // done: Forward dependencies from col_to_be_replaced to transition array_obj_ref_998_index_computed_1
      ;;[array_obj_ref_998_index_resize_1] 
      {
        $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
      }
      array_obj_ref_998_index_computed_1 &-> (array_obj_ref_998_index_resize_1)
      array_obj_ref_998_index_resized_1 <-& (array_obj_ref_998_index_resize_1)
      ;;[array_obj_ref_998_index_scale_1] 
      {
        $T [scale_rename_req] $T [scale_rename_ack] // rename 
      }
      array_obj_ref_998_index_resized_1 &-> (array_obj_ref_998_index_scale_1)
      array_obj_ref_998_index_scaled_1 <-& (array_obj_ref_998_index_scale_1)
      $T[array_obj_ref_998_final_index_sum_regn_sample_complete] 
      $T[array_obj_ref_998_final_index_sum_regn_update_start] 
      ;;[array_obj_ref_998_final_index_sum_regn_Sample] 
      {
        $T [req] $T [ack] 
      }
      ;;[array_obj_ref_998_final_index_sum_regn_Update] 
      {
        $T [req] $T [ack] 
      }
      array_obj_ref_998_index_scaled_1 &-> (array_obj_ref_998_final_index_sum_regn_Sample)
      array_obj_ref_998_final_index_sum_regn_sample_complete <-& (array_obj_ref_998_final_index_sum_regn_Sample)
      array_obj_ref_998_final_index_sum_regn_update_start &-> (array_obj_ref_998_final_index_sum_regn_Update)
      array_obj_ref_998_offset_calculated <-& (array_obj_ref_998_final_index_sum_regn_Update)
      ;;[array_obj_ref_998_base_plus_offset] 
      {
        $T [sum_rename_req] $T [sum_rename_ack] // one gets through 
      }
      array_obj_ref_998_offset_calculated &-> (array_obj_ref_998_base_plus_offset)
      array_obj_ref_998_root_address_calculated <-& (array_obj_ref_998_base_plus_offset)
      ;;[array_obj_ref_998_word_addrgen] 
      {
        $T [root_register_req] $T [root_register_ack]
      }
      array_obj_ref_998_root_address_calculated &-> (array_obj_ref_998_word_addrgen)
      array_obj_ref_998_word_address_calculated <-& (array_obj_ref_998_word_addrgen)
      ;;[array_obj_ref_998_Sample] 
      {
        ||[word_access_start] 
        {
          ;;[word_0] 
          {
            $T [rr] $T [ra] 
          }
        }
      }
      ;;[array_obj_ref_998_Update] 
      {
        ||[word_access_complete] 
        {
          ;;[word_0] 
          {
            $T [cr] $T [ca] 
          }
        }
        ;;[array_obj_ref_998_Merge] 
        {
          $T [merge_req] $T [merge_ack]
        }
      }
      array_obj_ref_998_sample_start_ <-& (array_obj_ref_998_word_address_calculated)
      array_obj_ref_998_sample_start_ &-> (array_obj_ref_998_Sample)
      array_obj_ref_998_sample_completed_ <-& (array_obj_ref_998_Sample)
      array_obj_ref_998_sample_completed_ &-> ($null)
      array_obj_ref_998_update_start_ &-> (array_obj_ref_998_Update)
      array_obj_ref_998_update_completed_ <-& (array_obj_ref_998_Update)
      // filter[one][three]
      $T[array_obj_ref_1001_base_address_calculated] 
      $T[array_obj_ref_1001_sample_start_] 
      $T[array_obj_ref_1001_sample_completed_] 
      $T[array_obj_ref_1001_update_start_] 
      $T[array_obj_ref_1001_update_completed_] 
      $T[array_obj_ref_1001_word_address_calculated] 
      $T[array_obj_ref_1001_root_address_calculated] 
      array_obj_ref_1001_word_address_calculated <-& (array_obj_ref_1001_root_address_calculated)
      ;;[array_obj_ref_1001_Sample] 
      {
        ||[word_access_start] 
        {
          ;;[word_0] 
          {
            $T [rr] $T [ra] 
          }
        }
      }
      ;;[array_obj_ref_1001_Update] 
      {
        ||[word_access_complete] 
        {
          ;;[word_0] 
          {
            $T [cr] $T [ca] 
          }
        }
        ;;[array_obj_ref_1001_Merge] 
        {
          $T [merge_req] $T [merge_ack]
        }
      }
      array_obj_ref_1001_sample_start_ <-& (array_obj_ref_1001_word_address_calculated)
      array_obj_ref_1001_sample_start_ &-> (array_obj_ref_1001_Sample)
      array_obj_ref_1001_sample_completed_ <-& (array_obj_ref_1001_Sample)
      array_obj_ref_1001_sample_completed_ &-> ($null)
      array_obj_ref_1001_update_start_ &-> (array_obj_ref_1001_Update)
      array_obj_ref_1001_update_completed_ <-& (array_obj_ref_1001_Update)
      // start: Forward dependencies from (ifmaps2[1 ][col_to_be_replaced] * filter[one][three]) to transition type_cast_1003_sample_start_
      type_cast_1003_sample_start_ <-& (array_obj_ref_998_update_completed_)
      type_cast_1003_sample_start_ <-& (array_obj_ref_1001_update_completed_)
      // done: Forward dependencies from (ifmaps2[1 ][col_to_be_replaced] * filter[one][three]) to transition type_cast_1003_sample_start_
      ;;[type_cast_1003_Sample] 
      {
        // unary expression 
        $T [rr] $T [ra] // (split) unary operation
      }
      ;;[type_cast_1003_Update] 
      {
        // unary expression 
        $T [cr] $T [ca] //(split) unary operation
      }
      type_cast_1003_sample_start_ &-> (type_cast_1003_Sample)
      type_cast_1003_sample_completed_ <-& (type_cast_1003_Sample)
      type_cast_1003_sample_completed_ &-> ($null)
      type_cast_1003_update_start_ &-> (type_cast_1003_Update)
      type_cast_1003_update_completed_ <-& (type_cast_1003_Update)
      // Target expression
      // (as target) pp13
      // start: WAR dependencies for pp13
      // done: WAR dependencies for pp13
      // end:  	pp13 := ($bitcast ($uint<16>) (ifmaps2[1 ][col_to_be_replaced] * filter[one][three]) )// bits of buffering = 16. 
      // start:  	pp23 := ($bitcast ($uint<16>) (ifmaps2[2 ][col_to_be_replaced] * filter[two][three]) )// bits of buffering = 16. 
      //  file prog.linked.opt.aa, line 241
      // Source expression
      // ($bitcast ($uint<16>) (ifmaps2[2 ][col_to_be_replaced] * filter[two][three]) )
      $T[type_cast_1013_sample_start_] 
      $T[type_cast_1013_sample_completed_] 
      $T[type_cast_1013_update_start_] 
      $T[type_cast_1013_update_completed_] 
      // (ifmaps2[2 ][col_to_be_replaced] * filter[two][three])
      // ifmaps2[2 ][col_to_be_replaced]
      $T[array_obj_ref_1008_base_address_calculated] 
      $T[array_obj_ref_1008_sample_start_] 
      $T[array_obj_ref_1008_sample_completed_] 
      $T[array_obj_ref_1008_update_start_] 
      $T[array_obj_ref_1008_update_completed_] 
      $T[array_obj_ref_1008_word_address_calculated] 
      $T[array_obj_ref_1008_root_address_calculated] 
      $T[array_obj_ref_1008_offset_calculated] 
      $T[array_obj_ref_1008_index_resized_1] 
      $T[array_obj_ref_1008_index_scaled_1] 
      $T[array_obj_ref_1008_index_computed_1] 
      // col_to_be_replaced
      // start: Forward dependencies from col_to_be_replaced to transition array_obj_ref_1008_index_computed_1
      // done: Forward dependencies from col_to_be_replaced to transition array_obj_ref_1008_index_computed_1
      ;;[array_obj_ref_1008_index_resize_1] 
      {
        $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
      }
      array_obj_ref_1008_index_computed_1 &-> (array_obj_ref_1008_index_resize_1)
      array_obj_ref_1008_index_resized_1 <-& (array_obj_ref_1008_index_resize_1)
      ;;[array_obj_ref_1008_index_scale_1] 
      {
        $T [scale_rename_req] $T [scale_rename_ack] // rename 
      }
      array_obj_ref_1008_index_resized_1 &-> (array_obj_ref_1008_index_scale_1)
      array_obj_ref_1008_index_scaled_1 <-& (array_obj_ref_1008_index_scale_1)
      $T[array_obj_ref_1008_final_index_sum_regn_sample_complete] 
      $T[array_obj_ref_1008_final_index_sum_regn_update_start] 
      ;;[array_obj_ref_1008_final_index_sum_regn_Sample] 
      {
        $T [req] $T [ack] 
      }
      ;;[array_obj_ref_1008_final_index_sum_regn_Update] 
      {
        $T [req] $T [ack] 
      }
      array_obj_ref_1008_index_scaled_1 &-> (array_obj_ref_1008_final_index_sum_regn_Sample)
      array_obj_ref_1008_final_index_sum_regn_sample_complete <-& (array_obj_ref_1008_final_index_sum_regn_Sample)
      array_obj_ref_1008_final_index_sum_regn_update_start &-> (array_obj_ref_1008_final_index_sum_regn_Update)
      array_obj_ref_1008_offset_calculated <-& (array_obj_ref_1008_final_index_sum_regn_Update)
      ;;[array_obj_ref_1008_base_plus_offset] 
      {
        $T [sum_rename_req] $T [sum_rename_ack] // one gets through 
      }
      array_obj_ref_1008_offset_calculated &-> (array_obj_ref_1008_base_plus_offset)
      array_obj_ref_1008_root_address_calculated <-& (array_obj_ref_1008_base_plus_offset)
      ;;[array_obj_ref_1008_word_addrgen] 
      {
        $T [root_register_req] $T [root_register_ack]
      }
      array_obj_ref_1008_root_address_calculated &-> (array_obj_ref_1008_word_addrgen)
      array_obj_ref_1008_word_address_calculated <-& (array_obj_ref_1008_word_addrgen)
      ;;[array_obj_ref_1008_Sample] 
      {
        ||[word_access_start] 
        {
          ;;[word_0] 
          {
            $T [rr] $T [ra] 
          }
        }
      }
      ;;[array_obj_ref_1008_Update] 
      {
        ||[word_access_complete] 
        {
          ;;[word_0] 
          {
            $T [cr] $T [ca] 
          }
        }
        ;;[array_obj_ref_1008_Merge] 
        {
          $T [merge_req] $T [merge_ack]
        }
      }
      array_obj_ref_1008_sample_start_ <-& (array_obj_ref_1008_word_address_calculated)
      array_obj_ref_1008_sample_start_ &-> (array_obj_ref_1008_Sample)
      array_obj_ref_1008_sample_completed_ <-& (array_obj_ref_1008_Sample)
      array_obj_ref_1008_sample_completed_ &-> ($null)
      array_obj_ref_1008_update_start_ &-> (array_obj_ref_1008_Update)
      array_obj_ref_1008_update_completed_ <-& (array_obj_ref_1008_Update)
      // filter[two][three]
      $T[array_obj_ref_1011_base_address_calculated] 
      $T[array_obj_ref_1011_sample_start_] 
      $T[array_obj_ref_1011_sample_completed_] 
      $T[array_obj_ref_1011_update_start_] 
      $T[array_obj_ref_1011_update_completed_] 
      $T[array_obj_ref_1011_word_address_calculated] 
      $T[array_obj_ref_1011_root_address_calculated] 
      array_obj_ref_1011_word_address_calculated <-& (array_obj_ref_1011_root_address_calculated)
      ;;[array_obj_ref_1011_Sample] 
      {
        ||[word_access_start] 
        {
          ;;[word_0] 
          {
            $T [rr] $T [ra] 
          }
        }
      }
      ;;[array_obj_ref_1011_Update] 
      {
        ||[word_access_complete] 
        {
          ;;[word_0] 
          {
            $T [cr] $T [ca] 
          }
        }
        ;;[array_obj_ref_1011_Merge] 
        {
          $T [merge_req] $T [merge_ack]
        }
      }
      array_obj_ref_1011_sample_start_ <-& (array_obj_ref_1011_word_address_calculated)
      array_obj_ref_1011_sample_start_ &-> (array_obj_ref_1011_Sample)
      array_obj_ref_1011_sample_completed_ <-& (array_obj_ref_1011_Sample)
      array_obj_ref_1011_sample_completed_ &-> ($null)
      array_obj_ref_1011_update_start_ &-> (array_obj_ref_1011_Update)
      array_obj_ref_1011_update_completed_ <-& (array_obj_ref_1011_Update)
      // start: Forward dependencies from (ifmaps2[2 ][col_to_be_replaced] * filter[two][three]) to transition type_cast_1013_sample_start_
      type_cast_1013_sample_start_ <-& (array_obj_ref_1008_update_completed_)
      type_cast_1013_sample_start_ <-& (array_obj_ref_1011_update_completed_)
      // done: Forward dependencies from (ifmaps2[2 ][col_to_be_replaced] * filter[two][three]) to transition type_cast_1013_sample_start_
      ;;[type_cast_1013_Sample] 
      {
        // unary expression 
        $T [rr] $T [ra] // (split) unary operation
      }
      ;;[type_cast_1013_Update] 
      {
        // unary expression 
        $T [cr] $T [ca] //(split) unary operation
      }
      type_cast_1013_sample_start_ &-> (type_cast_1013_Sample)
      type_cast_1013_sample_completed_ <-& (type_cast_1013_Sample)
      type_cast_1013_sample_completed_ &-> ($null)
      type_cast_1013_update_start_ &-> (type_cast_1013_Update)
      type_cast_1013_update_completed_ <-& (type_cast_1013_Update)
      // Target expression
      // (as target) pp23
      // start: WAR dependencies for pp23
      // done: WAR dependencies for pp23
      // end:  	pp23 := ($bitcast ($uint<16>) (ifmaps2[2 ][col_to_be_replaced] * filter[two][three]) )// bits of buffering = 16. 
      // start:  	pp33 := ($bitcast ($uint<16>) (ifmaps[3 ][col_to_be_replaced] * filter[three][three]) )// bits of buffering = 16. 
      //  file prog.linked.opt.aa, line 242
      // Source expression
      // ($bitcast ($uint<16>) (ifmaps[3 ][col_to_be_replaced] * filter[three][three]) )
      $T[type_cast_1023_sample_start_] 
      $T[type_cast_1023_sample_completed_] 
      $T[type_cast_1023_update_start_] 
      $T[type_cast_1023_update_completed_] 
      // (ifmaps[3 ][col_to_be_replaced] * filter[three][three])
      // ifmaps[3 ][col_to_be_replaced]
      $T[array_obj_ref_1018_base_address_calculated] 
      $T[array_obj_ref_1018_sample_start_] 
      $T[array_obj_ref_1018_sample_completed_] 
      $T[array_obj_ref_1018_update_start_] 
      $T[array_obj_ref_1018_update_completed_] 
      $T[array_obj_ref_1018_word_address_calculated] 
      $T[array_obj_ref_1018_root_address_calculated] 
      $T[array_obj_ref_1018_offset_calculated] 
      $T[array_obj_ref_1018_index_resized_1] 
      $T[array_obj_ref_1018_index_scaled_1] 
      $T[array_obj_ref_1018_index_computed_1] 
      // col_to_be_replaced
      // start: Forward dependencies from col_to_be_replaced to transition array_obj_ref_1018_index_computed_1
      // done: Forward dependencies from col_to_be_replaced to transition array_obj_ref_1018_index_computed_1
      ;;[array_obj_ref_1018_index_resize_1] 
      {
        $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
      }
      array_obj_ref_1018_index_computed_1 &-> (array_obj_ref_1018_index_resize_1)
      array_obj_ref_1018_index_resized_1 <-& (array_obj_ref_1018_index_resize_1)
      ;;[array_obj_ref_1018_index_scale_1] 
      {
        $T [scale_rename_req] $T [scale_rename_ack] // rename 
      }
      array_obj_ref_1018_index_resized_1 &-> (array_obj_ref_1018_index_scale_1)
      array_obj_ref_1018_index_scaled_1 <-& (array_obj_ref_1018_index_scale_1)
      $T[array_obj_ref_1018_final_index_sum_regn_sample_complete] 
      $T[array_obj_ref_1018_final_index_sum_regn_update_start] 
      ;;[array_obj_ref_1018_final_index_sum_regn_Sample] 
      {
        $T [req] $T [ack] 
      }
      ;;[array_obj_ref_1018_final_index_sum_regn_Update] 
      {
        $T [req] $T [ack] 
      }
      array_obj_ref_1018_index_scaled_1 &-> (array_obj_ref_1018_final_index_sum_regn_Sample)
      array_obj_ref_1018_final_index_sum_regn_sample_complete <-& (array_obj_ref_1018_final_index_sum_regn_Sample)
      array_obj_ref_1018_final_index_sum_regn_update_start &-> (array_obj_ref_1018_final_index_sum_regn_Update)
      array_obj_ref_1018_offset_calculated <-& (array_obj_ref_1018_final_index_sum_regn_Update)
      ;;[array_obj_ref_1018_base_plus_offset] 
      {
        $T [sum_rename_req] $T [sum_rename_ack] // one gets through 
      }
      array_obj_ref_1018_offset_calculated &-> (array_obj_ref_1018_base_plus_offset)
      array_obj_ref_1018_root_address_calculated <-& (array_obj_ref_1018_base_plus_offset)
      ;;[array_obj_ref_1018_word_addrgen] 
      {
        $T [root_register_req] $T [root_register_ack]
      }
      array_obj_ref_1018_root_address_calculated &-> (array_obj_ref_1018_word_addrgen)
      array_obj_ref_1018_word_address_calculated <-& (array_obj_ref_1018_word_addrgen)
      ;;[array_obj_ref_1018_Sample] 
      {
        ||[word_access_start] 
        {
          ;;[word_0] 
          {
            $T [rr] $T [ra] 
          }
        }
      }
      ;;[array_obj_ref_1018_Update] 
      {
        ||[word_access_complete] 
        {
          ;;[word_0] 
          {
            $T [cr] $T [ca] 
          }
        }
        ;;[array_obj_ref_1018_Merge] 
        {
          $T [merge_req] $T [merge_ack]
        }
      }
      array_obj_ref_1018_sample_start_ <-& (array_obj_ref_1018_word_address_calculated)
      array_obj_ref_1018_sample_start_ &-> (array_obj_ref_1018_Sample)
      array_obj_ref_1018_sample_completed_ <-& (array_obj_ref_1018_Sample)
      array_obj_ref_1018_sample_completed_ &-> ($null)
      array_obj_ref_1018_update_start_ &-> (array_obj_ref_1018_Update)
      array_obj_ref_1018_update_completed_ <-& (array_obj_ref_1018_Update)
      // filter[three][three]
      $T[array_obj_ref_1021_base_address_calculated] 
      $T[array_obj_ref_1021_sample_start_] 
      $T[array_obj_ref_1021_sample_completed_] 
      $T[array_obj_ref_1021_update_start_] 
      $T[array_obj_ref_1021_update_completed_] 
      $T[array_obj_ref_1021_word_address_calculated] 
      $T[array_obj_ref_1021_root_address_calculated] 
      array_obj_ref_1021_word_address_calculated <-& (array_obj_ref_1021_root_address_calculated)
      ;;[array_obj_ref_1021_Sample] 
      {
        ||[word_access_start] 
        {
          ;;[word_0] 
          {
            $T [rr] $T [ra] 
          }
        }
      }
      ;;[array_obj_ref_1021_Update] 
      {
        ||[word_access_complete] 
        {
          ;;[word_0] 
          {
            $T [cr] $T [ca] 
          }
        }
        ;;[array_obj_ref_1021_Merge] 
        {
          $T [merge_req] $T [merge_ack]
        }
      }
      array_obj_ref_1021_sample_start_ <-& (array_obj_ref_1021_word_address_calculated)
      array_obj_ref_1021_sample_start_ &-> (array_obj_ref_1021_Sample)
      array_obj_ref_1021_sample_completed_ <-& (array_obj_ref_1021_Sample)
      array_obj_ref_1021_sample_completed_ &-> ($null)
      array_obj_ref_1021_update_start_ &-> (array_obj_ref_1021_Update)
      array_obj_ref_1021_update_completed_ <-& (array_obj_ref_1021_Update)
      // start: Forward dependencies from (ifmaps[3 ][col_to_be_replaced] * filter[three][three]) to transition type_cast_1023_sample_start_
      type_cast_1023_sample_start_ <-& (array_obj_ref_1018_update_completed_)
      type_cast_1023_sample_start_ <-& (array_obj_ref_1021_update_completed_)
      // done: Forward dependencies from (ifmaps[3 ][col_to_be_replaced] * filter[three][three]) to transition type_cast_1023_sample_start_
      ;;[type_cast_1023_Sample] 
      {
        // unary expression 
        $T [rr] $T [ra] // (split) unary operation
      }
      ;;[type_cast_1023_Update] 
      {
        // unary expression 
        $T [cr] $T [ca] //(split) unary operation
      }
      type_cast_1023_sample_start_ &-> (type_cast_1023_Sample)
      type_cast_1023_sample_completed_ <-& (type_cast_1023_Sample)
      type_cast_1023_sample_completed_ &-> ($null)
      type_cast_1023_update_start_ &-> (type_cast_1023_Update)
      type_cast_1023_update_completed_ <-& (type_cast_1023_Update)
      // Target expression
      // (as target) pp33
      // start: WAR dependencies for pp33
      // done: WAR dependencies for pp33
      // end:  	pp33 := ($bitcast ($uint<16>) (ifmaps[3 ][col_to_be_replaced] * filter[three][three]) )// bits of buffering = 16. 
      // start:  	pp02 := ($bitcast ($uint<16>) (ifmaps2[0 ][col_to_be_replaced_1] * filter[zero][two]) )// bits of buffering = 16. 
      //  file prog.linked.opt.aa, line 243
      // Source expression
      // ($bitcast ($uint<16>) (ifmaps2[0 ][col_to_be_replaced_1] * filter[zero][two]) )
      $T[type_cast_1033_sample_start_] 
      $T[type_cast_1033_sample_completed_] 
      $T[type_cast_1033_update_start_] 
      $T[type_cast_1033_update_completed_] 
      // (ifmaps2[0 ][col_to_be_replaced_1] * filter[zero][two])
      // ifmaps2[0 ][col_to_be_replaced_1]
      $T[array_obj_ref_1028_base_address_calculated] 
      $T[array_obj_ref_1028_sample_start_] 
      $T[array_obj_ref_1028_sample_completed_] 
      $T[array_obj_ref_1028_update_start_] 
      $T[array_obj_ref_1028_update_completed_] 
      $T[array_obj_ref_1028_word_address_calculated] 
      $T[array_obj_ref_1028_root_address_calculated] 
      $T[array_obj_ref_1028_offset_calculated] 
      $T[array_obj_ref_1028_index_resized_1] 
      $T[array_obj_ref_1028_index_scaled_1] 
      $T[array_obj_ref_1028_index_computed_1] 
      // col_to_be_replaced_1
      // start: Forward dependencies from col_to_be_replaced_1 to transition array_obj_ref_1028_index_computed_1
      array_obj_ref_1028_index_computed_1 <-& (MUX_957_update_completed_)
      // done: Forward dependencies from col_to_be_replaced_1 to transition array_obj_ref_1028_index_computed_1
      ;;[array_obj_ref_1028_index_resize_1] 
      {
        $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
      }
      array_obj_ref_1028_index_computed_1 &-> (array_obj_ref_1028_index_resize_1)
      array_obj_ref_1028_index_resized_1 <-& (array_obj_ref_1028_index_resize_1)
      ;;[array_obj_ref_1028_index_scale_1] 
      {
        $T [scale_rename_req] $T [scale_rename_ack] // rename 
      }
      array_obj_ref_1028_index_resized_1 &-> (array_obj_ref_1028_index_scale_1)
      array_obj_ref_1028_index_scaled_1 <-& (array_obj_ref_1028_index_scale_1)
      $T[array_obj_ref_1028_final_index_sum_regn_sample_complete] 
      $T[array_obj_ref_1028_final_index_sum_regn_update_start] 
      ;;[array_obj_ref_1028_final_index_sum_regn_Sample] 
      {
        $T [req] $T [ack] 
      }
      ;;[array_obj_ref_1028_final_index_sum_regn_Update] 
      {
        $T [req] $T [ack] 
      }
      array_obj_ref_1028_index_scaled_1 &-> (array_obj_ref_1028_final_index_sum_regn_Sample)
      array_obj_ref_1028_final_index_sum_regn_sample_complete <-& (array_obj_ref_1028_final_index_sum_regn_Sample)
      array_obj_ref_1028_final_index_sum_regn_update_start &-> (array_obj_ref_1028_final_index_sum_regn_Update)
      array_obj_ref_1028_offset_calculated <-& (array_obj_ref_1028_final_index_sum_regn_Update)
      ;;[array_obj_ref_1028_base_plus_offset] 
      {
        $T [sum_rename_req] $T [sum_rename_ack] // one gets through 
      }
      array_obj_ref_1028_offset_calculated &-> (array_obj_ref_1028_base_plus_offset)
      array_obj_ref_1028_root_address_calculated <-& (array_obj_ref_1028_base_plus_offset)
      ;;[array_obj_ref_1028_word_addrgen] 
      {
        $T [root_register_req] $T [root_register_ack]
      }
      array_obj_ref_1028_root_address_calculated &-> (array_obj_ref_1028_word_addrgen)
      array_obj_ref_1028_word_address_calculated <-& (array_obj_ref_1028_word_addrgen)
      ;;[array_obj_ref_1028_Sample] 
      {
        ||[word_access_start] 
        {
          ;;[word_0] 
          {
            $T [rr] $T [ra] 
          }
        }
      }
      ;;[array_obj_ref_1028_Update] 
      {
        ||[word_access_complete] 
        {
          ;;[word_0] 
          {
            $T [cr] $T [ca] 
          }
        }
        ;;[array_obj_ref_1028_Merge] 
        {
          $T [merge_req] $T [merge_ack]
        }
      }
      array_obj_ref_1028_sample_start_ <-& (array_obj_ref_1028_word_address_calculated)
      array_obj_ref_1028_sample_start_ &-> (array_obj_ref_1028_Sample)
      array_obj_ref_1028_sample_completed_ <-& (array_obj_ref_1028_Sample)
      array_obj_ref_1028_sample_completed_ &-> ($null)
      array_obj_ref_1028_update_start_ &-> (array_obj_ref_1028_Update)
      array_obj_ref_1028_update_completed_ <-& (array_obj_ref_1028_Update)
      // filter[zero][two]
      $T[array_obj_ref_1031_base_address_calculated] 
      $T[array_obj_ref_1031_sample_start_] 
      $T[array_obj_ref_1031_sample_completed_] 
      $T[array_obj_ref_1031_update_start_] 
      $T[array_obj_ref_1031_update_completed_] 
      $T[array_obj_ref_1031_word_address_calculated] 
      $T[array_obj_ref_1031_root_address_calculated] 
      array_obj_ref_1031_word_address_calculated <-& (array_obj_ref_1031_root_address_calculated)
      ;;[array_obj_ref_1031_Sample] 
      {
        ||[word_access_start] 
        {
          ;;[word_0] 
          {
            $T [rr] $T [ra] 
          }
        }
      }
      ;;[array_obj_ref_1031_Update] 
      {
        ||[word_access_complete] 
        {
          ;;[word_0] 
          {
            $T [cr] $T [ca] 
          }
        }
        ;;[array_obj_ref_1031_Merge] 
        {
          $T [merge_req] $T [merge_ack]
        }
      }
      array_obj_ref_1031_sample_start_ <-& (array_obj_ref_1031_word_address_calculated)
      array_obj_ref_1031_sample_start_ &-> (array_obj_ref_1031_Sample)
      array_obj_ref_1031_sample_completed_ <-& (array_obj_ref_1031_Sample)
      array_obj_ref_1031_sample_completed_ &-> ($null)
      array_obj_ref_1031_update_start_ &-> (array_obj_ref_1031_Update)
      array_obj_ref_1031_update_completed_ <-& (array_obj_ref_1031_Update)
      // start: Forward dependencies from (ifmaps2[0 ][col_to_be_replaced_1] * filter[zero][two]) to transition type_cast_1033_sample_start_
      type_cast_1033_sample_start_ <-& (array_obj_ref_1028_update_completed_)
      type_cast_1033_sample_start_ <-& (array_obj_ref_1031_update_completed_)
      // done: Forward dependencies from (ifmaps2[0 ][col_to_be_replaced_1] * filter[zero][two]) to transition type_cast_1033_sample_start_
      ;;[type_cast_1033_Sample] 
      {
        // unary expression 
        $T [rr] $T [ra] // (split) unary operation
      }
      ;;[type_cast_1033_Update] 
      {
        // unary expression 
        $T [cr] $T [ca] //(split) unary operation
      }
      type_cast_1033_sample_start_ &-> (type_cast_1033_Sample)
      type_cast_1033_sample_completed_ <-& (type_cast_1033_Sample)
      type_cast_1033_sample_completed_ &-> ($null)
      type_cast_1033_update_start_ &-> (type_cast_1033_Update)
      type_cast_1033_update_completed_ <-& (type_cast_1033_Update)
      // Target expression
      // (as target) pp02
      // start: WAR dependencies for pp02
      // done: WAR dependencies for pp02
      // end:  	pp02 := ($bitcast ($uint<16>) (ifmaps2[0 ][col_to_be_replaced_1] * filter[zero][two]) )// bits of buffering = 16. 
      // start:  	pp12 := ($bitcast ($uint<16>) (ifmaps2[1 ][col_to_be_replaced_1] * filter[one][two]) )// bits of buffering = 16. 
      //  file prog.linked.opt.aa, line 244
      // Source expression
      // ($bitcast ($uint<16>) (ifmaps2[1 ][col_to_be_replaced_1] * filter[one][two]) )
      $T[type_cast_1043_sample_start_] 
      $T[type_cast_1043_sample_completed_] 
      $T[type_cast_1043_update_start_] 
      $T[type_cast_1043_update_completed_] 
      // (ifmaps2[1 ][col_to_be_replaced_1] * filter[one][two])
      // ifmaps2[1 ][col_to_be_replaced_1]
      $T[array_obj_ref_1038_base_address_calculated] 
      $T[array_obj_ref_1038_sample_start_] 
      $T[array_obj_ref_1038_sample_completed_] 
      $T[array_obj_ref_1038_update_start_] 
      $T[array_obj_ref_1038_update_completed_] 
      $T[array_obj_ref_1038_word_address_calculated] 
      $T[array_obj_ref_1038_root_address_calculated] 
      $T[array_obj_ref_1038_offset_calculated] 
      $T[array_obj_ref_1038_index_resized_1] 
      $T[array_obj_ref_1038_index_scaled_1] 
      $T[array_obj_ref_1038_index_computed_1] 
      // col_to_be_replaced_1
      // start: Forward dependencies from col_to_be_replaced_1 to transition array_obj_ref_1038_index_computed_1
      array_obj_ref_1038_index_computed_1 <-& (MUX_957_update_completed_)
      // done: Forward dependencies from col_to_be_replaced_1 to transition array_obj_ref_1038_index_computed_1
      ;;[array_obj_ref_1038_index_resize_1] 
      {
        $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
      }
      array_obj_ref_1038_index_computed_1 &-> (array_obj_ref_1038_index_resize_1)
      array_obj_ref_1038_index_resized_1 <-& (array_obj_ref_1038_index_resize_1)
      ;;[array_obj_ref_1038_index_scale_1] 
      {
        $T [scale_rename_req] $T [scale_rename_ack] // rename 
      }
      array_obj_ref_1038_index_resized_1 &-> (array_obj_ref_1038_index_scale_1)
      array_obj_ref_1038_index_scaled_1 <-& (array_obj_ref_1038_index_scale_1)
      $T[array_obj_ref_1038_final_index_sum_regn_sample_complete] 
      $T[array_obj_ref_1038_final_index_sum_regn_update_start] 
      ;;[array_obj_ref_1038_final_index_sum_regn_Sample] 
      {
        $T [req] $T [ack] 
      }
      ;;[array_obj_ref_1038_final_index_sum_regn_Update] 
      {
        $T [req] $T [ack] 
      }
      array_obj_ref_1038_index_scaled_1 &-> (array_obj_ref_1038_final_index_sum_regn_Sample)
      array_obj_ref_1038_final_index_sum_regn_sample_complete <-& (array_obj_ref_1038_final_index_sum_regn_Sample)
      array_obj_ref_1038_final_index_sum_regn_update_start &-> (array_obj_ref_1038_final_index_sum_regn_Update)
      array_obj_ref_1038_offset_calculated <-& (array_obj_ref_1038_final_index_sum_regn_Update)
      ;;[array_obj_ref_1038_base_plus_offset] 
      {
        $T [sum_rename_req] $T [sum_rename_ack] // one gets through 
      }
      array_obj_ref_1038_offset_calculated &-> (array_obj_ref_1038_base_plus_offset)
      array_obj_ref_1038_root_address_calculated <-& (array_obj_ref_1038_base_plus_offset)
      ;;[array_obj_ref_1038_word_addrgen] 
      {
        $T [root_register_req] $T [root_register_ack]
      }
      array_obj_ref_1038_root_address_calculated &-> (array_obj_ref_1038_word_addrgen)
      array_obj_ref_1038_word_address_calculated <-& (array_obj_ref_1038_word_addrgen)
      ;;[array_obj_ref_1038_Sample] 
      {
        ||[word_access_start] 
        {
          ;;[word_0] 
          {
            $T [rr] $T [ra] 
          }
        }
      }
      ;;[array_obj_ref_1038_Update] 
      {
        ||[word_access_complete] 
        {
          ;;[word_0] 
          {
            $T [cr] $T [ca] 
          }
        }
        ;;[array_obj_ref_1038_Merge] 
        {
          $T [merge_req] $T [merge_ack]
        }
      }
      array_obj_ref_1038_sample_start_ <-& (array_obj_ref_1038_word_address_calculated)
      array_obj_ref_1038_sample_start_ &-> (array_obj_ref_1038_Sample)
      array_obj_ref_1038_sample_completed_ <-& (array_obj_ref_1038_Sample)
      array_obj_ref_1038_sample_completed_ &-> ($null)
      array_obj_ref_1038_update_start_ &-> (array_obj_ref_1038_Update)
      array_obj_ref_1038_update_completed_ <-& (array_obj_ref_1038_Update)
      // filter[one][two]
      $T[array_obj_ref_1041_base_address_calculated] 
      $T[array_obj_ref_1041_sample_start_] 
      $T[array_obj_ref_1041_sample_completed_] 
      $T[array_obj_ref_1041_update_start_] 
      $T[array_obj_ref_1041_update_completed_] 
      $T[array_obj_ref_1041_word_address_calculated] 
      $T[array_obj_ref_1041_root_address_calculated] 
      array_obj_ref_1041_word_address_calculated <-& (array_obj_ref_1041_root_address_calculated)
      ;;[array_obj_ref_1041_Sample] 
      {
        ||[word_access_start] 
        {
          ;;[word_0] 
          {
            $T [rr] $T [ra] 
          }
        }
      }
      ;;[array_obj_ref_1041_Update] 
      {
        ||[word_access_complete] 
        {
          ;;[word_0] 
          {
            $T [cr] $T [ca] 
          }
        }
        ;;[array_obj_ref_1041_Merge] 
        {
          $T [merge_req] $T [merge_ack]
        }
      }
      array_obj_ref_1041_sample_start_ <-& (array_obj_ref_1041_word_address_calculated)
      array_obj_ref_1041_sample_start_ &-> (array_obj_ref_1041_Sample)
      array_obj_ref_1041_sample_completed_ <-& (array_obj_ref_1041_Sample)
      array_obj_ref_1041_sample_completed_ &-> ($null)
      array_obj_ref_1041_update_start_ &-> (array_obj_ref_1041_Update)
      array_obj_ref_1041_update_completed_ <-& (array_obj_ref_1041_Update)
      // start: Forward dependencies from (ifmaps2[1 ][col_to_be_replaced_1] * filter[one][two]) to transition type_cast_1043_sample_start_
      type_cast_1043_sample_start_ <-& (array_obj_ref_1038_update_completed_)
      type_cast_1043_sample_start_ <-& (array_obj_ref_1041_update_completed_)
      // done: Forward dependencies from (ifmaps2[1 ][col_to_be_replaced_1] * filter[one][two]) to transition type_cast_1043_sample_start_
      ;;[type_cast_1043_Sample] 
      {
        // unary expression 
        $T [rr] $T [ra] // (split) unary operation
      }
      ;;[type_cast_1043_Update] 
      {
        // unary expression 
        $T [cr] $T [ca] //(split) unary operation
      }
      type_cast_1043_sample_start_ &-> (type_cast_1043_Sample)
      type_cast_1043_sample_completed_ <-& (type_cast_1043_Sample)
      type_cast_1043_sample_completed_ &-> ($null)
      type_cast_1043_update_start_ &-> (type_cast_1043_Update)
      type_cast_1043_update_completed_ <-& (type_cast_1043_Update)
      // Target expression
      // (as target) pp12
      // start: WAR dependencies for pp12
      // done: WAR dependencies for pp12
      // end:  	pp12 := ($bitcast ($uint<16>) (ifmaps2[1 ][col_to_be_replaced_1] * filter[one][two]) )// bits of buffering = 16. 
      // start:  	pp22 := ($bitcast ($uint<16>) (ifmaps2[2 ][col_to_be_replaced_1] * filter[two][two]) )// bits of buffering = 16. 
      //  file prog.linked.opt.aa, line 245
      // Source expression
      // ($bitcast ($uint<16>) (ifmaps2[2 ][col_to_be_replaced_1] * filter[two][two]) )
      $T[type_cast_1053_sample_start_] 
      $T[type_cast_1053_sample_completed_] 
      $T[type_cast_1053_update_start_] 
      $T[type_cast_1053_update_completed_] 
      // (ifmaps2[2 ][col_to_be_replaced_1] * filter[two][two])
      // ifmaps2[2 ][col_to_be_replaced_1]
      $T[array_obj_ref_1048_base_address_calculated] 
      $T[array_obj_ref_1048_sample_start_] 
      $T[array_obj_ref_1048_sample_completed_] 
      $T[array_obj_ref_1048_update_start_] 
      $T[array_obj_ref_1048_update_completed_] 
      $T[array_obj_ref_1048_word_address_calculated] 
      $T[array_obj_ref_1048_root_address_calculated] 
      $T[array_obj_ref_1048_offset_calculated] 
      $T[array_obj_ref_1048_index_resized_1] 
      $T[array_obj_ref_1048_index_scaled_1] 
      $T[array_obj_ref_1048_index_computed_1] 
      // col_to_be_replaced_1
      // start: Forward dependencies from col_to_be_replaced_1 to transition array_obj_ref_1048_index_computed_1
      array_obj_ref_1048_index_computed_1 <-& (MUX_957_update_completed_)
      // done: Forward dependencies from col_to_be_replaced_1 to transition array_obj_ref_1048_index_computed_1
      ;;[array_obj_ref_1048_index_resize_1] 
      {
        $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
      }
      array_obj_ref_1048_index_computed_1 &-> (array_obj_ref_1048_index_resize_1)
      array_obj_ref_1048_index_resized_1 <-& (array_obj_ref_1048_index_resize_1)
      ;;[array_obj_ref_1048_index_scale_1] 
      {
        $T [scale_rename_req] $T [scale_rename_ack] // rename 
      }
      array_obj_ref_1048_index_resized_1 &-> (array_obj_ref_1048_index_scale_1)
      array_obj_ref_1048_index_scaled_1 <-& (array_obj_ref_1048_index_scale_1)
      $T[array_obj_ref_1048_final_index_sum_regn_sample_complete] 
      $T[array_obj_ref_1048_final_index_sum_regn_update_start] 
      ;;[array_obj_ref_1048_final_index_sum_regn_Sample] 
      {
        $T [req] $T [ack] 
      }
      ;;[array_obj_ref_1048_final_index_sum_regn_Update] 
      {
        $T [req] $T [ack] 
      }
      array_obj_ref_1048_index_scaled_1 &-> (array_obj_ref_1048_final_index_sum_regn_Sample)
      array_obj_ref_1048_final_index_sum_regn_sample_complete <-& (array_obj_ref_1048_final_index_sum_regn_Sample)
      array_obj_ref_1048_final_index_sum_regn_update_start &-> (array_obj_ref_1048_final_index_sum_regn_Update)
      array_obj_ref_1048_offset_calculated <-& (array_obj_ref_1048_final_index_sum_regn_Update)
      ;;[array_obj_ref_1048_base_plus_offset] 
      {
        $T [sum_rename_req] $T [sum_rename_ack] // one gets through 
      }
      array_obj_ref_1048_offset_calculated &-> (array_obj_ref_1048_base_plus_offset)
      array_obj_ref_1048_root_address_calculated <-& (array_obj_ref_1048_base_plus_offset)
      ;;[array_obj_ref_1048_word_addrgen] 
      {
        $T [root_register_req] $T [root_register_ack]
      }
      array_obj_ref_1048_root_address_calculated &-> (array_obj_ref_1048_word_addrgen)
      array_obj_ref_1048_word_address_calculated <-& (array_obj_ref_1048_word_addrgen)
      ;;[array_obj_ref_1048_Sample] 
      {
        ||[word_access_start] 
        {
          ;;[word_0] 
          {
            $T [rr] $T [ra] 
          }
        }
      }
      ;;[array_obj_ref_1048_Update] 
      {
        ||[word_access_complete] 
        {
          ;;[word_0] 
          {
            $T [cr] $T [ca] 
          }
        }
        ;;[array_obj_ref_1048_Merge] 
        {
          $T [merge_req] $T [merge_ack]
        }
      }
      array_obj_ref_1048_sample_start_ <-& (array_obj_ref_1048_word_address_calculated)
      array_obj_ref_1048_sample_start_ &-> (array_obj_ref_1048_Sample)
      array_obj_ref_1048_sample_completed_ <-& (array_obj_ref_1048_Sample)
      array_obj_ref_1048_sample_completed_ &-> ($null)
      array_obj_ref_1048_update_start_ &-> (array_obj_ref_1048_Update)
      array_obj_ref_1048_update_completed_ <-& (array_obj_ref_1048_Update)
      // filter[two][two]
      $T[array_obj_ref_1051_base_address_calculated] 
      $T[array_obj_ref_1051_sample_start_] 
      $T[array_obj_ref_1051_sample_completed_] 
      $T[array_obj_ref_1051_update_start_] 
      $T[array_obj_ref_1051_update_completed_] 
      $T[array_obj_ref_1051_word_address_calculated] 
      $T[array_obj_ref_1051_root_address_calculated] 
      array_obj_ref_1051_word_address_calculated <-& (array_obj_ref_1051_root_address_calculated)
      ;;[array_obj_ref_1051_Sample] 
      {
        ||[word_access_start] 
        {
          ;;[word_0] 
          {
            $T [rr] $T [ra] 
          }
        }
      }
      ;;[array_obj_ref_1051_Update] 
      {
        ||[word_access_complete] 
        {
          ;;[word_0] 
          {
            $T [cr] $T [ca] 
          }
        }
        ;;[array_obj_ref_1051_Merge] 
        {
          $T [merge_req] $T [merge_ack]
        }
      }
      array_obj_ref_1051_sample_start_ <-& (array_obj_ref_1051_word_address_calculated)
      array_obj_ref_1051_sample_start_ &-> (array_obj_ref_1051_Sample)
      array_obj_ref_1051_sample_completed_ <-& (array_obj_ref_1051_Sample)
      array_obj_ref_1051_sample_completed_ &-> ($null)
      array_obj_ref_1051_update_start_ &-> (array_obj_ref_1051_Update)
      array_obj_ref_1051_update_completed_ <-& (array_obj_ref_1051_Update)
      // start: Forward dependencies from (ifmaps2[2 ][col_to_be_replaced_1] * filter[two][two]) to transition type_cast_1053_sample_start_
      type_cast_1053_sample_start_ <-& (array_obj_ref_1048_update_completed_)
      type_cast_1053_sample_start_ <-& (array_obj_ref_1051_update_completed_)
      // done: Forward dependencies from (ifmaps2[2 ][col_to_be_replaced_1] * filter[two][two]) to transition type_cast_1053_sample_start_
      ;;[type_cast_1053_Sample] 
      {
        // unary expression 
        $T [rr] $T [ra] // (split) unary operation
      }
      ;;[type_cast_1053_Update] 
      {
        // unary expression 
        $T [cr] $T [ca] //(split) unary operation
      }
      type_cast_1053_sample_start_ &-> (type_cast_1053_Sample)
      type_cast_1053_sample_completed_ <-& (type_cast_1053_Sample)
      type_cast_1053_sample_completed_ &-> ($null)
      type_cast_1053_update_start_ &-> (type_cast_1053_Update)
      type_cast_1053_update_completed_ <-& (type_cast_1053_Update)
      // Target expression
      // (as target) pp22
      // start: WAR dependencies for pp22
      // done: WAR dependencies for pp22
      // end:  	pp22 := ($bitcast ($uint<16>) (ifmaps2[2 ][col_to_be_replaced_1] * filter[two][two]) )// bits of buffering = 16. 
      // start:  	pp32 := ($bitcast ($uint<16>) (ifmaps2[3 ][col_to_be_replaced_1] * filter[three][two]) )// bits of buffering = 16. 
      //  file prog.linked.opt.aa, line 246
      // Source expression
      // ($bitcast ($uint<16>) (ifmaps2[3 ][col_to_be_replaced_1] * filter[three][two]) )
      $T[type_cast_1063_sample_start_] 
      $T[type_cast_1063_sample_completed_] 
      $T[type_cast_1063_update_start_] 
      $T[type_cast_1063_update_completed_] 
      // (ifmaps2[3 ][col_to_be_replaced_1] * filter[three][two])
      // ifmaps2[3 ][col_to_be_replaced_1]
      $T[array_obj_ref_1058_base_address_calculated] 
      $T[array_obj_ref_1058_sample_start_] 
      $T[array_obj_ref_1058_sample_completed_] 
      $T[array_obj_ref_1058_update_start_] 
      $T[array_obj_ref_1058_update_completed_] 
      $T[array_obj_ref_1058_word_address_calculated] 
      $T[array_obj_ref_1058_root_address_calculated] 
      $T[array_obj_ref_1058_offset_calculated] 
      $T[array_obj_ref_1058_index_resized_1] 
      $T[array_obj_ref_1058_index_scaled_1] 
      $T[array_obj_ref_1058_index_computed_1] 
      // col_to_be_replaced_1
      // start: Forward dependencies from col_to_be_replaced_1 to transition array_obj_ref_1058_index_computed_1
      array_obj_ref_1058_index_computed_1 <-& (MUX_957_update_completed_)
      // done: Forward dependencies from col_to_be_replaced_1 to transition array_obj_ref_1058_index_computed_1
      ;;[array_obj_ref_1058_index_resize_1] 
      {
        $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
      }
      array_obj_ref_1058_index_computed_1 &-> (array_obj_ref_1058_index_resize_1)
      array_obj_ref_1058_index_resized_1 <-& (array_obj_ref_1058_index_resize_1)
      ;;[array_obj_ref_1058_index_scale_1] 
      {
        $T [scale_rename_req] $T [scale_rename_ack] // rename 
      }
      array_obj_ref_1058_index_resized_1 &-> (array_obj_ref_1058_index_scale_1)
      array_obj_ref_1058_index_scaled_1 <-& (array_obj_ref_1058_index_scale_1)
      $T[array_obj_ref_1058_final_index_sum_regn_sample_complete] 
      $T[array_obj_ref_1058_final_index_sum_regn_update_start] 
      ;;[array_obj_ref_1058_final_index_sum_regn_Sample] 
      {
        $T [req] $T [ack] 
      }
      ;;[array_obj_ref_1058_final_index_sum_regn_Update] 
      {
        $T [req] $T [ack] 
      }
      array_obj_ref_1058_index_scaled_1 &-> (array_obj_ref_1058_final_index_sum_regn_Sample)
      array_obj_ref_1058_final_index_sum_regn_sample_complete <-& (array_obj_ref_1058_final_index_sum_regn_Sample)
      array_obj_ref_1058_final_index_sum_regn_update_start &-> (array_obj_ref_1058_final_index_sum_regn_Update)
      array_obj_ref_1058_offset_calculated <-& (array_obj_ref_1058_final_index_sum_regn_Update)
      ;;[array_obj_ref_1058_base_plus_offset] 
      {
        $T [sum_rename_req] $T [sum_rename_ack] // one gets through 
      }
      array_obj_ref_1058_offset_calculated &-> (array_obj_ref_1058_base_plus_offset)
      array_obj_ref_1058_root_address_calculated <-& (array_obj_ref_1058_base_plus_offset)
      ;;[array_obj_ref_1058_word_addrgen] 
      {
        $T [root_register_req] $T [root_register_ack]
      }
      array_obj_ref_1058_root_address_calculated &-> (array_obj_ref_1058_word_addrgen)
      array_obj_ref_1058_word_address_calculated <-& (array_obj_ref_1058_word_addrgen)
      ;;[array_obj_ref_1058_Sample] 
      {
        ||[word_access_start] 
        {
          ;;[word_0] 
          {
            $T [rr] $T [ra] 
          }
        }
      }
      ;;[array_obj_ref_1058_Update] 
      {
        ||[word_access_complete] 
        {
          ;;[word_0] 
          {
            $T [cr] $T [ca] 
          }
        }
        ;;[array_obj_ref_1058_Merge] 
        {
          $T [merge_req] $T [merge_ack]
        }
      }
      array_obj_ref_1058_sample_start_ <-& (array_obj_ref_1058_word_address_calculated)
      array_obj_ref_1058_sample_start_ &-> (array_obj_ref_1058_Sample)
      array_obj_ref_1058_sample_completed_ <-& (array_obj_ref_1058_Sample)
      array_obj_ref_1058_sample_completed_ &-> ($null)
      array_obj_ref_1058_update_start_ &-> (array_obj_ref_1058_Update)
      array_obj_ref_1058_update_completed_ <-& (array_obj_ref_1058_Update)
      // filter[three][two]
      $T[array_obj_ref_1061_base_address_calculated] 
      $T[array_obj_ref_1061_sample_start_] 
      $T[array_obj_ref_1061_sample_completed_] 
      $T[array_obj_ref_1061_update_start_] 
      $T[array_obj_ref_1061_update_completed_] 
      $T[array_obj_ref_1061_word_address_calculated] 
      $T[array_obj_ref_1061_root_address_calculated] 
      array_obj_ref_1061_word_address_calculated <-& (array_obj_ref_1061_root_address_calculated)
      ;;[array_obj_ref_1061_Sample] 
      {
        ||[word_access_start] 
        {
          ;;[word_0] 
          {
            $T [rr] $T [ra] 
          }
        }
      }
      ;;[array_obj_ref_1061_Update] 
      {
        ||[word_access_complete] 
        {
          ;;[word_0] 
          {
            $T [cr] $T [ca] 
          }
        }
        ;;[array_obj_ref_1061_Merge] 
        {
          $T [merge_req] $T [merge_ack]
        }
      }
      array_obj_ref_1061_sample_start_ <-& (array_obj_ref_1061_word_address_calculated)
      array_obj_ref_1061_sample_start_ &-> (array_obj_ref_1061_Sample)
      array_obj_ref_1061_sample_completed_ <-& (array_obj_ref_1061_Sample)
      array_obj_ref_1061_sample_completed_ &-> ($null)
      array_obj_ref_1061_update_start_ &-> (array_obj_ref_1061_Update)
      array_obj_ref_1061_update_completed_ <-& (array_obj_ref_1061_Update)
      // start: Forward dependencies from (ifmaps2[3 ][col_to_be_replaced_1] * filter[three][two]) to transition type_cast_1063_sample_start_
      type_cast_1063_sample_start_ <-& (array_obj_ref_1058_update_completed_)
      type_cast_1063_sample_start_ <-& (array_obj_ref_1061_update_completed_)
      // done: Forward dependencies from (ifmaps2[3 ][col_to_be_replaced_1] * filter[three][two]) to transition type_cast_1063_sample_start_
      ;;[type_cast_1063_Sample] 
      {
        // unary expression 
        $T [rr] $T [ra] // (split) unary operation
      }
      ;;[type_cast_1063_Update] 
      {
        // unary expression 
        $T [cr] $T [ca] //(split) unary operation
      }
      type_cast_1063_sample_start_ &-> (type_cast_1063_Sample)
      type_cast_1063_sample_completed_ <-& (type_cast_1063_Sample)
      type_cast_1063_sample_completed_ &-> ($null)
      type_cast_1063_update_start_ &-> (type_cast_1063_Update)
      type_cast_1063_update_completed_ <-& (type_cast_1063_Update)
      // Target expression
      // (as target) pp32
      // start: WAR dependencies for pp32
      // done: WAR dependencies for pp32
      // end:  	pp32 := ($bitcast ($uint<16>) (ifmaps2[3 ][col_to_be_replaced_1] * filter[three][two]) )// bits of buffering = 16. 
      // start:  	pp01 := ($bitcast ($uint<16>) (ifmaps2[0 ][col_to_be_replaced_2] * filter[zero][one]) )// bits of buffering = 16. 
      //  file prog.linked.opt.aa, line 247
      // Source expression
      // ($bitcast ($uint<16>) (ifmaps2[0 ][col_to_be_replaced_2] * filter[zero][one]) )
      $T[type_cast_1073_sample_start_] 
      $T[type_cast_1073_sample_completed_] 
      $T[type_cast_1073_update_start_] 
      $T[type_cast_1073_update_completed_] 
      // (ifmaps2[0 ][col_to_be_replaced_2] * filter[zero][one])
      // ifmaps2[0 ][col_to_be_replaced_2]
      $T[array_obj_ref_1068_base_address_calculated] 
      $T[array_obj_ref_1068_sample_start_] 
      $T[array_obj_ref_1068_sample_completed_] 
      $T[array_obj_ref_1068_update_start_] 
      $T[array_obj_ref_1068_update_completed_] 
      $T[array_obj_ref_1068_word_address_calculated] 
      $T[array_obj_ref_1068_root_address_calculated] 
      $T[array_obj_ref_1068_offset_calculated] 
      $T[array_obj_ref_1068_index_resized_1] 
      $T[array_obj_ref_1068_index_scaled_1] 
      $T[array_obj_ref_1068_index_computed_1] 
      // col_to_be_replaced_2
      // start: Forward dependencies from col_to_be_replaced_2 to transition array_obj_ref_1068_index_computed_1
      array_obj_ref_1068_index_computed_1 <-& (MUX_971_update_completed_)
      // done: Forward dependencies from col_to_be_replaced_2 to transition array_obj_ref_1068_index_computed_1
      ;;[array_obj_ref_1068_index_resize_1] 
      {
        $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
      }
      array_obj_ref_1068_index_computed_1 &-> (array_obj_ref_1068_index_resize_1)
      array_obj_ref_1068_index_resized_1 <-& (array_obj_ref_1068_index_resize_1)
      ;;[array_obj_ref_1068_index_scale_1] 
      {
        $T [scale_rename_req] $T [scale_rename_ack] // rename 
      }
      array_obj_ref_1068_index_resized_1 &-> (array_obj_ref_1068_index_scale_1)
      array_obj_ref_1068_index_scaled_1 <-& (array_obj_ref_1068_index_scale_1)
      $T[array_obj_ref_1068_final_index_sum_regn_sample_complete] 
      $T[array_obj_ref_1068_final_index_sum_regn_update_start] 
      ;;[array_obj_ref_1068_final_index_sum_regn_Sample] 
      {
        $T [req] $T [ack] 
      }
      ;;[array_obj_ref_1068_final_index_sum_regn_Update] 
      {
        $T [req] $T [ack] 
      }
      array_obj_ref_1068_index_scaled_1 &-> (array_obj_ref_1068_final_index_sum_regn_Sample)
      array_obj_ref_1068_final_index_sum_regn_sample_complete <-& (array_obj_ref_1068_final_index_sum_regn_Sample)
      array_obj_ref_1068_final_index_sum_regn_update_start &-> (array_obj_ref_1068_final_index_sum_regn_Update)
      array_obj_ref_1068_offset_calculated <-& (array_obj_ref_1068_final_index_sum_regn_Update)
      ;;[array_obj_ref_1068_base_plus_offset] 
      {
        $T [sum_rename_req] $T [sum_rename_ack] // one gets through 
      }
      array_obj_ref_1068_offset_calculated &-> (array_obj_ref_1068_base_plus_offset)
      array_obj_ref_1068_root_address_calculated <-& (array_obj_ref_1068_base_plus_offset)
      ;;[array_obj_ref_1068_word_addrgen] 
      {
        $T [root_register_req] $T [root_register_ack]
      }
      array_obj_ref_1068_root_address_calculated &-> (array_obj_ref_1068_word_addrgen)
      array_obj_ref_1068_word_address_calculated <-& (array_obj_ref_1068_word_addrgen)
      ;;[array_obj_ref_1068_Sample] 
      {
        ||[word_access_start] 
        {
          ;;[word_0] 
          {
            $T [rr] $T [ra] 
          }
        }
      }
      ;;[array_obj_ref_1068_Update] 
      {
        ||[word_access_complete] 
        {
          ;;[word_0] 
          {
            $T [cr] $T [ca] 
          }
        }
        ;;[array_obj_ref_1068_Merge] 
        {
          $T [merge_req] $T [merge_ack]
        }
      }
      array_obj_ref_1068_sample_start_ <-& (array_obj_ref_1068_word_address_calculated)
      array_obj_ref_1068_sample_start_ &-> (array_obj_ref_1068_Sample)
      array_obj_ref_1068_sample_completed_ <-& (array_obj_ref_1068_Sample)
      array_obj_ref_1068_sample_completed_ &-> ($null)
      array_obj_ref_1068_update_start_ &-> (array_obj_ref_1068_Update)
      array_obj_ref_1068_update_completed_ <-& (array_obj_ref_1068_Update)
      // filter[zero][one]
      $T[array_obj_ref_1071_base_address_calculated] 
      $T[array_obj_ref_1071_sample_start_] 
      $T[array_obj_ref_1071_sample_completed_] 
      $T[array_obj_ref_1071_update_start_] 
      $T[array_obj_ref_1071_update_completed_] 
      $T[array_obj_ref_1071_word_address_calculated] 
      $T[array_obj_ref_1071_root_address_calculated] 
      array_obj_ref_1071_word_address_calculated <-& (array_obj_ref_1071_root_address_calculated)
      ;;[array_obj_ref_1071_Sample] 
      {
        ||[word_access_start] 
        {
          ;;[word_0] 
          {
            $T [rr] $T [ra] 
          }
        }
      }
      ;;[array_obj_ref_1071_Update] 
      {
        ||[word_access_complete] 
        {
          ;;[word_0] 
          {
            $T [cr] $T [ca] 
          }
        }
        ;;[array_obj_ref_1071_Merge] 
        {
          $T [merge_req] $T [merge_ack]
        }
      }
      array_obj_ref_1071_sample_start_ <-& (array_obj_ref_1071_word_address_calculated)
      array_obj_ref_1071_sample_start_ &-> (array_obj_ref_1071_Sample)
      array_obj_ref_1071_sample_completed_ <-& (array_obj_ref_1071_Sample)
      array_obj_ref_1071_sample_completed_ &-> ($null)
      array_obj_ref_1071_update_start_ &-> (array_obj_ref_1071_Update)
      array_obj_ref_1071_update_completed_ <-& (array_obj_ref_1071_Update)
      // start: Forward dependencies from (ifmaps2[0 ][col_to_be_replaced_2] * filter[zero][one]) to transition type_cast_1073_sample_start_
      type_cast_1073_sample_start_ <-& (array_obj_ref_1068_update_completed_)
      type_cast_1073_sample_start_ <-& (array_obj_ref_1071_update_completed_)
      // done: Forward dependencies from (ifmaps2[0 ][col_to_be_replaced_2] * filter[zero][one]) to transition type_cast_1073_sample_start_
      ;;[type_cast_1073_Sample] 
      {
        // unary expression 
        $T [rr] $T [ra] // (split) unary operation
      }
      ;;[type_cast_1073_Update] 
      {
        // unary expression 
        $T [cr] $T [ca] //(split) unary operation
      }
      type_cast_1073_sample_start_ &-> (type_cast_1073_Sample)
      type_cast_1073_sample_completed_ <-& (type_cast_1073_Sample)
      type_cast_1073_sample_completed_ &-> ($null)
      type_cast_1073_update_start_ &-> (type_cast_1073_Update)
      type_cast_1073_update_completed_ <-& (type_cast_1073_Update)
      // Target expression
      // (as target) pp01
      // start: WAR dependencies for pp01
      // done: WAR dependencies for pp01
      // end:  	pp01 := ($bitcast ($uint<16>) (ifmaps2[0 ][col_to_be_replaced_2] * filter[zero][one]) )// bits of buffering = 16. 
      // start:  	pp11 := ($bitcast ($uint<16>) (ifmaps2[1 ][col_to_be_replaced_2] * filter[one][one]) )// bits of buffering = 16. 
      //  file prog.linked.opt.aa, line 248
      // Source expression
      // ($bitcast ($uint<16>) (ifmaps2[1 ][col_to_be_replaced_2] * filter[one][one]) )
      $T[type_cast_1083_sample_start_] 
      $T[type_cast_1083_sample_completed_] 
      $T[type_cast_1083_update_start_] 
      $T[type_cast_1083_update_completed_] 
      // (ifmaps2[1 ][col_to_be_replaced_2] * filter[one][one])
      // ifmaps2[1 ][col_to_be_replaced_2]
      $T[array_obj_ref_1078_base_address_calculated] 
      $T[array_obj_ref_1078_sample_start_] 
      $T[array_obj_ref_1078_sample_completed_] 
      $T[array_obj_ref_1078_update_start_] 
      $T[array_obj_ref_1078_update_completed_] 
      $T[array_obj_ref_1078_word_address_calculated] 
      $T[array_obj_ref_1078_root_address_calculated] 
      $T[array_obj_ref_1078_offset_calculated] 
      $T[array_obj_ref_1078_index_resized_1] 
      $T[array_obj_ref_1078_index_scaled_1] 
      $T[array_obj_ref_1078_index_computed_1] 
      // col_to_be_replaced_2
      // start: Forward dependencies from col_to_be_replaced_2 to transition array_obj_ref_1078_index_computed_1
      array_obj_ref_1078_index_computed_1 <-& (MUX_971_update_completed_)
      // done: Forward dependencies from col_to_be_replaced_2 to transition array_obj_ref_1078_index_computed_1
      ;;[array_obj_ref_1078_index_resize_1] 
      {
        $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
      }
      array_obj_ref_1078_index_computed_1 &-> (array_obj_ref_1078_index_resize_1)
      array_obj_ref_1078_index_resized_1 <-& (array_obj_ref_1078_index_resize_1)
      ;;[array_obj_ref_1078_index_scale_1] 
      {
        $T [scale_rename_req] $T [scale_rename_ack] // rename 
      }
      array_obj_ref_1078_index_resized_1 &-> (array_obj_ref_1078_index_scale_1)
      array_obj_ref_1078_index_scaled_1 <-& (array_obj_ref_1078_index_scale_1)
      $T[array_obj_ref_1078_final_index_sum_regn_sample_complete] 
      $T[array_obj_ref_1078_final_index_sum_regn_update_start] 
      ;;[array_obj_ref_1078_final_index_sum_regn_Sample] 
      {
        $T [req] $T [ack] 
      }
      ;;[array_obj_ref_1078_final_index_sum_regn_Update] 
      {
        $T [req] $T [ack] 
      }
      array_obj_ref_1078_index_scaled_1 &-> (array_obj_ref_1078_final_index_sum_regn_Sample)
      array_obj_ref_1078_final_index_sum_regn_sample_complete <-& (array_obj_ref_1078_final_index_sum_regn_Sample)
      array_obj_ref_1078_final_index_sum_regn_update_start &-> (array_obj_ref_1078_final_index_sum_regn_Update)
      array_obj_ref_1078_offset_calculated <-& (array_obj_ref_1078_final_index_sum_regn_Update)
      ;;[array_obj_ref_1078_base_plus_offset] 
      {
        $T [sum_rename_req] $T [sum_rename_ack] // one gets through 
      }
      array_obj_ref_1078_offset_calculated &-> (array_obj_ref_1078_base_plus_offset)
      array_obj_ref_1078_root_address_calculated <-& (array_obj_ref_1078_base_plus_offset)
      ;;[array_obj_ref_1078_word_addrgen] 
      {
        $T [root_register_req] $T [root_register_ack]
      }
      array_obj_ref_1078_root_address_calculated &-> (array_obj_ref_1078_word_addrgen)
      array_obj_ref_1078_word_address_calculated <-& (array_obj_ref_1078_word_addrgen)
      ;;[array_obj_ref_1078_Sample] 
      {
        ||[word_access_start] 
        {
          ;;[word_0] 
          {
            $T [rr] $T [ra] 
          }
        }
      }
      ;;[array_obj_ref_1078_Update] 
      {
        ||[word_access_complete] 
        {
          ;;[word_0] 
          {
            $T [cr] $T [ca] 
          }
        }
        ;;[array_obj_ref_1078_Merge] 
        {
          $T [merge_req] $T [merge_ack]
        }
      }
      array_obj_ref_1078_sample_start_ <-& (array_obj_ref_1078_word_address_calculated)
      array_obj_ref_1078_sample_start_ &-> (array_obj_ref_1078_Sample)
      array_obj_ref_1078_sample_completed_ <-& (array_obj_ref_1078_Sample)
      array_obj_ref_1078_sample_completed_ &-> ($null)
      array_obj_ref_1078_update_start_ &-> (array_obj_ref_1078_Update)
      array_obj_ref_1078_update_completed_ <-& (array_obj_ref_1078_Update)
      // filter[one][one]
      $T[array_obj_ref_1081_base_address_calculated] 
      $T[array_obj_ref_1081_sample_start_] 
      $T[array_obj_ref_1081_sample_completed_] 
      $T[array_obj_ref_1081_update_start_] 
      $T[array_obj_ref_1081_update_completed_] 
      $T[array_obj_ref_1081_word_address_calculated] 
      $T[array_obj_ref_1081_root_address_calculated] 
      array_obj_ref_1081_word_address_calculated <-& (array_obj_ref_1081_root_address_calculated)
      ;;[array_obj_ref_1081_Sample] 
      {
        ||[word_access_start] 
        {
          ;;[word_0] 
          {
            $T [rr] $T [ra] 
          }
        }
      }
      ;;[array_obj_ref_1081_Update] 
      {
        ||[word_access_complete] 
        {
          ;;[word_0] 
          {
            $T [cr] $T [ca] 
          }
        }
        ;;[array_obj_ref_1081_Merge] 
        {
          $T [merge_req] $T [merge_ack]
        }
      }
      array_obj_ref_1081_sample_start_ <-& (array_obj_ref_1081_word_address_calculated)
      array_obj_ref_1081_sample_start_ &-> (array_obj_ref_1081_Sample)
      array_obj_ref_1081_sample_completed_ <-& (array_obj_ref_1081_Sample)
      array_obj_ref_1081_sample_completed_ &-> ($null)
      array_obj_ref_1081_update_start_ &-> (array_obj_ref_1081_Update)
      array_obj_ref_1081_update_completed_ <-& (array_obj_ref_1081_Update)
      // start: Forward dependencies from (ifmaps2[1 ][col_to_be_replaced_2] * filter[one][one]) to transition type_cast_1083_sample_start_
      type_cast_1083_sample_start_ <-& (array_obj_ref_1078_update_completed_)
      type_cast_1083_sample_start_ <-& (array_obj_ref_1081_update_completed_)
      // done: Forward dependencies from (ifmaps2[1 ][col_to_be_replaced_2] * filter[one][one]) to transition type_cast_1083_sample_start_
      ;;[type_cast_1083_Sample] 
      {
        // unary expression 
        $T [rr] $T [ra] // (split) unary operation
      }
      ;;[type_cast_1083_Update] 
      {
        // unary expression 
        $T [cr] $T [ca] //(split) unary operation
      }
      type_cast_1083_sample_start_ &-> (type_cast_1083_Sample)
      type_cast_1083_sample_completed_ <-& (type_cast_1083_Sample)
      type_cast_1083_sample_completed_ &-> ($null)
      type_cast_1083_update_start_ &-> (type_cast_1083_Update)
      type_cast_1083_update_completed_ <-& (type_cast_1083_Update)
      // Target expression
      // (as target) pp11
      // start: WAR dependencies for pp11
      // done: WAR dependencies for pp11
      // end:  	pp11 := ($bitcast ($uint<16>) (ifmaps2[1 ][col_to_be_replaced_2] * filter[one][one]) )// bits of buffering = 16. 
      // start:  	pp21 := ($bitcast ($uint<16>) (ifmaps2[2 ][col_to_be_replaced_2] * filter[two][one]) )// bits of buffering = 16. 
      //  file prog.linked.opt.aa, line 249
      // Source expression
      // ($bitcast ($uint<16>) (ifmaps2[2 ][col_to_be_replaced_2] * filter[two][one]) )
      $T[type_cast_1093_sample_start_] 
      $T[type_cast_1093_sample_completed_] 
      $T[type_cast_1093_update_start_] 
      $T[type_cast_1093_update_completed_] 
      // (ifmaps2[2 ][col_to_be_replaced_2] * filter[two][one])
      // ifmaps2[2 ][col_to_be_replaced_2]
      $T[array_obj_ref_1088_base_address_calculated] 
      $T[array_obj_ref_1088_sample_start_] 
      $T[array_obj_ref_1088_sample_completed_] 
      $T[array_obj_ref_1088_update_start_] 
      $T[array_obj_ref_1088_update_completed_] 
      $T[array_obj_ref_1088_word_address_calculated] 
      $T[array_obj_ref_1088_root_address_calculated] 
      $T[array_obj_ref_1088_offset_calculated] 
      $T[array_obj_ref_1088_index_resized_1] 
      $T[array_obj_ref_1088_index_scaled_1] 
      $T[array_obj_ref_1088_index_computed_1] 
      // col_to_be_replaced_2
      // start: Forward dependencies from col_to_be_replaced_2 to transition array_obj_ref_1088_index_computed_1
      array_obj_ref_1088_index_computed_1 <-& (MUX_971_update_completed_)
      // done: Forward dependencies from col_to_be_replaced_2 to transition array_obj_ref_1088_index_computed_1
      ;;[array_obj_ref_1088_index_resize_1] 
      {
        $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
      }
      array_obj_ref_1088_index_computed_1 &-> (array_obj_ref_1088_index_resize_1)
      array_obj_ref_1088_index_resized_1 <-& (array_obj_ref_1088_index_resize_1)
      ;;[array_obj_ref_1088_index_scale_1] 
      {
        $T [scale_rename_req] $T [scale_rename_ack] // rename 
      }
      array_obj_ref_1088_index_resized_1 &-> (array_obj_ref_1088_index_scale_1)
      array_obj_ref_1088_index_scaled_1 <-& (array_obj_ref_1088_index_scale_1)
      $T[array_obj_ref_1088_final_index_sum_regn_sample_complete] 
      $T[array_obj_ref_1088_final_index_sum_regn_update_start] 
      ;;[array_obj_ref_1088_final_index_sum_regn_Sample] 
      {
        $T [req] $T [ack] 
      }
      ;;[array_obj_ref_1088_final_index_sum_regn_Update] 
      {
        $T [req] $T [ack] 
      }
      array_obj_ref_1088_index_scaled_1 &-> (array_obj_ref_1088_final_index_sum_regn_Sample)
      array_obj_ref_1088_final_index_sum_regn_sample_complete <-& (array_obj_ref_1088_final_index_sum_regn_Sample)
      array_obj_ref_1088_final_index_sum_regn_update_start &-> (array_obj_ref_1088_final_index_sum_regn_Update)
      array_obj_ref_1088_offset_calculated <-& (array_obj_ref_1088_final_index_sum_regn_Update)
      ;;[array_obj_ref_1088_base_plus_offset] 
      {
        $T [sum_rename_req] $T [sum_rename_ack] // one gets through 
      }
      array_obj_ref_1088_offset_calculated &-> (array_obj_ref_1088_base_plus_offset)
      array_obj_ref_1088_root_address_calculated <-& (array_obj_ref_1088_base_plus_offset)
      ;;[array_obj_ref_1088_word_addrgen] 
      {
        $T [root_register_req] $T [root_register_ack]
      }
      array_obj_ref_1088_root_address_calculated &-> (array_obj_ref_1088_word_addrgen)
      array_obj_ref_1088_word_address_calculated <-& (array_obj_ref_1088_word_addrgen)
      ;;[array_obj_ref_1088_Sample] 
      {
        ||[word_access_start] 
        {
          ;;[word_0] 
          {
            $T [rr] $T [ra] 
          }
        }
      }
      ;;[array_obj_ref_1088_Update] 
      {
        ||[word_access_complete] 
        {
          ;;[word_0] 
          {
            $T [cr] $T [ca] 
          }
        }
        ;;[array_obj_ref_1088_Merge] 
        {
          $T [merge_req] $T [merge_ack]
        }
      }
      array_obj_ref_1088_sample_start_ <-& (array_obj_ref_1088_word_address_calculated)
      array_obj_ref_1088_sample_start_ &-> (array_obj_ref_1088_Sample)
      array_obj_ref_1088_sample_completed_ <-& (array_obj_ref_1088_Sample)
      array_obj_ref_1088_sample_completed_ &-> ($null)
      array_obj_ref_1088_update_start_ &-> (array_obj_ref_1088_Update)
      array_obj_ref_1088_update_completed_ <-& (array_obj_ref_1088_Update)
      // filter[two][one]
      $T[array_obj_ref_1091_base_address_calculated] 
      $T[array_obj_ref_1091_sample_start_] 
      $T[array_obj_ref_1091_sample_completed_] 
      $T[array_obj_ref_1091_update_start_] 
      $T[array_obj_ref_1091_update_completed_] 
      $T[array_obj_ref_1091_word_address_calculated] 
      $T[array_obj_ref_1091_root_address_calculated] 
      array_obj_ref_1091_word_address_calculated <-& (array_obj_ref_1091_root_address_calculated)
      ;;[array_obj_ref_1091_Sample] 
      {
        ||[word_access_start] 
        {
          ;;[word_0] 
          {
            $T [rr] $T [ra] 
          }
        }
      }
      ;;[array_obj_ref_1091_Update] 
      {
        ||[word_access_complete] 
        {
          ;;[word_0] 
          {
            $T [cr] $T [ca] 
          }
        }
        ;;[array_obj_ref_1091_Merge] 
        {
          $T [merge_req] $T [merge_ack]
        }
      }
      array_obj_ref_1091_sample_start_ <-& (array_obj_ref_1091_word_address_calculated)
      array_obj_ref_1091_sample_start_ &-> (array_obj_ref_1091_Sample)
      array_obj_ref_1091_sample_completed_ <-& (array_obj_ref_1091_Sample)
      array_obj_ref_1091_sample_completed_ &-> ($null)
      array_obj_ref_1091_update_start_ &-> (array_obj_ref_1091_Update)
      array_obj_ref_1091_update_completed_ <-& (array_obj_ref_1091_Update)
      // start: Forward dependencies from (ifmaps2[2 ][col_to_be_replaced_2] * filter[two][one]) to transition type_cast_1093_sample_start_
      type_cast_1093_sample_start_ <-& (array_obj_ref_1088_update_completed_)
      type_cast_1093_sample_start_ <-& (array_obj_ref_1091_update_completed_)
      // done: Forward dependencies from (ifmaps2[2 ][col_to_be_replaced_2] * filter[two][one]) to transition type_cast_1093_sample_start_
      ;;[type_cast_1093_Sample] 
      {
        // unary expression 
        $T [rr] $T [ra] // (split) unary operation
      }
      ;;[type_cast_1093_Update] 
      {
        // unary expression 
        $T [cr] $T [ca] //(split) unary operation
      }
      type_cast_1093_sample_start_ &-> (type_cast_1093_Sample)
      type_cast_1093_sample_completed_ <-& (type_cast_1093_Sample)
      type_cast_1093_sample_completed_ &-> ($null)
      type_cast_1093_update_start_ &-> (type_cast_1093_Update)
      type_cast_1093_update_completed_ <-& (type_cast_1093_Update)
      // Target expression
      // (as target) pp21
      // start: WAR dependencies for pp21
      // done: WAR dependencies for pp21
      // end:  	pp21 := ($bitcast ($uint<16>) (ifmaps2[2 ][col_to_be_replaced_2] * filter[two][one]) )// bits of buffering = 16. 
      // start:  	pp31 := ($bitcast ($uint<16>) (ifmaps2[3 ][col_to_be_replaced_2] * filter[three][one]) )// bits of buffering = 16. 
      //  file prog.linked.opt.aa, line 250
      // Source expression
      // ($bitcast ($uint<16>) (ifmaps2[3 ][col_to_be_replaced_2] * filter[three][one]) )
      $T[type_cast_1103_sample_start_] 
      $T[type_cast_1103_sample_completed_] 
      $T[type_cast_1103_update_start_] 
      $T[type_cast_1103_update_completed_] 
      // (ifmaps2[3 ][col_to_be_replaced_2] * filter[three][one])
      // ifmaps2[3 ][col_to_be_replaced_2]
      $T[array_obj_ref_1098_base_address_calculated] 
      $T[array_obj_ref_1098_sample_start_] 
      $T[array_obj_ref_1098_sample_completed_] 
      $T[array_obj_ref_1098_update_start_] 
      $T[array_obj_ref_1098_update_completed_] 
      $T[array_obj_ref_1098_word_address_calculated] 
      $T[array_obj_ref_1098_root_address_calculated] 
      $T[array_obj_ref_1098_offset_calculated] 
      $T[array_obj_ref_1098_index_resized_1] 
      $T[array_obj_ref_1098_index_scaled_1] 
      $T[array_obj_ref_1098_index_computed_1] 
      // col_to_be_replaced_2
      // start: Forward dependencies from col_to_be_replaced_2 to transition array_obj_ref_1098_index_computed_1
      array_obj_ref_1098_index_computed_1 <-& (MUX_971_update_completed_)
      // done: Forward dependencies from col_to_be_replaced_2 to transition array_obj_ref_1098_index_computed_1
      ;;[array_obj_ref_1098_index_resize_1] 
      {
        $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
      }
      array_obj_ref_1098_index_computed_1 &-> (array_obj_ref_1098_index_resize_1)
      array_obj_ref_1098_index_resized_1 <-& (array_obj_ref_1098_index_resize_1)
      ;;[array_obj_ref_1098_index_scale_1] 
      {
        $T [scale_rename_req] $T [scale_rename_ack] // rename 
      }
      array_obj_ref_1098_index_resized_1 &-> (array_obj_ref_1098_index_scale_1)
      array_obj_ref_1098_index_scaled_1 <-& (array_obj_ref_1098_index_scale_1)
      $T[array_obj_ref_1098_final_index_sum_regn_sample_complete] 
      $T[array_obj_ref_1098_final_index_sum_regn_update_start] 
      ;;[array_obj_ref_1098_final_index_sum_regn_Sample] 
      {
        $T [req] $T [ack] 
      }
      ;;[array_obj_ref_1098_final_index_sum_regn_Update] 
      {
        $T [req] $T [ack] 
      }
      array_obj_ref_1098_index_scaled_1 &-> (array_obj_ref_1098_final_index_sum_regn_Sample)
      array_obj_ref_1098_final_index_sum_regn_sample_complete <-& (array_obj_ref_1098_final_index_sum_regn_Sample)
      array_obj_ref_1098_final_index_sum_regn_update_start &-> (array_obj_ref_1098_final_index_sum_regn_Update)
      array_obj_ref_1098_offset_calculated <-& (array_obj_ref_1098_final_index_sum_regn_Update)
      ;;[array_obj_ref_1098_base_plus_offset] 
      {
        $T [sum_rename_req] $T [sum_rename_ack] // one gets through 
      }
      array_obj_ref_1098_offset_calculated &-> (array_obj_ref_1098_base_plus_offset)
      array_obj_ref_1098_root_address_calculated <-& (array_obj_ref_1098_base_plus_offset)
      ;;[array_obj_ref_1098_word_addrgen] 
      {
        $T [root_register_req] $T [root_register_ack]
      }
      array_obj_ref_1098_root_address_calculated &-> (array_obj_ref_1098_word_addrgen)
      array_obj_ref_1098_word_address_calculated <-& (array_obj_ref_1098_word_addrgen)
      ;;[array_obj_ref_1098_Sample] 
      {
        ||[word_access_start] 
        {
          ;;[word_0] 
          {
            $T [rr] $T [ra] 
          }
        }
      }
      ;;[array_obj_ref_1098_Update] 
      {
        ||[word_access_complete] 
        {
          ;;[word_0] 
          {
            $T [cr] $T [ca] 
          }
        }
        ;;[array_obj_ref_1098_Merge] 
        {
          $T [merge_req] $T [merge_ack]
        }
      }
      array_obj_ref_1098_sample_start_ <-& (array_obj_ref_1098_word_address_calculated)
      array_obj_ref_1098_sample_start_ &-> (array_obj_ref_1098_Sample)
      array_obj_ref_1098_sample_completed_ <-& (array_obj_ref_1098_Sample)
      array_obj_ref_1098_sample_completed_ &-> ($null)
      array_obj_ref_1098_update_start_ &-> (array_obj_ref_1098_Update)
      array_obj_ref_1098_update_completed_ <-& (array_obj_ref_1098_Update)
      // filter[three][one]
      $T[array_obj_ref_1101_base_address_calculated] 
      $T[array_obj_ref_1101_sample_start_] 
      $T[array_obj_ref_1101_sample_completed_] 
      $T[array_obj_ref_1101_update_start_] 
      $T[array_obj_ref_1101_update_completed_] 
      $T[array_obj_ref_1101_word_address_calculated] 
      $T[array_obj_ref_1101_root_address_calculated] 
      array_obj_ref_1101_word_address_calculated <-& (array_obj_ref_1101_root_address_calculated)
      ;;[array_obj_ref_1101_Sample] 
      {
        ||[word_access_start] 
        {
          ;;[word_0] 
          {
            $T [rr] $T [ra] 
          }
        }
      }
      ;;[array_obj_ref_1101_Update] 
      {
        ||[word_access_complete] 
        {
          ;;[word_0] 
          {
            $T [cr] $T [ca] 
          }
        }
        ;;[array_obj_ref_1101_Merge] 
        {
          $T [merge_req] $T [merge_ack]
        }
      }
      array_obj_ref_1101_sample_start_ <-& (array_obj_ref_1101_word_address_calculated)
      array_obj_ref_1101_sample_start_ &-> (array_obj_ref_1101_Sample)
      array_obj_ref_1101_sample_completed_ <-& (array_obj_ref_1101_Sample)
      array_obj_ref_1101_sample_completed_ &-> ($null)
      array_obj_ref_1101_update_start_ &-> (array_obj_ref_1101_Update)
      array_obj_ref_1101_update_completed_ <-& (array_obj_ref_1101_Update)
      // start: Forward dependencies from (ifmaps2[3 ][col_to_be_replaced_2] * filter[three][one]) to transition type_cast_1103_sample_start_
      type_cast_1103_sample_start_ <-& (array_obj_ref_1098_update_completed_)
      type_cast_1103_sample_start_ <-& (array_obj_ref_1101_update_completed_)
      // done: Forward dependencies from (ifmaps2[3 ][col_to_be_replaced_2] * filter[three][one]) to transition type_cast_1103_sample_start_
      ;;[type_cast_1103_Sample] 
      {
        // unary expression 
        $T [rr] $T [ra] // (split) unary operation
      }
      ;;[type_cast_1103_Update] 
      {
        // unary expression 
        $T [cr] $T [ca] //(split) unary operation
      }
      type_cast_1103_sample_start_ &-> (type_cast_1103_Sample)
      type_cast_1103_sample_completed_ <-& (type_cast_1103_Sample)
      type_cast_1103_sample_completed_ &-> ($null)
      type_cast_1103_update_start_ &-> (type_cast_1103_Update)
      type_cast_1103_update_completed_ <-& (type_cast_1103_Update)
      // Target expression
      // (as target) pp31
      // start: WAR dependencies for pp31
      // done: WAR dependencies for pp31
      // end:  	pp31 := ($bitcast ($uint<16>) (ifmaps2[3 ][col_to_be_replaced_2] * filter[three][one]) )// bits of buffering = 16. 
      // start:  	pp00 := ($bitcast ($uint<16>) (ifmaps2[0 ][col_to_be_replaced_3] * filter[zero][zero]) )// bits of buffering = 16. 
      //  file prog.linked.opt.aa, line 251
      // Source expression
      // ($bitcast ($uint<16>) (ifmaps2[0 ][col_to_be_replaced_3] * filter[zero][zero]) )
      $T[type_cast_1113_sample_start_] 
      $T[type_cast_1113_sample_completed_] 
      $T[type_cast_1113_update_start_] 
      $T[type_cast_1113_update_completed_] 
      // (ifmaps2[0 ][col_to_be_replaced_3] * filter[zero][zero])
      // ifmaps2[0 ][col_to_be_replaced_3]
      $T[array_obj_ref_1108_base_address_calculated] 
      $T[array_obj_ref_1108_sample_start_] 
      $T[array_obj_ref_1108_sample_completed_] 
      $T[array_obj_ref_1108_update_start_] 
      $T[array_obj_ref_1108_update_completed_] 
      $T[array_obj_ref_1108_word_address_calculated] 
      $T[array_obj_ref_1108_root_address_calculated] 
      $T[array_obj_ref_1108_offset_calculated] 
      $T[array_obj_ref_1108_index_resized_1] 
      $T[array_obj_ref_1108_index_scaled_1] 
      $T[array_obj_ref_1108_index_computed_1] 
      // col_to_be_replaced_3
      // start: Forward dependencies from col_to_be_replaced_3 to transition array_obj_ref_1108_index_computed_1
      array_obj_ref_1108_index_computed_1 <-& (MUX_983_update_completed_)
      // done: Forward dependencies from col_to_be_replaced_3 to transition array_obj_ref_1108_index_computed_1
      ;;[array_obj_ref_1108_index_resize_1] 
      {
        $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
      }
      array_obj_ref_1108_index_computed_1 &-> (array_obj_ref_1108_index_resize_1)
      array_obj_ref_1108_index_resized_1 <-& (array_obj_ref_1108_index_resize_1)
      ;;[array_obj_ref_1108_index_scale_1] 
      {
        $T [scale_rename_req] $T [scale_rename_ack] // rename 
      }
      array_obj_ref_1108_index_resized_1 &-> (array_obj_ref_1108_index_scale_1)
      array_obj_ref_1108_index_scaled_1 <-& (array_obj_ref_1108_index_scale_1)
      $T[array_obj_ref_1108_final_index_sum_regn_sample_complete] 
      $T[array_obj_ref_1108_final_index_sum_regn_update_start] 
      ;;[array_obj_ref_1108_final_index_sum_regn_Sample] 
      {
        $T [req] $T [ack] 
      }
      ;;[array_obj_ref_1108_final_index_sum_regn_Update] 
      {
        $T [req] $T [ack] 
      }
      array_obj_ref_1108_index_scaled_1 &-> (array_obj_ref_1108_final_index_sum_regn_Sample)
      array_obj_ref_1108_final_index_sum_regn_sample_complete <-& (array_obj_ref_1108_final_index_sum_regn_Sample)
      array_obj_ref_1108_final_index_sum_regn_update_start &-> (array_obj_ref_1108_final_index_sum_regn_Update)
      array_obj_ref_1108_offset_calculated <-& (array_obj_ref_1108_final_index_sum_regn_Update)
      ;;[array_obj_ref_1108_base_plus_offset] 
      {
        $T [sum_rename_req] $T [sum_rename_ack] // one gets through 
      }
      array_obj_ref_1108_offset_calculated &-> (array_obj_ref_1108_base_plus_offset)
      array_obj_ref_1108_root_address_calculated <-& (array_obj_ref_1108_base_plus_offset)
      ;;[array_obj_ref_1108_word_addrgen] 
      {
        $T [root_register_req] $T [root_register_ack]
      }
      array_obj_ref_1108_root_address_calculated &-> (array_obj_ref_1108_word_addrgen)
      array_obj_ref_1108_word_address_calculated <-& (array_obj_ref_1108_word_addrgen)
      ;;[array_obj_ref_1108_Sample] 
      {
        ||[word_access_start] 
        {
          ;;[word_0] 
          {
            $T [rr] $T [ra] 
          }
        }
      }
      ;;[array_obj_ref_1108_Update] 
      {
        ||[word_access_complete] 
        {
          ;;[word_0] 
          {
            $T [cr] $T [ca] 
          }
        }
        ;;[array_obj_ref_1108_Merge] 
        {
          $T [merge_req] $T [merge_ack]
        }
      }
      array_obj_ref_1108_sample_start_ <-& (array_obj_ref_1108_word_address_calculated)
      array_obj_ref_1108_sample_start_ &-> (array_obj_ref_1108_Sample)
      array_obj_ref_1108_sample_completed_ <-& (array_obj_ref_1108_Sample)
      array_obj_ref_1108_sample_completed_ &-> ($null)
      array_obj_ref_1108_update_start_ &-> (array_obj_ref_1108_Update)
      array_obj_ref_1108_update_completed_ <-& (array_obj_ref_1108_Update)
      // filter[zero][zero]
      $T[array_obj_ref_1111_base_address_calculated] 
      $T[array_obj_ref_1111_sample_start_] 
      $T[array_obj_ref_1111_sample_completed_] 
      $T[array_obj_ref_1111_update_start_] 
      $T[array_obj_ref_1111_update_completed_] 
      $T[array_obj_ref_1111_word_address_calculated] 
      $T[array_obj_ref_1111_root_address_calculated] 
      array_obj_ref_1111_word_address_calculated <-& (array_obj_ref_1111_root_address_calculated)
      ;;[array_obj_ref_1111_Sample] 
      {
        ||[word_access_start] 
        {
          ;;[word_0] 
          {
            $T [rr] $T [ra] 
          }
        }
      }
      ;;[array_obj_ref_1111_Update] 
      {
        ||[word_access_complete] 
        {
          ;;[word_0] 
          {
            $T [cr] $T [ca] 
          }
        }
        ;;[array_obj_ref_1111_Merge] 
        {
          $T [merge_req] $T [merge_ack]
        }
      }
      array_obj_ref_1111_sample_start_ <-& (array_obj_ref_1111_word_address_calculated)
      array_obj_ref_1111_sample_start_ &-> (array_obj_ref_1111_Sample)
      array_obj_ref_1111_sample_completed_ <-& (array_obj_ref_1111_Sample)
      array_obj_ref_1111_sample_completed_ &-> ($null)
      array_obj_ref_1111_update_start_ &-> (array_obj_ref_1111_Update)
      array_obj_ref_1111_update_completed_ <-& (array_obj_ref_1111_Update)
      // start: Forward dependencies from (ifmaps2[0 ][col_to_be_replaced_3] * filter[zero][zero]) to transition type_cast_1113_sample_start_
      type_cast_1113_sample_start_ <-& (array_obj_ref_1108_update_completed_)
      type_cast_1113_sample_start_ <-& (array_obj_ref_1111_update_completed_)
      // done: Forward dependencies from (ifmaps2[0 ][col_to_be_replaced_3] * filter[zero][zero]) to transition type_cast_1113_sample_start_
      ;;[type_cast_1113_Sample] 
      {
        // unary expression 
        $T [rr] $T [ra] // (split) unary operation
      }
      ;;[type_cast_1113_Update] 
      {
        // unary expression 
        $T [cr] $T [ca] //(split) unary operation
      }
      type_cast_1113_sample_start_ &-> (type_cast_1113_Sample)
      type_cast_1113_sample_completed_ <-& (type_cast_1113_Sample)
      type_cast_1113_sample_completed_ &-> ($null)
      type_cast_1113_update_start_ &-> (type_cast_1113_Update)
      type_cast_1113_update_completed_ <-& (type_cast_1113_Update)
      // Target expression
      // (as target) pp00
      // start: WAR dependencies for pp00
      // done: WAR dependencies for pp00
      // end:  	pp00 := ($bitcast ($uint<16>) (ifmaps2[0 ][col_to_be_replaced_3] * filter[zero][zero]) )// bits of buffering = 16. 
      // start:  	pp10 := ($bitcast ($uint<16>) (ifmaps2[1 ][col_to_be_replaced_3] * filter[one][zero]) )// bits of buffering = 16. 
      //  file prog.linked.opt.aa, line 252
      // Source expression
      // ($bitcast ($uint<16>) (ifmaps2[1 ][col_to_be_replaced_3] * filter[one][zero]) )
      $T[type_cast_1123_sample_start_] 
      $T[type_cast_1123_sample_completed_] 
      $T[type_cast_1123_update_start_] 
      $T[type_cast_1123_update_completed_] 
      // (ifmaps2[1 ][col_to_be_replaced_3] * filter[one][zero])
      // ifmaps2[1 ][col_to_be_replaced_3]
      $T[array_obj_ref_1118_base_address_calculated] 
      $T[array_obj_ref_1118_sample_start_] 
      $T[array_obj_ref_1118_sample_completed_] 
      $T[array_obj_ref_1118_update_start_] 
      $T[array_obj_ref_1118_update_completed_] 
      $T[array_obj_ref_1118_word_address_calculated] 
      $T[array_obj_ref_1118_root_address_calculated] 
      $T[array_obj_ref_1118_offset_calculated] 
      $T[array_obj_ref_1118_index_resized_1] 
      $T[array_obj_ref_1118_index_scaled_1] 
      $T[array_obj_ref_1118_index_computed_1] 
      // col_to_be_replaced_3
      // start: Forward dependencies from col_to_be_replaced_3 to transition array_obj_ref_1118_index_computed_1
      array_obj_ref_1118_index_computed_1 <-& (MUX_983_update_completed_)
      // done: Forward dependencies from col_to_be_replaced_3 to transition array_obj_ref_1118_index_computed_1
      ;;[array_obj_ref_1118_index_resize_1] 
      {
        $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
      }
      array_obj_ref_1118_index_computed_1 &-> (array_obj_ref_1118_index_resize_1)
      array_obj_ref_1118_index_resized_1 <-& (array_obj_ref_1118_index_resize_1)
      ;;[array_obj_ref_1118_index_scale_1] 
      {
        $T [scale_rename_req] $T [scale_rename_ack] // rename 
      }
      array_obj_ref_1118_index_resized_1 &-> (array_obj_ref_1118_index_scale_1)
      array_obj_ref_1118_index_scaled_1 <-& (array_obj_ref_1118_index_scale_1)
      $T[array_obj_ref_1118_final_index_sum_regn_sample_complete] 
      $T[array_obj_ref_1118_final_index_sum_regn_update_start] 
      ;;[array_obj_ref_1118_final_index_sum_regn_Sample] 
      {
        $T [req] $T [ack] 
      }
      ;;[array_obj_ref_1118_final_index_sum_regn_Update] 
      {
        $T [req] $T [ack] 
      }
      array_obj_ref_1118_index_scaled_1 &-> (array_obj_ref_1118_final_index_sum_regn_Sample)
      array_obj_ref_1118_final_index_sum_regn_sample_complete <-& (array_obj_ref_1118_final_index_sum_regn_Sample)
      array_obj_ref_1118_final_index_sum_regn_update_start &-> (array_obj_ref_1118_final_index_sum_regn_Update)
      array_obj_ref_1118_offset_calculated <-& (array_obj_ref_1118_final_index_sum_regn_Update)
      ;;[array_obj_ref_1118_base_plus_offset] 
      {
        $T [sum_rename_req] $T [sum_rename_ack] // one gets through 
      }
      array_obj_ref_1118_offset_calculated &-> (array_obj_ref_1118_base_plus_offset)
      array_obj_ref_1118_root_address_calculated <-& (array_obj_ref_1118_base_plus_offset)
      ;;[array_obj_ref_1118_word_addrgen] 
      {
        $T [root_register_req] $T [root_register_ack]
      }
      array_obj_ref_1118_root_address_calculated &-> (array_obj_ref_1118_word_addrgen)
      array_obj_ref_1118_word_address_calculated <-& (array_obj_ref_1118_word_addrgen)
      ;;[array_obj_ref_1118_Sample] 
      {
        ||[word_access_start] 
        {
          ;;[word_0] 
          {
            $T [rr] $T [ra] 
          }
        }
      }
      ;;[array_obj_ref_1118_Update] 
      {
        ||[word_access_complete] 
        {
          ;;[word_0] 
          {
            $T [cr] $T [ca] 
          }
        }
        ;;[array_obj_ref_1118_Merge] 
        {
          $T [merge_req] $T [merge_ack]
        }
      }
      array_obj_ref_1118_sample_start_ <-& (array_obj_ref_1118_word_address_calculated)
      array_obj_ref_1118_sample_start_ &-> (array_obj_ref_1118_Sample)
      array_obj_ref_1118_sample_completed_ <-& (array_obj_ref_1118_Sample)
      array_obj_ref_1118_sample_completed_ &-> ($null)
      array_obj_ref_1118_update_start_ &-> (array_obj_ref_1118_Update)
      array_obj_ref_1118_update_completed_ <-& (array_obj_ref_1118_Update)
      // filter[one][zero]
      $T[array_obj_ref_1121_base_address_calculated] 
      $T[array_obj_ref_1121_sample_start_] 
      $T[array_obj_ref_1121_sample_completed_] 
      $T[array_obj_ref_1121_update_start_] 
      $T[array_obj_ref_1121_update_completed_] 
      $T[array_obj_ref_1121_word_address_calculated] 
      $T[array_obj_ref_1121_root_address_calculated] 
      array_obj_ref_1121_word_address_calculated <-& (array_obj_ref_1121_root_address_calculated)
      ;;[array_obj_ref_1121_Sample] 
      {
        ||[word_access_start] 
        {
          ;;[word_0] 
          {
            $T [rr] $T [ra] 
          }
        }
      }
      ;;[array_obj_ref_1121_Update] 
      {
        ||[word_access_complete] 
        {
          ;;[word_0] 
          {
            $T [cr] $T [ca] 
          }
        }
        ;;[array_obj_ref_1121_Merge] 
        {
          $T [merge_req] $T [merge_ack]
        }
      }
      array_obj_ref_1121_sample_start_ <-& (array_obj_ref_1121_word_address_calculated)
      array_obj_ref_1121_sample_start_ &-> (array_obj_ref_1121_Sample)
      array_obj_ref_1121_sample_completed_ <-& (array_obj_ref_1121_Sample)
      array_obj_ref_1121_sample_completed_ &-> ($null)
      array_obj_ref_1121_update_start_ &-> (array_obj_ref_1121_Update)
      array_obj_ref_1121_update_completed_ <-& (array_obj_ref_1121_Update)
      // start: Forward dependencies from (ifmaps2[1 ][col_to_be_replaced_3] * filter[one][zero]) to transition type_cast_1123_sample_start_
      type_cast_1123_sample_start_ <-& (array_obj_ref_1118_update_completed_)
      type_cast_1123_sample_start_ <-& (array_obj_ref_1121_update_completed_)
      // done: Forward dependencies from (ifmaps2[1 ][col_to_be_replaced_3] * filter[one][zero]) to transition type_cast_1123_sample_start_
      ;;[type_cast_1123_Sample] 
      {
        // unary expression 
        $T [rr] $T [ra] // (split) unary operation
      }
      ;;[type_cast_1123_Update] 
      {
        // unary expression 
        $T [cr] $T [ca] //(split) unary operation
      }
      type_cast_1123_sample_start_ &-> (type_cast_1123_Sample)
      type_cast_1123_sample_completed_ <-& (type_cast_1123_Sample)
      type_cast_1123_sample_completed_ &-> ($null)
      type_cast_1123_update_start_ &-> (type_cast_1123_Update)
      type_cast_1123_update_completed_ <-& (type_cast_1123_Update)
      // Target expression
      // (as target) pp10
      // start: WAR dependencies for pp10
      // done: WAR dependencies for pp10
      // end:  	pp10 := ($bitcast ($uint<16>) (ifmaps2[1 ][col_to_be_replaced_3] * filter[one][zero]) )// bits of buffering = 16. 
      // start:  	pp20 := ($bitcast ($uint<16>) (ifmaps2[2 ][col_to_be_replaced_3] * filter[two][zero]) )// bits of buffering = 16. 
      //  file prog.linked.opt.aa, line 253
      // Source expression
      // ($bitcast ($uint<16>) (ifmaps2[2 ][col_to_be_replaced_3] * filter[two][zero]) )
      $T[type_cast_1133_sample_start_] 
      $T[type_cast_1133_sample_completed_] 
      $T[type_cast_1133_update_start_] 
      $T[type_cast_1133_update_completed_] 
      // (ifmaps2[2 ][col_to_be_replaced_3] * filter[two][zero])
      // ifmaps2[2 ][col_to_be_replaced_3]
      $T[array_obj_ref_1128_base_address_calculated] 
      $T[array_obj_ref_1128_sample_start_] 
      $T[array_obj_ref_1128_sample_completed_] 
      $T[array_obj_ref_1128_update_start_] 
      $T[array_obj_ref_1128_update_completed_] 
      $T[array_obj_ref_1128_word_address_calculated] 
      $T[array_obj_ref_1128_root_address_calculated] 
      $T[array_obj_ref_1128_offset_calculated] 
      $T[array_obj_ref_1128_index_resized_1] 
      $T[array_obj_ref_1128_index_scaled_1] 
      $T[array_obj_ref_1128_index_computed_1] 
      // col_to_be_replaced_3
      // start: Forward dependencies from col_to_be_replaced_3 to transition array_obj_ref_1128_index_computed_1
      array_obj_ref_1128_index_computed_1 <-& (MUX_983_update_completed_)
      // done: Forward dependencies from col_to_be_replaced_3 to transition array_obj_ref_1128_index_computed_1
      ;;[array_obj_ref_1128_index_resize_1] 
      {
        $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
      }
      array_obj_ref_1128_index_computed_1 &-> (array_obj_ref_1128_index_resize_1)
      array_obj_ref_1128_index_resized_1 <-& (array_obj_ref_1128_index_resize_1)
      ;;[array_obj_ref_1128_index_scale_1] 
      {
        $T [scale_rename_req] $T [scale_rename_ack] // rename 
      }
      array_obj_ref_1128_index_resized_1 &-> (array_obj_ref_1128_index_scale_1)
      array_obj_ref_1128_index_scaled_1 <-& (array_obj_ref_1128_index_scale_1)
      $T[array_obj_ref_1128_final_index_sum_regn_sample_complete] 
      $T[array_obj_ref_1128_final_index_sum_regn_update_start] 
      ;;[array_obj_ref_1128_final_index_sum_regn_Sample] 
      {
        $T [req] $T [ack] 
      }
      ;;[array_obj_ref_1128_final_index_sum_regn_Update] 
      {
        $T [req] $T [ack] 
      }
      array_obj_ref_1128_index_scaled_1 &-> (array_obj_ref_1128_final_index_sum_regn_Sample)
      array_obj_ref_1128_final_index_sum_regn_sample_complete <-& (array_obj_ref_1128_final_index_sum_regn_Sample)
      array_obj_ref_1128_final_index_sum_regn_update_start &-> (array_obj_ref_1128_final_index_sum_regn_Update)
      array_obj_ref_1128_offset_calculated <-& (array_obj_ref_1128_final_index_sum_regn_Update)
      ;;[array_obj_ref_1128_base_plus_offset] 
      {
        $T [sum_rename_req] $T [sum_rename_ack] // one gets through 
      }
      array_obj_ref_1128_offset_calculated &-> (array_obj_ref_1128_base_plus_offset)
      array_obj_ref_1128_root_address_calculated <-& (array_obj_ref_1128_base_plus_offset)
      ;;[array_obj_ref_1128_word_addrgen] 
      {
        $T [root_register_req] $T [root_register_ack]
      }
      array_obj_ref_1128_root_address_calculated &-> (array_obj_ref_1128_word_addrgen)
      array_obj_ref_1128_word_address_calculated <-& (array_obj_ref_1128_word_addrgen)
      ;;[array_obj_ref_1128_Sample] 
      {
        ||[word_access_start] 
        {
          ;;[word_0] 
          {
            $T [rr] $T [ra] 
          }
        }
      }
      ;;[array_obj_ref_1128_Update] 
      {
        ||[word_access_complete] 
        {
          ;;[word_0] 
          {
            $T [cr] $T [ca] 
          }
        }
        ;;[array_obj_ref_1128_Merge] 
        {
          $T [merge_req] $T [merge_ack]
        }
      }
      array_obj_ref_1128_sample_start_ <-& (array_obj_ref_1128_word_address_calculated)
      array_obj_ref_1128_sample_start_ &-> (array_obj_ref_1128_Sample)
      array_obj_ref_1128_sample_completed_ <-& (array_obj_ref_1128_Sample)
      array_obj_ref_1128_sample_completed_ &-> ($null)
      array_obj_ref_1128_update_start_ &-> (array_obj_ref_1128_Update)
      array_obj_ref_1128_update_completed_ <-& (array_obj_ref_1128_Update)
      // filter[two][zero]
      $T[array_obj_ref_1131_base_address_calculated] 
      $T[array_obj_ref_1131_sample_start_] 
      $T[array_obj_ref_1131_sample_completed_] 
      $T[array_obj_ref_1131_update_start_] 
      $T[array_obj_ref_1131_update_completed_] 
      $T[array_obj_ref_1131_word_address_calculated] 
      $T[array_obj_ref_1131_root_address_calculated] 
      array_obj_ref_1131_word_address_calculated <-& (array_obj_ref_1131_root_address_calculated)
      ;;[array_obj_ref_1131_Sample] 
      {
        ||[word_access_start] 
        {
          ;;[word_0] 
          {
            $T [rr] $T [ra] 
          }
        }
      }
      ;;[array_obj_ref_1131_Update] 
      {
        ||[word_access_complete] 
        {
          ;;[word_0] 
          {
            $T [cr] $T [ca] 
          }
        }
        ;;[array_obj_ref_1131_Merge] 
        {
          $T [merge_req] $T [merge_ack]
        }
      }
      array_obj_ref_1131_sample_start_ <-& (array_obj_ref_1131_word_address_calculated)
      array_obj_ref_1131_sample_start_ &-> (array_obj_ref_1131_Sample)
      array_obj_ref_1131_sample_completed_ <-& (array_obj_ref_1131_Sample)
      array_obj_ref_1131_sample_completed_ &-> ($null)
      array_obj_ref_1131_update_start_ &-> (array_obj_ref_1131_Update)
      array_obj_ref_1131_update_completed_ <-& (array_obj_ref_1131_Update)
      // start: Forward dependencies from (ifmaps2[2 ][col_to_be_replaced_3] * filter[two][zero]) to transition type_cast_1133_sample_start_
      type_cast_1133_sample_start_ <-& (array_obj_ref_1128_update_completed_)
      type_cast_1133_sample_start_ <-& (array_obj_ref_1131_update_completed_)
      // done: Forward dependencies from (ifmaps2[2 ][col_to_be_replaced_3] * filter[two][zero]) to transition type_cast_1133_sample_start_
      ;;[type_cast_1133_Sample] 
      {
        // unary expression 
        $T [rr] $T [ra] // (split) unary operation
      }
      ;;[type_cast_1133_Update] 
      {
        // unary expression 
        $T [cr] $T [ca] //(split) unary operation
      }
      type_cast_1133_sample_start_ &-> (type_cast_1133_Sample)
      type_cast_1133_sample_completed_ <-& (type_cast_1133_Sample)
      type_cast_1133_sample_completed_ &-> ($null)
      type_cast_1133_update_start_ &-> (type_cast_1133_Update)
      type_cast_1133_update_completed_ <-& (type_cast_1133_Update)
      // Target expression
      // (as target) pp20
      // start: WAR dependencies for pp20
      // done: WAR dependencies for pp20
      // end:  	pp20 := ($bitcast ($uint<16>) (ifmaps2[2 ][col_to_be_replaced_3] * filter[two][zero]) )// bits of buffering = 16. 
      // start:  	pp30 := ($bitcast ($uint<16>) (ifmaps2[3 ][col_to_be_replaced_3] * filter[three][zero]) )// bits of buffering = 16. 
      //  file prog.linked.opt.aa, line 254
      // Source expression
      // ($bitcast ($uint<16>) (ifmaps2[3 ][col_to_be_replaced_3] * filter[three][zero]) )
      $T[type_cast_1143_sample_start_] 
      $T[type_cast_1143_sample_completed_] 
      $T[type_cast_1143_update_start_] 
      $T[type_cast_1143_update_completed_] 
      // (ifmaps2[3 ][col_to_be_replaced_3] * filter[three][zero])
      // ifmaps2[3 ][col_to_be_replaced_3]
      $T[array_obj_ref_1138_base_address_calculated] 
      $T[array_obj_ref_1138_sample_start_] 
      $T[array_obj_ref_1138_sample_completed_] 
      $T[array_obj_ref_1138_update_start_] 
      $T[array_obj_ref_1138_update_completed_] 
      $T[array_obj_ref_1138_word_address_calculated] 
      $T[array_obj_ref_1138_root_address_calculated] 
      $T[array_obj_ref_1138_offset_calculated] 
      $T[array_obj_ref_1138_index_resized_1] 
      $T[array_obj_ref_1138_index_scaled_1] 
      $T[array_obj_ref_1138_index_computed_1] 
      // col_to_be_replaced_3
      // start: Forward dependencies from col_to_be_replaced_3 to transition array_obj_ref_1138_index_computed_1
      array_obj_ref_1138_index_computed_1 <-& (MUX_983_update_completed_)
      // done: Forward dependencies from col_to_be_replaced_3 to transition array_obj_ref_1138_index_computed_1
      ;;[array_obj_ref_1138_index_resize_1] 
      {
        $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
      }
      array_obj_ref_1138_index_computed_1 &-> (array_obj_ref_1138_index_resize_1)
      array_obj_ref_1138_index_resized_1 <-& (array_obj_ref_1138_index_resize_1)
      ;;[array_obj_ref_1138_index_scale_1] 
      {
        $T [scale_rename_req] $T [scale_rename_ack] // rename 
      }
      array_obj_ref_1138_index_resized_1 &-> (array_obj_ref_1138_index_scale_1)
      array_obj_ref_1138_index_scaled_1 <-& (array_obj_ref_1138_index_scale_1)
      $T[array_obj_ref_1138_final_index_sum_regn_sample_complete] 
      $T[array_obj_ref_1138_final_index_sum_regn_update_start] 
      ;;[array_obj_ref_1138_final_index_sum_regn_Sample] 
      {
        $T [req] $T [ack] 
      }
      ;;[array_obj_ref_1138_final_index_sum_regn_Update] 
      {
        $T [req] $T [ack] 
      }
      array_obj_ref_1138_index_scaled_1 &-> (array_obj_ref_1138_final_index_sum_regn_Sample)
      array_obj_ref_1138_final_index_sum_regn_sample_complete <-& (array_obj_ref_1138_final_index_sum_regn_Sample)
      array_obj_ref_1138_final_index_sum_regn_update_start &-> (array_obj_ref_1138_final_index_sum_regn_Update)
      array_obj_ref_1138_offset_calculated <-& (array_obj_ref_1138_final_index_sum_regn_Update)
      ;;[array_obj_ref_1138_base_plus_offset] 
      {
        $T [sum_rename_req] $T [sum_rename_ack] // one gets through 
      }
      array_obj_ref_1138_offset_calculated &-> (array_obj_ref_1138_base_plus_offset)
      array_obj_ref_1138_root_address_calculated <-& (array_obj_ref_1138_base_plus_offset)
      ;;[array_obj_ref_1138_word_addrgen] 
      {
        $T [root_register_req] $T [root_register_ack]
      }
      array_obj_ref_1138_root_address_calculated &-> (array_obj_ref_1138_word_addrgen)
      array_obj_ref_1138_word_address_calculated <-& (array_obj_ref_1138_word_addrgen)
      ;;[array_obj_ref_1138_Sample] 
      {
        ||[word_access_start] 
        {
          ;;[word_0] 
          {
            $T [rr] $T [ra] 
          }
        }
      }
      ;;[array_obj_ref_1138_Update] 
      {
        ||[word_access_complete] 
        {
          ;;[word_0] 
          {
            $T [cr] $T [ca] 
          }
        }
        ;;[array_obj_ref_1138_Merge] 
        {
          $T [merge_req] $T [merge_ack]
        }
      }
      array_obj_ref_1138_sample_start_ <-& (array_obj_ref_1138_word_address_calculated)
      array_obj_ref_1138_sample_start_ &-> (array_obj_ref_1138_Sample)
      array_obj_ref_1138_sample_completed_ <-& (array_obj_ref_1138_Sample)
      array_obj_ref_1138_sample_completed_ &-> ($null)
      array_obj_ref_1138_update_start_ &-> (array_obj_ref_1138_Update)
      array_obj_ref_1138_update_completed_ <-& (array_obj_ref_1138_Update)
      // filter[three][zero]
      $T[array_obj_ref_1141_base_address_calculated] 
      $T[array_obj_ref_1141_sample_start_] 
      $T[array_obj_ref_1141_sample_completed_] 
      $T[array_obj_ref_1141_update_start_] 
      $T[array_obj_ref_1141_update_completed_] 
      $T[array_obj_ref_1141_word_address_calculated] 
      $T[array_obj_ref_1141_root_address_calculated] 
      array_obj_ref_1141_word_address_calculated <-& (array_obj_ref_1141_root_address_calculated)
      ;;[array_obj_ref_1141_Sample] 
      {
        ||[word_access_start] 
        {
          ;;[word_0] 
          {
            $T [rr] $T [ra] 
          }
        }
      }
      ;;[array_obj_ref_1141_Update] 
      {
        ||[word_access_complete] 
        {
          ;;[word_0] 
          {
            $T [cr] $T [ca] 
          }
        }
        ;;[array_obj_ref_1141_Merge] 
        {
          $T [merge_req] $T [merge_ack]
        }
      }
      array_obj_ref_1141_sample_start_ <-& (array_obj_ref_1141_word_address_calculated)
      array_obj_ref_1141_sample_start_ &-> (array_obj_ref_1141_Sample)
      array_obj_ref_1141_sample_completed_ <-& (array_obj_ref_1141_Sample)
      array_obj_ref_1141_sample_completed_ &-> ($null)
      array_obj_ref_1141_update_start_ &-> (array_obj_ref_1141_Update)
      array_obj_ref_1141_update_completed_ <-& (array_obj_ref_1141_Update)
      // start: Forward dependencies from (ifmaps2[3 ][col_to_be_replaced_3] * filter[three][zero]) to transition type_cast_1143_sample_start_
      type_cast_1143_sample_start_ <-& (array_obj_ref_1138_update_completed_)
      type_cast_1143_sample_start_ <-& (array_obj_ref_1141_update_completed_)
      // done: Forward dependencies from (ifmaps2[3 ][col_to_be_replaced_3] * filter[three][zero]) to transition type_cast_1143_sample_start_
      ;;[type_cast_1143_Sample] 
      {
        // unary expression 
        $T [rr] $T [ra] // (split) unary operation
      }
      ;;[type_cast_1143_Update] 
      {
        // unary expression 
        $T [cr] $T [ca] //(split) unary operation
      }
      type_cast_1143_sample_start_ &-> (type_cast_1143_Sample)
      type_cast_1143_sample_completed_ <-& (type_cast_1143_Sample)
      type_cast_1143_sample_completed_ &-> ($null)
      type_cast_1143_update_start_ &-> (type_cast_1143_Update)
      type_cast_1143_update_completed_ <-& (type_cast_1143_Update)
      // Target expression
      // (as target) pp30
      // start: WAR dependencies for pp30
      // done: WAR dependencies for pp30
      // end:  	pp30 := ($bitcast ($uint<16>) (ifmaps2[3 ][col_to_be_replaced_3] * filter[three][zero]) )// bits of buffering = 16. 
      // start:  	sum0 := ($bitcast ($uint<16>) (pp00 + pp01) )// bits of buffering = 16. 
      //  file prog.linked.opt.aa, line 255
      // Source expression
      // ($bitcast ($uint<16>) (pp00 + pp01) )
      $T[type_cast_1149_sample_start_] 
      $T[type_cast_1149_sample_completed_] 
      $T[type_cast_1149_update_start_] 
      $T[type_cast_1149_update_completed_] 
      // (pp00 + pp01)
      // pp00
      // pp01
      // start: Forward dependencies from (pp00 + pp01) to transition type_cast_1149_sample_start_
      type_cast_1149_sample_start_ <-& (type_cast_1073_update_completed_)
      type_cast_1149_sample_start_ <-& (type_cast_1113_update_completed_)
      // done: Forward dependencies from (pp00 + pp01) to transition type_cast_1149_sample_start_
      ;;[type_cast_1149_Sample] 
      {
        // unary expression 
        $T [rr] $T [ra] // (split) unary operation
      }
      ;;[type_cast_1149_Update] 
      {
        // unary expression 
        $T [cr] $T [ca] //(split) unary operation
      }
      type_cast_1149_sample_start_ &-> (type_cast_1149_Sample)
      type_cast_1149_sample_completed_ <-& (type_cast_1149_Sample)
      type_cast_1149_sample_completed_ &-> ($null)
      type_cast_1149_update_start_ &-> (type_cast_1149_Update)
      type_cast_1149_update_completed_ <-& (type_cast_1149_Update)
      // Target expression
      // (as target) sum0
      // start: WAR dependencies for sum0
      // done: WAR dependencies for sum0
      // end:  	sum0 := ($bitcast ($uint<16>) (pp00 + pp01) )// bits of buffering = 16. 
      // start:  	sum1 := ($bitcast ($uint<16>) (pp02 + pp03) )// bits of buffering = 16. 
      //  file prog.linked.opt.aa, line 256
      // Source expression
      // ($bitcast ($uint<16>) (pp02 + pp03) )
      $T[type_cast_1155_sample_start_] 
      $T[type_cast_1155_sample_completed_] 
      $T[type_cast_1155_update_start_] 
      $T[type_cast_1155_update_completed_] 
      // (pp02 + pp03)
      // pp02
      // pp03
      // start: Forward dependencies from (pp02 + pp03) to transition type_cast_1155_sample_start_
      type_cast_1155_sample_start_ <-& (type_cast_993_update_completed_)
      type_cast_1155_sample_start_ <-& (type_cast_1033_update_completed_)
      // done: Forward dependencies from (pp02 + pp03) to transition type_cast_1155_sample_start_
      ;;[type_cast_1155_Sample] 
      {
        // unary expression 
        $T [rr] $T [ra] // (split) unary operation
      }
      ;;[type_cast_1155_Update] 
      {
        // unary expression 
        $T [cr] $T [ca] //(split) unary operation
      }
      type_cast_1155_sample_start_ &-> (type_cast_1155_Sample)
      type_cast_1155_sample_completed_ <-& (type_cast_1155_Sample)
      type_cast_1155_sample_completed_ &-> ($null)
      type_cast_1155_update_start_ &-> (type_cast_1155_Update)
      type_cast_1155_update_completed_ <-& (type_cast_1155_Update)
      // Target expression
      // (as target) sum1
      // start: WAR dependencies for sum1
      // done: WAR dependencies for sum1
      // end:  	sum1 := ($bitcast ($uint<16>) (pp02 + pp03) )// bits of buffering = 16. 
      // start:  	sum2 := ($bitcast ($uint<16>) (pp10 + pp11) )// bits of buffering = 16. 
      //  file prog.linked.opt.aa, line 257
      // Source expression
      // ($bitcast ($uint<16>) (pp10 + pp11) )
      $T[type_cast_1161_sample_start_] 
      $T[type_cast_1161_sample_completed_] 
      $T[type_cast_1161_update_start_] 
      $T[type_cast_1161_update_completed_] 
      // (pp10 + pp11)
      // pp10
      // pp11
      // start: Forward dependencies from (pp10 + pp11) to transition type_cast_1161_sample_start_
      type_cast_1161_sample_start_ <-& (type_cast_1083_update_completed_)
      type_cast_1161_sample_start_ <-& (type_cast_1123_update_completed_)
      // done: Forward dependencies from (pp10 + pp11) to transition type_cast_1161_sample_start_
      ;;[type_cast_1161_Sample] 
      {
        // unary expression 
        $T [rr] $T [ra] // (split) unary operation
      }
      ;;[type_cast_1161_Update] 
      {
        // unary expression 
        $T [cr] $T [ca] //(split) unary operation
      }
      type_cast_1161_sample_start_ &-> (type_cast_1161_Sample)
      type_cast_1161_sample_completed_ <-& (type_cast_1161_Sample)
      type_cast_1161_sample_completed_ &-> ($null)
      type_cast_1161_update_start_ &-> (type_cast_1161_Update)
      type_cast_1161_update_completed_ <-& (type_cast_1161_Update)
      // Target expression
      // (as target) sum2
      // start: WAR dependencies for sum2
      // done: WAR dependencies for sum2
      // end:  	sum2 := ($bitcast ($uint<16>) (pp10 + pp11) )// bits of buffering = 16. 
      // start:  	sum3 := ($bitcast ($uint<16>) (pp12 + pp13) )// bits of buffering = 16. 
      //  file prog.linked.opt.aa, line 258
      // Source expression
      // ($bitcast ($uint<16>) (pp12 + pp13) )
      $T[type_cast_1167_sample_start_] 
      $T[type_cast_1167_sample_completed_] 
      $T[type_cast_1167_update_start_] 
      $T[type_cast_1167_update_completed_] 
      // (pp12 + pp13)
      // pp12
      // pp13
      // start: Forward dependencies from (pp12 + pp13) to transition type_cast_1167_sample_start_
      type_cast_1167_sample_start_ <-& (type_cast_1003_update_completed_)
      type_cast_1167_sample_start_ <-& (type_cast_1043_update_completed_)
      // done: Forward dependencies from (pp12 + pp13) to transition type_cast_1167_sample_start_
      ;;[type_cast_1167_Sample] 
      {
        // unary expression 
        $T [rr] $T [ra] // (split) unary operation
      }
      ;;[type_cast_1167_Update] 
      {
        // unary expression 
        $T [cr] $T [ca] //(split) unary operation
      }
      type_cast_1167_sample_start_ &-> (type_cast_1167_Sample)
      type_cast_1167_sample_completed_ <-& (type_cast_1167_Sample)
      type_cast_1167_sample_completed_ &-> ($null)
      type_cast_1167_update_start_ &-> (type_cast_1167_Update)
      type_cast_1167_update_completed_ <-& (type_cast_1167_Update)
      // Target expression
      // (as target) sum3
      // start: WAR dependencies for sum3
      // done: WAR dependencies for sum3
      // end:  	sum3 := ($bitcast ($uint<16>) (pp12 + pp13) )// bits of buffering = 16. 
      // start:  	sum4 := ($bitcast ($uint<16>) (pp20 + pp21) )// bits of buffering = 16. 
      //  file prog.linked.opt.aa, line 259
      // Source expression
      // ($bitcast ($uint<16>) (pp20 + pp21) )
      $T[type_cast_1173_sample_start_] 
      $T[type_cast_1173_sample_completed_] 
      $T[type_cast_1173_update_start_] 
      $T[type_cast_1173_update_completed_] 
      // (pp20 + pp21)
      // pp20
      // pp21
      // start: Forward dependencies from (pp20 + pp21) to transition type_cast_1173_sample_start_
      type_cast_1173_sample_start_ <-& (type_cast_1093_update_completed_)
      type_cast_1173_sample_start_ <-& (type_cast_1133_update_completed_)
      // done: Forward dependencies from (pp20 + pp21) to transition type_cast_1173_sample_start_
      ;;[type_cast_1173_Sample] 
      {
        // unary expression 
        $T [rr] $T [ra] // (split) unary operation
      }
      ;;[type_cast_1173_Update] 
      {
        // unary expression 
        $T [cr] $T [ca] //(split) unary operation
      }
      type_cast_1173_sample_start_ &-> (type_cast_1173_Sample)
      type_cast_1173_sample_completed_ <-& (type_cast_1173_Sample)
      type_cast_1173_sample_completed_ &-> ($null)
      type_cast_1173_update_start_ &-> (type_cast_1173_Update)
      type_cast_1173_update_completed_ <-& (type_cast_1173_Update)
      // Target expression
      // (as target) sum4
      // start: WAR dependencies for sum4
      // done: WAR dependencies for sum4
      // end:  	sum4 := ($bitcast ($uint<16>) (pp20 + pp21) )// bits of buffering = 16. 
      // start:  	sum5 := ($bitcast ($uint<16>) (pp22 + pp23) )// bits of buffering = 16. 
      //  file prog.linked.opt.aa, line 260
      // Source expression
      // ($bitcast ($uint<16>) (pp22 + pp23) )
      $T[type_cast_1179_sample_start_] 
      $T[type_cast_1179_sample_completed_] 
      $T[type_cast_1179_update_start_] 
      $T[type_cast_1179_update_completed_] 
      // (pp22 + pp23)
      // pp22
      // pp23
      // start: Forward dependencies from (pp22 + pp23) to transition type_cast_1179_sample_start_
      type_cast_1179_sample_start_ <-& (type_cast_1013_update_completed_)
      type_cast_1179_sample_start_ <-& (type_cast_1053_update_completed_)
      // done: Forward dependencies from (pp22 + pp23) to transition type_cast_1179_sample_start_
      ;;[type_cast_1179_Sample] 
      {
        // unary expression 
        $T [rr] $T [ra] // (split) unary operation
      }
      ;;[type_cast_1179_Update] 
      {
        // unary expression 
        $T [cr] $T [ca] //(split) unary operation
      }
      type_cast_1179_sample_start_ &-> (type_cast_1179_Sample)
      type_cast_1179_sample_completed_ <-& (type_cast_1179_Sample)
      type_cast_1179_sample_completed_ &-> ($null)
      type_cast_1179_update_start_ &-> (type_cast_1179_Update)
      type_cast_1179_update_completed_ <-& (type_cast_1179_Update)
      // Target expression
      // (as target) sum5
      // start: WAR dependencies for sum5
      // done: WAR dependencies for sum5
      // end:  	sum5 := ($bitcast ($uint<16>) (pp22 + pp23) )// bits of buffering = 16. 
      // start:  	sum6 := ($bitcast ($uint<16>) (pp30 + pp31) )// bits of buffering = 16. 
      //  file prog.linked.opt.aa, line 261
      // Source expression
      // ($bitcast ($uint<16>) (pp30 + pp31) )
      $T[type_cast_1185_sample_start_] 
      $T[type_cast_1185_sample_completed_] 
      $T[type_cast_1185_update_start_] 
      $T[type_cast_1185_update_completed_] 
      // (pp30 + pp31)
      // pp30
      // pp31
      // start: Forward dependencies from (pp30 + pp31) to transition type_cast_1185_sample_start_
      type_cast_1185_sample_start_ <-& (type_cast_1103_update_completed_)
      type_cast_1185_sample_start_ <-& (type_cast_1143_update_completed_)
      // done: Forward dependencies from (pp30 + pp31) to transition type_cast_1185_sample_start_
      ;;[type_cast_1185_Sample] 
      {
        // unary expression 
        $T [rr] $T [ra] // (split) unary operation
      }
      ;;[type_cast_1185_Update] 
      {
        // unary expression 
        $T [cr] $T [ca] //(split) unary operation
      }
      type_cast_1185_sample_start_ &-> (type_cast_1185_Sample)
      type_cast_1185_sample_completed_ <-& (type_cast_1185_Sample)
      type_cast_1185_sample_completed_ &-> ($null)
      type_cast_1185_update_start_ &-> (type_cast_1185_Update)
      type_cast_1185_update_completed_ <-& (type_cast_1185_Update)
      // Target expression
      // (as target) sum6
      // start: WAR dependencies for sum6
      // done: WAR dependencies for sum6
      // end:  	sum6 := ($bitcast ($uint<16>) (pp30 + pp31) )// bits of buffering = 16. 
      // start:  	sum7 := ($bitcast ($uint<16>) (pp32 + pp33) )// bits of buffering = 16. 
      //  file prog.linked.opt.aa, line 262
      // Source expression
      // ($bitcast ($uint<16>) (pp32 + pp33) )
      $T[type_cast_1191_sample_start_] 
      $T[type_cast_1191_sample_completed_] 
      $T[type_cast_1191_update_start_] 
      $T[type_cast_1191_update_completed_] 
      // (pp32 + pp33)
      // pp32
      // pp33
      // start: Forward dependencies from (pp32 + pp33) to transition type_cast_1191_sample_start_
      type_cast_1191_sample_start_ <-& (type_cast_1023_update_completed_)
      type_cast_1191_sample_start_ <-& (type_cast_1063_update_completed_)
      // done: Forward dependencies from (pp32 + pp33) to transition type_cast_1191_sample_start_
      ;;[type_cast_1191_Sample] 
      {
        // unary expression 
        $T [rr] $T [ra] // (split) unary operation
      }
      ;;[type_cast_1191_Update] 
      {
        // unary expression 
        $T [cr] $T [ca] //(split) unary operation
      }
      type_cast_1191_sample_start_ &-> (type_cast_1191_Sample)
      type_cast_1191_sample_completed_ <-& (type_cast_1191_Sample)
      type_cast_1191_sample_completed_ &-> ($null)
      type_cast_1191_update_start_ &-> (type_cast_1191_Update)
      type_cast_1191_update_completed_ <-& (type_cast_1191_Update)
      // Target expression
      // (as target) sum7
      // start: WAR dependencies for sum7
      // done: WAR dependencies for sum7
      // end:  	sum7 := ($bitcast ($uint<16>) (pp32 + pp33) )// bits of buffering = 16. 
      // start:  	sum10 := ($bitcast ($uint<16>) (sum0 + sum1) )// bits of buffering = 16. 
      //  file prog.linked.opt.aa, line 263
      // Source expression
      // ($bitcast ($uint<16>) (sum0 + sum1) )
      $T[type_cast_1197_sample_start_] 
      $T[type_cast_1197_sample_completed_] 
      $T[type_cast_1197_update_start_] 
      $T[type_cast_1197_update_completed_] 
      // (sum0 + sum1)
      // sum0
      // sum1
      // start: Forward dependencies from (sum0 + sum1) to transition type_cast_1197_sample_start_
      type_cast_1197_sample_start_ <-& (type_cast_1149_update_completed_)
      type_cast_1197_sample_start_ <-& (type_cast_1155_update_completed_)
      // done: Forward dependencies from (sum0 + sum1) to transition type_cast_1197_sample_start_
      ;;[type_cast_1197_Sample] 
      {
        // unary expression 
        $T [rr] $T [ra] // (split) unary operation
      }
      ;;[type_cast_1197_Update] 
      {
        // unary expression 
        $T [cr] $T [ca] //(split) unary operation
      }
      type_cast_1197_sample_start_ &-> (type_cast_1197_Sample)
      type_cast_1197_sample_completed_ <-& (type_cast_1197_Sample)
      type_cast_1197_sample_completed_ &-> ($null)
      type_cast_1197_update_start_ &-> (type_cast_1197_Update)
      type_cast_1197_update_completed_ <-& (type_cast_1197_Update)
      // Target expression
      // (as target) sum10
      // start: WAR dependencies for sum10
      // done: WAR dependencies for sum10
      // end:  	sum10 := ($bitcast ($uint<16>) (sum0 + sum1) )// bits of buffering = 16. 
      // start:  	sum11 := ($bitcast ($uint<16>) (sum2 + sum3) )// bits of buffering = 16. 
      //  file prog.linked.opt.aa, line 264
      // Source expression
      // ($bitcast ($uint<16>) (sum2 + sum3) )
      $T[type_cast_1203_sample_start_] 
      $T[type_cast_1203_sample_completed_] 
      $T[type_cast_1203_update_start_] 
      $T[type_cast_1203_update_completed_] 
      // (sum2 + sum3)
      // sum2
      // sum3
      // start: Forward dependencies from (sum2 + sum3) to transition type_cast_1203_sample_start_
      type_cast_1203_sample_start_ <-& (type_cast_1161_update_completed_)
      type_cast_1203_sample_start_ <-& (type_cast_1167_update_completed_)
      // done: Forward dependencies from (sum2 + sum3) to transition type_cast_1203_sample_start_
      ;;[type_cast_1203_Sample] 
      {
        // unary expression 
        $T [rr] $T [ra] // (split) unary operation
      }
      ;;[type_cast_1203_Update] 
      {
        // unary expression 
        $T [cr] $T [ca] //(split) unary operation
      }
      type_cast_1203_sample_start_ &-> (type_cast_1203_Sample)
      type_cast_1203_sample_completed_ <-& (type_cast_1203_Sample)
      type_cast_1203_sample_completed_ &-> ($null)
      type_cast_1203_update_start_ &-> (type_cast_1203_Update)
      type_cast_1203_update_completed_ <-& (type_cast_1203_Update)
      // Target expression
      // (as target) sum11
      // start: WAR dependencies for sum11
      // done: WAR dependencies for sum11
      // end:  	sum11 := ($bitcast ($uint<16>) (sum2 + sum3) )// bits of buffering = 16. 
      // start:  	sum12 := ($bitcast ($uint<16>) (sum4 + sum5) )// bits of buffering = 16. 
      //  file prog.linked.opt.aa, line 265
      // Source expression
      // ($bitcast ($uint<16>) (sum4 + sum5) )
      $T[type_cast_1209_sample_start_] 
      $T[type_cast_1209_sample_completed_] 
      $T[type_cast_1209_update_start_] 
      $T[type_cast_1209_update_completed_] 
      // (sum4 + sum5)
      // sum4
      // sum5
      // start: Forward dependencies from (sum4 + sum5) to transition type_cast_1209_sample_start_
      type_cast_1209_sample_start_ <-& (type_cast_1173_update_completed_)
      type_cast_1209_sample_start_ <-& (type_cast_1179_update_completed_)
      // done: Forward dependencies from (sum4 + sum5) to transition type_cast_1209_sample_start_
      ;;[type_cast_1209_Sample] 
      {
        // unary expression 
        $T [rr] $T [ra] // (split) unary operation
      }
      ;;[type_cast_1209_Update] 
      {
        // unary expression 
        $T [cr] $T [ca] //(split) unary operation
      }
      type_cast_1209_sample_start_ &-> (type_cast_1209_Sample)
      type_cast_1209_sample_completed_ <-& (type_cast_1209_Sample)
      type_cast_1209_sample_completed_ &-> ($null)
      type_cast_1209_update_start_ &-> (type_cast_1209_Update)
      type_cast_1209_update_completed_ <-& (type_cast_1209_Update)
      // Target expression
      // (as target) sum12
      // start: WAR dependencies for sum12
      // done: WAR dependencies for sum12
      // end:  	sum12 := ($bitcast ($uint<16>) (sum4 + sum5) )// bits of buffering = 16. 
      // start:  	sum13 := ($bitcast ($uint<16>) (sum6 + sum7) )// bits of buffering = 16. 
      //  file prog.linked.opt.aa, line 266
      // Source expression
      // ($bitcast ($uint<16>) (sum6 + sum7) )
      $T[type_cast_1215_sample_start_] 
      $T[type_cast_1215_sample_completed_] 
      $T[type_cast_1215_update_start_] 
      $T[type_cast_1215_update_completed_] 
      // (sum6 + sum7)
      // sum6
      // sum7
      // start: Forward dependencies from (sum6 + sum7) to transition type_cast_1215_sample_start_
      type_cast_1215_sample_start_ <-& (type_cast_1185_update_completed_)
      type_cast_1215_sample_start_ <-& (type_cast_1191_update_completed_)
      // done: Forward dependencies from (sum6 + sum7) to transition type_cast_1215_sample_start_
      ;;[type_cast_1215_Sample] 
      {
        // unary expression 
        $T [rr] $T [ra] // (split) unary operation
      }
      ;;[type_cast_1215_Update] 
      {
        // unary expression 
        $T [cr] $T [ca] //(split) unary operation
      }
      type_cast_1215_sample_start_ &-> (type_cast_1215_Sample)
      type_cast_1215_sample_completed_ <-& (type_cast_1215_Sample)
      type_cast_1215_sample_completed_ &-> ($null)
      type_cast_1215_update_start_ &-> (type_cast_1215_Update)
      type_cast_1215_update_completed_ <-& (type_cast_1215_Update)
      // Target expression
      // (as target) sum13
      // start: WAR dependencies for sum13
      // done: WAR dependencies for sum13
      // end:  	sum13 := ($bitcast ($uint<16>) (sum6 + sum7) )// bits of buffering = 16. 
      // start:  	sum20 := ($bitcast ($uint<16>) (sum10 + sum11) )// bits of buffering = 16. 
      //  file prog.linked.opt.aa, line 267
      // Source expression
      // ($bitcast ($uint<16>) (sum10 + sum11) )
      $T[type_cast_1221_sample_start_] 
      $T[type_cast_1221_sample_completed_] 
      $T[type_cast_1221_update_start_] 
      $T[type_cast_1221_update_completed_] 
      // (sum10 + sum11)
      // sum10
      // sum11
      // start: Forward dependencies from (sum10 + sum11) to transition type_cast_1221_sample_start_
      type_cast_1221_sample_start_ <-& (type_cast_1197_update_completed_)
      type_cast_1221_sample_start_ <-& (type_cast_1203_update_completed_)
      // done: Forward dependencies from (sum10 + sum11) to transition type_cast_1221_sample_start_
      ;;[type_cast_1221_Sample] 
      {
        // unary expression 
        $T [rr] $T [ra] // (split) unary operation
      }
      ;;[type_cast_1221_Update] 
      {
        // unary expression 
        $T [cr] $T [ca] //(split) unary operation
      }
      type_cast_1221_sample_start_ &-> (type_cast_1221_Sample)
      type_cast_1221_sample_completed_ <-& (type_cast_1221_Sample)
      type_cast_1221_sample_completed_ &-> ($null)
      type_cast_1221_update_start_ &-> (type_cast_1221_Update)
      type_cast_1221_update_completed_ <-& (type_cast_1221_Update)
      // Target expression
      // (as target) sum20
      // start: WAR dependencies for sum20
      // done: WAR dependencies for sum20
      // end:  	sum20 := ($bitcast ($uint<16>) (sum10 + sum11) )// bits of buffering = 16. 
      // start:  	sum21 := ($bitcast ($uint<16>) (sum12 + sum13) )// bits of buffering = 16. 
      //  file prog.linked.opt.aa, line 268
      // Source expression
      // ($bitcast ($uint<16>) (sum12 + sum13) )
      $T[type_cast_1227_sample_start_] 
      $T[type_cast_1227_sample_completed_] 
      $T[type_cast_1227_update_start_] 
      $T[type_cast_1227_update_completed_] 
      // (sum12 + sum13)
      // sum12
      // sum13
      // start: Forward dependencies from (sum12 + sum13) to transition type_cast_1227_sample_start_
      type_cast_1227_sample_start_ <-& (type_cast_1209_update_completed_)
      type_cast_1227_sample_start_ <-& (type_cast_1215_update_completed_)
      // done: Forward dependencies from (sum12 + sum13) to transition type_cast_1227_sample_start_
      ;;[type_cast_1227_Sample] 
      {
        // unary expression 
        $T [rr] $T [ra] // (split) unary operation
      }
      ;;[type_cast_1227_Update] 
      {
        // unary expression 
        $T [cr] $T [ca] //(split) unary operation
      }
      type_cast_1227_sample_start_ &-> (type_cast_1227_Sample)
      type_cast_1227_sample_completed_ <-& (type_cast_1227_Sample)
      type_cast_1227_sample_completed_ &-> ($null)
      type_cast_1227_update_start_ &-> (type_cast_1227_Update)
      type_cast_1227_update_completed_ <-& (type_cast_1227_Update)
      // Target expression
      // (as target) sum21
      // start: WAR dependencies for sum21
      // done: WAR dependencies for sum21
      // end:  	sum21 := ($bitcast ($uint<16>) (sum12 + sum13) )// bits of buffering = 16. 
      // start:  	ofmap_pixel := ($bitcast ($uint<16>) (sum20 + sum21) )// bits of buffering = 16. 
      //  file prog.linked.opt.aa, line 269
      // Source expression
      // ($bitcast ($uint<16>) (sum20 + sum21) )
      $T[type_cast_1233_sample_start_] 
      $T[type_cast_1233_sample_completed_] 
      $T[type_cast_1233_update_start_] 
      $T[type_cast_1233_update_completed_] 
      // (sum20 + sum21)
      // sum20
      // sum21
      // start: Forward dependencies from (sum20 + sum21) to transition type_cast_1233_sample_start_
      type_cast_1233_sample_start_ <-& (type_cast_1221_update_completed_)
      type_cast_1233_sample_start_ <-& (type_cast_1227_update_completed_)
      // done: Forward dependencies from (sum20 + sum21) to transition type_cast_1233_sample_start_
      ;;[type_cast_1233_Sample] 
      {
        // unary expression 
        $T [rr] $T [ra] // (split) unary operation
      }
      ;;[type_cast_1233_Update] 
      {
        // unary expression 
        $T [cr] $T [ca] //(split) unary operation
      }
      type_cast_1233_sample_start_ &-> (type_cast_1233_Sample)
      type_cast_1233_sample_completed_ <-& (type_cast_1233_Sample)
      type_cast_1233_sample_completed_ &-> ($null)
      type_cast_1233_update_start_ &-> (type_cast_1233_Update)
      type_cast_1233_update_completed_ <-& (type_cast_1233_Update)
      // Target expression
      // (as target) ofmap_pixel
      // ofmap_pixel
      // write to interface object
      // start: WAR dependencies for ofmap_pixel
      // done: WAR dependencies for ofmap_pixel
      // ofmap_pixel
      // write to interface object
      // end:  	ofmap_pixel := ($bitcast ($uint<16>) (sum20 + sum21) )// bits of buffering = 16. 
      // load-store dependencies..
      // memory-space  memory_space_2
      //  array_obj_ref_988 load
      //  array_obj_ref_998 load
      //  array_obj_ref_1008 load
      //  array_obj_ref_1028 load
      //  array_obj_ref_1038 load
      //  array_obj_ref_1048 load
      //  array_obj_ref_1058 load
      //  array_obj_ref_1068 load
      //  array_obj_ref_1078 load
      //  array_obj_ref_1088 load
      //  array_obj_ref_1098 load
      //  array_obj_ref_1108 load
      //  array_obj_ref_1118 load
      //  array_obj_ref_1128 load
      //  array_obj_ref_1138 load
      // memory-space  memory_space_0
      //  array_obj_ref_991 load
      //  array_obj_ref_1001 load
      //  array_obj_ref_1011 load
      //  array_obj_ref_1021 load
      //  array_obj_ref_1031 load
      //  array_obj_ref_1041 load
      //  array_obj_ref_1051 load
      //  array_obj_ref_1061 load
      //  array_obj_ref_1071 load
      //  array_obj_ref_1081 load
      //  array_obj_ref_1091 load
      //  array_obj_ref_1101 load
      //  array_obj_ref_1111 load
      //  array_obj_ref_1121 load
      //  array_obj_ref_1131 load
      //  array_obj_ref_1141 load
      // memory-space  memory_space_1
      //  array_obj_ref_1018 load
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %mainAcc2
    //  file prog.linked.opt.aa, line 227
    // 	zero := ($bitcast ($uint<2>) 0  )// bits of buffering = 2. 
    //  file prog.linked.opt.aa, line 232
    $constant $W[zero_934] : $int<2> := _b00 // 0
    // 	one := ($bitcast ($uint<2>) 1  )// bits of buffering = 2. 
    //  file prog.linked.opt.aa, line 233
    $constant $W[one_938] : $int<2> := _b01 // 1
    // 	two := ($bitcast ($uint<2>) 2  )// bits of buffering = 2. 
    //  file prog.linked.opt.aa, line 234
    $constant $W[two_942] : $int<2> := _b10 // 2
    // 	three := ($bitcast ($uint<2>) 3  )// bits of buffering = 2. 
    //  file prog.linked.opt.aa, line 235
    $constant $W[three_946] : $int<2> := _b11 // 3
    // ( $mux (col_to_be_replaced == 0 ) ($bitcast ($uint<2>) 3  )  ($bitcast ($uint<2>) (col_to_be_replaced - 1 ) ) ) 
    // 0 
    $constant $W[konst_949_wire_constant] : $int<2> := _b00// 0
    // ($bitcast ($uint<2>) 3  )
    $constant $W[type_cast_952_wire_constant] : $int<2> := _b11// 3
    // 1 
    $constant $W[konst_954_wire_constant] : $int<2> := _b01// 1
    // ( $mux (col_to_be_replaced >= 2 ) ($bitcast ($uint<2>) (col_to_be_replaced - 2 ) )  ($bitcast ($uint<2>) (col_to_be_replaced + 2 ) ) ) 
    // 2 
    $constant $W[konst_961_wire_constant] : $int<2> := _b10// 2
    // 2 
    $constant $W[konst_964_wire_constant] : $int<2> := _b10// 2
    // 2 
    $constant $W[konst_968_wire_constant] : $int<2> := _b10// 2
    // ( $mux (col_to_be_replaced == 3 ) ($bitcast ($uint<2>) 0  )  ($bitcast ($uint<2>) (col_to_be_replaced + 1 ) ) ) 
    // 3 
    $constant $W[konst_975_wire_constant] : $int<2> := _b11// 3
    // ($bitcast ($uint<2>) 0  )
    $constant $W[type_cast_978_wire_constant] : $int<2> := _b00// 0
    // 1 
    $constant $W[konst_980_wire_constant] : $int<2> := _b01// 1
    // ifmaps2[0 ][col_to_be_replaced]
    $constant $W[array_obj_ref_988_constant_part_of_offset] : $int<4> := _b0000// 0
    $constant $W[array_obj_ref_988_resized_base_address] : $int<4> := _b0000// 0
    $constant $W[array_obj_ref_988_offset_scale_factor_0] : $int<4> := _b0100// 4
    $constant $W[array_obj_ref_988_offset_scale_factor_1] : $int<4> := _b0001// 1
    $constant $W[array_obj_ref_988_word_offset_0] : $int<4> := _b0000// 0
    // filter[zero][three]
    $constant $W[array_obj_ref_991_word_address_0] : $pointer<memory_space_0> := _b0011
    // ifmaps2[1 ][col_to_be_replaced]
    $constant $W[array_obj_ref_998_constant_part_of_offset] : $int<4> := _b0100// 4
    $constant $W[array_obj_ref_998_resized_base_address] : $int<4> := _b0000// 0
    $constant $W[array_obj_ref_998_offset_scale_factor_0] : $int<4> := _b0100// 4
    $constant $W[array_obj_ref_998_offset_scale_factor_1] : $int<4> := _b0001// 1
    $constant $W[array_obj_ref_998_word_offset_0] : $int<4> := _b0000// 0
    // filter[one][three]
    $constant $W[array_obj_ref_1001_word_address_0] : $pointer<memory_space_0> := _b0111
    // ifmaps2[2 ][col_to_be_replaced]
    $constant $W[array_obj_ref_1008_constant_part_of_offset] : $int<4> := _b1000// 8
    $constant $W[array_obj_ref_1008_resized_base_address] : $int<4> := _b0000// 0
    $constant $W[array_obj_ref_1008_offset_scale_factor_0] : $int<4> := _b0100// 4
    $constant $W[array_obj_ref_1008_offset_scale_factor_1] : $int<4> := _b0001// 1
    $constant $W[array_obj_ref_1008_word_offset_0] : $int<4> := _b0000// 0
    // filter[two][three]
    $constant $W[array_obj_ref_1011_word_address_0] : $pointer<memory_space_0> := _b1011
    // ifmaps[3 ][col_to_be_replaced]
    $constant $W[array_obj_ref_1018_constant_part_of_offset] : $int<4> := _b1100// 12
    $constant $W[array_obj_ref_1018_resized_base_address] : $int<4> := _b0000// 0
    $constant $W[array_obj_ref_1018_offset_scale_factor_0] : $int<4> := _b0100// 4
    $constant $W[array_obj_ref_1018_offset_scale_factor_1] : $int<4> := _b0001// 1
    $constant $W[array_obj_ref_1018_word_offset_0] : $int<4> := _b0000// 0
    // filter[three][three]
    $constant $W[array_obj_ref_1021_word_address_0] : $pointer<memory_space_0> := _b1111
    // ifmaps2[0 ][col_to_be_replaced_1]
    $constant $W[array_obj_ref_1028_constant_part_of_offset] : $int<4> := _b0000// 0
    $constant $W[array_obj_ref_1028_resized_base_address] : $int<4> := _b0000// 0
    $constant $W[array_obj_ref_1028_offset_scale_factor_0] : $int<4> := _b0100// 4
    $constant $W[array_obj_ref_1028_offset_scale_factor_1] : $int<4> := _b0001// 1
    $constant $W[array_obj_ref_1028_word_offset_0] : $int<4> := _b0000// 0
    // filter[zero][two]
    $constant $W[array_obj_ref_1031_word_address_0] : $pointer<memory_space_0> := _b0010
    // ifmaps2[1 ][col_to_be_replaced_1]
    $constant $W[array_obj_ref_1038_constant_part_of_offset] : $int<4> := _b0100// 4
    $constant $W[array_obj_ref_1038_resized_base_address] : $int<4> := _b0000// 0
    $constant $W[array_obj_ref_1038_offset_scale_factor_0] : $int<4> := _b0100// 4
    $constant $W[array_obj_ref_1038_offset_scale_factor_1] : $int<4> := _b0001// 1
    $constant $W[array_obj_ref_1038_word_offset_0] : $int<4> := _b0000// 0
    // filter[one][two]
    $constant $W[array_obj_ref_1041_word_address_0] : $pointer<memory_space_0> := _b0110
    // ifmaps2[2 ][col_to_be_replaced_1]
    $constant $W[array_obj_ref_1048_constant_part_of_offset] : $int<4> := _b1000// 8
    $constant $W[array_obj_ref_1048_resized_base_address] : $int<4> := _b0000// 0
    $constant $W[array_obj_ref_1048_offset_scale_factor_0] : $int<4> := _b0100// 4
    $constant $W[array_obj_ref_1048_offset_scale_factor_1] : $int<4> := _b0001// 1
    $constant $W[array_obj_ref_1048_word_offset_0] : $int<4> := _b0000// 0
    // filter[two][two]
    $constant $W[array_obj_ref_1051_word_address_0] : $pointer<memory_space_0> := _b1010
    // ifmaps2[3 ][col_to_be_replaced_1]
    $constant $W[array_obj_ref_1058_constant_part_of_offset] : $int<4> := _b1100// 12
    $constant $W[array_obj_ref_1058_resized_base_address] : $int<4> := _b0000// 0
    $constant $W[array_obj_ref_1058_offset_scale_factor_0] : $int<4> := _b0100// 4
    $constant $W[array_obj_ref_1058_offset_scale_factor_1] : $int<4> := _b0001// 1
    $constant $W[array_obj_ref_1058_word_offset_0] : $int<4> := _b0000// 0
    // filter[three][two]
    $constant $W[array_obj_ref_1061_word_address_0] : $pointer<memory_space_0> := _b1110
    // ifmaps2[0 ][col_to_be_replaced_2]
    $constant $W[array_obj_ref_1068_constant_part_of_offset] : $int<4> := _b0000// 0
    $constant $W[array_obj_ref_1068_resized_base_address] : $int<4> := _b0000// 0
    $constant $W[array_obj_ref_1068_offset_scale_factor_0] : $int<4> := _b0100// 4
    $constant $W[array_obj_ref_1068_offset_scale_factor_1] : $int<4> := _b0001// 1
    $constant $W[array_obj_ref_1068_word_offset_0] : $int<4> := _b0000// 0
    // filter[zero][one]
    $constant $W[array_obj_ref_1071_word_address_0] : $pointer<memory_space_0> := _b0001
    // ifmaps2[1 ][col_to_be_replaced_2]
    $constant $W[array_obj_ref_1078_constant_part_of_offset] : $int<4> := _b0100// 4
    $constant $W[array_obj_ref_1078_resized_base_address] : $int<4> := _b0000// 0
    $constant $W[array_obj_ref_1078_offset_scale_factor_0] : $int<4> := _b0100// 4
    $constant $W[array_obj_ref_1078_offset_scale_factor_1] : $int<4> := _b0001// 1
    $constant $W[array_obj_ref_1078_word_offset_0] : $int<4> := _b0000// 0
    // filter[one][one]
    $constant $W[array_obj_ref_1081_word_address_0] : $pointer<memory_space_0> := _b0101
    // ifmaps2[2 ][col_to_be_replaced_2]
    $constant $W[array_obj_ref_1088_constant_part_of_offset] : $int<4> := _b1000// 8
    $constant $W[array_obj_ref_1088_resized_base_address] : $int<4> := _b0000// 0
    $constant $W[array_obj_ref_1088_offset_scale_factor_0] : $int<4> := _b0100// 4
    $constant $W[array_obj_ref_1088_offset_scale_factor_1] : $int<4> := _b0001// 1
    $constant $W[array_obj_ref_1088_word_offset_0] : $int<4> := _b0000// 0
    // filter[two][one]
    $constant $W[array_obj_ref_1091_word_address_0] : $pointer<memory_space_0> := _b1001
    // ifmaps2[3 ][col_to_be_replaced_2]
    $constant $W[array_obj_ref_1098_constant_part_of_offset] : $int<4> := _b1100// 12
    $constant $W[array_obj_ref_1098_resized_base_address] : $int<4> := _b0000// 0
    $constant $W[array_obj_ref_1098_offset_scale_factor_0] : $int<4> := _b0100// 4
    $constant $W[array_obj_ref_1098_offset_scale_factor_1] : $int<4> := _b0001// 1
    $constant $W[array_obj_ref_1098_word_offset_0] : $int<4> := _b0000// 0
    // filter[three][one]
    $constant $W[array_obj_ref_1101_word_address_0] : $pointer<memory_space_0> := _b1101
    // ifmaps2[0 ][col_to_be_replaced_3]
    $constant $W[array_obj_ref_1108_constant_part_of_offset] : $int<4> := _b0000// 0
    $constant $W[array_obj_ref_1108_resized_base_address] : $int<4> := _b0000// 0
    $constant $W[array_obj_ref_1108_offset_scale_factor_0] : $int<4> := _b0100// 4
    $constant $W[array_obj_ref_1108_offset_scale_factor_1] : $int<4> := _b0001// 1
    $constant $W[array_obj_ref_1108_word_offset_0] : $int<4> := _b0000// 0
    // filter[zero][zero]
    $constant $W[array_obj_ref_1111_word_address_0] : $pointer<memory_space_0> := _b0000
    // ifmaps2[1 ][col_to_be_replaced_3]
    $constant $W[array_obj_ref_1118_constant_part_of_offset] : $int<4> := _b0100// 4
    $constant $W[array_obj_ref_1118_resized_base_address] : $int<4> := _b0000// 0
    $constant $W[array_obj_ref_1118_offset_scale_factor_0] : $int<4> := _b0100// 4
    $constant $W[array_obj_ref_1118_offset_scale_factor_1] : $int<4> := _b0001// 1
    $constant $W[array_obj_ref_1118_word_offset_0] : $int<4> := _b0000// 0
    // filter[one][zero]
    $constant $W[array_obj_ref_1121_word_address_0] : $pointer<memory_space_0> := _b0100
    // ifmaps2[2 ][col_to_be_replaced_3]
    $constant $W[array_obj_ref_1128_constant_part_of_offset] : $int<4> := _b1000// 8
    $constant $W[array_obj_ref_1128_resized_base_address] : $int<4> := _b0000// 0
    $constant $W[array_obj_ref_1128_offset_scale_factor_0] : $int<4> := _b0100// 4
    $constant $W[array_obj_ref_1128_offset_scale_factor_1] : $int<4> := _b0001// 1
    $constant $W[array_obj_ref_1128_word_offset_0] : $int<4> := _b0000// 0
    // filter[two][zero]
    $constant $W[array_obj_ref_1131_word_address_0] : $pointer<memory_space_0> := _b1000
    // ifmaps2[3 ][col_to_be_replaced_3]
    $constant $W[array_obj_ref_1138_constant_part_of_offset] : $int<4> := _b1100// 12
    $constant $W[array_obj_ref_1138_resized_base_address] : $int<4> := _b0000// 0
    $constant $W[array_obj_ref_1138_offset_scale_factor_0] : $int<4> := _b0100// 4
    $constant $W[array_obj_ref_1138_offset_scale_factor_1] : $int<4> := _b0001// 1
    $constant $W[array_obj_ref_1138_word_offset_0] : $int<4> := _b0000// 0
    // filter[three][zero]
    $constant $W[array_obj_ref_1141_word_address_0] : $pointer<memory_space_0> := _b1100
    // 	col_to_be_replaced_1 := ( $mux (col_to_be_replaced == 0 ) ($bitcast ($uint<2>) 3  )  ($bitcast ($uint<2>) (col_to_be_replaced - 1 ) ) ) // bits of buffering = 2. 
    //  file prog.linked.opt.aa, line 236
    // (col_to_be_replaced == 0 )
    $intermediate $W[EQ_u2_u1_950_wire] : $int<1>
    // (col_to_be_replaced - 1 )
    $intermediate $W[SUB_u2_u2_955_wire] : $int<2>
    // ($bitcast ($uint<2>) (col_to_be_replaced - 1 ) )
    $intermediate $W[type_cast_956_wire] : $int<2>
    // col_to_be_replaced_1
    $W[col_to_be_replaced_1_958] : $int<2>
    // 	col_to_be_replaced_2 := ( $mux (col_to_be_replaced >= 2 ) ($bitcast ($uint<2>) (col_to_be_replaced - 2 ) )  ($bitcast ($uint<2>) (col_to_be_replaced + 2 ) ) ) // bits of buffering = 2. 
    //  file prog.linked.opt.aa, line 237
    // (col_to_be_replaced >= 2 )
    $intermediate $W[UGE_u2_u1_962_wire] : $int<1>
    // (col_to_be_replaced - 2 )
    $intermediate $W[SUB_u2_u2_965_wire] : $int<2>
    // ($bitcast ($uint<2>) (col_to_be_replaced - 2 ) )
    $intermediate $W[type_cast_966_wire] : $int<2>
    // (col_to_be_replaced + 2 )
    $intermediate $W[ADD_u2_u2_969_wire] : $int<2>
    // ($bitcast ($uint<2>) (col_to_be_replaced + 2 ) )
    $intermediate $W[type_cast_970_wire] : $int<2>
    // col_to_be_replaced_2
    $W[col_to_be_replaced_2_972] : $int<2>
    // 	col_to_be_replaced_3 := ( $mux (col_to_be_replaced == 3 ) ($bitcast ($uint<2>) 0  )  ($bitcast ($uint<2>) (col_to_be_replaced + 1 ) ) ) // bits of buffering = 2. 
    //  file prog.linked.opt.aa, line 238
    // (col_to_be_replaced == 3 )
    $intermediate $W[EQ_u2_u1_976_wire] : $int<1>
    // (col_to_be_replaced + 1 )
    $intermediate $W[ADD_u2_u2_981_wire] : $int<2>
    // ($bitcast ($uint<2>) (col_to_be_replaced + 1 ) )
    $intermediate $W[type_cast_982_wire] : $int<2>
    // col_to_be_replaced_3
    $W[col_to_be_replaced_3_984] : $int<2>
    // 	pp03 := ($bitcast ($uint<16>) (ifmaps2[0 ][col_to_be_replaced] * filter[zero][three]) )// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 239
    // ifmaps2[0 ][col_to_be_replaced]
    $intermediate $W[R_col_to_be_replaced_987_resized] : $int<4>
    $intermediate $W[R_col_to_be_replaced_987_scaled] : $int<4>
    $intermediate $W[array_obj_ref_988_final_offset] : $int<4>
    $intermediate $W[array_obj_ref_988_root_address] : $int<4>
    $W[array_obj_ref_988_word_address_0] : $pointer<memory_space_2>
    $W[array_obj_ref_988_data_0] : $int<16>
    $W[array_obj_ref_988_wire] : $int<16>
    // filter[zero][three]
    $W[array_obj_ref_991_data_0] : $int<16>
    $W[array_obj_ref_991_wire] : $int<16>
    // (ifmaps2[0 ][col_to_be_replaced] * filter[zero][three])
    $intermediate $W[MUL_u16_u16_992_wire] : $int<16>
    // pp03
    $W[pp03_994] : $int<16>
    // 	pp13 := ($bitcast ($uint<16>) (ifmaps2[1 ][col_to_be_replaced] * filter[one][three]) )// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 240
    // ifmaps2[1 ][col_to_be_replaced]
    $intermediate $W[R_col_to_be_replaced_997_resized] : $int<4>
    $intermediate $W[R_col_to_be_replaced_997_scaled] : $int<4>
    $intermediate $W[array_obj_ref_998_final_offset] : $int<4>
    $intermediate $W[array_obj_ref_998_root_address] : $int<4>
    $W[array_obj_ref_998_word_address_0] : $pointer<memory_space_2>
    $W[array_obj_ref_998_data_0] : $int<16>
    $W[array_obj_ref_998_wire] : $int<16>
    // filter[one][three]
    $W[array_obj_ref_1001_data_0] : $int<16>
    $W[array_obj_ref_1001_wire] : $int<16>
    // (ifmaps2[1 ][col_to_be_replaced] * filter[one][three])
    $intermediate $W[MUL_u16_u16_1002_wire] : $int<16>
    // pp13
    $W[pp13_1004] : $int<16>
    // 	pp23 := ($bitcast ($uint<16>) (ifmaps2[2 ][col_to_be_replaced] * filter[two][three]) )// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 241
    // ifmaps2[2 ][col_to_be_replaced]
    $intermediate $W[R_col_to_be_replaced_1007_resized] : $int<4>
    $intermediate $W[R_col_to_be_replaced_1007_scaled] : $int<4>
    $intermediate $W[array_obj_ref_1008_final_offset] : $int<4>
    $intermediate $W[array_obj_ref_1008_root_address] : $int<4>
    $W[array_obj_ref_1008_word_address_0] : $pointer<memory_space_2>
    $W[array_obj_ref_1008_data_0] : $int<16>
    $W[array_obj_ref_1008_wire] : $int<16>
    // filter[two][three]
    $W[array_obj_ref_1011_data_0] : $int<16>
    $W[array_obj_ref_1011_wire] : $int<16>
    // (ifmaps2[2 ][col_to_be_replaced] * filter[two][three])
    $intermediate $W[MUL_u16_u16_1012_wire] : $int<16>
    // pp23
    $W[pp23_1014] : $int<16>
    // 	pp33 := ($bitcast ($uint<16>) (ifmaps[3 ][col_to_be_replaced] * filter[three][three]) )// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 242
    // ifmaps[3 ][col_to_be_replaced]
    $intermediate $W[R_col_to_be_replaced_1017_resized] : $int<4>
    $intermediate $W[R_col_to_be_replaced_1017_scaled] : $int<4>
    $intermediate $W[array_obj_ref_1018_final_offset] : $int<4>
    $intermediate $W[array_obj_ref_1018_root_address] : $int<4>
    $W[array_obj_ref_1018_word_address_0] : $pointer<memory_space_1>
    $W[array_obj_ref_1018_data_0] : $int<16>
    $W[array_obj_ref_1018_wire] : $int<16>
    // filter[three][three]
    $W[array_obj_ref_1021_data_0] : $int<16>
    $W[array_obj_ref_1021_wire] : $int<16>
    // (ifmaps[3 ][col_to_be_replaced] * filter[three][three])
    $intermediate $W[MUL_u16_u16_1022_wire] : $int<16>
    // pp33
    $W[pp33_1024] : $int<16>
    // 	pp02 := ($bitcast ($uint<16>) (ifmaps2[0 ][col_to_be_replaced_1] * filter[zero][two]) )// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 243
    // ifmaps2[0 ][col_to_be_replaced_1]
    $intermediate $W[R_col_to_be_replaced_1_1027_resized] : $int<4>
    $intermediate $W[R_col_to_be_replaced_1_1027_scaled] : $int<4>
    $intermediate $W[array_obj_ref_1028_final_offset] : $int<4>
    $intermediate $W[array_obj_ref_1028_root_address] : $int<4>
    $W[array_obj_ref_1028_word_address_0] : $pointer<memory_space_2>
    $W[array_obj_ref_1028_data_0] : $int<16>
    $W[array_obj_ref_1028_wire] : $int<16>
    // filter[zero][two]
    $W[array_obj_ref_1031_data_0] : $int<16>
    $W[array_obj_ref_1031_wire] : $int<16>
    // (ifmaps2[0 ][col_to_be_replaced_1] * filter[zero][two])
    $intermediate $W[MUL_u16_u16_1032_wire] : $int<16>
    // pp02
    $W[pp02_1034] : $int<16>
    // 	pp12 := ($bitcast ($uint<16>) (ifmaps2[1 ][col_to_be_replaced_1] * filter[one][two]) )// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 244
    // ifmaps2[1 ][col_to_be_replaced_1]
    $intermediate $W[R_col_to_be_replaced_1_1037_resized] : $int<4>
    $intermediate $W[R_col_to_be_replaced_1_1037_scaled] : $int<4>
    $intermediate $W[array_obj_ref_1038_final_offset] : $int<4>
    $intermediate $W[array_obj_ref_1038_root_address] : $int<4>
    $W[array_obj_ref_1038_word_address_0] : $pointer<memory_space_2>
    $W[array_obj_ref_1038_data_0] : $int<16>
    $W[array_obj_ref_1038_wire] : $int<16>
    // filter[one][two]
    $W[array_obj_ref_1041_data_0] : $int<16>
    $W[array_obj_ref_1041_wire] : $int<16>
    // (ifmaps2[1 ][col_to_be_replaced_1] * filter[one][two])
    $intermediate $W[MUL_u16_u16_1042_wire] : $int<16>
    // pp12
    $W[pp12_1044] : $int<16>
    // 	pp22 := ($bitcast ($uint<16>) (ifmaps2[2 ][col_to_be_replaced_1] * filter[two][two]) )// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 245
    // ifmaps2[2 ][col_to_be_replaced_1]
    $intermediate $W[R_col_to_be_replaced_1_1047_resized] : $int<4>
    $intermediate $W[R_col_to_be_replaced_1_1047_scaled] : $int<4>
    $intermediate $W[array_obj_ref_1048_final_offset] : $int<4>
    $intermediate $W[array_obj_ref_1048_root_address] : $int<4>
    $W[array_obj_ref_1048_word_address_0] : $pointer<memory_space_2>
    $W[array_obj_ref_1048_data_0] : $int<16>
    $W[array_obj_ref_1048_wire] : $int<16>
    // filter[two][two]
    $W[array_obj_ref_1051_data_0] : $int<16>
    $W[array_obj_ref_1051_wire] : $int<16>
    // (ifmaps2[2 ][col_to_be_replaced_1] * filter[two][two])
    $intermediate $W[MUL_u16_u16_1052_wire] : $int<16>
    // pp22
    $W[pp22_1054] : $int<16>
    // 	pp32 := ($bitcast ($uint<16>) (ifmaps2[3 ][col_to_be_replaced_1] * filter[three][two]) )// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 246
    // ifmaps2[3 ][col_to_be_replaced_1]
    $intermediate $W[R_col_to_be_replaced_1_1057_resized] : $int<4>
    $intermediate $W[R_col_to_be_replaced_1_1057_scaled] : $int<4>
    $intermediate $W[array_obj_ref_1058_final_offset] : $int<4>
    $intermediate $W[array_obj_ref_1058_root_address] : $int<4>
    $W[array_obj_ref_1058_word_address_0] : $pointer<memory_space_2>
    $W[array_obj_ref_1058_data_0] : $int<16>
    $W[array_obj_ref_1058_wire] : $int<16>
    // filter[three][two]
    $W[array_obj_ref_1061_data_0] : $int<16>
    $W[array_obj_ref_1061_wire] : $int<16>
    // (ifmaps2[3 ][col_to_be_replaced_1] * filter[three][two])
    $intermediate $W[MUL_u16_u16_1062_wire] : $int<16>
    // pp32
    $W[pp32_1064] : $int<16>
    // 	pp01 := ($bitcast ($uint<16>) (ifmaps2[0 ][col_to_be_replaced_2] * filter[zero][one]) )// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 247
    // ifmaps2[0 ][col_to_be_replaced_2]
    $intermediate $W[R_col_to_be_replaced_2_1067_resized] : $int<4>
    $intermediate $W[R_col_to_be_replaced_2_1067_scaled] : $int<4>
    $intermediate $W[array_obj_ref_1068_final_offset] : $int<4>
    $intermediate $W[array_obj_ref_1068_root_address] : $int<4>
    $W[array_obj_ref_1068_word_address_0] : $pointer<memory_space_2>
    $W[array_obj_ref_1068_data_0] : $int<16>
    $W[array_obj_ref_1068_wire] : $int<16>
    // filter[zero][one]
    $W[array_obj_ref_1071_data_0] : $int<16>
    $W[array_obj_ref_1071_wire] : $int<16>
    // (ifmaps2[0 ][col_to_be_replaced_2] * filter[zero][one])
    $intermediate $W[MUL_u16_u16_1072_wire] : $int<16>
    // pp01
    $W[pp01_1074] : $int<16>
    // 	pp11 := ($bitcast ($uint<16>) (ifmaps2[1 ][col_to_be_replaced_2] * filter[one][one]) )// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 248
    // ifmaps2[1 ][col_to_be_replaced_2]
    $intermediate $W[R_col_to_be_replaced_2_1077_resized] : $int<4>
    $intermediate $W[R_col_to_be_replaced_2_1077_scaled] : $int<4>
    $intermediate $W[array_obj_ref_1078_final_offset] : $int<4>
    $intermediate $W[array_obj_ref_1078_root_address] : $int<4>
    $W[array_obj_ref_1078_word_address_0] : $pointer<memory_space_2>
    $W[array_obj_ref_1078_data_0] : $int<16>
    $W[array_obj_ref_1078_wire] : $int<16>
    // filter[one][one]
    $W[array_obj_ref_1081_data_0] : $int<16>
    $W[array_obj_ref_1081_wire] : $int<16>
    // (ifmaps2[1 ][col_to_be_replaced_2] * filter[one][one])
    $intermediate $W[MUL_u16_u16_1082_wire] : $int<16>
    // pp11
    $W[pp11_1084] : $int<16>
    // 	pp21 := ($bitcast ($uint<16>) (ifmaps2[2 ][col_to_be_replaced_2] * filter[two][one]) )// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 249
    // ifmaps2[2 ][col_to_be_replaced_2]
    $intermediate $W[R_col_to_be_replaced_2_1087_resized] : $int<4>
    $intermediate $W[R_col_to_be_replaced_2_1087_scaled] : $int<4>
    $intermediate $W[array_obj_ref_1088_final_offset] : $int<4>
    $intermediate $W[array_obj_ref_1088_root_address] : $int<4>
    $W[array_obj_ref_1088_word_address_0] : $pointer<memory_space_2>
    $W[array_obj_ref_1088_data_0] : $int<16>
    $W[array_obj_ref_1088_wire] : $int<16>
    // filter[two][one]
    $W[array_obj_ref_1091_data_0] : $int<16>
    $W[array_obj_ref_1091_wire] : $int<16>
    // (ifmaps2[2 ][col_to_be_replaced_2] * filter[two][one])
    $intermediate $W[MUL_u16_u16_1092_wire] : $int<16>
    // pp21
    $W[pp21_1094] : $int<16>
    // 	pp31 := ($bitcast ($uint<16>) (ifmaps2[3 ][col_to_be_replaced_2] * filter[three][one]) )// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 250
    // ifmaps2[3 ][col_to_be_replaced_2]
    $intermediate $W[R_col_to_be_replaced_2_1097_resized] : $int<4>
    $intermediate $W[R_col_to_be_replaced_2_1097_scaled] : $int<4>
    $intermediate $W[array_obj_ref_1098_final_offset] : $int<4>
    $intermediate $W[array_obj_ref_1098_root_address] : $int<4>
    $W[array_obj_ref_1098_word_address_0] : $pointer<memory_space_2>
    $W[array_obj_ref_1098_data_0] : $int<16>
    $W[array_obj_ref_1098_wire] : $int<16>
    // filter[three][one]
    $W[array_obj_ref_1101_data_0] : $int<16>
    $W[array_obj_ref_1101_wire] : $int<16>
    // (ifmaps2[3 ][col_to_be_replaced_2] * filter[three][one])
    $intermediate $W[MUL_u16_u16_1102_wire] : $int<16>
    // pp31
    $W[pp31_1104] : $int<16>
    // 	pp00 := ($bitcast ($uint<16>) (ifmaps2[0 ][col_to_be_replaced_3] * filter[zero][zero]) )// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 251
    // ifmaps2[0 ][col_to_be_replaced_3]
    $intermediate $W[R_col_to_be_replaced_3_1107_resized] : $int<4>
    $intermediate $W[R_col_to_be_replaced_3_1107_scaled] : $int<4>
    $intermediate $W[array_obj_ref_1108_final_offset] : $int<4>
    $intermediate $W[array_obj_ref_1108_root_address] : $int<4>
    $W[array_obj_ref_1108_word_address_0] : $pointer<memory_space_2>
    $W[array_obj_ref_1108_data_0] : $int<16>
    $W[array_obj_ref_1108_wire] : $int<16>
    // filter[zero][zero]
    $W[array_obj_ref_1111_data_0] : $int<16>
    $W[array_obj_ref_1111_wire] : $int<16>
    // (ifmaps2[0 ][col_to_be_replaced_3] * filter[zero][zero])
    $intermediate $W[MUL_u16_u16_1112_wire] : $int<16>
    // pp00
    $W[pp00_1114] : $int<16>
    // 	pp10 := ($bitcast ($uint<16>) (ifmaps2[1 ][col_to_be_replaced_3] * filter[one][zero]) )// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 252
    // ifmaps2[1 ][col_to_be_replaced_3]
    $intermediate $W[R_col_to_be_replaced_3_1117_resized] : $int<4>
    $intermediate $W[R_col_to_be_replaced_3_1117_scaled] : $int<4>
    $intermediate $W[array_obj_ref_1118_final_offset] : $int<4>
    $intermediate $W[array_obj_ref_1118_root_address] : $int<4>
    $W[array_obj_ref_1118_word_address_0] : $pointer<memory_space_2>
    $W[array_obj_ref_1118_data_0] : $int<16>
    $W[array_obj_ref_1118_wire] : $int<16>
    // filter[one][zero]
    $W[array_obj_ref_1121_data_0] : $int<16>
    $W[array_obj_ref_1121_wire] : $int<16>
    // (ifmaps2[1 ][col_to_be_replaced_3] * filter[one][zero])
    $intermediate $W[MUL_u16_u16_1122_wire] : $int<16>
    // pp10
    $W[pp10_1124] : $int<16>
    // 	pp20 := ($bitcast ($uint<16>) (ifmaps2[2 ][col_to_be_replaced_3] * filter[two][zero]) )// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 253
    // ifmaps2[2 ][col_to_be_replaced_3]
    $intermediate $W[R_col_to_be_replaced_3_1127_resized] : $int<4>
    $intermediate $W[R_col_to_be_replaced_3_1127_scaled] : $int<4>
    $intermediate $W[array_obj_ref_1128_final_offset] : $int<4>
    $intermediate $W[array_obj_ref_1128_root_address] : $int<4>
    $W[array_obj_ref_1128_word_address_0] : $pointer<memory_space_2>
    $W[array_obj_ref_1128_data_0] : $int<16>
    $W[array_obj_ref_1128_wire] : $int<16>
    // filter[two][zero]
    $W[array_obj_ref_1131_data_0] : $int<16>
    $W[array_obj_ref_1131_wire] : $int<16>
    // (ifmaps2[2 ][col_to_be_replaced_3] * filter[two][zero])
    $intermediate $W[MUL_u16_u16_1132_wire] : $int<16>
    // pp20
    $W[pp20_1134] : $int<16>
    // 	pp30 := ($bitcast ($uint<16>) (ifmaps2[3 ][col_to_be_replaced_3] * filter[three][zero]) )// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 254
    // ifmaps2[3 ][col_to_be_replaced_3]
    $intermediate $W[R_col_to_be_replaced_3_1137_resized] : $int<4>
    $intermediate $W[R_col_to_be_replaced_3_1137_scaled] : $int<4>
    $intermediate $W[array_obj_ref_1138_final_offset] : $int<4>
    $intermediate $W[array_obj_ref_1138_root_address] : $int<4>
    $W[array_obj_ref_1138_word_address_0] : $pointer<memory_space_2>
    $W[array_obj_ref_1138_data_0] : $int<16>
    $W[array_obj_ref_1138_wire] : $int<16>
    // filter[three][zero]
    $W[array_obj_ref_1141_data_0] : $int<16>
    $W[array_obj_ref_1141_wire] : $int<16>
    // (ifmaps2[3 ][col_to_be_replaced_3] * filter[three][zero])
    $intermediate $W[MUL_u16_u16_1142_wire] : $int<16>
    // pp30
    $W[pp30_1144] : $int<16>
    // 	sum0 := ($bitcast ($uint<16>) (pp00 + pp01) )// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 255
    // (pp00 + pp01)
    $intermediate $W[ADD_u16_u16_1148_wire] : $int<16>
    // sum0
    $W[sum0_1150] : $int<16>
    // 	sum1 := ($bitcast ($uint<16>) (pp02 + pp03) )// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 256
    // (pp02 + pp03)
    $intermediate $W[ADD_u16_u16_1154_wire] : $int<16>
    // sum1
    $W[sum1_1156] : $int<16>
    // 	sum2 := ($bitcast ($uint<16>) (pp10 + pp11) )// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 257
    // (pp10 + pp11)
    $intermediate $W[ADD_u16_u16_1160_wire] : $int<16>
    // sum2
    $W[sum2_1162] : $int<16>
    // 	sum3 := ($bitcast ($uint<16>) (pp12 + pp13) )// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 258
    // (pp12 + pp13)
    $intermediate $W[ADD_u16_u16_1166_wire] : $int<16>
    // sum3
    $W[sum3_1168] : $int<16>
    // 	sum4 := ($bitcast ($uint<16>) (pp20 + pp21) )// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 259
    // (pp20 + pp21)
    $intermediate $W[ADD_u16_u16_1172_wire] : $int<16>
    // sum4
    $W[sum4_1174] : $int<16>
    // 	sum5 := ($bitcast ($uint<16>) (pp22 + pp23) )// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 260
    // (pp22 + pp23)
    $intermediate $W[ADD_u16_u16_1178_wire] : $int<16>
    // sum5
    $W[sum5_1180] : $int<16>
    // 	sum6 := ($bitcast ($uint<16>) (pp30 + pp31) )// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 261
    // (pp30 + pp31)
    $intermediate $W[ADD_u16_u16_1184_wire] : $int<16>
    // sum6
    $W[sum6_1186] : $int<16>
    // 	sum7 := ($bitcast ($uint<16>) (pp32 + pp33) )// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 262
    // (pp32 + pp33)
    $intermediate $W[ADD_u16_u16_1190_wire] : $int<16>
    // sum7
    $W[sum7_1192] : $int<16>
    // 	sum10 := ($bitcast ($uint<16>) (sum0 + sum1) )// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 263
    // (sum0 + sum1)
    $intermediate $W[ADD_u16_u16_1196_wire] : $int<16>
    // sum10
    $W[sum10_1198] : $int<16>
    // 	sum11 := ($bitcast ($uint<16>) (sum2 + sum3) )// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 264
    // (sum2 + sum3)
    $intermediate $W[ADD_u16_u16_1202_wire] : $int<16>
    // sum11
    $W[sum11_1204] : $int<16>
    // 	sum12 := ($bitcast ($uint<16>) (sum4 + sum5) )// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 265
    // (sum4 + sum5)
    $intermediate $W[ADD_u16_u16_1208_wire] : $int<16>
    // sum12
    $W[sum12_1210] : $int<16>
    // 	sum13 := ($bitcast ($uint<16>) (sum6 + sum7) )// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 266
    // (sum6 + sum7)
    $intermediate $W[ADD_u16_u16_1214_wire] : $int<16>
    // sum13
    $W[sum13_1216] : $int<16>
    // 	sum20 := ($bitcast ($uint<16>) (sum10 + sum11) )// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 267
    // (sum10 + sum11)
    $intermediate $W[ADD_u16_u16_1220_wire] : $int<16>
    // sum20
    $W[sum20_1222] : $int<16>
    // 	sum21 := ($bitcast ($uint<16>) (sum12 + sum13) )// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 268
    // (sum12 + sum13)
    $intermediate $W[ADD_u16_u16_1226_wire] : $int<16>
    // sum21
    $W[sum21_1228] : $int<16>
    // 	ofmap_pixel := ($bitcast ($uint<16>) (sum20 + sum21) )// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 269
    // (sum20 + sum21)
    $intermediate $W[ADD_u16_u16_1232_wire] : $int<16>
    // ofmap_pixel
    // 	col_to_be_replaced_1 := ( $mux (col_to_be_replaced == 0 ) ($bitcast ($uint<2>) 3  )  ($bitcast ($uint<2>) (col_to_be_replaced - 1 ) ) ) // bits of buffering = 2. 
    //  file prog.linked.opt.aa, line 236
    // (col_to_be_replaced == 0 )
    ==[EQ_u2_u1_950_inst] (col_to_be_replaced konst_949_wire_constant) (EQ_u2_u1_950_wire)   $flowthrough 
    $delay EQ_u2_u1_950_inst 0
    // (col_to_be_replaced - 1 )
    -[SUB_u2_u2_955_inst] (col_to_be_replaced konst_954_wire_constant) (SUB_u2_u2_955_wire)   $flowthrough 
    $delay SUB_u2_u2_955_inst 0
    // ($bitcast ($uint<2>) (col_to_be_replaced - 1 ) )
    # := [type_cast_956_inst] (SUB_u2_u2_955_wire) (type_cast_956_wire)   $flowthrough
    $delay type_cast_956_inst 0
    // ( $mux (col_to_be_replaced == 0 ) ($bitcast ($uint<2>) 3  )  ($bitcast ($uint<2>) (col_to_be_replaced - 1 ) ) ) 
    ? [MUX_957_inst] (EQ_u2_u1_950_wire type_cast_952_wire_constant type_cast_956_wire) (col_to_be_replaced_1_958) 
    $buffering  $out MUX_957_inst col_to_be_replaced_1_958 1
    // 	col_to_be_replaced_2 := ( $mux (col_to_be_replaced >= 2 ) ($bitcast ($uint<2>) (col_to_be_replaced - 2 ) )  ($bitcast ($uint<2>) (col_to_be_replaced + 2 ) ) ) // bits of buffering = 2. 
    //  file prog.linked.opt.aa, line 237
    // (col_to_be_replaced >= 2 )
    >=[UGE_u2_u1_962_inst] (col_to_be_replaced konst_961_wire_constant) (UGE_u2_u1_962_wire)   $flowthrough 
    $delay UGE_u2_u1_962_inst 0
    // (col_to_be_replaced - 2 )
    -[SUB_u2_u2_965_inst] (col_to_be_replaced konst_964_wire_constant) (SUB_u2_u2_965_wire)   $flowthrough 
    $delay SUB_u2_u2_965_inst 0
    // ($bitcast ($uint<2>) (col_to_be_replaced - 2 ) )
    # := [type_cast_966_inst] (SUB_u2_u2_965_wire) (type_cast_966_wire)   $flowthrough
    $delay type_cast_966_inst 0
    // (col_to_be_replaced + 2 )
    +[ADD_u2_u2_969_inst] (col_to_be_replaced konst_968_wire_constant) (ADD_u2_u2_969_wire)   $flowthrough 
    $delay ADD_u2_u2_969_inst 0
    // ($bitcast ($uint<2>) (col_to_be_replaced + 2 ) )
    # := [type_cast_970_inst] (ADD_u2_u2_969_wire) (type_cast_970_wire)   $flowthrough
    $delay type_cast_970_inst 0
    // ( $mux (col_to_be_replaced >= 2 ) ($bitcast ($uint<2>) (col_to_be_replaced - 2 ) )  ($bitcast ($uint<2>) (col_to_be_replaced + 2 ) ) ) 
    ? [MUX_971_inst] (UGE_u2_u1_962_wire type_cast_966_wire type_cast_970_wire) (col_to_be_replaced_2_972) 
    $buffering  $out MUX_971_inst col_to_be_replaced_2_972 1
    // 	col_to_be_replaced_3 := ( $mux (col_to_be_replaced == 3 ) ($bitcast ($uint<2>) 0  )  ($bitcast ($uint<2>) (col_to_be_replaced + 1 ) ) ) // bits of buffering = 2. 
    //  file prog.linked.opt.aa, line 238
    // (col_to_be_replaced == 3 )
    ==[EQ_u2_u1_976_inst] (col_to_be_replaced konst_975_wire_constant) (EQ_u2_u1_976_wire)   $flowthrough 
    $delay EQ_u2_u1_976_inst 0
    // (col_to_be_replaced + 1 )
    +[ADD_u2_u2_981_inst] (col_to_be_replaced konst_980_wire_constant) (ADD_u2_u2_981_wire)   $flowthrough 
    $delay ADD_u2_u2_981_inst 0
    // ($bitcast ($uint<2>) (col_to_be_replaced + 1 ) )
    # := [type_cast_982_inst] (ADD_u2_u2_981_wire) (type_cast_982_wire)   $flowthrough
    $delay type_cast_982_inst 0
    // ( $mux (col_to_be_replaced == 3 ) ($bitcast ($uint<2>) 0  )  ($bitcast ($uint<2>) (col_to_be_replaced + 1 ) ) ) 
    ? [MUX_983_inst] (EQ_u2_u1_976_wire type_cast_978_wire_constant type_cast_982_wire) (col_to_be_replaced_3_984) 
    $buffering  $out MUX_983_inst col_to_be_replaced_3_984 1
    // 	pp03 := ($bitcast ($uint<16>) (ifmaps2[0 ][col_to_be_replaced] * filter[zero][three]) )// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 239
    // ifmaps2[0 ][col_to_be_replaced]
    &/ [array_obj_ref_988_index_1_resize] (col_to_be_replaced) (R_col_to_be_replaced_987_resized) 
    $flowthrough 
    &/ [array_obj_ref_988_index_1_rename] (R_col_to_be_replaced_987_resized) (R_col_to_be_replaced_987_scaled) 
    $flowthrough 
    +[array_obj_ref_988_index_offset] (R_col_to_be_replaced_987_scaled array_obj_ref_988_constant_part_of_offset) (array_obj_ref_988_final_offset)   
    $delay array_obj_ref_988_index_offset 2
    &/ [array_obj_ref_988_root_address_inst] (array_obj_ref_988_final_offset) (array_obj_ref_988_root_address) 
    $flowthrough 
    &/ [array_obj_ref_988_addr_0] (array_obj_ref_988_root_address) (array_obj_ref_988_word_address_0) 
    $flowthrough 
    $load [array_obj_ref_988_load_0] $from memory_space_2 (array_obj_ref_988_word_address_0) (array_obj_ref_988_data_0) 
    $delay array_obj_ref_988_load_0 4
    &/ [array_obj_ref_988_gather_scatter] (array_obj_ref_988_data_0) (array_obj_ref_988_wire) 
    $flowthrough 
    // filter[zero][three]
    $load [array_obj_ref_991_load_0] $from memory_space_0 (array_obj_ref_991_word_address_0) (array_obj_ref_991_data_0) 
    $delay array_obj_ref_991_load_0 5
    &/ [array_obj_ref_991_gather_scatter] (array_obj_ref_991_data_0) (array_obj_ref_991_wire) 
    $flowthrough 
    // (ifmaps2[0 ][col_to_be_replaced] * filter[zero][three])
    *[MUL_u16_u16_992_inst] (array_obj_ref_988_wire array_obj_ref_991_wire) (MUL_u16_u16_992_wire)   $flowthrough 
    $delay MUL_u16_u16_992_inst 0
    // ($bitcast ($uint<16>) (ifmaps2[0 ][col_to_be_replaced] * filter[zero][three]) )
    # := [type_cast_993_inst] (MUL_u16_u16_992_wire) (pp03_994)   
    $buffering  $out type_cast_993_inst pp03_994 1
    $delay type_cast_993_inst 1
    // 	pp13 := ($bitcast ($uint<16>) (ifmaps2[1 ][col_to_be_replaced] * filter[one][three]) )// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 240
    // ifmaps2[1 ][col_to_be_replaced]
    &/ [array_obj_ref_998_index_1_resize] (col_to_be_replaced) (R_col_to_be_replaced_997_resized) 
    $flowthrough 
    &/ [array_obj_ref_998_index_1_rename] (R_col_to_be_replaced_997_resized) (R_col_to_be_replaced_997_scaled) 
    $flowthrough 
    +[array_obj_ref_998_index_offset] (R_col_to_be_replaced_997_scaled array_obj_ref_998_constant_part_of_offset) (array_obj_ref_998_final_offset)   
    $delay array_obj_ref_998_index_offset 2
    &/ [array_obj_ref_998_root_address_inst] (array_obj_ref_998_final_offset) (array_obj_ref_998_root_address) 
    $flowthrough 
    &/ [array_obj_ref_998_addr_0] (array_obj_ref_998_root_address) (array_obj_ref_998_word_address_0) 
    $flowthrough 
    $load [array_obj_ref_998_load_0] $from memory_space_2 (array_obj_ref_998_word_address_0) (array_obj_ref_998_data_0) 
    $delay array_obj_ref_998_load_0 4
    &/ [array_obj_ref_998_gather_scatter] (array_obj_ref_998_data_0) (array_obj_ref_998_wire) 
    $flowthrough 
    // filter[one][three]
    $load [array_obj_ref_1001_load_0] $from memory_space_0 (array_obj_ref_1001_word_address_0) (array_obj_ref_1001_data_0) 
    $delay array_obj_ref_1001_load_0 5
    &/ [array_obj_ref_1001_gather_scatter] (array_obj_ref_1001_data_0) (array_obj_ref_1001_wire) 
    $flowthrough 
    // (ifmaps2[1 ][col_to_be_replaced] * filter[one][three])
    *[MUL_u16_u16_1002_inst] (array_obj_ref_998_wire array_obj_ref_1001_wire) (MUL_u16_u16_1002_wire)   $flowthrough 
    $delay MUL_u16_u16_1002_inst 0
    // ($bitcast ($uint<16>) (ifmaps2[1 ][col_to_be_replaced] * filter[one][three]) )
    # := [type_cast_1003_inst] (MUL_u16_u16_1002_wire) (pp13_1004)   
    $buffering  $out type_cast_1003_inst pp13_1004 1
    $delay type_cast_1003_inst 1
    // 	pp23 := ($bitcast ($uint<16>) (ifmaps2[2 ][col_to_be_replaced] * filter[two][three]) )// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 241
    // ifmaps2[2 ][col_to_be_replaced]
    &/ [array_obj_ref_1008_index_1_resize] (col_to_be_replaced) (R_col_to_be_replaced_1007_resized) 
    $flowthrough 
    &/ [array_obj_ref_1008_index_1_rename] (R_col_to_be_replaced_1007_resized) (R_col_to_be_replaced_1007_scaled) 
    $flowthrough 
    +[array_obj_ref_1008_index_offset] (R_col_to_be_replaced_1007_scaled array_obj_ref_1008_constant_part_of_offset) (array_obj_ref_1008_final_offset)   
    $delay array_obj_ref_1008_index_offset 2
    &/ [array_obj_ref_1008_root_address_inst] (array_obj_ref_1008_final_offset) (array_obj_ref_1008_root_address) 
    $flowthrough 
    &/ [array_obj_ref_1008_addr_0] (array_obj_ref_1008_root_address) (array_obj_ref_1008_word_address_0) 
    $flowthrough 
    $load [array_obj_ref_1008_load_0] $from memory_space_2 (array_obj_ref_1008_word_address_0) (array_obj_ref_1008_data_0) 
    $delay array_obj_ref_1008_load_0 4
    &/ [array_obj_ref_1008_gather_scatter] (array_obj_ref_1008_data_0) (array_obj_ref_1008_wire) 
    $flowthrough 
    // filter[two][three]
    $load [array_obj_ref_1011_load_0] $from memory_space_0 (array_obj_ref_1011_word_address_0) (array_obj_ref_1011_data_0) 
    $delay array_obj_ref_1011_load_0 5
    &/ [array_obj_ref_1011_gather_scatter] (array_obj_ref_1011_data_0) (array_obj_ref_1011_wire) 
    $flowthrough 
    // (ifmaps2[2 ][col_to_be_replaced] * filter[two][three])
    *[MUL_u16_u16_1012_inst] (array_obj_ref_1008_wire array_obj_ref_1011_wire) (MUL_u16_u16_1012_wire)   $flowthrough 
    $delay MUL_u16_u16_1012_inst 0
    // ($bitcast ($uint<16>) (ifmaps2[2 ][col_to_be_replaced] * filter[two][three]) )
    # := [type_cast_1013_inst] (MUL_u16_u16_1012_wire) (pp23_1014)   
    $buffering  $out type_cast_1013_inst pp23_1014 1
    $delay type_cast_1013_inst 1
    // 	pp33 := ($bitcast ($uint<16>) (ifmaps[3 ][col_to_be_replaced] * filter[three][three]) )// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 242
    // ifmaps[3 ][col_to_be_replaced]
    &/ [array_obj_ref_1018_index_1_resize] (col_to_be_replaced) (R_col_to_be_replaced_1017_resized) 
    $flowthrough 
    &/ [array_obj_ref_1018_index_1_rename] (R_col_to_be_replaced_1017_resized) (R_col_to_be_replaced_1017_scaled) 
    $flowthrough 
    +[array_obj_ref_1018_index_offset] (R_col_to_be_replaced_1017_scaled array_obj_ref_1018_constant_part_of_offset) (array_obj_ref_1018_final_offset)   
    $delay array_obj_ref_1018_index_offset 2
    &/ [array_obj_ref_1018_root_address_inst] (array_obj_ref_1018_final_offset) (array_obj_ref_1018_root_address) 
    $flowthrough 
    &/ [array_obj_ref_1018_addr_0] (array_obj_ref_1018_root_address) (array_obj_ref_1018_word_address_0) 
    $flowthrough 
    $load [array_obj_ref_1018_load_0] $from memory_space_1 (array_obj_ref_1018_word_address_0) (array_obj_ref_1018_data_0) 
    $delay array_obj_ref_1018_load_0 5
    &/ [array_obj_ref_1018_gather_scatter] (array_obj_ref_1018_data_0) (array_obj_ref_1018_wire) 
    $flowthrough 
    // filter[three][three]
    $load [array_obj_ref_1021_load_0] $from memory_space_0 (array_obj_ref_1021_word_address_0) (array_obj_ref_1021_data_0) 
    $delay array_obj_ref_1021_load_0 5
    &/ [array_obj_ref_1021_gather_scatter] (array_obj_ref_1021_data_0) (array_obj_ref_1021_wire) 
    $flowthrough 
    // (ifmaps[3 ][col_to_be_replaced] * filter[three][three])
    *[MUL_u16_u16_1022_inst] (array_obj_ref_1018_wire array_obj_ref_1021_wire) (MUL_u16_u16_1022_wire)   $flowthrough 
    $delay MUL_u16_u16_1022_inst 0
    // ($bitcast ($uint<16>) (ifmaps[3 ][col_to_be_replaced] * filter[three][three]) )
    # := [type_cast_1023_inst] (MUL_u16_u16_1022_wire) (pp33_1024)   
    $buffering  $out type_cast_1023_inst pp33_1024 1
    $delay type_cast_1023_inst 1
    // 	pp02 := ($bitcast ($uint<16>) (ifmaps2[0 ][col_to_be_replaced_1] * filter[zero][two]) )// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 243
    // ifmaps2[0 ][col_to_be_replaced_1]
    &/ [array_obj_ref_1028_index_1_resize] (col_to_be_replaced_1_958) (R_col_to_be_replaced_1_1027_resized) 
    $flowthrough 
    &/ [array_obj_ref_1028_index_1_rename] (R_col_to_be_replaced_1_1027_resized) (R_col_to_be_replaced_1_1027_scaled) 
    $flowthrough 
    +[array_obj_ref_1028_index_offset] (R_col_to_be_replaced_1_1027_scaled array_obj_ref_1028_constant_part_of_offset) (array_obj_ref_1028_final_offset)   
    $delay array_obj_ref_1028_index_offset 2
    &/ [array_obj_ref_1028_root_address_inst] (array_obj_ref_1028_final_offset) (array_obj_ref_1028_root_address) 
    $flowthrough 
    &/ [array_obj_ref_1028_addr_0] (array_obj_ref_1028_root_address) (array_obj_ref_1028_word_address_0) 
    $flowthrough 
    $load [array_obj_ref_1028_load_0] $from memory_space_2 (array_obj_ref_1028_word_address_0) (array_obj_ref_1028_data_0) 
    $delay array_obj_ref_1028_load_0 4
    &/ [array_obj_ref_1028_gather_scatter] (array_obj_ref_1028_data_0) (array_obj_ref_1028_wire) 
    $flowthrough 
    // filter[zero][two]
    $load [array_obj_ref_1031_load_0] $from memory_space_0 (array_obj_ref_1031_word_address_0) (array_obj_ref_1031_data_0) 
    $delay array_obj_ref_1031_load_0 5
    &/ [array_obj_ref_1031_gather_scatter] (array_obj_ref_1031_data_0) (array_obj_ref_1031_wire) 
    $flowthrough 
    // (ifmaps2[0 ][col_to_be_replaced_1] * filter[zero][two])
    *[MUL_u16_u16_1032_inst] (array_obj_ref_1028_wire array_obj_ref_1031_wire) (MUL_u16_u16_1032_wire)   $flowthrough 
    $delay MUL_u16_u16_1032_inst 0
    // ($bitcast ($uint<16>) (ifmaps2[0 ][col_to_be_replaced_1] * filter[zero][two]) )
    # := [type_cast_1033_inst] (MUL_u16_u16_1032_wire) (pp02_1034)   
    $buffering  $out type_cast_1033_inst pp02_1034 1
    $delay type_cast_1033_inst 1
    // 	pp12 := ($bitcast ($uint<16>) (ifmaps2[1 ][col_to_be_replaced_1] * filter[one][two]) )// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 244
    // ifmaps2[1 ][col_to_be_replaced_1]
    &/ [array_obj_ref_1038_index_1_resize] (col_to_be_replaced_1_958) (R_col_to_be_replaced_1_1037_resized) 
    $flowthrough 
    &/ [array_obj_ref_1038_index_1_rename] (R_col_to_be_replaced_1_1037_resized) (R_col_to_be_replaced_1_1037_scaled) 
    $flowthrough 
    +[array_obj_ref_1038_index_offset] (R_col_to_be_replaced_1_1037_scaled array_obj_ref_1038_constant_part_of_offset) (array_obj_ref_1038_final_offset)   
    $delay array_obj_ref_1038_index_offset 2
    &/ [array_obj_ref_1038_root_address_inst] (array_obj_ref_1038_final_offset) (array_obj_ref_1038_root_address) 
    $flowthrough 
    &/ [array_obj_ref_1038_addr_0] (array_obj_ref_1038_root_address) (array_obj_ref_1038_word_address_0) 
    $flowthrough 
    $load [array_obj_ref_1038_load_0] $from memory_space_2 (array_obj_ref_1038_word_address_0) (array_obj_ref_1038_data_0) 
    $delay array_obj_ref_1038_load_0 4
    &/ [array_obj_ref_1038_gather_scatter] (array_obj_ref_1038_data_0) (array_obj_ref_1038_wire) 
    $flowthrough 
    // filter[one][two]
    $load [array_obj_ref_1041_load_0] $from memory_space_0 (array_obj_ref_1041_word_address_0) (array_obj_ref_1041_data_0) 
    $delay array_obj_ref_1041_load_0 5
    &/ [array_obj_ref_1041_gather_scatter] (array_obj_ref_1041_data_0) (array_obj_ref_1041_wire) 
    $flowthrough 
    // (ifmaps2[1 ][col_to_be_replaced_1] * filter[one][two])
    *[MUL_u16_u16_1042_inst] (array_obj_ref_1038_wire array_obj_ref_1041_wire) (MUL_u16_u16_1042_wire)   $flowthrough 
    $delay MUL_u16_u16_1042_inst 0
    // ($bitcast ($uint<16>) (ifmaps2[1 ][col_to_be_replaced_1] * filter[one][two]) )
    # := [type_cast_1043_inst] (MUL_u16_u16_1042_wire) (pp12_1044)   
    $buffering  $out type_cast_1043_inst pp12_1044 1
    $delay type_cast_1043_inst 1
    // 	pp22 := ($bitcast ($uint<16>) (ifmaps2[2 ][col_to_be_replaced_1] * filter[two][two]) )// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 245
    // ifmaps2[2 ][col_to_be_replaced_1]
    &/ [array_obj_ref_1048_index_1_resize] (col_to_be_replaced_1_958) (R_col_to_be_replaced_1_1047_resized) 
    $flowthrough 
    &/ [array_obj_ref_1048_index_1_rename] (R_col_to_be_replaced_1_1047_resized) (R_col_to_be_replaced_1_1047_scaled) 
    $flowthrough 
    +[array_obj_ref_1048_index_offset] (R_col_to_be_replaced_1_1047_scaled array_obj_ref_1048_constant_part_of_offset) (array_obj_ref_1048_final_offset)   
    $delay array_obj_ref_1048_index_offset 2
    &/ [array_obj_ref_1048_root_address_inst] (array_obj_ref_1048_final_offset) (array_obj_ref_1048_root_address) 
    $flowthrough 
    &/ [array_obj_ref_1048_addr_0] (array_obj_ref_1048_root_address) (array_obj_ref_1048_word_address_0) 
    $flowthrough 
    $load [array_obj_ref_1048_load_0] $from memory_space_2 (array_obj_ref_1048_word_address_0) (array_obj_ref_1048_data_0) 
    $delay array_obj_ref_1048_load_0 4
    &/ [array_obj_ref_1048_gather_scatter] (array_obj_ref_1048_data_0) (array_obj_ref_1048_wire) 
    $flowthrough 
    // filter[two][two]
    $load [array_obj_ref_1051_load_0] $from memory_space_0 (array_obj_ref_1051_word_address_0) (array_obj_ref_1051_data_0) 
    $delay array_obj_ref_1051_load_0 5
    &/ [array_obj_ref_1051_gather_scatter] (array_obj_ref_1051_data_0) (array_obj_ref_1051_wire) 
    $flowthrough 
    // (ifmaps2[2 ][col_to_be_replaced_1] * filter[two][two])
    *[MUL_u16_u16_1052_inst] (array_obj_ref_1048_wire array_obj_ref_1051_wire) (MUL_u16_u16_1052_wire)   $flowthrough 
    $delay MUL_u16_u16_1052_inst 0
    // ($bitcast ($uint<16>) (ifmaps2[2 ][col_to_be_replaced_1] * filter[two][two]) )
    # := [type_cast_1053_inst] (MUL_u16_u16_1052_wire) (pp22_1054)   
    $buffering  $out type_cast_1053_inst pp22_1054 1
    $delay type_cast_1053_inst 1
    // 	pp32 := ($bitcast ($uint<16>) (ifmaps2[3 ][col_to_be_replaced_1] * filter[three][two]) )// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 246
    // ifmaps2[3 ][col_to_be_replaced_1]
    &/ [array_obj_ref_1058_index_1_resize] (col_to_be_replaced_1_958) (R_col_to_be_replaced_1_1057_resized) 
    $flowthrough 
    &/ [array_obj_ref_1058_index_1_rename] (R_col_to_be_replaced_1_1057_resized) (R_col_to_be_replaced_1_1057_scaled) 
    $flowthrough 
    +[array_obj_ref_1058_index_offset] (R_col_to_be_replaced_1_1057_scaled array_obj_ref_1058_constant_part_of_offset) (array_obj_ref_1058_final_offset)   
    $delay array_obj_ref_1058_index_offset 2
    &/ [array_obj_ref_1058_root_address_inst] (array_obj_ref_1058_final_offset) (array_obj_ref_1058_root_address) 
    $flowthrough 
    &/ [array_obj_ref_1058_addr_0] (array_obj_ref_1058_root_address) (array_obj_ref_1058_word_address_0) 
    $flowthrough 
    $load [array_obj_ref_1058_load_0] $from memory_space_2 (array_obj_ref_1058_word_address_0) (array_obj_ref_1058_data_0) 
    $delay array_obj_ref_1058_load_0 4
    &/ [array_obj_ref_1058_gather_scatter] (array_obj_ref_1058_data_0) (array_obj_ref_1058_wire) 
    $flowthrough 
    // filter[three][two]
    $load [array_obj_ref_1061_load_0] $from memory_space_0 (array_obj_ref_1061_word_address_0) (array_obj_ref_1061_data_0) 
    $delay array_obj_ref_1061_load_0 5
    &/ [array_obj_ref_1061_gather_scatter] (array_obj_ref_1061_data_0) (array_obj_ref_1061_wire) 
    $flowthrough 
    // (ifmaps2[3 ][col_to_be_replaced_1] * filter[three][two])
    *[MUL_u16_u16_1062_inst] (array_obj_ref_1058_wire array_obj_ref_1061_wire) (MUL_u16_u16_1062_wire)   $flowthrough 
    $delay MUL_u16_u16_1062_inst 0
    // ($bitcast ($uint<16>) (ifmaps2[3 ][col_to_be_replaced_1] * filter[three][two]) )
    # := [type_cast_1063_inst] (MUL_u16_u16_1062_wire) (pp32_1064)   
    $buffering  $out type_cast_1063_inst pp32_1064 1
    $delay type_cast_1063_inst 1
    // 	pp01 := ($bitcast ($uint<16>) (ifmaps2[0 ][col_to_be_replaced_2] * filter[zero][one]) )// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 247
    // ifmaps2[0 ][col_to_be_replaced_2]
    &/ [array_obj_ref_1068_index_1_resize] (col_to_be_replaced_2_972) (R_col_to_be_replaced_2_1067_resized) 
    $flowthrough 
    &/ [array_obj_ref_1068_index_1_rename] (R_col_to_be_replaced_2_1067_resized) (R_col_to_be_replaced_2_1067_scaled) 
    $flowthrough 
    +[array_obj_ref_1068_index_offset] (R_col_to_be_replaced_2_1067_scaled array_obj_ref_1068_constant_part_of_offset) (array_obj_ref_1068_final_offset)   
    $delay array_obj_ref_1068_index_offset 2
    &/ [array_obj_ref_1068_root_address_inst] (array_obj_ref_1068_final_offset) (array_obj_ref_1068_root_address) 
    $flowthrough 
    &/ [array_obj_ref_1068_addr_0] (array_obj_ref_1068_root_address) (array_obj_ref_1068_word_address_0) 
    $flowthrough 
    $load [array_obj_ref_1068_load_0] $from memory_space_2 (array_obj_ref_1068_word_address_0) (array_obj_ref_1068_data_0) 
    $delay array_obj_ref_1068_load_0 4
    &/ [array_obj_ref_1068_gather_scatter] (array_obj_ref_1068_data_0) (array_obj_ref_1068_wire) 
    $flowthrough 
    // filter[zero][one]
    $load [array_obj_ref_1071_load_0] $from memory_space_0 (array_obj_ref_1071_word_address_0) (array_obj_ref_1071_data_0) 
    $delay array_obj_ref_1071_load_0 5
    &/ [array_obj_ref_1071_gather_scatter] (array_obj_ref_1071_data_0) (array_obj_ref_1071_wire) 
    $flowthrough 
    // (ifmaps2[0 ][col_to_be_replaced_2] * filter[zero][one])
    *[MUL_u16_u16_1072_inst] (array_obj_ref_1068_wire array_obj_ref_1071_wire) (MUL_u16_u16_1072_wire)   $flowthrough 
    $delay MUL_u16_u16_1072_inst 0
    // ($bitcast ($uint<16>) (ifmaps2[0 ][col_to_be_replaced_2] * filter[zero][one]) )
    # := [type_cast_1073_inst] (MUL_u16_u16_1072_wire) (pp01_1074)   
    $buffering  $out type_cast_1073_inst pp01_1074 1
    $delay type_cast_1073_inst 1
    // 	pp11 := ($bitcast ($uint<16>) (ifmaps2[1 ][col_to_be_replaced_2] * filter[one][one]) )// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 248
    // ifmaps2[1 ][col_to_be_replaced_2]
    &/ [array_obj_ref_1078_index_1_resize] (col_to_be_replaced_2_972) (R_col_to_be_replaced_2_1077_resized) 
    $flowthrough 
    &/ [array_obj_ref_1078_index_1_rename] (R_col_to_be_replaced_2_1077_resized) (R_col_to_be_replaced_2_1077_scaled) 
    $flowthrough 
    +[array_obj_ref_1078_index_offset] (R_col_to_be_replaced_2_1077_scaled array_obj_ref_1078_constant_part_of_offset) (array_obj_ref_1078_final_offset)   
    $delay array_obj_ref_1078_index_offset 2
    &/ [array_obj_ref_1078_root_address_inst] (array_obj_ref_1078_final_offset) (array_obj_ref_1078_root_address) 
    $flowthrough 
    &/ [array_obj_ref_1078_addr_0] (array_obj_ref_1078_root_address) (array_obj_ref_1078_word_address_0) 
    $flowthrough 
    $load [array_obj_ref_1078_load_0] $from memory_space_2 (array_obj_ref_1078_word_address_0) (array_obj_ref_1078_data_0) 
    $delay array_obj_ref_1078_load_0 4
    &/ [array_obj_ref_1078_gather_scatter] (array_obj_ref_1078_data_0) (array_obj_ref_1078_wire) 
    $flowthrough 
    // filter[one][one]
    $load [array_obj_ref_1081_load_0] $from memory_space_0 (array_obj_ref_1081_word_address_0) (array_obj_ref_1081_data_0) 
    $delay array_obj_ref_1081_load_0 5
    &/ [array_obj_ref_1081_gather_scatter] (array_obj_ref_1081_data_0) (array_obj_ref_1081_wire) 
    $flowthrough 
    // (ifmaps2[1 ][col_to_be_replaced_2] * filter[one][one])
    *[MUL_u16_u16_1082_inst] (array_obj_ref_1078_wire array_obj_ref_1081_wire) (MUL_u16_u16_1082_wire)   $flowthrough 
    $delay MUL_u16_u16_1082_inst 0
    // ($bitcast ($uint<16>) (ifmaps2[1 ][col_to_be_replaced_2] * filter[one][one]) )
    # := [type_cast_1083_inst] (MUL_u16_u16_1082_wire) (pp11_1084)   
    $buffering  $out type_cast_1083_inst pp11_1084 1
    $delay type_cast_1083_inst 1
    // 	pp21 := ($bitcast ($uint<16>) (ifmaps2[2 ][col_to_be_replaced_2] * filter[two][one]) )// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 249
    // ifmaps2[2 ][col_to_be_replaced_2]
    &/ [array_obj_ref_1088_index_1_resize] (col_to_be_replaced_2_972) (R_col_to_be_replaced_2_1087_resized) 
    $flowthrough 
    &/ [array_obj_ref_1088_index_1_rename] (R_col_to_be_replaced_2_1087_resized) (R_col_to_be_replaced_2_1087_scaled) 
    $flowthrough 
    +[array_obj_ref_1088_index_offset] (R_col_to_be_replaced_2_1087_scaled array_obj_ref_1088_constant_part_of_offset) (array_obj_ref_1088_final_offset)   
    $delay array_obj_ref_1088_index_offset 2
    &/ [array_obj_ref_1088_root_address_inst] (array_obj_ref_1088_final_offset) (array_obj_ref_1088_root_address) 
    $flowthrough 
    &/ [array_obj_ref_1088_addr_0] (array_obj_ref_1088_root_address) (array_obj_ref_1088_word_address_0) 
    $flowthrough 
    $load [array_obj_ref_1088_load_0] $from memory_space_2 (array_obj_ref_1088_word_address_0) (array_obj_ref_1088_data_0) 
    $delay array_obj_ref_1088_load_0 4
    &/ [array_obj_ref_1088_gather_scatter] (array_obj_ref_1088_data_0) (array_obj_ref_1088_wire) 
    $flowthrough 
    // filter[two][one]
    $load [array_obj_ref_1091_load_0] $from memory_space_0 (array_obj_ref_1091_word_address_0) (array_obj_ref_1091_data_0) 
    $delay array_obj_ref_1091_load_0 5
    &/ [array_obj_ref_1091_gather_scatter] (array_obj_ref_1091_data_0) (array_obj_ref_1091_wire) 
    $flowthrough 
    // (ifmaps2[2 ][col_to_be_replaced_2] * filter[two][one])
    *[MUL_u16_u16_1092_inst] (array_obj_ref_1088_wire array_obj_ref_1091_wire) (MUL_u16_u16_1092_wire)   $flowthrough 
    $delay MUL_u16_u16_1092_inst 0
    // ($bitcast ($uint<16>) (ifmaps2[2 ][col_to_be_replaced_2] * filter[two][one]) )
    # := [type_cast_1093_inst] (MUL_u16_u16_1092_wire) (pp21_1094)   
    $buffering  $out type_cast_1093_inst pp21_1094 1
    $delay type_cast_1093_inst 1
    // 	pp31 := ($bitcast ($uint<16>) (ifmaps2[3 ][col_to_be_replaced_2] * filter[three][one]) )// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 250
    // ifmaps2[3 ][col_to_be_replaced_2]
    &/ [array_obj_ref_1098_index_1_resize] (col_to_be_replaced_2_972) (R_col_to_be_replaced_2_1097_resized) 
    $flowthrough 
    &/ [array_obj_ref_1098_index_1_rename] (R_col_to_be_replaced_2_1097_resized) (R_col_to_be_replaced_2_1097_scaled) 
    $flowthrough 
    +[array_obj_ref_1098_index_offset] (R_col_to_be_replaced_2_1097_scaled array_obj_ref_1098_constant_part_of_offset) (array_obj_ref_1098_final_offset)   
    $delay array_obj_ref_1098_index_offset 2
    &/ [array_obj_ref_1098_root_address_inst] (array_obj_ref_1098_final_offset) (array_obj_ref_1098_root_address) 
    $flowthrough 
    &/ [array_obj_ref_1098_addr_0] (array_obj_ref_1098_root_address) (array_obj_ref_1098_word_address_0) 
    $flowthrough 
    $load [array_obj_ref_1098_load_0] $from memory_space_2 (array_obj_ref_1098_word_address_0) (array_obj_ref_1098_data_0) 
    $delay array_obj_ref_1098_load_0 4
    &/ [array_obj_ref_1098_gather_scatter] (array_obj_ref_1098_data_0) (array_obj_ref_1098_wire) 
    $flowthrough 
    // filter[three][one]
    $load [array_obj_ref_1101_load_0] $from memory_space_0 (array_obj_ref_1101_word_address_0) (array_obj_ref_1101_data_0) 
    $delay array_obj_ref_1101_load_0 5
    &/ [array_obj_ref_1101_gather_scatter] (array_obj_ref_1101_data_0) (array_obj_ref_1101_wire) 
    $flowthrough 
    // (ifmaps2[3 ][col_to_be_replaced_2] * filter[three][one])
    *[MUL_u16_u16_1102_inst] (array_obj_ref_1098_wire array_obj_ref_1101_wire) (MUL_u16_u16_1102_wire)   $flowthrough 
    $delay MUL_u16_u16_1102_inst 0
    // ($bitcast ($uint<16>) (ifmaps2[3 ][col_to_be_replaced_2] * filter[three][one]) )
    # := [type_cast_1103_inst] (MUL_u16_u16_1102_wire) (pp31_1104)   
    $buffering  $out type_cast_1103_inst pp31_1104 1
    $delay type_cast_1103_inst 1
    // 	pp00 := ($bitcast ($uint<16>) (ifmaps2[0 ][col_to_be_replaced_3] * filter[zero][zero]) )// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 251
    // ifmaps2[0 ][col_to_be_replaced_3]
    &/ [array_obj_ref_1108_index_1_resize] (col_to_be_replaced_3_984) (R_col_to_be_replaced_3_1107_resized) 
    $flowthrough 
    &/ [array_obj_ref_1108_index_1_rename] (R_col_to_be_replaced_3_1107_resized) (R_col_to_be_replaced_3_1107_scaled) 
    $flowthrough 
    +[array_obj_ref_1108_index_offset] (R_col_to_be_replaced_3_1107_scaled array_obj_ref_1108_constant_part_of_offset) (array_obj_ref_1108_final_offset)   
    $delay array_obj_ref_1108_index_offset 2
    &/ [array_obj_ref_1108_root_address_inst] (array_obj_ref_1108_final_offset) (array_obj_ref_1108_root_address) 
    $flowthrough 
    &/ [array_obj_ref_1108_addr_0] (array_obj_ref_1108_root_address) (array_obj_ref_1108_word_address_0) 
    $flowthrough 
    $load [array_obj_ref_1108_load_0] $from memory_space_2 (array_obj_ref_1108_word_address_0) (array_obj_ref_1108_data_0) 
    $delay array_obj_ref_1108_load_0 4
    &/ [array_obj_ref_1108_gather_scatter] (array_obj_ref_1108_data_0) (array_obj_ref_1108_wire) 
    $flowthrough 
    // filter[zero][zero]
    $load [array_obj_ref_1111_load_0] $from memory_space_0 (array_obj_ref_1111_word_address_0) (array_obj_ref_1111_data_0) 
    $delay array_obj_ref_1111_load_0 5
    &/ [array_obj_ref_1111_gather_scatter] (array_obj_ref_1111_data_0) (array_obj_ref_1111_wire) 
    $flowthrough 
    // (ifmaps2[0 ][col_to_be_replaced_3] * filter[zero][zero])
    *[MUL_u16_u16_1112_inst] (array_obj_ref_1108_wire array_obj_ref_1111_wire) (MUL_u16_u16_1112_wire)   $flowthrough 
    $delay MUL_u16_u16_1112_inst 0
    // ($bitcast ($uint<16>) (ifmaps2[0 ][col_to_be_replaced_3] * filter[zero][zero]) )
    # := [type_cast_1113_inst] (MUL_u16_u16_1112_wire) (pp00_1114)   
    $buffering  $out type_cast_1113_inst pp00_1114 1
    $delay type_cast_1113_inst 1
    // 	pp10 := ($bitcast ($uint<16>) (ifmaps2[1 ][col_to_be_replaced_3] * filter[one][zero]) )// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 252
    // ifmaps2[1 ][col_to_be_replaced_3]
    &/ [array_obj_ref_1118_index_1_resize] (col_to_be_replaced_3_984) (R_col_to_be_replaced_3_1117_resized) 
    $flowthrough 
    &/ [array_obj_ref_1118_index_1_rename] (R_col_to_be_replaced_3_1117_resized) (R_col_to_be_replaced_3_1117_scaled) 
    $flowthrough 
    +[array_obj_ref_1118_index_offset] (R_col_to_be_replaced_3_1117_scaled array_obj_ref_1118_constant_part_of_offset) (array_obj_ref_1118_final_offset)   
    $delay array_obj_ref_1118_index_offset 2
    &/ [array_obj_ref_1118_root_address_inst] (array_obj_ref_1118_final_offset) (array_obj_ref_1118_root_address) 
    $flowthrough 
    &/ [array_obj_ref_1118_addr_0] (array_obj_ref_1118_root_address) (array_obj_ref_1118_word_address_0) 
    $flowthrough 
    $load [array_obj_ref_1118_load_0] $from memory_space_2 (array_obj_ref_1118_word_address_0) (array_obj_ref_1118_data_0) 
    $delay array_obj_ref_1118_load_0 4
    &/ [array_obj_ref_1118_gather_scatter] (array_obj_ref_1118_data_0) (array_obj_ref_1118_wire) 
    $flowthrough 
    // filter[one][zero]
    $load [array_obj_ref_1121_load_0] $from memory_space_0 (array_obj_ref_1121_word_address_0) (array_obj_ref_1121_data_0) 
    $delay array_obj_ref_1121_load_0 5
    &/ [array_obj_ref_1121_gather_scatter] (array_obj_ref_1121_data_0) (array_obj_ref_1121_wire) 
    $flowthrough 
    // (ifmaps2[1 ][col_to_be_replaced_3] * filter[one][zero])
    *[MUL_u16_u16_1122_inst] (array_obj_ref_1118_wire array_obj_ref_1121_wire) (MUL_u16_u16_1122_wire)   $flowthrough 
    $delay MUL_u16_u16_1122_inst 0
    // ($bitcast ($uint<16>) (ifmaps2[1 ][col_to_be_replaced_3] * filter[one][zero]) )
    # := [type_cast_1123_inst] (MUL_u16_u16_1122_wire) (pp10_1124)   
    $buffering  $out type_cast_1123_inst pp10_1124 1
    $delay type_cast_1123_inst 1
    // 	pp20 := ($bitcast ($uint<16>) (ifmaps2[2 ][col_to_be_replaced_3] * filter[two][zero]) )// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 253
    // ifmaps2[2 ][col_to_be_replaced_3]
    &/ [array_obj_ref_1128_index_1_resize] (col_to_be_replaced_3_984) (R_col_to_be_replaced_3_1127_resized) 
    $flowthrough 
    &/ [array_obj_ref_1128_index_1_rename] (R_col_to_be_replaced_3_1127_resized) (R_col_to_be_replaced_3_1127_scaled) 
    $flowthrough 
    +[array_obj_ref_1128_index_offset] (R_col_to_be_replaced_3_1127_scaled array_obj_ref_1128_constant_part_of_offset) (array_obj_ref_1128_final_offset)   
    $delay array_obj_ref_1128_index_offset 2
    &/ [array_obj_ref_1128_root_address_inst] (array_obj_ref_1128_final_offset) (array_obj_ref_1128_root_address) 
    $flowthrough 
    &/ [array_obj_ref_1128_addr_0] (array_obj_ref_1128_root_address) (array_obj_ref_1128_word_address_0) 
    $flowthrough 
    $load [array_obj_ref_1128_load_0] $from memory_space_2 (array_obj_ref_1128_word_address_0) (array_obj_ref_1128_data_0) 
    $delay array_obj_ref_1128_load_0 4
    &/ [array_obj_ref_1128_gather_scatter] (array_obj_ref_1128_data_0) (array_obj_ref_1128_wire) 
    $flowthrough 
    // filter[two][zero]
    $load [array_obj_ref_1131_load_0] $from memory_space_0 (array_obj_ref_1131_word_address_0) (array_obj_ref_1131_data_0) 
    $delay array_obj_ref_1131_load_0 5
    &/ [array_obj_ref_1131_gather_scatter] (array_obj_ref_1131_data_0) (array_obj_ref_1131_wire) 
    $flowthrough 
    // (ifmaps2[2 ][col_to_be_replaced_3] * filter[two][zero])
    *[MUL_u16_u16_1132_inst] (array_obj_ref_1128_wire array_obj_ref_1131_wire) (MUL_u16_u16_1132_wire)   $flowthrough 
    $delay MUL_u16_u16_1132_inst 0
    // ($bitcast ($uint<16>) (ifmaps2[2 ][col_to_be_replaced_3] * filter[two][zero]) )
    # := [type_cast_1133_inst] (MUL_u16_u16_1132_wire) (pp20_1134)   
    $buffering  $out type_cast_1133_inst pp20_1134 1
    $delay type_cast_1133_inst 1
    // 	pp30 := ($bitcast ($uint<16>) (ifmaps2[3 ][col_to_be_replaced_3] * filter[three][zero]) )// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 254
    // ifmaps2[3 ][col_to_be_replaced_3]
    &/ [array_obj_ref_1138_index_1_resize] (col_to_be_replaced_3_984) (R_col_to_be_replaced_3_1137_resized) 
    $flowthrough 
    &/ [array_obj_ref_1138_index_1_rename] (R_col_to_be_replaced_3_1137_resized) (R_col_to_be_replaced_3_1137_scaled) 
    $flowthrough 
    +[array_obj_ref_1138_index_offset] (R_col_to_be_replaced_3_1137_scaled array_obj_ref_1138_constant_part_of_offset) (array_obj_ref_1138_final_offset)   
    $delay array_obj_ref_1138_index_offset 2
    &/ [array_obj_ref_1138_root_address_inst] (array_obj_ref_1138_final_offset) (array_obj_ref_1138_root_address) 
    $flowthrough 
    &/ [array_obj_ref_1138_addr_0] (array_obj_ref_1138_root_address) (array_obj_ref_1138_word_address_0) 
    $flowthrough 
    $load [array_obj_ref_1138_load_0] $from memory_space_2 (array_obj_ref_1138_word_address_0) (array_obj_ref_1138_data_0) 
    $delay array_obj_ref_1138_load_0 4
    &/ [array_obj_ref_1138_gather_scatter] (array_obj_ref_1138_data_0) (array_obj_ref_1138_wire) 
    $flowthrough 
    // filter[three][zero]
    $load [array_obj_ref_1141_load_0] $from memory_space_0 (array_obj_ref_1141_word_address_0) (array_obj_ref_1141_data_0) 
    $delay array_obj_ref_1141_load_0 5
    &/ [array_obj_ref_1141_gather_scatter] (array_obj_ref_1141_data_0) (array_obj_ref_1141_wire) 
    $flowthrough 
    // (ifmaps2[3 ][col_to_be_replaced_3] * filter[three][zero])
    *[MUL_u16_u16_1142_inst] (array_obj_ref_1138_wire array_obj_ref_1141_wire) (MUL_u16_u16_1142_wire)   $flowthrough 
    $delay MUL_u16_u16_1142_inst 0
    // ($bitcast ($uint<16>) (ifmaps2[3 ][col_to_be_replaced_3] * filter[three][zero]) )
    # := [type_cast_1143_inst] (MUL_u16_u16_1142_wire) (pp30_1144)   
    $buffering  $out type_cast_1143_inst pp30_1144 1
    $delay type_cast_1143_inst 1
    // 	sum0 := ($bitcast ($uint<16>) (pp00 + pp01) )// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 255
    // (pp00 + pp01)
    +[ADD_u16_u16_1148_inst] (pp00_1114 pp01_1074) (ADD_u16_u16_1148_wire)   $flowthrough 
    $delay ADD_u16_u16_1148_inst 0
    // ($bitcast ($uint<16>) (pp00 + pp01) )
    # := [type_cast_1149_inst] (ADD_u16_u16_1148_wire) (sum0_1150)   
    $buffering  $out type_cast_1149_inst sum0_1150 1
    $delay type_cast_1149_inst 1
    // 	sum1 := ($bitcast ($uint<16>) (pp02 + pp03) )// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 256
    // (pp02 + pp03)
    +[ADD_u16_u16_1154_inst] (pp02_1034 pp03_994) (ADD_u16_u16_1154_wire)   $flowthrough 
    $delay ADD_u16_u16_1154_inst 0
    // ($bitcast ($uint<16>) (pp02 + pp03) )
    # := [type_cast_1155_inst] (ADD_u16_u16_1154_wire) (sum1_1156)   
    $buffering  $out type_cast_1155_inst sum1_1156 1
    $delay type_cast_1155_inst 1
    // 	sum2 := ($bitcast ($uint<16>) (pp10 + pp11) )// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 257
    // (pp10 + pp11)
    +[ADD_u16_u16_1160_inst] (pp10_1124 pp11_1084) (ADD_u16_u16_1160_wire)   $flowthrough 
    $delay ADD_u16_u16_1160_inst 0
    // ($bitcast ($uint<16>) (pp10 + pp11) )
    # := [type_cast_1161_inst] (ADD_u16_u16_1160_wire) (sum2_1162)   
    $buffering  $out type_cast_1161_inst sum2_1162 1
    $delay type_cast_1161_inst 1
    // 	sum3 := ($bitcast ($uint<16>) (pp12 + pp13) )// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 258
    // (pp12 + pp13)
    +[ADD_u16_u16_1166_inst] (pp12_1044 pp13_1004) (ADD_u16_u16_1166_wire)   $flowthrough 
    $delay ADD_u16_u16_1166_inst 0
    // ($bitcast ($uint<16>) (pp12 + pp13) )
    # := [type_cast_1167_inst] (ADD_u16_u16_1166_wire) (sum3_1168)   
    $buffering  $out type_cast_1167_inst sum3_1168 1
    $delay type_cast_1167_inst 1
    // 	sum4 := ($bitcast ($uint<16>) (pp20 + pp21) )// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 259
    // (pp20 + pp21)
    +[ADD_u16_u16_1172_inst] (pp20_1134 pp21_1094) (ADD_u16_u16_1172_wire)   $flowthrough 
    $delay ADD_u16_u16_1172_inst 0
    // ($bitcast ($uint<16>) (pp20 + pp21) )
    # := [type_cast_1173_inst] (ADD_u16_u16_1172_wire) (sum4_1174)   
    $buffering  $out type_cast_1173_inst sum4_1174 1
    $delay type_cast_1173_inst 1
    // 	sum5 := ($bitcast ($uint<16>) (pp22 + pp23) )// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 260
    // (pp22 + pp23)
    +[ADD_u16_u16_1178_inst] (pp22_1054 pp23_1014) (ADD_u16_u16_1178_wire)   $flowthrough 
    $delay ADD_u16_u16_1178_inst 0
    // ($bitcast ($uint<16>) (pp22 + pp23) )
    # := [type_cast_1179_inst] (ADD_u16_u16_1178_wire) (sum5_1180)   
    $buffering  $out type_cast_1179_inst sum5_1180 1
    $delay type_cast_1179_inst 1
    // 	sum6 := ($bitcast ($uint<16>) (pp30 + pp31) )// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 261
    // (pp30 + pp31)
    +[ADD_u16_u16_1184_inst] (pp30_1144 pp31_1104) (ADD_u16_u16_1184_wire)   $flowthrough 
    $delay ADD_u16_u16_1184_inst 0
    // ($bitcast ($uint<16>) (pp30 + pp31) )
    # := [type_cast_1185_inst] (ADD_u16_u16_1184_wire) (sum6_1186)   
    $buffering  $out type_cast_1185_inst sum6_1186 1
    $delay type_cast_1185_inst 1
    // 	sum7 := ($bitcast ($uint<16>) (pp32 + pp33) )// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 262
    // (pp32 + pp33)
    +[ADD_u16_u16_1190_inst] (pp32_1064 pp33_1024) (ADD_u16_u16_1190_wire)   $flowthrough 
    $delay ADD_u16_u16_1190_inst 0
    // ($bitcast ($uint<16>) (pp32 + pp33) )
    # := [type_cast_1191_inst] (ADD_u16_u16_1190_wire) (sum7_1192)   
    $buffering  $out type_cast_1191_inst sum7_1192 1
    $delay type_cast_1191_inst 1
    // 	sum10 := ($bitcast ($uint<16>) (sum0 + sum1) )// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 263
    // (sum0 + sum1)
    +[ADD_u16_u16_1196_inst] (sum0_1150 sum1_1156) (ADD_u16_u16_1196_wire)   $flowthrough 
    $delay ADD_u16_u16_1196_inst 0
    // ($bitcast ($uint<16>) (sum0 + sum1) )
    # := [type_cast_1197_inst] (ADD_u16_u16_1196_wire) (sum10_1198)   
    $buffering  $out type_cast_1197_inst sum10_1198 1
    $delay type_cast_1197_inst 1
    // 	sum11 := ($bitcast ($uint<16>) (sum2 + sum3) )// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 264
    // (sum2 + sum3)
    +[ADD_u16_u16_1202_inst] (sum2_1162 sum3_1168) (ADD_u16_u16_1202_wire)   $flowthrough 
    $delay ADD_u16_u16_1202_inst 0
    // ($bitcast ($uint<16>) (sum2 + sum3) )
    # := [type_cast_1203_inst] (ADD_u16_u16_1202_wire) (sum11_1204)   
    $buffering  $out type_cast_1203_inst sum11_1204 1
    $delay type_cast_1203_inst 1
    // 	sum12 := ($bitcast ($uint<16>) (sum4 + sum5) )// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 265
    // (sum4 + sum5)
    +[ADD_u16_u16_1208_inst] (sum4_1174 sum5_1180) (ADD_u16_u16_1208_wire)   $flowthrough 
    $delay ADD_u16_u16_1208_inst 0
    // ($bitcast ($uint<16>) (sum4 + sum5) )
    # := [type_cast_1209_inst] (ADD_u16_u16_1208_wire) (sum12_1210)   
    $buffering  $out type_cast_1209_inst sum12_1210 1
    $delay type_cast_1209_inst 1
    // 	sum13 := ($bitcast ($uint<16>) (sum6 + sum7) )// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 266
    // (sum6 + sum7)
    +[ADD_u16_u16_1214_inst] (sum6_1186 sum7_1192) (ADD_u16_u16_1214_wire)   $flowthrough 
    $delay ADD_u16_u16_1214_inst 0
    // ($bitcast ($uint<16>) (sum6 + sum7) )
    # := [type_cast_1215_inst] (ADD_u16_u16_1214_wire) (sum13_1216)   
    $buffering  $out type_cast_1215_inst sum13_1216 1
    $delay type_cast_1215_inst 1
    // 	sum20 := ($bitcast ($uint<16>) (sum10 + sum11) )// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 267
    // (sum10 + sum11)
    +[ADD_u16_u16_1220_inst] (sum10_1198 sum11_1204) (ADD_u16_u16_1220_wire)   $flowthrough 
    $delay ADD_u16_u16_1220_inst 0
    // ($bitcast ($uint<16>) (sum10 + sum11) )
    # := [type_cast_1221_inst] (ADD_u16_u16_1220_wire) (sum20_1222)   
    $buffering  $out type_cast_1221_inst sum20_1222 1
    $delay type_cast_1221_inst 1
    // 	sum21 := ($bitcast ($uint<16>) (sum12 + sum13) )// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 268
    // (sum12 + sum13)
    +[ADD_u16_u16_1226_inst] (sum12_1210 sum13_1216) (ADD_u16_u16_1226_wire)   $flowthrough 
    $delay ADD_u16_u16_1226_inst 0
    // ($bitcast ($uint<16>) (sum12 + sum13) )
    # := [type_cast_1227_inst] (ADD_u16_u16_1226_wire) (sum21_1228)   
    $buffering  $out type_cast_1227_inst sum21_1228 1
    $delay type_cast_1227_inst 1
    // 	ofmap_pixel := ($bitcast ($uint<16>) (sum20 + sum21) )// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 269
    // (sum20 + sum21)
    +[ADD_u16_u16_1232_inst] (sum20_1222 sum21_1228) (ADD_u16_u16_1232_wire)   $flowthrough 
    $delay ADD_u16_u16_1232_inst 0
    // ($bitcast ($uint<16>) (sum20 + sum21) )
    # := [type_cast_1233_inst] (ADD_u16_u16_1232_wire) (ofmap_pixel)   
    $buffering  $out type_cast_1233_inst ofmap_pixel 1
    $delay type_cast_1233_inst 1
  }
  // end data-path
  // 	col_to_be_replaced_1 := ( $mux (col_to_be_replaced == 0 ) ($bitcast ($uint<2>) 3  )  ($bitcast ($uint<2>) (col_to_be_replaced - 1 ) ) ) // bits of buffering = 2. 
  //  file prog.linked.opt.aa, line 236
  // (col_to_be_replaced == 0 )
  // col_to_be_replaced
  // (col_to_be_replaced - 1 )
  // col_to_be_replaced
  // ( $mux (col_to_be_replaced == 0 ) ($bitcast ($uint<2>) 3  )  ($bitcast ($uint<2>) (col_to_be_replaced - 1 ) ) ) 
  MUX_957_inst <=> (assign_stmt_934_to_assign_stmt_1234/MUX_957_start/req assign_stmt_934_to_assign_stmt_1234/MUX_957_complete/req) (assign_stmt_934_to_assign_stmt_1234/MUX_957_start/ack assign_stmt_934_to_assign_stmt_1234/MUX_957_complete/ack)
  // 	col_to_be_replaced_2 := ( $mux (col_to_be_replaced >= 2 ) ($bitcast ($uint<2>) (col_to_be_replaced - 2 ) )  ($bitcast ($uint<2>) (col_to_be_replaced + 2 ) ) ) // bits of buffering = 2. 
  //  file prog.linked.opt.aa, line 237
  // (col_to_be_replaced >= 2 )
  // col_to_be_replaced
  // (col_to_be_replaced - 2 )
  // col_to_be_replaced
  // (col_to_be_replaced + 2 )
  // col_to_be_replaced
  // ( $mux (col_to_be_replaced >= 2 ) ($bitcast ($uint<2>) (col_to_be_replaced - 2 ) )  ($bitcast ($uint<2>) (col_to_be_replaced + 2 ) ) ) 
  MUX_971_inst <=> (assign_stmt_934_to_assign_stmt_1234/MUX_971_start/req assign_stmt_934_to_assign_stmt_1234/MUX_971_complete/req) (assign_stmt_934_to_assign_stmt_1234/MUX_971_start/ack assign_stmt_934_to_assign_stmt_1234/MUX_971_complete/ack)
  // 	col_to_be_replaced_3 := ( $mux (col_to_be_replaced == 3 ) ($bitcast ($uint<2>) 0  )  ($bitcast ($uint<2>) (col_to_be_replaced + 1 ) ) ) // bits of buffering = 2. 
  //  file prog.linked.opt.aa, line 238
  // (col_to_be_replaced == 3 )
  // col_to_be_replaced
  // (col_to_be_replaced + 1 )
  // col_to_be_replaced
  // ( $mux (col_to_be_replaced == 3 ) ($bitcast ($uint<2>) 0  )  ($bitcast ($uint<2>) (col_to_be_replaced + 1 ) ) ) 
  MUX_983_inst <=> (assign_stmt_934_to_assign_stmt_1234/MUX_983_start/req assign_stmt_934_to_assign_stmt_1234/MUX_983_complete/req) (assign_stmt_934_to_assign_stmt_1234/MUX_983_start/ack assign_stmt_934_to_assign_stmt_1234/MUX_983_complete/ack)
  // 	pp03 := ($bitcast ($uint<16>) (ifmaps2[0 ][col_to_be_replaced] * filter[zero][three]) )// bits of buffering = 16. 
  //  file prog.linked.opt.aa, line 239
  // (ifmaps2[0 ][col_to_be_replaced] * filter[zero][three])
  // ifmaps2[0 ][col_to_be_replaced]
  // col_to_be_replaced
  array_obj_ref_988_index_1_resize <=> (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_988_index_resize_1/index_resize_req) (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_988_index_resize_1/index_resize_ack)
  array_obj_ref_988_index_1_rename <=> (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_988_index_scale_1/scale_rename_req) (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_988_index_scale_1/scale_rename_ack)
  array_obj_ref_988_index_offset <=> (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_988_final_index_sum_regn_Sample/req assign_stmt_934_to_assign_stmt_1234/array_obj_ref_988_final_index_sum_regn_Update/req) (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_988_final_index_sum_regn_Sample/ack assign_stmt_934_to_assign_stmt_1234/array_obj_ref_988_final_index_sum_regn_Update/ack)
  array_obj_ref_988_root_address_inst <=> (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_988_base_plus_offset/sum_rename_req) (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_988_base_plus_offset/sum_rename_ack)
  array_obj_ref_988_addr_0 <=> (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_988_word_addrgen/root_register_req) (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_988_word_addrgen/root_register_ack)
  array_obj_ref_988_gather_scatter <=> (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_988_Update/array_obj_ref_988_Merge/merge_req) (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_988_Update/array_obj_ref_988_Merge/merge_ack)
  array_obj_ref_988_load_0 <=> (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_988_Sample/word_access_start/word_0/rr assign_stmt_934_to_assign_stmt_1234/array_obj_ref_988_Update/word_access_complete/word_0/cr) (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_988_Sample/word_access_start/word_0/ra assign_stmt_934_to_assign_stmt_1234/array_obj_ref_988_Update/word_access_complete/word_0/ca)
  // filter[zero][three]
  array_obj_ref_991_gather_scatter <=> (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_991_Update/array_obj_ref_991_Merge/merge_req) (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_991_Update/array_obj_ref_991_Merge/merge_ack)
  array_obj_ref_991_load_0 <=> (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_991_Sample/word_access_start/word_0/rr assign_stmt_934_to_assign_stmt_1234/array_obj_ref_991_Update/word_access_complete/word_0/cr) (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_991_Sample/word_access_start/word_0/ra assign_stmt_934_to_assign_stmt_1234/array_obj_ref_991_Update/word_access_complete/word_0/ca)
  // ($bitcast ($uint<16>) (ifmaps2[0 ][col_to_be_replaced] * filter[zero][three]) )
  type_cast_993_inst <=> (assign_stmt_934_to_assign_stmt_1234/type_cast_993_Sample/rr assign_stmt_934_to_assign_stmt_1234/type_cast_993_Update/cr) (assign_stmt_934_to_assign_stmt_1234/type_cast_993_Sample/ra assign_stmt_934_to_assign_stmt_1234/type_cast_993_Update/ca)
  // 	pp13 := ($bitcast ($uint<16>) (ifmaps2[1 ][col_to_be_replaced] * filter[one][three]) )// bits of buffering = 16. 
  //  file prog.linked.opt.aa, line 240
  // (ifmaps2[1 ][col_to_be_replaced] * filter[one][three])
  // ifmaps2[1 ][col_to_be_replaced]
  // col_to_be_replaced
  array_obj_ref_998_index_1_resize <=> (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_998_index_resize_1/index_resize_req) (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_998_index_resize_1/index_resize_ack)
  array_obj_ref_998_index_1_rename <=> (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_998_index_scale_1/scale_rename_req) (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_998_index_scale_1/scale_rename_ack)
  array_obj_ref_998_index_offset <=> (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_998_final_index_sum_regn_Sample/req assign_stmt_934_to_assign_stmt_1234/array_obj_ref_998_final_index_sum_regn_Update/req) (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_998_final_index_sum_regn_Sample/ack assign_stmt_934_to_assign_stmt_1234/array_obj_ref_998_final_index_sum_regn_Update/ack)
  array_obj_ref_998_root_address_inst <=> (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_998_base_plus_offset/sum_rename_req) (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_998_base_plus_offset/sum_rename_ack)
  array_obj_ref_998_addr_0 <=> (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_998_word_addrgen/root_register_req) (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_998_word_addrgen/root_register_ack)
  array_obj_ref_998_gather_scatter <=> (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_998_Update/array_obj_ref_998_Merge/merge_req) (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_998_Update/array_obj_ref_998_Merge/merge_ack)
  array_obj_ref_998_load_0 <=> (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_998_Sample/word_access_start/word_0/rr assign_stmt_934_to_assign_stmt_1234/array_obj_ref_998_Update/word_access_complete/word_0/cr) (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_998_Sample/word_access_start/word_0/ra assign_stmt_934_to_assign_stmt_1234/array_obj_ref_998_Update/word_access_complete/word_0/ca)
  // filter[one][three]
  array_obj_ref_1001_gather_scatter <=> (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1001_Update/array_obj_ref_1001_Merge/merge_req) (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1001_Update/array_obj_ref_1001_Merge/merge_ack)
  array_obj_ref_1001_load_0 <=> (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1001_Sample/word_access_start/word_0/rr assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1001_Update/word_access_complete/word_0/cr) (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1001_Sample/word_access_start/word_0/ra assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1001_Update/word_access_complete/word_0/ca)
  // ($bitcast ($uint<16>) (ifmaps2[1 ][col_to_be_replaced] * filter[one][three]) )
  type_cast_1003_inst <=> (assign_stmt_934_to_assign_stmt_1234/type_cast_1003_Sample/rr assign_stmt_934_to_assign_stmt_1234/type_cast_1003_Update/cr) (assign_stmt_934_to_assign_stmt_1234/type_cast_1003_Sample/ra assign_stmt_934_to_assign_stmt_1234/type_cast_1003_Update/ca)
  // 	pp23 := ($bitcast ($uint<16>) (ifmaps2[2 ][col_to_be_replaced] * filter[two][three]) )// bits of buffering = 16. 
  //  file prog.linked.opt.aa, line 241
  // (ifmaps2[2 ][col_to_be_replaced] * filter[two][three])
  // ifmaps2[2 ][col_to_be_replaced]
  // col_to_be_replaced
  array_obj_ref_1008_index_1_resize <=> (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1008_index_resize_1/index_resize_req) (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1008_index_resize_1/index_resize_ack)
  array_obj_ref_1008_index_1_rename <=> (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1008_index_scale_1/scale_rename_req) (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1008_index_scale_1/scale_rename_ack)
  array_obj_ref_1008_index_offset <=> (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1008_final_index_sum_regn_Sample/req assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1008_final_index_sum_regn_Update/req) (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1008_final_index_sum_regn_Sample/ack assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1008_final_index_sum_regn_Update/ack)
  array_obj_ref_1008_root_address_inst <=> (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1008_base_plus_offset/sum_rename_req) (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1008_base_plus_offset/sum_rename_ack)
  array_obj_ref_1008_addr_0 <=> (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1008_word_addrgen/root_register_req) (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1008_word_addrgen/root_register_ack)
  array_obj_ref_1008_gather_scatter <=> (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1008_Update/array_obj_ref_1008_Merge/merge_req) (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1008_Update/array_obj_ref_1008_Merge/merge_ack)
  array_obj_ref_1008_load_0 <=> (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1008_Sample/word_access_start/word_0/rr assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1008_Update/word_access_complete/word_0/cr) (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1008_Sample/word_access_start/word_0/ra assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1008_Update/word_access_complete/word_0/ca)
  // filter[two][three]
  array_obj_ref_1011_gather_scatter <=> (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1011_Update/array_obj_ref_1011_Merge/merge_req) (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1011_Update/array_obj_ref_1011_Merge/merge_ack)
  array_obj_ref_1011_load_0 <=> (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1011_Sample/word_access_start/word_0/rr assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1011_Update/word_access_complete/word_0/cr) (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1011_Sample/word_access_start/word_0/ra assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1011_Update/word_access_complete/word_0/ca)
  // ($bitcast ($uint<16>) (ifmaps2[2 ][col_to_be_replaced] * filter[two][three]) )
  type_cast_1013_inst <=> (assign_stmt_934_to_assign_stmt_1234/type_cast_1013_Sample/rr assign_stmt_934_to_assign_stmt_1234/type_cast_1013_Update/cr) (assign_stmt_934_to_assign_stmt_1234/type_cast_1013_Sample/ra assign_stmt_934_to_assign_stmt_1234/type_cast_1013_Update/ca)
  // 	pp33 := ($bitcast ($uint<16>) (ifmaps[3 ][col_to_be_replaced] * filter[three][three]) )// bits of buffering = 16. 
  //  file prog.linked.opt.aa, line 242
  // (ifmaps[3 ][col_to_be_replaced] * filter[three][three])
  // ifmaps[3 ][col_to_be_replaced]
  // col_to_be_replaced
  array_obj_ref_1018_index_1_resize <=> (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1018_index_resize_1/index_resize_req) (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1018_index_resize_1/index_resize_ack)
  array_obj_ref_1018_index_1_rename <=> (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1018_index_scale_1/scale_rename_req) (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1018_index_scale_1/scale_rename_ack)
  array_obj_ref_1018_index_offset <=> (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1018_final_index_sum_regn_Sample/req assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1018_final_index_sum_regn_Update/req) (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1018_final_index_sum_regn_Sample/ack assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1018_final_index_sum_regn_Update/ack)
  array_obj_ref_1018_root_address_inst <=> (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1018_base_plus_offset/sum_rename_req) (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1018_base_plus_offset/sum_rename_ack)
  array_obj_ref_1018_addr_0 <=> (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1018_word_addrgen/root_register_req) (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1018_word_addrgen/root_register_ack)
  array_obj_ref_1018_gather_scatter <=> (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1018_Update/array_obj_ref_1018_Merge/merge_req) (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1018_Update/array_obj_ref_1018_Merge/merge_ack)
  array_obj_ref_1018_load_0 <=> (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1018_Sample/word_access_start/word_0/rr assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1018_Update/word_access_complete/word_0/cr) (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1018_Sample/word_access_start/word_0/ra assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1018_Update/word_access_complete/word_0/ca)
  // filter[three][three]
  array_obj_ref_1021_gather_scatter <=> (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1021_Update/array_obj_ref_1021_Merge/merge_req) (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1021_Update/array_obj_ref_1021_Merge/merge_ack)
  array_obj_ref_1021_load_0 <=> (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1021_Sample/word_access_start/word_0/rr assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1021_Update/word_access_complete/word_0/cr) (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1021_Sample/word_access_start/word_0/ra assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1021_Update/word_access_complete/word_0/ca)
  // ($bitcast ($uint<16>) (ifmaps[3 ][col_to_be_replaced] * filter[three][three]) )
  type_cast_1023_inst <=> (assign_stmt_934_to_assign_stmt_1234/type_cast_1023_Sample/rr assign_stmt_934_to_assign_stmt_1234/type_cast_1023_Update/cr) (assign_stmt_934_to_assign_stmt_1234/type_cast_1023_Sample/ra assign_stmt_934_to_assign_stmt_1234/type_cast_1023_Update/ca)
  // 	pp02 := ($bitcast ($uint<16>) (ifmaps2[0 ][col_to_be_replaced_1] * filter[zero][two]) )// bits of buffering = 16. 
  //  file prog.linked.opt.aa, line 243
  // (ifmaps2[0 ][col_to_be_replaced_1] * filter[zero][two])
  // ifmaps2[0 ][col_to_be_replaced_1]
  // col_to_be_replaced_1
  array_obj_ref_1028_index_1_resize <=> (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1028_index_resize_1/index_resize_req) (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1028_index_resize_1/index_resize_ack)
  array_obj_ref_1028_index_1_rename <=> (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1028_index_scale_1/scale_rename_req) (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1028_index_scale_1/scale_rename_ack)
  array_obj_ref_1028_index_offset <=> (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1028_final_index_sum_regn_Sample/req assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1028_final_index_sum_regn_Update/req) (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1028_final_index_sum_regn_Sample/ack assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1028_final_index_sum_regn_Update/ack)
  array_obj_ref_1028_root_address_inst <=> (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1028_base_plus_offset/sum_rename_req) (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1028_base_plus_offset/sum_rename_ack)
  array_obj_ref_1028_addr_0 <=> (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1028_word_addrgen/root_register_req) (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1028_word_addrgen/root_register_ack)
  array_obj_ref_1028_gather_scatter <=> (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1028_Update/array_obj_ref_1028_Merge/merge_req) (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1028_Update/array_obj_ref_1028_Merge/merge_ack)
  array_obj_ref_1028_load_0 <=> (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1028_Sample/word_access_start/word_0/rr assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1028_Update/word_access_complete/word_0/cr) (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1028_Sample/word_access_start/word_0/ra assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1028_Update/word_access_complete/word_0/ca)
  // filter[zero][two]
  array_obj_ref_1031_gather_scatter <=> (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1031_Update/array_obj_ref_1031_Merge/merge_req) (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1031_Update/array_obj_ref_1031_Merge/merge_ack)
  array_obj_ref_1031_load_0 <=> (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1031_Sample/word_access_start/word_0/rr assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1031_Update/word_access_complete/word_0/cr) (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1031_Sample/word_access_start/word_0/ra assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1031_Update/word_access_complete/word_0/ca)
  // ($bitcast ($uint<16>) (ifmaps2[0 ][col_to_be_replaced_1] * filter[zero][two]) )
  type_cast_1033_inst <=> (assign_stmt_934_to_assign_stmt_1234/type_cast_1033_Sample/rr assign_stmt_934_to_assign_stmt_1234/type_cast_1033_Update/cr) (assign_stmt_934_to_assign_stmt_1234/type_cast_1033_Sample/ra assign_stmt_934_to_assign_stmt_1234/type_cast_1033_Update/ca)
  // 	pp12 := ($bitcast ($uint<16>) (ifmaps2[1 ][col_to_be_replaced_1] * filter[one][two]) )// bits of buffering = 16. 
  //  file prog.linked.opt.aa, line 244
  // (ifmaps2[1 ][col_to_be_replaced_1] * filter[one][two])
  // ifmaps2[1 ][col_to_be_replaced_1]
  // col_to_be_replaced_1
  array_obj_ref_1038_index_1_resize <=> (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1038_index_resize_1/index_resize_req) (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1038_index_resize_1/index_resize_ack)
  array_obj_ref_1038_index_1_rename <=> (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1038_index_scale_1/scale_rename_req) (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1038_index_scale_1/scale_rename_ack)
  array_obj_ref_1038_index_offset <=> (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1038_final_index_sum_regn_Sample/req assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1038_final_index_sum_regn_Update/req) (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1038_final_index_sum_regn_Sample/ack assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1038_final_index_sum_regn_Update/ack)
  array_obj_ref_1038_root_address_inst <=> (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1038_base_plus_offset/sum_rename_req) (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1038_base_plus_offset/sum_rename_ack)
  array_obj_ref_1038_addr_0 <=> (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1038_word_addrgen/root_register_req) (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1038_word_addrgen/root_register_ack)
  array_obj_ref_1038_gather_scatter <=> (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1038_Update/array_obj_ref_1038_Merge/merge_req) (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1038_Update/array_obj_ref_1038_Merge/merge_ack)
  array_obj_ref_1038_load_0 <=> (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1038_Sample/word_access_start/word_0/rr assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1038_Update/word_access_complete/word_0/cr) (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1038_Sample/word_access_start/word_0/ra assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1038_Update/word_access_complete/word_0/ca)
  // filter[one][two]
  array_obj_ref_1041_gather_scatter <=> (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1041_Update/array_obj_ref_1041_Merge/merge_req) (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1041_Update/array_obj_ref_1041_Merge/merge_ack)
  array_obj_ref_1041_load_0 <=> (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1041_Sample/word_access_start/word_0/rr assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1041_Update/word_access_complete/word_0/cr) (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1041_Sample/word_access_start/word_0/ra assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1041_Update/word_access_complete/word_0/ca)
  // ($bitcast ($uint<16>) (ifmaps2[1 ][col_to_be_replaced_1] * filter[one][two]) )
  type_cast_1043_inst <=> (assign_stmt_934_to_assign_stmt_1234/type_cast_1043_Sample/rr assign_stmt_934_to_assign_stmt_1234/type_cast_1043_Update/cr) (assign_stmt_934_to_assign_stmt_1234/type_cast_1043_Sample/ra assign_stmt_934_to_assign_stmt_1234/type_cast_1043_Update/ca)
  // 	pp22 := ($bitcast ($uint<16>) (ifmaps2[2 ][col_to_be_replaced_1] * filter[two][two]) )// bits of buffering = 16. 
  //  file prog.linked.opt.aa, line 245
  // (ifmaps2[2 ][col_to_be_replaced_1] * filter[two][two])
  // ifmaps2[2 ][col_to_be_replaced_1]
  // col_to_be_replaced_1
  array_obj_ref_1048_index_1_resize <=> (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1048_index_resize_1/index_resize_req) (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1048_index_resize_1/index_resize_ack)
  array_obj_ref_1048_index_1_rename <=> (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1048_index_scale_1/scale_rename_req) (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1048_index_scale_1/scale_rename_ack)
  array_obj_ref_1048_index_offset <=> (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1048_final_index_sum_regn_Sample/req assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1048_final_index_sum_regn_Update/req) (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1048_final_index_sum_regn_Sample/ack assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1048_final_index_sum_regn_Update/ack)
  array_obj_ref_1048_root_address_inst <=> (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1048_base_plus_offset/sum_rename_req) (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1048_base_plus_offset/sum_rename_ack)
  array_obj_ref_1048_addr_0 <=> (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1048_word_addrgen/root_register_req) (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1048_word_addrgen/root_register_ack)
  array_obj_ref_1048_gather_scatter <=> (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1048_Update/array_obj_ref_1048_Merge/merge_req) (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1048_Update/array_obj_ref_1048_Merge/merge_ack)
  array_obj_ref_1048_load_0 <=> (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1048_Sample/word_access_start/word_0/rr assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1048_Update/word_access_complete/word_0/cr) (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1048_Sample/word_access_start/word_0/ra assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1048_Update/word_access_complete/word_0/ca)
  // filter[two][two]
  array_obj_ref_1051_gather_scatter <=> (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1051_Update/array_obj_ref_1051_Merge/merge_req) (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1051_Update/array_obj_ref_1051_Merge/merge_ack)
  array_obj_ref_1051_load_0 <=> (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1051_Sample/word_access_start/word_0/rr assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1051_Update/word_access_complete/word_0/cr) (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1051_Sample/word_access_start/word_0/ra assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1051_Update/word_access_complete/word_0/ca)
  // ($bitcast ($uint<16>) (ifmaps2[2 ][col_to_be_replaced_1] * filter[two][two]) )
  type_cast_1053_inst <=> (assign_stmt_934_to_assign_stmt_1234/type_cast_1053_Sample/rr assign_stmt_934_to_assign_stmt_1234/type_cast_1053_Update/cr) (assign_stmt_934_to_assign_stmt_1234/type_cast_1053_Sample/ra assign_stmt_934_to_assign_stmt_1234/type_cast_1053_Update/ca)
  // 	pp32 := ($bitcast ($uint<16>) (ifmaps2[3 ][col_to_be_replaced_1] * filter[three][two]) )// bits of buffering = 16. 
  //  file prog.linked.opt.aa, line 246
  // (ifmaps2[3 ][col_to_be_replaced_1] * filter[three][two])
  // ifmaps2[3 ][col_to_be_replaced_1]
  // col_to_be_replaced_1
  array_obj_ref_1058_index_1_resize <=> (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1058_index_resize_1/index_resize_req) (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1058_index_resize_1/index_resize_ack)
  array_obj_ref_1058_index_1_rename <=> (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1058_index_scale_1/scale_rename_req) (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1058_index_scale_1/scale_rename_ack)
  array_obj_ref_1058_index_offset <=> (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1058_final_index_sum_regn_Sample/req assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1058_final_index_sum_regn_Update/req) (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1058_final_index_sum_regn_Sample/ack assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1058_final_index_sum_regn_Update/ack)
  array_obj_ref_1058_root_address_inst <=> (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1058_base_plus_offset/sum_rename_req) (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1058_base_plus_offset/sum_rename_ack)
  array_obj_ref_1058_addr_0 <=> (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1058_word_addrgen/root_register_req) (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1058_word_addrgen/root_register_ack)
  array_obj_ref_1058_gather_scatter <=> (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1058_Update/array_obj_ref_1058_Merge/merge_req) (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1058_Update/array_obj_ref_1058_Merge/merge_ack)
  array_obj_ref_1058_load_0 <=> (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1058_Sample/word_access_start/word_0/rr assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1058_Update/word_access_complete/word_0/cr) (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1058_Sample/word_access_start/word_0/ra assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1058_Update/word_access_complete/word_0/ca)
  // filter[three][two]
  array_obj_ref_1061_gather_scatter <=> (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1061_Update/array_obj_ref_1061_Merge/merge_req) (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1061_Update/array_obj_ref_1061_Merge/merge_ack)
  array_obj_ref_1061_load_0 <=> (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1061_Sample/word_access_start/word_0/rr assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1061_Update/word_access_complete/word_0/cr) (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1061_Sample/word_access_start/word_0/ra assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1061_Update/word_access_complete/word_0/ca)
  // ($bitcast ($uint<16>) (ifmaps2[3 ][col_to_be_replaced_1] * filter[three][two]) )
  type_cast_1063_inst <=> (assign_stmt_934_to_assign_stmt_1234/type_cast_1063_Sample/rr assign_stmt_934_to_assign_stmt_1234/type_cast_1063_Update/cr) (assign_stmt_934_to_assign_stmt_1234/type_cast_1063_Sample/ra assign_stmt_934_to_assign_stmt_1234/type_cast_1063_Update/ca)
  // 	pp01 := ($bitcast ($uint<16>) (ifmaps2[0 ][col_to_be_replaced_2] * filter[zero][one]) )// bits of buffering = 16. 
  //  file prog.linked.opt.aa, line 247
  // (ifmaps2[0 ][col_to_be_replaced_2] * filter[zero][one])
  // ifmaps2[0 ][col_to_be_replaced_2]
  // col_to_be_replaced_2
  array_obj_ref_1068_index_1_resize <=> (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1068_index_resize_1/index_resize_req) (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1068_index_resize_1/index_resize_ack)
  array_obj_ref_1068_index_1_rename <=> (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1068_index_scale_1/scale_rename_req) (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1068_index_scale_1/scale_rename_ack)
  array_obj_ref_1068_index_offset <=> (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1068_final_index_sum_regn_Sample/req assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1068_final_index_sum_regn_Update/req) (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1068_final_index_sum_regn_Sample/ack assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1068_final_index_sum_regn_Update/ack)
  array_obj_ref_1068_root_address_inst <=> (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1068_base_plus_offset/sum_rename_req) (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1068_base_plus_offset/sum_rename_ack)
  array_obj_ref_1068_addr_0 <=> (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1068_word_addrgen/root_register_req) (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1068_word_addrgen/root_register_ack)
  array_obj_ref_1068_gather_scatter <=> (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1068_Update/array_obj_ref_1068_Merge/merge_req) (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1068_Update/array_obj_ref_1068_Merge/merge_ack)
  array_obj_ref_1068_load_0 <=> (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1068_Sample/word_access_start/word_0/rr assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1068_Update/word_access_complete/word_0/cr) (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1068_Sample/word_access_start/word_0/ra assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1068_Update/word_access_complete/word_0/ca)
  // filter[zero][one]
  array_obj_ref_1071_gather_scatter <=> (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1071_Update/array_obj_ref_1071_Merge/merge_req) (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1071_Update/array_obj_ref_1071_Merge/merge_ack)
  array_obj_ref_1071_load_0 <=> (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1071_Sample/word_access_start/word_0/rr assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1071_Update/word_access_complete/word_0/cr) (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1071_Sample/word_access_start/word_0/ra assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1071_Update/word_access_complete/word_0/ca)
  // ($bitcast ($uint<16>) (ifmaps2[0 ][col_to_be_replaced_2] * filter[zero][one]) )
  type_cast_1073_inst <=> (assign_stmt_934_to_assign_stmt_1234/type_cast_1073_Sample/rr assign_stmt_934_to_assign_stmt_1234/type_cast_1073_Update/cr) (assign_stmt_934_to_assign_stmt_1234/type_cast_1073_Sample/ra assign_stmt_934_to_assign_stmt_1234/type_cast_1073_Update/ca)
  // 	pp11 := ($bitcast ($uint<16>) (ifmaps2[1 ][col_to_be_replaced_2] * filter[one][one]) )// bits of buffering = 16. 
  //  file prog.linked.opt.aa, line 248
  // (ifmaps2[1 ][col_to_be_replaced_2] * filter[one][one])
  // ifmaps2[1 ][col_to_be_replaced_2]
  // col_to_be_replaced_2
  array_obj_ref_1078_index_1_resize <=> (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1078_index_resize_1/index_resize_req) (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1078_index_resize_1/index_resize_ack)
  array_obj_ref_1078_index_1_rename <=> (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1078_index_scale_1/scale_rename_req) (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1078_index_scale_1/scale_rename_ack)
  array_obj_ref_1078_index_offset <=> (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1078_final_index_sum_regn_Sample/req assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1078_final_index_sum_regn_Update/req) (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1078_final_index_sum_regn_Sample/ack assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1078_final_index_sum_regn_Update/ack)
  array_obj_ref_1078_root_address_inst <=> (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1078_base_plus_offset/sum_rename_req) (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1078_base_plus_offset/sum_rename_ack)
  array_obj_ref_1078_addr_0 <=> (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1078_word_addrgen/root_register_req) (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1078_word_addrgen/root_register_ack)
  array_obj_ref_1078_gather_scatter <=> (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1078_Update/array_obj_ref_1078_Merge/merge_req) (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1078_Update/array_obj_ref_1078_Merge/merge_ack)
  array_obj_ref_1078_load_0 <=> (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1078_Sample/word_access_start/word_0/rr assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1078_Update/word_access_complete/word_0/cr) (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1078_Sample/word_access_start/word_0/ra assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1078_Update/word_access_complete/word_0/ca)
  // filter[one][one]
  array_obj_ref_1081_gather_scatter <=> (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1081_Update/array_obj_ref_1081_Merge/merge_req) (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1081_Update/array_obj_ref_1081_Merge/merge_ack)
  array_obj_ref_1081_load_0 <=> (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1081_Sample/word_access_start/word_0/rr assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1081_Update/word_access_complete/word_0/cr) (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1081_Sample/word_access_start/word_0/ra assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1081_Update/word_access_complete/word_0/ca)
  // ($bitcast ($uint<16>) (ifmaps2[1 ][col_to_be_replaced_2] * filter[one][one]) )
  type_cast_1083_inst <=> (assign_stmt_934_to_assign_stmt_1234/type_cast_1083_Sample/rr assign_stmt_934_to_assign_stmt_1234/type_cast_1083_Update/cr) (assign_stmt_934_to_assign_stmt_1234/type_cast_1083_Sample/ra assign_stmt_934_to_assign_stmt_1234/type_cast_1083_Update/ca)
  // 	pp21 := ($bitcast ($uint<16>) (ifmaps2[2 ][col_to_be_replaced_2] * filter[two][one]) )// bits of buffering = 16. 
  //  file prog.linked.opt.aa, line 249
  // (ifmaps2[2 ][col_to_be_replaced_2] * filter[two][one])
  // ifmaps2[2 ][col_to_be_replaced_2]
  // col_to_be_replaced_2
  array_obj_ref_1088_index_1_resize <=> (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1088_index_resize_1/index_resize_req) (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1088_index_resize_1/index_resize_ack)
  array_obj_ref_1088_index_1_rename <=> (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1088_index_scale_1/scale_rename_req) (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1088_index_scale_1/scale_rename_ack)
  array_obj_ref_1088_index_offset <=> (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1088_final_index_sum_regn_Sample/req assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1088_final_index_sum_regn_Update/req) (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1088_final_index_sum_regn_Sample/ack assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1088_final_index_sum_regn_Update/ack)
  array_obj_ref_1088_root_address_inst <=> (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1088_base_plus_offset/sum_rename_req) (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1088_base_plus_offset/sum_rename_ack)
  array_obj_ref_1088_addr_0 <=> (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1088_word_addrgen/root_register_req) (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1088_word_addrgen/root_register_ack)
  array_obj_ref_1088_gather_scatter <=> (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1088_Update/array_obj_ref_1088_Merge/merge_req) (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1088_Update/array_obj_ref_1088_Merge/merge_ack)
  array_obj_ref_1088_load_0 <=> (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1088_Sample/word_access_start/word_0/rr assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1088_Update/word_access_complete/word_0/cr) (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1088_Sample/word_access_start/word_0/ra assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1088_Update/word_access_complete/word_0/ca)
  // filter[two][one]
  array_obj_ref_1091_gather_scatter <=> (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1091_Update/array_obj_ref_1091_Merge/merge_req) (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1091_Update/array_obj_ref_1091_Merge/merge_ack)
  array_obj_ref_1091_load_0 <=> (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1091_Sample/word_access_start/word_0/rr assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1091_Update/word_access_complete/word_0/cr) (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1091_Sample/word_access_start/word_0/ra assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1091_Update/word_access_complete/word_0/ca)
  // ($bitcast ($uint<16>) (ifmaps2[2 ][col_to_be_replaced_2] * filter[two][one]) )
  type_cast_1093_inst <=> (assign_stmt_934_to_assign_stmt_1234/type_cast_1093_Sample/rr assign_stmt_934_to_assign_stmt_1234/type_cast_1093_Update/cr) (assign_stmt_934_to_assign_stmt_1234/type_cast_1093_Sample/ra assign_stmt_934_to_assign_stmt_1234/type_cast_1093_Update/ca)
  // 	pp31 := ($bitcast ($uint<16>) (ifmaps2[3 ][col_to_be_replaced_2] * filter[three][one]) )// bits of buffering = 16. 
  //  file prog.linked.opt.aa, line 250
  // (ifmaps2[3 ][col_to_be_replaced_2] * filter[three][one])
  // ifmaps2[3 ][col_to_be_replaced_2]
  // col_to_be_replaced_2
  array_obj_ref_1098_index_1_resize <=> (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1098_index_resize_1/index_resize_req) (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1098_index_resize_1/index_resize_ack)
  array_obj_ref_1098_index_1_rename <=> (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1098_index_scale_1/scale_rename_req) (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1098_index_scale_1/scale_rename_ack)
  array_obj_ref_1098_index_offset <=> (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1098_final_index_sum_regn_Sample/req assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1098_final_index_sum_regn_Update/req) (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1098_final_index_sum_regn_Sample/ack assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1098_final_index_sum_regn_Update/ack)
  array_obj_ref_1098_root_address_inst <=> (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1098_base_plus_offset/sum_rename_req) (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1098_base_plus_offset/sum_rename_ack)
  array_obj_ref_1098_addr_0 <=> (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1098_word_addrgen/root_register_req) (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1098_word_addrgen/root_register_ack)
  array_obj_ref_1098_gather_scatter <=> (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1098_Update/array_obj_ref_1098_Merge/merge_req) (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1098_Update/array_obj_ref_1098_Merge/merge_ack)
  array_obj_ref_1098_load_0 <=> (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1098_Sample/word_access_start/word_0/rr assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1098_Update/word_access_complete/word_0/cr) (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1098_Sample/word_access_start/word_0/ra assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1098_Update/word_access_complete/word_0/ca)
  // filter[three][one]
  array_obj_ref_1101_gather_scatter <=> (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1101_Update/array_obj_ref_1101_Merge/merge_req) (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1101_Update/array_obj_ref_1101_Merge/merge_ack)
  array_obj_ref_1101_load_0 <=> (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1101_Sample/word_access_start/word_0/rr assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1101_Update/word_access_complete/word_0/cr) (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1101_Sample/word_access_start/word_0/ra assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1101_Update/word_access_complete/word_0/ca)
  // ($bitcast ($uint<16>) (ifmaps2[3 ][col_to_be_replaced_2] * filter[three][one]) )
  type_cast_1103_inst <=> (assign_stmt_934_to_assign_stmt_1234/type_cast_1103_Sample/rr assign_stmt_934_to_assign_stmt_1234/type_cast_1103_Update/cr) (assign_stmt_934_to_assign_stmt_1234/type_cast_1103_Sample/ra assign_stmt_934_to_assign_stmt_1234/type_cast_1103_Update/ca)
  // 	pp00 := ($bitcast ($uint<16>) (ifmaps2[0 ][col_to_be_replaced_3] * filter[zero][zero]) )// bits of buffering = 16. 
  //  file prog.linked.opt.aa, line 251
  // (ifmaps2[0 ][col_to_be_replaced_3] * filter[zero][zero])
  // ifmaps2[0 ][col_to_be_replaced_3]
  // col_to_be_replaced_3
  array_obj_ref_1108_index_1_resize <=> (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1108_index_resize_1/index_resize_req) (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1108_index_resize_1/index_resize_ack)
  array_obj_ref_1108_index_1_rename <=> (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1108_index_scale_1/scale_rename_req) (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1108_index_scale_1/scale_rename_ack)
  array_obj_ref_1108_index_offset <=> (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1108_final_index_sum_regn_Sample/req assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1108_final_index_sum_regn_Update/req) (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1108_final_index_sum_regn_Sample/ack assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1108_final_index_sum_regn_Update/ack)
  array_obj_ref_1108_root_address_inst <=> (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1108_base_plus_offset/sum_rename_req) (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1108_base_plus_offset/sum_rename_ack)
  array_obj_ref_1108_addr_0 <=> (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1108_word_addrgen/root_register_req) (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1108_word_addrgen/root_register_ack)
  array_obj_ref_1108_gather_scatter <=> (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1108_Update/array_obj_ref_1108_Merge/merge_req) (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1108_Update/array_obj_ref_1108_Merge/merge_ack)
  array_obj_ref_1108_load_0 <=> (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1108_Sample/word_access_start/word_0/rr assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1108_Update/word_access_complete/word_0/cr) (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1108_Sample/word_access_start/word_0/ra assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1108_Update/word_access_complete/word_0/ca)
  // filter[zero][zero]
  array_obj_ref_1111_gather_scatter <=> (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1111_Update/array_obj_ref_1111_Merge/merge_req) (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1111_Update/array_obj_ref_1111_Merge/merge_ack)
  array_obj_ref_1111_load_0 <=> (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1111_Sample/word_access_start/word_0/rr assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1111_Update/word_access_complete/word_0/cr) (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1111_Sample/word_access_start/word_0/ra assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1111_Update/word_access_complete/word_0/ca)
  // ($bitcast ($uint<16>) (ifmaps2[0 ][col_to_be_replaced_3] * filter[zero][zero]) )
  type_cast_1113_inst <=> (assign_stmt_934_to_assign_stmt_1234/type_cast_1113_Sample/rr assign_stmt_934_to_assign_stmt_1234/type_cast_1113_Update/cr) (assign_stmt_934_to_assign_stmt_1234/type_cast_1113_Sample/ra assign_stmt_934_to_assign_stmt_1234/type_cast_1113_Update/ca)
  // 	pp10 := ($bitcast ($uint<16>) (ifmaps2[1 ][col_to_be_replaced_3] * filter[one][zero]) )// bits of buffering = 16. 
  //  file prog.linked.opt.aa, line 252
  // (ifmaps2[1 ][col_to_be_replaced_3] * filter[one][zero])
  // ifmaps2[1 ][col_to_be_replaced_3]
  // col_to_be_replaced_3
  array_obj_ref_1118_index_1_resize <=> (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1118_index_resize_1/index_resize_req) (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1118_index_resize_1/index_resize_ack)
  array_obj_ref_1118_index_1_rename <=> (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1118_index_scale_1/scale_rename_req) (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1118_index_scale_1/scale_rename_ack)
  array_obj_ref_1118_index_offset <=> (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1118_final_index_sum_regn_Sample/req assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1118_final_index_sum_regn_Update/req) (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1118_final_index_sum_regn_Sample/ack assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1118_final_index_sum_regn_Update/ack)
  array_obj_ref_1118_root_address_inst <=> (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1118_base_plus_offset/sum_rename_req) (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1118_base_plus_offset/sum_rename_ack)
  array_obj_ref_1118_addr_0 <=> (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1118_word_addrgen/root_register_req) (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1118_word_addrgen/root_register_ack)
  array_obj_ref_1118_gather_scatter <=> (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1118_Update/array_obj_ref_1118_Merge/merge_req) (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1118_Update/array_obj_ref_1118_Merge/merge_ack)
  array_obj_ref_1118_load_0 <=> (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1118_Sample/word_access_start/word_0/rr assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1118_Update/word_access_complete/word_0/cr) (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1118_Sample/word_access_start/word_0/ra assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1118_Update/word_access_complete/word_0/ca)
  // filter[one][zero]
  array_obj_ref_1121_gather_scatter <=> (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1121_Update/array_obj_ref_1121_Merge/merge_req) (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1121_Update/array_obj_ref_1121_Merge/merge_ack)
  array_obj_ref_1121_load_0 <=> (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1121_Sample/word_access_start/word_0/rr assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1121_Update/word_access_complete/word_0/cr) (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1121_Sample/word_access_start/word_0/ra assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1121_Update/word_access_complete/word_0/ca)
  // ($bitcast ($uint<16>) (ifmaps2[1 ][col_to_be_replaced_3] * filter[one][zero]) )
  type_cast_1123_inst <=> (assign_stmt_934_to_assign_stmt_1234/type_cast_1123_Sample/rr assign_stmt_934_to_assign_stmt_1234/type_cast_1123_Update/cr) (assign_stmt_934_to_assign_stmt_1234/type_cast_1123_Sample/ra assign_stmt_934_to_assign_stmt_1234/type_cast_1123_Update/ca)
  // 	pp20 := ($bitcast ($uint<16>) (ifmaps2[2 ][col_to_be_replaced_3] * filter[two][zero]) )// bits of buffering = 16. 
  //  file prog.linked.opt.aa, line 253
  // (ifmaps2[2 ][col_to_be_replaced_3] * filter[two][zero])
  // ifmaps2[2 ][col_to_be_replaced_3]
  // col_to_be_replaced_3
  array_obj_ref_1128_index_1_resize <=> (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1128_index_resize_1/index_resize_req) (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1128_index_resize_1/index_resize_ack)
  array_obj_ref_1128_index_1_rename <=> (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1128_index_scale_1/scale_rename_req) (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1128_index_scale_1/scale_rename_ack)
  array_obj_ref_1128_index_offset <=> (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1128_final_index_sum_regn_Sample/req assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1128_final_index_sum_regn_Update/req) (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1128_final_index_sum_regn_Sample/ack assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1128_final_index_sum_regn_Update/ack)
  array_obj_ref_1128_root_address_inst <=> (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1128_base_plus_offset/sum_rename_req) (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1128_base_plus_offset/sum_rename_ack)
  array_obj_ref_1128_addr_0 <=> (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1128_word_addrgen/root_register_req) (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1128_word_addrgen/root_register_ack)
  array_obj_ref_1128_gather_scatter <=> (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1128_Update/array_obj_ref_1128_Merge/merge_req) (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1128_Update/array_obj_ref_1128_Merge/merge_ack)
  array_obj_ref_1128_load_0 <=> (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1128_Sample/word_access_start/word_0/rr assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1128_Update/word_access_complete/word_0/cr) (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1128_Sample/word_access_start/word_0/ra assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1128_Update/word_access_complete/word_0/ca)
  // filter[two][zero]
  array_obj_ref_1131_gather_scatter <=> (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1131_Update/array_obj_ref_1131_Merge/merge_req) (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1131_Update/array_obj_ref_1131_Merge/merge_ack)
  array_obj_ref_1131_load_0 <=> (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1131_Sample/word_access_start/word_0/rr assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1131_Update/word_access_complete/word_0/cr) (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1131_Sample/word_access_start/word_0/ra assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1131_Update/word_access_complete/word_0/ca)
  // ($bitcast ($uint<16>) (ifmaps2[2 ][col_to_be_replaced_3] * filter[two][zero]) )
  type_cast_1133_inst <=> (assign_stmt_934_to_assign_stmt_1234/type_cast_1133_Sample/rr assign_stmt_934_to_assign_stmt_1234/type_cast_1133_Update/cr) (assign_stmt_934_to_assign_stmt_1234/type_cast_1133_Sample/ra assign_stmt_934_to_assign_stmt_1234/type_cast_1133_Update/ca)
  // 	pp30 := ($bitcast ($uint<16>) (ifmaps2[3 ][col_to_be_replaced_3] * filter[three][zero]) )// bits of buffering = 16. 
  //  file prog.linked.opt.aa, line 254
  // (ifmaps2[3 ][col_to_be_replaced_3] * filter[three][zero])
  // ifmaps2[3 ][col_to_be_replaced_3]
  // col_to_be_replaced_3
  array_obj_ref_1138_index_1_resize <=> (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1138_index_resize_1/index_resize_req) (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1138_index_resize_1/index_resize_ack)
  array_obj_ref_1138_index_1_rename <=> (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1138_index_scale_1/scale_rename_req) (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1138_index_scale_1/scale_rename_ack)
  array_obj_ref_1138_index_offset <=> (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1138_final_index_sum_regn_Sample/req assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1138_final_index_sum_regn_Update/req) (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1138_final_index_sum_regn_Sample/ack assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1138_final_index_sum_regn_Update/ack)
  array_obj_ref_1138_root_address_inst <=> (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1138_base_plus_offset/sum_rename_req) (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1138_base_plus_offset/sum_rename_ack)
  array_obj_ref_1138_addr_0 <=> (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1138_word_addrgen/root_register_req) (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1138_word_addrgen/root_register_ack)
  array_obj_ref_1138_gather_scatter <=> (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1138_Update/array_obj_ref_1138_Merge/merge_req) (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1138_Update/array_obj_ref_1138_Merge/merge_ack)
  array_obj_ref_1138_load_0 <=> (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1138_Sample/word_access_start/word_0/rr assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1138_Update/word_access_complete/word_0/cr) (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1138_Sample/word_access_start/word_0/ra assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1138_Update/word_access_complete/word_0/ca)
  // filter[three][zero]
  array_obj_ref_1141_gather_scatter <=> (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1141_Update/array_obj_ref_1141_Merge/merge_req) (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1141_Update/array_obj_ref_1141_Merge/merge_ack)
  array_obj_ref_1141_load_0 <=> (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1141_Sample/word_access_start/word_0/rr assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1141_Update/word_access_complete/word_0/cr) (assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1141_Sample/word_access_start/word_0/ra assign_stmt_934_to_assign_stmt_1234/array_obj_ref_1141_Update/word_access_complete/word_0/ca)
  // ($bitcast ($uint<16>) (ifmaps2[3 ][col_to_be_replaced_3] * filter[three][zero]) )
  type_cast_1143_inst <=> (assign_stmt_934_to_assign_stmt_1234/type_cast_1143_Sample/rr assign_stmt_934_to_assign_stmt_1234/type_cast_1143_Update/cr) (assign_stmt_934_to_assign_stmt_1234/type_cast_1143_Sample/ra assign_stmt_934_to_assign_stmt_1234/type_cast_1143_Update/ca)
  // 	sum0 := ($bitcast ($uint<16>) (pp00 + pp01) )// bits of buffering = 16. 
  //  file prog.linked.opt.aa, line 255
  // (pp00 + pp01)
  // pp00
  // pp01
  // ($bitcast ($uint<16>) (pp00 + pp01) )
  type_cast_1149_inst <=> (assign_stmt_934_to_assign_stmt_1234/type_cast_1149_Sample/rr assign_stmt_934_to_assign_stmt_1234/type_cast_1149_Update/cr) (assign_stmt_934_to_assign_stmt_1234/type_cast_1149_Sample/ra assign_stmt_934_to_assign_stmt_1234/type_cast_1149_Update/ca)
  // 	sum1 := ($bitcast ($uint<16>) (pp02 + pp03) )// bits of buffering = 16. 
  //  file prog.linked.opt.aa, line 256
  // (pp02 + pp03)
  // pp02
  // pp03
  // ($bitcast ($uint<16>) (pp02 + pp03) )
  type_cast_1155_inst <=> (assign_stmt_934_to_assign_stmt_1234/type_cast_1155_Sample/rr assign_stmt_934_to_assign_stmt_1234/type_cast_1155_Update/cr) (assign_stmt_934_to_assign_stmt_1234/type_cast_1155_Sample/ra assign_stmt_934_to_assign_stmt_1234/type_cast_1155_Update/ca)
  // 	sum2 := ($bitcast ($uint<16>) (pp10 + pp11) )// bits of buffering = 16. 
  //  file prog.linked.opt.aa, line 257
  // (pp10 + pp11)
  // pp10
  // pp11
  // ($bitcast ($uint<16>) (pp10 + pp11) )
  type_cast_1161_inst <=> (assign_stmt_934_to_assign_stmt_1234/type_cast_1161_Sample/rr assign_stmt_934_to_assign_stmt_1234/type_cast_1161_Update/cr) (assign_stmt_934_to_assign_stmt_1234/type_cast_1161_Sample/ra assign_stmt_934_to_assign_stmt_1234/type_cast_1161_Update/ca)
  // 	sum3 := ($bitcast ($uint<16>) (pp12 + pp13) )// bits of buffering = 16. 
  //  file prog.linked.opt.aa, line 258
  // (pp12 + pp13)
  // pp12
  // pp13
  // ($bitcast ($uint<16>) (pp12 + pp13) )
  type_cast_1167_inst <=> (assign_stmt_934_to_assign_stmt_1234/type_cast_1167_Sample/rr assign_stmt_934_to_assign_stmt_1234/type_cast_1167_Update/cr) (assign_stmt_934_to_assign_stmt_1234/type_cast_1167_Sample/ra assign_stmt_934_to_assign_stmt_1234/type_cast_1167_Update/ca)
  // 	sum4 := ($bitcast ($uint<16>) (pp20 + pp21) )// bits of buffering = 16. 
  //  file prog.linked.opt.aa, line 259
  // (pp20 + pp21)
  // pp20
  // pp21
  // ($bitcast ($uint<16>) (pp20 + pp21) )
  type_cast_1173_inst <=> (assign_stmt_934_to_assign_stmt_1234/type_cast_1173_Sample/rr assign_stmt_934_to_assign_stmt_1234/type_cast_1173_Update/cr) (assign_stmt_934_to_assign_stmt_1234/type_cast_1173_Sample/ra assign_stmt_934_to_assign_stmt_1234/type_cast_1173_Update/ca)
  // 	sum5 := ($bitcast ($uint<16>) (pp22 + pp23) )// bits of buffering = 16. 
  //  file prog.linked.opt.aa, line 260
  // (pp22 + pp23)
  // pp22
  // pp23
  // ($bitcast ($uint<16>) (pp22 + pp23) )
  type_cast_1179_inst <=> (assign_stmt_934_to_assign_stmt_1234/type_cast_1179_Sample/rr assign_stmt_934_to_assign_stmt_1234/type_cast_1179_Update/cr) (assign_stmt_934_to_assign_stmt_1234/type_cast_1179_Sample/ra assign_stmt_934_to_assign_stmt_1234/type_cast_1179_Update/ca)
  // 	sum6 := ($bitcast ($uint<16>) (pp30 + pp31) )// bits of buffering = 16. 
  //  file prog.linked.opt.aa, line 261
  // (pp30 + pp31)
  // pp30
  // pp31
  // ($bitcast ($uint<16>) (pp30 + pp31) )
  type_cast_1185_inst <=> (assign_stmt_934_to_assign_stmt_1234/type_cast_1185_Sample/rr assign_stmt_934_to_assign_stmt_1234/type_cast_1185_Update/cr) (assign_stmt_934_to_assign_stmt_1234/type_cast_1185_Sample/ra assign_stmt_934_to_assign_stmt_1234/type_cast_1185_Update/ca)
  // 	sum7 := ($bitcast ($uint<16>) (pp32 + pp33) )// bits of buffering = 16. 
  //  file prog.linked.opt.aa, line 262
  // (pp32 + pp33)
  // pp32
  // pp33
  // ($bitcast ($uint<16>) (pp32 + pp33) )
  type_cast_1191_inst <=> (assign_stmt_934_to_assign_stmt_1234/type_cast_1191_Sample/rr assign_stmt_934_to_assign_stmt_1234/type_cast_1191_Update/cr) (assign_stmt_934_to_assign_stmt_1234/type_cast_1191_Sample/ra assign_stmt_934_to_assign_stmt_1234/type_cast_1191_Update/ca)
  // 	sum10 := ($bitcast ($uint<16>) (sum0 + sum1) )// bits of buffering = 16. 
  //  file prog.linked.opt.aa, line 263
  // (sum0 + sum1)
  // sum0
  // sum1
  // ($bitcast ($uint<16>) (sum0 + sum1) )
  type_cast_1197_inst <=> (assign_stmt_934_to_assign_stmt_1234/type_cast_1197_Sample/rr assign_stmt_934_to_assign_stmt_1234/type_cast_1197_Update/cr) (assign_stmt_934_to_assign_stmt_1234/type_cast_1197_Sample/ra assign_stmt_934_to_assign_stmt_1234/type_cast_1197_Update/ca)
  // 	sum11 := ($bitcast ($uint<16>) (sum2 + sum3) )// bits of buffering = 16. 
  //  file prog.linked.opt.aa, line 264
  // (sum2 + sum3)
  // sum2
  // sum3
  // ($bitcast ($uint<16>) (sum2 + sum3) )
  type_cast_1203_inst <=> (assign_stmt_934_to_assign_stmt_1234/type_cast_1203_Sample/rr assign_stmt_934_to_assign_stmt_1234/type_cast_1203_Update/cr) (assign_stmt_934_to_assign_stmt_1234/type_cast_1203_Sample/ra assign_stmt_934_to_assign_stmt_1234/type_cast_1203_Update/ca)
  // 	sum12 := ($bitcast ($uint<16>) (sum4 + sum5) )// bits of buffering = 16. 
  //  file prog.linked.opt.aa, line 265
  // (sum4 + sum5)
  // sum4
  // sum5
  // ($bitcast ($uint<16>) (sum4 + sum5) )
  type_cast_1209_inst <=> (assign_stmt_934_to_assign_stmt_1234/type_cast_1209_Sample/rr assign_stmt_934_to_assign_stmt_1234/type_cast_1209_Update/cr) (assign_stmt_934_to_assign_stmt_1234/type_cast_1209_Sample/ra assign_stmt_934_to_assign_stmt_1234/type_cast_1209_Update/ca)
  // 	sum13 := ($bitcast ($uint<16>) (sum6 + sum7) )// bits of buffering = 16. 
  //  file prog.linked.opt.aa, line 266
  // (sum6 + sum7)
  // sum6
  // sum7
  // ($bitcast ($uint<16>) (sum6 + sum7) )
  type_cast_1215_inst <=> (assign_stmt_934_to_assign_stmt_1234/type_cast_1215_Sample/rr assign_stmt_934_to_assign_stmt_1234/type_cast_1215_Update/cr) (assign_stmt_934_to_assign_stmt_1234/type_cast_1215_Sample/ra assign_stmt_934_to_assign_stmt_1234/type_cast_1215_Update/ca)
  // 	sum20 := ($bitcast ($uint<16>) (sum10 + sum11) )// bits of buffering = 16. 
  //  file prog.linked.opt.aa, line 267
  // (sum10 + sum11)
  // sum10
  // sum11
  // ($bitcast ($uint<16>) (sum10 + sum11) )
  type_cast_1221_inst <=> (assign_stmt_934_to_assign_stmt_1234/type_cast_1221_Sample/rr assign_stmt_934_to_assign_stmt_1234/type_cast_1221_Update/cr) (assign_stmt_934_to_assign_stmt_1234/type_cast_1221_Sample/ra assign_stmt_934_to_assign_stmt_1234/type_cast_1221_Update/ca)
  // 	sum21 := ($bitcast ($uint<16>) (sum12 + sum13) )// bits of buffering = 16. 
  //  file prog.linked.opt.aa, line 268
  // (sum12 + sum13)
  // sum12
  // sum13
  // ($bitcast ($uint<16>) (sum12 + sum13) )
  type_cast_1227_inst <=> (assign_stmt_934_to_assign_stmt_1234/type_cast_1227_Sample/rr assign_stmt_934_to_assign_stmt_1234/type_cast_1227_Update/cr) (assign_stmt_934_to_assign_stmt_1234/type_cast_1227_Sample/ra assign_stmt_934_to_assign_stmt_1234/type_cast_1227_Update/ca)
  // 	ofmap_pixel := ($bitcast ($uint<16>) (sum20 + sum21) )// bits of buffering = 16. 
  //  file prog.linked.opt.aa, line 269
  // (sum20 + sum21)
  // sum20
  // sum21
  // ($bitcast ($uint<16>) (sum20 + sum21) )
  type_cast_1233_inst <=> (assign_stmt_934_to_assign_stmt_1234/type_cast_1233_Sample/rr assign_stmt_934_to_assign_stmt_1234/type_cast_1233_Update/cr) (assign_stmt_934_to_assign_stmt_1234/type_cast_1233_Sample/ra assign_stmt_934_to_assign_stmt_1234/type_cast_1233_Update/ca)
}
$module [accelerator] 
{
  // pipe-declarations for block %accelerator
  //  file prog.linked.opt.aa, line 271
  // pipe-declarations for block %accelerator%check_start
  //  file prog.linked.opt.aa, line 276
  // pipe-declarations for block %accelerator%check_start%
  //  file prog.linked.opt.aa, line 278
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    <>[branch_block_stmt_1237] // Branch Block  file prog.linked.opt.aa, line 276
    {
      $P [branch_block_stmt_1237__entry__]
      branch_block_stmt_1237__entry__ <-| ($entry)
      $P [branch_block_stmt_1237__exit__]
      branch_block_stmt_1237__exit__ |-> ($exit)
      $P [merge_stmt_1238__entry__] 
      $P [merge_stmt_1238__exit__] 
      $P [assign_stmt_1247__entry__] 
      $P [assign_stmt_1247__exit__] 
      $P [if_stmt_1248__entry__] 
      $P [if_stmt_1248__exit__] 
      ::[assign_stmt_1247] 
      {
        // start: WAR dependencies for cmd
        // ignored out-of-scope w_root start_accelerator
        // done: WAR dependencies for cmd
        // start:  		$volatile cmd := start_accelerator
        //  file prog.linked.opt.aa, line 282
        // volatile! 
        // Source expression
        // start_accelerator
        $T[RPIPE_start_accelerator_1246_sample_start_] 
        $T[RPIPE_start_accelerator_1246_sample_completed_] 
        $T[RPIPE_start_accelerator_1246_update_start_] 
        $T[RPIPE_start_accelerator_1246_update_completed_] 
        ;;[RPIPE_start_accelerator_1246_Sample] 
        {
          // pipe read sample
          $T [rr] $T [ra] 
        }
        ;;[RPIPE_start_accelerator_1246_Update] 
        {
          // pipe read update
          $T [cr] $T [ca] 
        }
        RPIPE_start_accelerator_1246_sample_start_ &-> (RPIPE_start_accelerator_1246_Sample)
        RPIPE_start_accelerator_1246_sample_completed_ <-& (RPIPE_start_accelerator_1246_Sample)
        RPIPE_start_accelerator_1246_update_start_ <-& (RPIPE_start_accelerator_1246_sample_completed_)
        RPIPE_start_accelerator_1246_update_start_ &-> (RPIPE_start_accelerator_1246_Update)
        RPIPE_start_accelerator_1246_update_completed_ <-& (RPIPE_start_accelerator_1246_Update)
        // Target expression
        // (as target) cmd
        // start: WAR dependencies for cmd
        // done: WAR dependencies for cmd
        // end:  		$volatile cmd := start_accelerator
        // load-store dependencies..
        // pipe read/write dependencies for pipe start_accelerator
        // read-dependencies for pipe start_accelerator
        // write-dependencies for pipe start_accelerator
        // signal dependencies for start_accelerator
      }
      assign_stmt_1247__entry__ |-> (assign_stmt_1247)
      assign_stmt_1247__exit__ <-| (assign_stmt_1247)
      // if-statement  
      //  file prog.linked.opt.aa, line 0
      ;;[if_stmt_1248_dead_link] 
      {
        $T [dead_transition] $dead 
      }
      if_stmt_1248__entry__ |-> (if_stmt_1248_dead_link)
      if_stmt_1248__exit__ <-| (if_stmt_1248_dead_link)
      ;;[if_stmt_1248_eval_test] 
      {
        // test expression evaluate and trigger branch 
        // (cmd == iter)
        ;;[EQ_u16_u1_1251] 
        {
          // binary expression 
          ||[EQ_u16_u1_1251_inputs] 
          {
          }
          // flow-through
          ;;[SplitProtocol] 
          {
            ;;[Sample] 
            {
              $T [rr] $T [ra]
            }
            ;;[Update] 
            {
              $T [cr] $T [ca]
            }
          }
        }
        $T [branch_req] 
      }
      if_stmt_1248__entry__ |-> (if_stmt_1248_eval_test)
      $P [EQ_u16_u1_1251_place]
      EQ_u16_u1_1251_place <-| (if_stmt_1248_eval_test)
      ;;[if_stmt_1248_if_link] 
      {
        $T [if_choice_transition] 
      }
      ;;[if_stmt_1248_else_link] 
      {
        $T [else_choice_transition] 
      }
      EQ_u16_u1_1251_place |-> (if_stmt_1248_if_link if_stmt_1248_else_link)
      $P [assign_stmt_1256_to_assign_stmt_1263__entry__] 
      $P [assign_stmt_1256_to_assign_stmt_1263__exit__] 
      $P [branch_block_stmt_1264__entry__] 
      $P [branch_block_stmt_1264__exit__] 
      $P [check_for_start]
      ::[assign_stmt_1256_to_assign_stmt_1263] 
      {
        // start: WAR dependencies for n_iter
        // ignored out-of-scope w_root 			$phi iter := 			  ($bitcast ($uint<16>) 1  ) $on   $entry 			  n_iter $on   check_for_start 
        // type of target is $uint<16>
        // done: WAR dependencies for n_iter
        // start:  			$volatile n_iter := (iter + 1 )
        //  file prog.linked.opt.aa, line 284
        // volatile! 
        // Source expression
        // (iter + 1 )
        // iter
        // Target expression
        // (as target) n_iter
        // start: WAR dependencies for n_iter
        // ignored out-of-scope w_root 			$phi iter := 			  ($bitcast ($uint<16>) 1  ) $on   $entry 			  n_iter $on   check_for_start 
        // type of target is $uint<16>
        // done: WAR dependencies for n_iter
        // end:  			$volatile n_iter := (iter + 1 )
        // start: 			$call initFilter (filter_start_addr ) (initialized_filter ) 
        //  file prog.linked.opt.aa, line 285
        $T[call_stmt_1259_sample_start_] 
        $T[call_stmt_1259_sample_completed_] 
        $T[call_stmt_1259_update_start_] 
        $T[call_stmt_1259_update_completed_] 
        // Call input argument 0
        ;;[call_stmt_1259_Sample] 
        {
          $T [crr] $T [cra] 
        }
        ;;[call_stmt_1259_Update] 
        {
          $T [ccr] $T [cca] 
        }
        call_stmt_1259_sample_start_ &-> (call_stmt_1259_Sample)
        call_stmt_1259_sample_completed_ <-& (call_stmt_1259_Sample)
        call_stmt_1259_sample_completed_ &-> ($null)
        call_stmt_1259_update_start_ &-> (call_stmt_1259_Update)
        call_stmt_1259_update_completed_ <-& (call_stmt_1259_Update)
        // Call output argument 0
        // (as target) initialized_filter
        // start: WAR dependencies for initialized_filter
        // done: WAR dependencies for initialized_filter
        // end: 			$call initFilter (filter_start_addr ) (initialized_filter ) 
        // start: WAR dependencies for check_both
        // done: WAR dependencies for check_both
        // start:  			$volatile check_both := ($bitcast ($uint<2>) initialized_filter )
        //  file prog.linked.opt.aa, line 286
        // volatile! 
        // Source expression
        // ($bitcast ($uint<2>) initialized_filter )
        // initialized_filter
        // Target expression
        // (as target) check_both
        // start: WAR dependencies for check_both
        // done: WAR dependencies for check_both
        // end:  			$volatile check_both := ($bitcast ($uint<2>) initialized_filter )
        // load-store dependencies..
        // memory-space  memory_space_3
        //  call_stmt_1259 store
        // memory-space  memory_space_0
        //  call_stmt_1259 store
      }
      assign_stmt_1256_to_assign_stmt_1263__entry__ |-> (assign_stmt_1256_to_assign_stmt_1263)
      assign_stmt_1256_to_assign_stmt_1263__exit__ <-| (assign_stmt_1256_to_assign_stmt_1263)
      <>[branch_block_stmt_1264] // Branch Block  file prog.linked.opt.aa, line 287
      {
        $P [branch_block_stmt_1264__entry__]
        branch_block_stmt_1264__entry__ <-| ($entry)
        $P [branch_block_stmt_1264__exit__]
        branch_block_stmt_1264__exit__ |-> ($exit)
        $P [merge_stmt_1265__entry__] 
        $P [merge_stmt_1265__exit__] 
        $P [if_stmt_1266__entry__] 
        $P [if_stmt_1266__exit__] 
        // if-statement  
        //  file prog.linked.opt.aa, line 0
        ;;[if_stmt_1266_dead_link] 
        {
          $T [dead_transition] $dead 
        }
        if_stmt_1266__entry__ |-> (if_stmt_1266_dead_link)
        if_stmt_1266__exit__ <-| (if_stmt_1266_dead_link)
        ;;[if_stmt_1266_eval_test] 
        {
          // test expression evaluate and trigger branch 
          // (check_both == 1 )
          ;;[EQ_u2_u1_1269] 
          {
            // binary expression 
            ||[EQ_u2_u1_1269_inputs] 
            {
            }
            // flow-through
            ;;[SplitProtocol] 
            {
              ;;[Sample] 
              {
                $T [rr] $T [ra]
              }
              ;;[Update] 
              {
                $T [cr] $T [ca]
              }
            }
          }
          $T [branch_req] 
        }
        if_stmt_1266__entry__ |-> (if_stmt_1266_eval_test)
        $P [EQ_u2_u1_1269_place]
        EQ_u2_u1_1269_place <-| (if_stmt_1266_eval_test)
        ;;[if_stmt_1266_if_link] 
        {
          $T [if_choice_transition] 
        }
        ;;[if_stmt_1266_else_link] 
        {
          $T [else_choice_transition] 
        }
        EQ_u2_u1_1269_place |-> (if_stmt_1266_if_link if_stmt_1266_else_link)
        $P [branch_block_stmt_1270__entry__] 
        $P [branch_block_stmt_1270__exit__] 
        $P [assign_stmt_1404__entry__] 
        $P [assign_stmt_1404__exit__] 
        $P [check_for_filter]
        <>[branch_block_stmt_1270] // Branch Block  file prog.linked.opt.aa, line 292
        {
          $P [branch_block_stmt_1270__entry__]
          branch_block_stmt_1270__entry__ <-| ($entry)
          $P [branch_block_stmt_1270__exit__]
          branch_block_stmt_1270__exit__ |-> ($exit)
          $P [do_while_stmt_1271__entry__] 
          $P [do_while_stmt_1271__exit__] 
          // do-while-statement  
          //  file prog.linked.opt.aa, line 294
          <o> [do_while_stmt_1271]  $depth 20 $buffering 2 
          {
            $P[do_while_stmt_1271__entry__] 
            $P[do_while_stmt_1271__exit__] 
            $P[loop_back] 
            $P[condition_done] 
            $P[loop_body_done] 
            $pipeline [do_while_stmt_1271_loop_body] 
            {
              // Pipelined!
              $T[back_edge_to_loop_body] 
              $T[first_time_through_loop_body] 
              $T[loop_body_start] 
              $T[condition_evaluated] 
              $transitionmerge [entry_tmerge] (back_edge_to_loop_body first_time_through_loop_body) (loop_body_start)
              $entry <-& (loop_body_start)
              $T[aggregated_phi_sample_req] 
              $T[aggregated_phi_sample_ack] 
              $T[aggregated_phi_update_req] 
              $T[aggregated_phi_update_ack] 
              // do not loop-back unless all phi's have used up their triggering tokens.
              condition_evaluated <-& (aggregated_phi_update_ack)
              aggregated_phi_sample_req o<-& (aggregated_phi_update_ack 0)
              // start:  PHI statement phi_stmt_1273
              // 					$phi ele := 					  ($bitcast ($uint<7>) 0  ) $on   $entry 					  n_ele $on   $loopback 
              // type of target is $uint<7>
              $T[phi_stmt_1273_sample_start_] 
              $T[phi_stmt_1273_sample_completed_] 
              $T[phi_stmt_1273_update_start_] 
              $T[phi_stmt_1273_update_completed_] 
              $T[phi_stmt_1273_sample_start__ps] 
              phi_stmt_1273_sample_start__ps <-& (aggregated_phi_sample_req)
              $T[phi_stmt_1273_sample_completed__ps] 
              phi_stmt_1273_sample_completed__ps &-> (aggregated_phi_sample_ack)
              $T[phi_stmt_1273_update_start__ps] 
              phi_stmt_1273_update_start__ps <-& (aggregated_phi_update_req)
              $T[phi_stmt_1273_update_completed__ps] 
              phi_stmt_1273_update_completed_ <-& (phi_stmt_1273_update_completed__ps)
              aggregated_phi_sample_req <-& (phi_stmt_1273_sample_start_)
              aggregated_phi_sample_ack &-> (phi_stmt_1273_sample_completed_)
              aggregated_phi_update_req <-& (phi_stmt_1273_update_start_)
              $T[phi_stmt_1273_loopback_trigger] 
              phi_stmt_1273_loopback_trigger <-& (back_edge_to_loop_body)
              $T[phi_stmt_1273_loopback_sample_req] 
              $T[phi_stmt_1273_loopback_sample_req_ps] 
              phi_stmt_1273_loopback_sample_req <-& (phi_stmt_1273_loopback_sample_req_ps)
              phi_stmt_1273_loopback_sample_req &-> ($null)
              $T[phi_stmt_1273_entry_trigger] 
              phi_stmt_1273_entry_trigger <-& (first_time_through_loop_body)
              $T[phi_stmt_1273_entry_sample_req] 
              $T[phi_stmt_1273_entry_sample_req_ps] 
              phi_stmt_1273_entry_sample_req <-& (phi_stmt_1273_entry_sample_req_ps)
              phi_stmt_1273_entry_sample_req &-> ($null)
              phi_stmt_1273_update_start_ o<-& (phi_stmt_1273_update_completed_ 0)
              phi_stmt_1273_sample_start_ o<-& (phi_stmt_1273_sample_completed_ 1)
              $T[phi_stmt_1273_merged_reqs] 
              $T[phi_stmt_1273_phi_mux_ack] 
              $T[phi_stmt_1273_phi_mux_ack_ps] 
              phi_stmt_1273_phi_mux_ack_ps <-& (phi_stmt_1273_phi_mux_ack)
              aggregated_phi_update_ack <-& (phi_stmt_1273_update_completed_)
              $T[type_cast_1277_sample_start__ps] 
              $T[type_cast_1277_sample_completed__ps] 
              $T[type_cast_1277_update_start__ps] 
              $T[type_cast_1277_update_completed__ps] 
              // dummies for constant expression source for phi
              $T[type_cast_1277_sample_start_] 
              $T[type_cast_1277_sample_completed_] 
              type_cast_1277_sample_completed_ <-& (type_cast_1277_sample_start_)
              $T[type_cast_1277_update_start_] 
              $T [type_cast_1277_update_completed_] $delay 
              type_cast_1277_update_completed_ <-& (type_cast_1277_update_start_)
              // Phi start dependency for implicit/constant alternative.
              type_cast_1277_sample_start_ <-& (type_cast_1277_sample_start__ps)
              type_cast_1277_update_start_ <-& (type_cast_1277_update_start__ps)
              // Phi complete dependency.
              type_cast_1277_sample_completed__ps <-& (type_cast_1277_sample_completed_)
              type_cast_1277_update_completed__ps <-& (type_cast_1277_update_completed_)
              $T[R_n_ele_1278_sample_start__ps] 
              $T[R_n_ele_1278_sample_completed__ps] 
              $T[R_n_ele_1278_update_start__ps] 
              $T[R_n_ele_1278_update_completed__ps] 
              // interlock for implicit-variable-ref/signal-read in Phi alternative 1
              $T[R_n_ele_1278_sample_start_] 
              $T[R_n_ele_1278_sample_completed_] 
              $T[R_n_ele_1278_update_start_] 
              $T[R_n_ele_1278_update_completed_] 
              ;;[R_n_ele_1278_Sample] 
              {
                $T [req] $T [ack] // interlock-sample.
              }
              R_n_ele_1278_sample_start_ &-> (R_n_ele_1278_Sample)
              R_n_ele_1278_sample_completed_ <-& (R_n_ele_1278_Sample)
              ;;[R_n_ele_1278_Update] 
              {
                $T [req] $T [ack] // interlock-update.
              }
              R_n_ele_1278_update_start_ &-> (R_n_ele_1278_Update)
              R_n_ele_1278_update_completed_ <-& (R_n_ele_1278_Update)
              // RAW reenables for n_ele
              // Phi start dependency for implicit/constant alternative.
              R_n_ele_1278_sample_start_ <-& (R_n_ele_1278_sample_start__ps)
              R_n_ele_1278_update_start_ <-& (R_n_ele_1278_update_start__ps)
              // Phi complete dependency.
              R_n_ele_1278_sample_completed__ps <-& (R_n_ele_1278_sample_completed_)
              R_n_ele_1278_update_completed__ps <-& (R_n_ele_1278_update_completed_)
              $phisequencer [ phi_stmt_1273_phi_seq] : 
              phi_stmt_1273_entry_trigger type_cast_1277_sample_start__ps type_cast_1277_sample_completed__ps type_cast_1277_update_start__ps type_cast_1277_update_completed__ps phi_stmt_1273_loopback_trigger R_n_ele_1278_sample_start__ps R_n_ele_1278_sample_completed__ps R_n_ele_1278_update_start__ps R_n_ele_1278_update_completed__ps :
              phi_stmt_1273_sample_start__ps phi_stmt_1273_sample_completed__ps phi_stmt_1273_update_start__ps phi_stmt_1273_update_completed__ps :
              phi_stmt_1273_entry_sample_req_ps phi_stmt_1273_loopback_sample_req_ps : 
              phi_stmt_1273_phi_mux_ack_ps
              // done: PHI Statement phi_stmt_1273
              // start:  PHI statement phi_stmt_1279
              // 					$phi J := 					  ($bitcast ($uint<5>) 0  ) $on   $entry 					  n_J $on   $loopback 
              // type of target is $uint<5>
              $T[phi_stmt_1279_sample_start_] 
              $T[phi_stmt_1279_sample_completed_] 
              $T[phi_stmt_1279_update_start_] 
              $T[phi_stmt_1279_update_completed_] 
              $T[phi_stmt_1279_sample_start__ps] 
              phi_stmt_1279_sample_start__ps <-& (aggregated_phi_sample_req)
              $T[phi_stmt_1279_sample_completed__ps] 
              phi_stmt_1279_sample_completed__ps &-> (aggregated_phi_sample_ack)
              $T[phi_stmt_1279_update_start__ps] 
              phi_stmt_1279_update_start__ps <-& (aggregated_phi_update_req)
              $T[phi_stmt_1279_update_completed__ps] 
              phi_stmt_1279_update_completed_ <-& (phi_stmt_1279_update_completed__ps)
              aggregated_phi_sample_req <-& (phi_stmt_1279_sample_start_)
              aggregated_phi_sample_ack &-> (phi_stmt_1279_sample_completed_)
              aggregated_phi_update_req <-& (phi_stmt_1279_update_start_)
              $T[phi_stmt_1279_loopback_trigger] 
              phi_stmt_1279_loopback_trigger <-& (back_edge_to_loop_body)
              $T[phi_stmt_1279_loopback_sample_req] 
              $T[phi_stmt_1279_loopback_sample_req_ps] 
              phi_stmt_1279_loopback_sample_req <-& (phi_stmt_1279_loopback_sample_req_ps)
              phi_stmt_1279_loopback_sample_req &-> ($null)
              $T[phi_stmt_1279_entry_trigger] 
              phi_stmt_1279_entry_trigger <-& (first_time_through_loop_body)
              $T[phi_stmt_1279_entry_sample_req] 
              $T[phi_stmt_1279_entry_sample_req_ps] 
              phi_stmt_1279_entry_sample_req <-& (phi_stmt_1279_entry_sample_req_ps)
              phi_stmt_1279_entry_sample_req &-> ($null)
              phi_stmt_1279_update_start_ o<-& (phi_stmt_1279_update_completed_ 0)
              phi_stmt_1279_sample_start_ o<-& (phi_stmt_1279_sample_completed_ 1)
              $T[phi_stmt_1279_merged_reqs] 
              $T[phi_stmt_1279_phi_mux_ack] 
              $T[phi_stmt_1279_phi_mux_ack_ps] 
              phi_stmt_1279_phi_mux_ack_ps <-& (phi_stmt_1279_phi_mux_ack)
              aggregated_phi_update_ack <-& (phi_stmt_1279_update_completed_)
              $T[type_cast_1282_sample_start__ps] 
              $T[type_cast_1282_sample_completed__ps] 
              $T[type_cast_1282_update_start__ps] 
              $T[type_cast_1282_update_completed__ps] 
              // dummies for constant expression source for phi
              $T[type_cast_1282_sample_start_] 
              $T[type_cast_1282_sample_completed_] 
              type_cast_1282_sample_completed_ <-& (type_cast_1282_sample_start_)
              $T[type_cast_1282_update_start_] 
              $T [type_cast_1282_update_completed_] $delay 
              type_cast_1282_update_completed_ <-& (type_cast_1282_update_start_)
              // Phi start dependency for implicit/constant alternative.
              type_cast_1282_sample_start_ <-& (type_cast_1282_sample_start__ps)
              type_cast_1282_update_start_ <-& (type_cast_1282_update_start__ps)
              // Phi complete dependency.
              type_cast_1282_sample_completed__ps <-& (type_cast_1282_sample_completed_)
              type_cast_1282_update_completed__ps <-& (type_cast_1282_update_completed_)
              $T[R_n_J_1283_sample_start__ps] 
              $T[R_n_J_1283_sample_completed__ps] 
              $T[R_n_J_1283_update_start__ps] 
              $T[R_n_J_1283_update_completed__ps] 
              // interlock for implicit-variable-ref/signal-read in Phi alternative 1
              $T[R_n_J_1283_sample_start_] 
              $T[R_n_J_1283_sample_completed_] 
              $T[R_n_J_1283_update_start_] 
              $T[R_n_J_1283_update_completed_] 
              ;;[R_n_J_1283_Sample] 
              {
                $T [req] $T [ack] // interlock-sample.
              }
              R_n_J_1283_sample_start_ &-> (R_n_J_1283_Sample)
              R_n_J_1283_sample_completed_ <-& (R_n_J_1283_Sample)
              ;;[R_n_J_1283_Update] 
              {
                $T [req] $T [ack] // interlock-update.
              }
              R_n_J_1283_update_start_ &-> (R_n_J_1283_Update)
              R_n_J_1283_update_completed_ <-& (R_n_J_1283_Update)
              // RAW reenables for n_J
              // Phi start dependency for implicit/constant alternative.
              R_n_J_1283_sample_start_ <-& (R_n_J_1283_sample_start__ps)
              R_n_J_1283_update_start_ <-& (R_n_J_1283_update_start__ps)
              // Phi complete dependency.
              R_n_J_1283_sample_completed__ps <-& (R_n_J_1283_sample_completed_)
              R_n_J_1283_update_completed__ps <-& (R_n_J_1283_update_completed_)
              $phisequencer [ phi_stmt_1279_phi_seq] : 
              phi_stmt_1279_entry_trigger type_cast_1282_sample_start__ps type_cast_1282_sample_completed__ps type_cast_1282_update_start__ps type_cast_1282_update_completed__ps phi_stmt_1279_loopback_trigger R_n_J_1283_sample_start__ps R_n_J_1283_sample_completed__ps R_n_J_1283_update_start__ps R_n_J_1283_update_completed__ps :
              phi_stmt_1279_sample_start__ps phi_stmt_1279_sample_completed__ps phi_stmt_1279_update_start__ps phi_stmt_1279_update_completed__ps :
              phi_stmt_1279_entry_sample_req_ps phi_stmt_1279_loopback_sample_req_ps : 
              phi_stmt_1279_phi_mux_ack_ps
              // done: PHI Statement phi_stmt_1279
              // start:  PHI statement phi_stmt_1284
              // 					$phi I := 					  ($bitcast ($uint<6>) 0  ) $on   $entry 					  n_I $on   $loopback 
              // type of target is $uint<6>
              $T[phi_stmt_1284_sample_start_] 
              $T[phi_stmt_1284_sample_completed_] 
              $T[phi_stmt_1284_update_start_] 
              $T[phi_stmt_1284_update_completed_] 
              $T[phi_stmt_1284_sample_start__ps] 
              phi_stmt_1284_sample_start__ps <-& (aggregated_phi_sample_req)
              $T[phi_stmt_1284_sample_completed__ps] 
              phi_stmt_1284_sample_completed__ps &-> (aggregated_phi_sample_ack)
              $T[phi_stmt_1284_update_start__ps] 
              phi_stmt_1284_update_start__ps <-& (aggregated_phi_update_req)
              $T[phi_stmt_1284_update_completed__ps] 
              phi_stmt_1284_update_completed_ <-& (phi_stmt_1284_update_completed__ps)
              aggregated_phi_sample_req <-& (phi_stmt_1284_sample_start_)
              aggregated_phi_sample_ack &-> (phi_stmt_1284_sample_completed_)
              aggregated_phi_update_req <-& (phi_stmt_1284_update_start_)
              $T[phi_stmt_1284_loopback_trigger] 
              phi_stmt_1284_loopback_trigger <-& (back_edge_to_loop_body)
              $T[phi_stmt_1284_loopback_sample_req] 
              $T[phi_stmt_1284_loopback_sample_req_ps] 
              phi_stmt_1284_loopback_sample_req <-& (phi_stmt_1284_loopback_sample_req_ps)
              phi_stmt_1284_loopback_sample_req &-> ($null)
              $T[phi_stmt_1284_entry_trigger] 
              phi_stmt_1284_entry_trigger <-& (first_time_through_loop_body)
              $T[phi_stmt_1284_entry_sample_req] 
              $T[phi_stmt_1284_entry_sample_req_ps] 
              phi_stmt_1284_entry_sample_req <-& (phi_stmt_1284_entry_sample_req_ps)
              phi_stmt_1284_entry_sample_req &-> ($null)
              phi_stmt_1284_update_start_ o<-& (phi_stmt_1284_update_completed_ 0)
              phi_stmt_1284_sample_start_ o<-& (phi_stmt_1284_sample_completed_ 1)
              $T[phi_stmt_1284_merged_reqs] 
              $T[phi_stmt_1284_phi_mux_ack] 
              $T[phi_stmt_1284_phi_mux_ack_ps] 
              phi_stmt_1284_phi_mux_ack_ps <-& (phi_stmt_1284_phi_mux_ack)
              aggregated_phi_update_ack <-& (phi_stmt_1284_update_completed_)
              $T[type_cast_1287_sample_start__ps] 
              $T[type_cast_1287_sample_completed__ps] 
              $T[type_cast_1287_update_start__ps] 
              $T[type_cast_1287_update_completed__ps] 
              // dummies for constant expression source for phi
              $T[type_cast_1287_sample_start_] 
              $T[type_cast_1287_sample_completed_] 
              type_cast_1287_sample_completed_ <-& (type_cast_1287_sample_start_)
              $T[type_cast_1287_update_start_] 
              $T [type_cast_1287_update_completed_] $delay 
              type_cast_1287_update_completed_ <-& (type_cast_1287_update_start_)
              // Phi start dependency for implicit/constant alternative.
              type_cast_1287_sample_start_ <-& (type_cast_1287_sample_start__ps)
              type_cast_1287_update_start_ <-& (type_cast_1287_update_start__ps)
              // Phi complete dependency.
              type_cast_1287_sample_completed__ps <-& (type_cast_1287_sample_completed_)
              type_cast_1287_update_completed__ps <-& (type_cast_1287_update_completed_)
              $T[R_n_I_1288_sample_start__ps] 
              $T[R_n_I_1288_sample_completed__ps] 
              $T[R_n_I_1288_update_start__ps] 
              $T[R_n_I_1288_update_completed__ps] 
              // interlock for implicit-variable-ref/signal-read in Phi alternative 1
              $T[R_n_I_1288_sample_start_] 
              $T[R_n_I_1288_sample_completed_] 
              $T[R_n_I_1288_update_start_] 
              $T[R_n_I_1288_update_completed_] 
              ;;[R_n_I_1288_Sample] 
              {
                $T [req] $T [ack] // interlock-sample.
              }
              R_n_I_1288_sample_start_ &-> (R_n_I_1288_Sample)
              R_n_I_1288_sample_completed_ <-& (R_n_I_1288_Sample)
              ;;[R_n_I_1288_Update] 
              {
                $T [req] $T [ack] // interlock-update.
              }
              R_n_I_1288_update_start_ &-> (R_n_I_1288_Update)
              R_n_I_1288_update_completed_ <-& (R_n_I_1288_Update)
              // RAW reenables for n_I
              // producer  and  consumer are both determined by PHI statements.
              // Phi start dependency for implicit/constant alternative.
              R_n_I_1288_sample_start_ <-& (R_n_I_1288_sample_start__ps)
              R_n_I_1288_update_start_ <-& (R_n_I_1288_update_start__ps)
              // Phi complete dependency.
              R_n_I_1288_sample_completed__ps <-& (R_n_I_1288_sample_completed_)
              R_n_I_1288_update_completed__ps <-& (R_n_I_1288_update_completed_)
              $phisequencer [ phi_stmt_1284_phi_seq] : 
              phi_stmt_1284_entry_trigger type_cast_1287_sample_start__ps type_cast_1287_sample_completed__ps type_cast_1287_update_start__ps type_cast_1287_update_completed__ps phi_stmt_1284_loopback_trigger R_n_I_1288_sample_start__ps R_n_I_1288_sample_completed__ps R_n_I_1288_update_start__ps R_n_I_1288_update_completed__ps :
              phi_stmt_1284_sample_start__ps phi_stmt_1284_sample_completed__ps phi_stmt_1284_update_start__ps phi_stmt_1284_update_completed__ps :
              phi_stmt_1284_entry_sample_req_ps phi_stmt_1284_loopback_sample_req_ps : 
              phi_stmt_1284_phi_mux_ack_ps
              // done: PHI Statement phi_stmt_1284
              // start:  PHI statement phi_stmt_1289
              // 					$phi col_to_be_replaced := 					  ($bitcast ($uint<2>) 3  ) $on   $entry 					  n_col_to_be_replaced $on   $loopback 
              // type of target is $uint<2>
              $T[phi_stmt_1289_sample_start_] 
              $T[phi_stmt_1289_sample_completed_] 
              $T[phi_stmt_1289_update_start_] 
              $T[phi_stmt_1289_update_completed_] 
              $T[phi_stmt_1289_sample_start__ps] 
              phi_stmt_1289_sample_start__ps <-& (aggregated_phi_sample_req)
              $T[phi_stmt_1289_sample_completed__ps] 
              phi_stmt_1289_sample_completed__ps &-> (aggregated_phi_sample_ack)
              $T[phi_stmt_1289_update_start__ps] 
              phi_stmt_1289_update_start__ps <-& (aggregated_phi_update_req)
              $T[phi_stmt_1289_update_completed__ps] 
              phi_stmt_1289_update_completed_ <-& (phi_stmt_1289_update_completed__ps)
              aggregated_phi_sample_req <-& (phi_stmt_1289_sample_start_)
              aggregated_phi_sample_ack &-> (phi_stmt_1289_sample_completed_)
              aggregated_phi_update_req <-& (phi_stmt_1289_update_start_)
              $T[phi_stmt_1289_loopback_trigger] 
              phi_stmt_1289_loopback_trigger <-& (back_edge_to_loop_body)
              $T[phi_stmt_1289_loopback_sample_req] 
              $T[phi_stmt_1289_loopback_sample_req_ps] 
              phi_stmt_1289_loopback_sample_req <-& (phi_stmt_1289_loopback_sample_req_ps)
              phi_stmt_1289_loopback_sample_req &-> ($null)
              $T[phi_stmt_1289_entry_trigger] 
              phi_stmt_1289_entry_trigger <-& (first_time_through_loop_body)
              $T[phi_stmt_1289_entry_sample_req] 
              $T[phi_stmt_1289_entry_sample_req_ps] 
              phi_stmt_1289_entry_sample_req <-& (phi_stmt_1289_entry_sample_req_ps)
              phi_stmt_1289_entry_sample_req &-> ($null)
              phi_stmt_1289_update_start_ o<-& (phi_stmt_1289_update_completed_ 0)
              phi_stmt_1289_sample_start_ o<-& (phi_stmt_1289_sample_completed_ 1)
              $T[phi_stmt_1289_merged_reqs] 
              $T[phi_stmt_1289_phi_mux_ack] 
              $T[phi_stmt_1289_phi_mux_ack_ps] 
              phi_stmt_1289_phi_mux_ack_ps <-& (phi_stmt_1289_phi_mux_ack)
              aggregated_phi_update_ack <-& (phi_stmt_1289_update_completed_)
              $T[type_cast_1292_sample_start__ps] 
              $T[type_cast_1292_sample_completed__ps] 
              $T[type_cast_1292_update_start__ps] 
              $T[type_cast_1292_update_completed__ps] 
              // dummies for constant expression source for phi
              $T[type_cast_1292_sample_start_] 
              $T[type_cast_1292_sample_completed_] 
              type_cast_1292_sample_completed_ <-& (type_cast_1292_sample_start_)
              $T[type_cast_1292_update_start_] 
              $T [type_cast_1292_update_completed_] $delay 
              type_cast_1292_update_completed_ <-& (type_cast_1292_update_start_)
              // Phi start dependency for implicit/constant alternative.
              type_cast_1292_sample_start_ <-& (type_cast_1292_sample_start__ps)
              type_cast_1292_update_start_ <-& (type_cast_1292_update_start__ps)
              // Phi complete dependency.
              type_cast_1292_sample_completed__ps <-& (type_cast_1292_sample_completed_)
              type_cast_1292_update_completed__ps <-& (type_cast_1292_update_completed_)
              $T[R_n_col_to_be_replaced_1293_sample_start__ps] 
              $T[R_n_col_to_be_replaced_1293_sample_completed__ps] 
              $T[R_n_col_to_be_replaced_1293_update_start__ps] 
              $T[R_n_col_to_be_replaced_1293_update_completed__ps] 
              // interlock for implicit-variable-ref/signal-read in Phi alternative 1
              $T[R_n_col_to_be_replaced_1293_sample_start_] 
              $T[R_n_col_to_be_replaced_1293_sample_completed_] 
              $T[R_n_col_to_be_replaced_1293_update_start_] 
              $T[R_n_col_to_be_replaced_1293_update_completed_] 
              ;;[R_n_col_to_be_replaced_1293_Sample] 
              {
                $T [req] $T [ack] // interlock-sample.
              }
              R_n_col_to_be_replaced_1293_sample_start_ &-> (R_n_col_to_be_replaced_1293_Sample)
              R_n_col_to_be_replaced_1293_sample_completed_ <-& (R_n_col_to_be_replaced_1293_Sample)
              ;;[R_n_col_to_be_replaced_1293_Update] 
              {
                $T [req] $T [ack] // interlock-update.
              }
              R_n_col_to_be_replaced_1293_update_start_ &-> (R_n_col_to_be_replaced_1293_Update)
              R_n_col_to_be_replaced_1293_update_completed_ <-& (R_n_col_to_be_replaced_1293_Update)
              // RAW reenables for n_col_to_be_replaced
              // Phi start dependency for implicit/constant alternative.
              R_n_col_to_be_replaced_1293_sample_start_ <-& (R_n_col_to_be_replaced_1293_sample_start__ps)
              R_n_col_to_be_replaced_1293_update_start_ <-& (R_n_col_to_be_replaced_1293_update_start__ps)
              // Phi complete dependency.
              R_n_col_to_be_replaced_1293_sample_completed__ps <-& (R_n_col_to_be_replaced_1293_sample_completed_)
              R_n_col_to_be_replaced_1293_update_completed__ps <-& (R_n_col_to_be_replaced_1293_update_completed_)
              $phisequencer [ phi_stmt_1289_phi_seq] : 
              phi_stmt_1289_entry_trigger type_cast_1292_sample_start__ps type_cast_1292_sample_completed__ps type_cast_1292_update_start__ps type_cast_1292_update_completed__ps phi_stmt_1289_loopback_trigger R_n_col_to_be_replaced_1293_sample_start__ps R_n_col_to_be_replaced_1293_sample_completed__ps R_n_col_to_be_replaced_1293_update_start__ps R_n_col_to_be_replaced_1293_update_completed__ps :
              phi_stmt_1289_sample_start__ps phi_stmt_1289_sample_completed__ps phi_stmt_1289_update_start__ps phi_stmt_1289_update_completed__ps :
              phi_stmt_1289_entry_sample_req_ps phi_stmt_1289_loopback_sample_req_ps : 
              phi_stmt_1289_phi_mux_ack_ps
              // done: PHI Statement phi_stmt_1289
              // start: WAR dependencies for I_1
              // done: WAR dependencies for I_1
              // start:  					$volatile I_1 := ($bitcast ($uint<6>) (I + 1 ) )
              //  file prog.linked.opt.aa, line 306
              // volatile! 
              // Source expression
              // ($bitcast ($uint<6>) (I + 1 ) )
              // (I + 1 )
              // I
              // Target expression
              // (as target) I_1
              // start: WAR dependencies for I_1
              // done: WAR dependencies for I_1
              // end:  					$volatile I_1 := ($bitcast ($uint<6>) (I + 1 ) )
              // start: 					$call initIfMaps (($bitcast ($uint<1>) 1  ) I J col_to_be_replaced ) (initialized_ifmaps ) 
              //  file prog.linked.opt.aa, line 307
              $T[call_stmt_1307_sample_start_] 
              $T[call_stmt_1307_sample_completed_] 
              $T[call_stmt_1307_update_start_] 
              $T[call_stmt_1307_update_completed_] 
              // Call input argument 0
              // Call input argument 1
              // I
              // Call input argument 2
              // J
              // Call input argument 3
              // col_to_be_replaced
              // start: Forward dependencies from I to transition call_stmt_1307_sample_start_
              call_stmt_1307_sample_start_ <-& (phi_stmt_1284_update_completed_)
              // done: Forward dependencies from I to transition call_stmt_1307_sample_start_
              // RAW reenables for I
              phi_stmt_1284_update_start_ o<-& (call_stmt_1307_sample_completed_ 0)
              // start: Forward dependencies from J to transition call_stmt_1307_sample_start_
              call_stmt_1307_sample_start_ <-& (phi_stmt_1279_update_completed_)
              // done: Forward dependencies from J to transition call_stmt_1307_sample_start_
              // RAW reenables for J
              phi_stmt_1279_update_start_ o<-& (call_stmt_1307_sample_completed_ 0)
              // start: Forward dependencies from col_to_be_replaced to transition call_stmt_1307_sample_start_
              call_stmt_1307_sample_start_ <-& (phi_stmt_1289_update_completed_)
              // done: Forward dependencies from col_to_be_replaced to transition call_stmt_1307_sample_start_
              // RAW reenables for col_to_be_replaced
              phi_stmt_1289_update_start_ o<-& (call_stmt_1307_sample_completed_ 0)
              ;;[call_stmt_1307_Sample] 
              {
                $T [crr] $T [cra] 
              }
              ;;[call_stmt_1307_Update] 
              {
                $T [ccr] $T [cca] 
              }
              call_stmt_1307_sample_start_ &-> (call_stmt_1307_Sample)
              call_stmt_1307_sample_completed_ <-& (call_stmt_1307_Sample)
              call_stmt_1307_sample_completed_ &-> ($null)
              call_stmt_1307_update_start_ &-> (call_stmt_1307_Update)
              call_stmt_1307_update_completed_ <-& (call_stmt_1307_Update)
              // Call output argument 0
              // (as target) initialized_ifmaps
              // self-release: 
              call_stmt_1307_sample_start_ o<-& (call_stmt_1307_sample_completed_ 1)
              $null &-> (call_stmt_1307_update_start_)
              call_stmt_1307_update_start_ o<-& (call_stmt_1307_update_completed_ 0)
              // start: WAR dependencies for initialized_ifmaps
              // done: WAR dependencies for initialized_ifmaps
              // end: 					$call initIfMaps (($bitcast ($uint<1>) 1  ) I J col_to_be_replaced ) (initialized_ifmaps ) 
              // start: WAR dependencies for n_ele
              // WAR dependency: Read: n_ele before Write: 					$volatile n_ele := ($bitcast ($uint<7>) (ele + 1 ) )
              //  WAR  PHI-PHI dependency ignored...
              // done: WAR dependencies for n_ele
              // start:  					$volatile n_ele := ($bitcast ($uint<7>) (ele + 1 ) )
              //  file prog.linked.opt.aa, line 308
              // volatile! 
              // Source expression
              // ($bitcast ($uint<7>) (ele + 1 ) )
              // (ele + 1 )
              // ele
              // Target expression
              // (as target) n_ele
              // start: WAR dependencies for n_ele
              // WAR dependency: Read: n_ele before Write: 					$volatile n_ele := ($bitcast ($uint<7>) (ele + 1 ) )
              //  WAR  PHI-PHI dependency ignored...
              // done: WAR dependencies for n_ele
              // end:  					$volatile n_ele := ($bitcast ($uint<7>) (ele + 1 ) )
              // start: WAR dependencies for n_J
              // WAR dependency: Read: n_J before Write: 					$volatile n_J := ( $mux (J < 4 ) (J + 1 )  ($bitcast ($uint<5>) 0  ) ) 
              //  WAR  PHI-PHI dependency ignored...
              // done: WAR dependencies for n_J
              // start:  					$volatile n_J := ( $mux (J < 4 ) (J + 1 )  ($bitcast ($uint<5>) 0  ) ) 
              //  file prog.linked.opt.aa, line 309
              // volatile! 
              // Source expression
              // ( $mux (J < 4 ) (J + 1 )  ($bitcast ($uint<5>) 0  ) ) 
              // (J < 4 )
              // J
              // (J + 1 )
              // J
              // Target expression
              // (as target) n_J
              // start: WAR dependencies for n_J
              // WAR dependency: Read: n_J before Write: 					$volatile n_J := ( $mux (J < 4 ) (J + 1 )  ($bitcast ($uint<5>) 0  ) ) 
              //  WAR  PHI-PHI dependency ignored...
              // done: WAR dependencies for n_J
              // end:  					$volatile n_J := ( $mux (J < 4 ) (J + 1 )  ($bitcast ($uint<5>) 0  ) ) 
              // start: WAR dependencies for n_I
              // WAR dependency: Read: n_I before Write: 					$volatile n_I := ( $mux (J == 4 ) ($bitcast ($uint<6>) (I + 2 ) )  I ) 
              //  WAR  PHI-PHI dependency ignored...
              //  WAR  PHI-PHI dependency ignored...
              // done: WAR dependencies for n_I
              // start:  					$volatile n_I := ( $mux (J == 4 ) ($bitcast ($uint<6>) (I + 2 ) )  I ) 
              //  file prog.linked.opt.aa, line 310
              // volatile! 
              // Source expression
              // ( $mux (J == 4 ) ($bitcast ($uint<6>) (I + 2 ) )  I ) 
              // (J == 4 )
              // J
              // ($bitcast ($uint<6>) (I + 2 ) )
              // (I + 2 )
              // I
              // I
              // Target expression
              // (as target) n_I
              // start: WAR dependencies for n_I
              // WAR dependency: Read: n_I before Write: 					$volatile n_I := ( $mux (J == 4 ) ($bitcast ($uint<6>) (I + 2 ) )  I ) 
              //  WAR  PHI-PHI dependency ignored...
              //  WAR  PHI-PHI dependency ignored...
              // done: WAR dependencies for n_I
              // end:  					$volatile n_I := ( $mux (J == 4 ) ($bitcast ($uint<6>) (I + 2 ) )  I ) 
              // start: 					$call cal_col_to_be_replaced (J col_to_be_replaced ) (new_col_to_be_replaced ) 
              //  file prog.linked.opt.aa, line 311
              $T[call_stmt_1339_sample_start_] 
              $T[call_stmt_1339_sample_completed_] 
              $T[call_stmt_1339_update_start_] 
              $T[call_stmt_1339_update_completed_] 
              // Call input argument 0
              // J
              // Call input argument 1
              // col_to_be_replaced
              // start: Forward dependencies from J to transition call_stmt_1339_sample_start_
              call_stmt_1339_sample_start_ <-& (phi_stmt_1279_update_completed_)
              // done: Forward dependencies from J to transition call_stmt_1339_sample_start_
              // RAW reenables for J
              phi_stmt_1279_update_start_ o<-& (call_stmt_1339_sample_completed_ 0)
              // start: Forward dependencies from col_to_be_replaced to transition call_stmt_1339_sample_start_
              call_stmt_1339_sample_start_ <-& (phi_stmt_1289_update_completed_)
              // done: Forward dependencies from col_to_be_replaced to transition call_stmt_1339_sample_start_
              // RAW reenables for col_to_be_replaced
              phi_stmt_1289_update_start_ o<-& (call_stmt_1339_sample_completed_ 0)
              ;;[call_stmt_1339_Sample] 
              {
                $T [crr] $T [cra] 
              }
              ;;[call_stmt_1339_Update] 
              {
                $T [ccr] $T [cca] 
              }
              call_stmt_1339_sample_start_ &-> (call_stmt_1339_Sample)
              call_stmt_1339_sample_completed_ <-& (call_stmt_1339_Sample)
              call_stmt_1339_sample_completed_ &-> ($null)
              call_stmt_1339_update_start_ &-> (call_stmt_1339_Update)
              call_stmt_1339_update_completed_ <-& (call_stmt_1339_Update)
              // Call output argument 0
              // (as target) new_col_to_be_replaced
              // self-release: 
              call_stmt_1339_sample_start_ o<-& (call_stmt_1339_sample_completed_ 1)
              $null &-> (call_stmt_1339_update_start_)
              call_stmt_1339_update_start_ o<-& (call_stmt_1339_update_completed_ 0)
              // start: WAR dependencies for new_col_to_be_replaced
              // done: WAR dependencies for new_col_to_be_replaced
              // end: 					$call cal_col_to_be_replaced (J col_to_be_replaced ) (new_col_to_be_replaced ) 
              // start: WAR dependencies for n_col_to_be_replaced
              // WAR dependency: Read: n_col_to_be_replaced before Write: 					$volatile n_col_to_be_replaced := new_col_to_be_replaced
              call_stmt_1339_update_start_ <-& (phi_stmt_1289_sample_completed_)
              phi_stmt_1289_sample_start_ o<-& (call_stmt_1339_update_completed_ 0)
              // WAR dependency: release  Read: n_col_to_be_replaced with Write: 					$call cal_col_to_be_replaced (J col_to_be_replaced ) (new_col_to_be_replaced ) 
              // done: WAR dependencies for n_col_to_be_replaced
              // start:  					$volatile n_col_to_be_replaced := new_col_to_be_replaced
              //  file prog.linked.opt.aa, line 312
              // volatile! 
              // Source expression
              // new_col_to_be_replaced
              // Target expression
              // (as target) n_col_to_be_replaced
              // start: WAR dependencies for n_col_to_be_replaced
              // WAR dependency: Read: n_col_to_be_replaced before Write: 					$volatile n_col_to_be_replaced := new_col_to_be_replaced
              call_stmt_1339_update_start_ <-& (phi_stmt_1289_sample_completed_)
              phi_stmt_1289_sample_start_ o<-& (call_stmt_1339_update_completed_ 0)
              // WAR dependency: release  Read: n_col_to_be_replaced with Write: 					$call cal_col_to_be_replaced (J col_to_be_replaced ) (new_col_to_be_replaced )  $buffering 2
              // done: WAR dependencies for n_col_to_be_replaced
              // end:  					$volatile n_col_to_be_replaced := new_col_to_be_replaced
              // start: 					$call mainAcc (I J col_to_be_replaced ) (ofmap_pixel ) 
              //  file prog.linked.opt.aa, line 313
              $T[call_stmt_1347_sample_start_] 
              $T[call_stmt_1347_sample_completed_] 
              $T[call_stmt_1347_update_start_] 
              $T[call_stmt_1347_update_completed_] 
              // Call input argument 0
              // I
              // Call input argument 1
              // J
              // Call input argument 2
              // col_to_be_replaced
              // start: Forward dependencies from I to transition call_stmt_1347_sample_start_
              call_stmt_1347_sample_start_ <-& (phi_stmt_1284_update_completed_)
              // done: Forward dependencies from I to transition call_stmt_1347_sample_start_
              // RAW reenables for I
              phi_stmt_1284_update_start_ o<-& (call_stmt_1347_sample_completed_ 0)
              // start: Forward dependencies from J to transition call_stmt_1347_sample_start_
              call_stmt_1347_sample_start_ <-& (phi_stmt_1279_update_completed_)
              // done: Forward dependencies from J to transition call_stmt_1347_sample_start_
              // RAW reenables for J
              phi_stmt_1279_update_start_ o<-& (call_stmt_1347_sample_completed_ 0)
              // start: Forward dependencies from col_to_be_replaced to transition call_stmt_1347_sample_start_
              call_stmt_1347_sample_start_ <-& (phi_stmt_1289_update_completed_)
              // done: Forward dependencies from col_to_be_replaced to transition call_stmt_1347_sample_start_
              // RAW reenables for col_to_be_replaced
              phi_stmt_1289_update_start_ o<-& (call_stmt_1347_sample_completed_ 0)
              ;;[call_stmt_1347_Sample] 
              {
                $T [crr] $T [cra] 
              }
              ;;[call_stmt_1347_Update] 
              {
                $T [ccr] $T [cca] 
              }
              call_stmt_1347_sample_start_ &-> (call_stmt_1347_Sample)
              call_stmt_1347_sample_completed_ <-& (call_stmt_1347_Sample)
              call_stmt_1347_sample_completed_ &-> ($null)
              call_stmt_1347_update_start_ &-> (call_stmt_1347_Update)
              call_stmt_1347_update_completed_ <-& (call_stmt_1347_Update)
              // Call output argument 0
              // (as target) ofmap_pixel
              // self-release: 
              call_stmt_1347_sample_start_ o<-& (call_stmt_1347_sample_completed_ 1)
              $null &-> (call_stmt_1347_update_start_)
              call_stmt_1347_update_start_ o<-& (call_stmt_1347_update_completed_ 0)
              // start: WAR dependencies for ofmap_pixel
              // done: WAR dependencies for ofmap_pixel
              // end: 					$call mainAcc (I J col_to_be_replaced ) (ofmap_pixel ) 
              // start: WAR dependencies for checkIFour
              // done: WAR dependencies for checkIFour
              // start:  					$volatile checkIFour := ( $mux (I == 4 ) ($bitcast ($uint<1>) 1  )  ($bitcast ($uint<1>) 0  ) ) 
              //  file prog.linked.opt.aa, line 314
              // volatile! 
              // Source expression
              // ( $mux (I == 4 ) ($bitcast ($uint<1>) 1  )  ($bitcast ($uint<1>) 0  ) ) 
              // (I == 4 )
              // I
              // Target expression
              // (as target) checkIFour
              // start: WAR dependencies for checkIFour
              // done: WAR dependencies for checkIFour
              // end:  					$volatile checkIFour := ( $mux (I == 4 ) ($bitcast ($uint<1>) 1  )  ($bitcast ($uint<1>) 0  ) ) 
              // start: 					$guard (~checkIFour) $call mainAcc2 (I_1 J col_to_be_replaced ) (ofmap_pixel2 ) 
              //  file prog.linked.opt.aa, line 315
              $T[call_stmt_1363_sample_start_] 
              $T[call_stmt_1363_sample_completed_] 
              $T[call_stmt_1363_update_start_] 
              $T[call_stmt_1363_update_completed_] 
              // Guard expression
              // checkIFour
              // start: Forward dependencies from checkIFour to transition call_stmt_1363_sample_start_
              call_stmt_1363_sample_start_ <-& (phi_stmt_1284_update_completed_)
              // done: Forward dependencies from checkIFour to transition call_stmt_1363_sample_start_
              // RAW reenables for checkIFour
              phi_stmt_1284_update_start_ o<-& (call_stmt_1363_sample_completed_ 0)
              // Call input argument 0
              // I_1
              // Call input argument 1
              // J
              // Call input argument 2
              // col_to_be_replaced
              // start: Forward dependencies from I_1 to transition call_stmt_1363_sample_start_
              call_stmt_1363_sample_start_ <-& (phi_stmt_1284_update_completed_)
              // done: Forward dependencies from I_1 to transition call_stmt_1363_sample_start_
              // RAW reenables for I_1
              phi_stmt_1284_update_start_ o<-& (call_stmt_1363_sample_completed_ 0)
              // start: Forward dependencies from J to transition call_stmt_1363_sample_start_
              call_stmt_1363_sample_start_ <-& (phi_stmt_1279_update_completed_)
              // done: Forward dependencies from J to transition call_stmt_1363_sample_start_
              // RAW reenables for J
              phi_stmt_1279_update_start_ o<-& (call_stmt_1363_sample_completed_ 0)
              // start: Forward dependencies from col_to_be_replaced to transition call_stmt_1363_sample_start_
              call_stmt_1363_sample_start_ <-& (phi_stmt_1289_update_completed_)
              // done: Forward dependencies from col_to_be_replaced to transition call_stmt_1363_sample_start_
              // RAW reenables for col_to_be_replaced
              phi_stmt_1289_update_start_ o<-& (call_stmt_1363_sample_completed_ 0)
              ;;[call_stmt_1363_Sample] 
              {
                $T [crr] $T [cra] 
              }
              ;;[call_stmt_1363_Update] 
              {
                $T [ccr] $T [cca] 
              }
              call_stmt_1363_sample_start_ &-> (call_stmt_1363_Sample)
              call_stmt_1363_sample_completed_ <-& (call_stmt_1363_Sample)
              call_stmt_1363_sample_completed_ &-> ($null)
              call_stmt_1363_update_start_ &-> (call_stmt_1363_Update)
              call_stmt_1363_update_completed_ <-& (call_stmt_1363_Update)
              // Call output argument 0
              // (as target) ofmap_pixel2
              // self-release: 
              call_stmt_1363_sample_start_ o<-& (call_stmt_1363_sample_completed_ 1)
              $null &-> (call_stmt_1363_update_start_)
              call_stmt_1363_update_start_ o<-& (call_stmt_1363_update_completed_ 0)
              // start: WAR dependencies for ofmap_pixel2
              // done: WAR dependencies for ofmap_pixel2
              // end: 					$guard (~checkIFour) $call mainAcc2 (I_1 J col_to_be_replaced ) (ofmap_pixel2 ) 
              // start:  					read_sums := ($bitcast ($uint<16>) ele )// bits of buffering = 16. 
              //  file prog.linked.opt.aa, line 316
              // Source expression
              // ($bitcast ($uint<16>) ele )
              $T[type_cast_1366_sample_start_] 
              $T[type_cast_1366_sample_completed_] 
              $T[type_cast_1366_update_start_] 
              $T[type_cast_1366_update_completed_] 
              // ele
              // start: Forward dependencies from ele to transition type_cast_1366_sample_start_
              type_cast_1366_sample_start_ <-& (phi_stmt_1273_update_completed_)
              // done: Forward dependencies from ele to transition type_cast_1366_sample_start_
              ;;[type_cast_1366_Sample] 
              {
                // unary expression 
                $T [rr] $T [ra] // (split) unary operation
              }
              ;;[type_cast_1366_Update] 
              {
                // unary expression 
                $T [cr] $T [ca] //(split) unary operation
              }
              type_cast_1366_sample_start_ &-> (type_cast_1366_Sample)
              type_cast_1366_sample_completed_ <-& (type_cast_1366_Sample)
              type_cast_1366_sample_completed_ &-> ($null)
              type_cast_1366_update_start_ &-> (type_cast_1366_Update)
              type_cast_1366_update_completed_ <-& (type_cast_1366_Update)
              // RAW reenables for ele
              phi_stmt_1273_update_start_ o<-& (type_cast_1366_sample_completed_ 0)
              // self-release: 
              type_cast_1366_sample_start_ o<-& (type_cast_1366_sample_completed_ 1)
              $null &-> (type_cast_1366_update_start_)
              type_cast_1366_update_start_ o<-& (type_cast_1366_update_completed_ 0)
              // Target expression
              // (as target) read_sums
              $T[WPIPE_read_sums_1364_sample_start_] 
              $T[WPIPE_read_sums_1364_sample_completed_] 
              $T[WPIPE_read_sums_1364_update_start_] 
              $T[WPIPE_read_sums_1364_update_completed_] 
              ;;[WPIPE_read_sums_1364_Sample] 
              {
                // pipe write sample-start read_sums
                $T [req] $T [ack] 
              }
              ;;[WPIPE_read_sums_1364_Update] 
              {
                // pipe write update (complete) read_sums
                $T [req] $T [ack] 
              }
              WPIPE_read_sums_1364_sample_start_ &-> (WPIPE_read_sums_1364_Sample)
              WPIPE_read_sums_1364_sample_completed_ <-& (WPIPE_read_sums_1364_Sample)
              WPIPE_read_sums_1364_update_start_ <-& (WPIPE_read_sums_1364_sample_completed_)
              WPIPE_read_sums_1364_update_start_ &-> (WPIPE_read_sums_1364_Update)
              WPIPE_read_sums_1364_update_completed_ <-& (WPIPE_read_sums_1364_Update)
              WPIPE_read_sums_1364_sample_start_ o<-& (WPIPE_read_sums_1364_update_completed_ 0)
              // start: Forward dependencies from ($bitcast ($uint<16>) ele ) to transition WPIPE_read_sums_1364_sample_start_
              WPIPE_read_sums_1364_sample_start_ <-& (type_cast_1366_update_completed_)
              // done: Forward dependencies from ($bitcast ($uint<16>) ele ) to transition WPIPE_read_sums_1364_sample_start_
              // RAW reenables for ($bitcast ($uint<16>) ele )
              type_cast_1366_update_start_ o<-& (WPIPE_read_sums_1364_sample_completed_ 0)
              // end:  					read_sums := ($bitcast ($uint<16>) ele )// bits of buffering = 16. 
              // start:  					I_1457_delayed_4_0 := I $buffering 4// bits of buffering = 24. 
              //  file prog.linked.opt.aa, line 317
              $T[assign_stmt_1370_sample_start_] 
              $T[assign_stmt_1370_sample_completed_] 
              $T[assign_stmt_1370_update_start_] 
              $T[assign_stmt_1370_update_completed_] 
              // Source expression
              // I
              // Target expression
              // (as target) I_1457_delayed_4_0
              // both source and target are implicit: use interlock 
              // Interlock 
              ;;[assign_stmt_1370_Sample] 
              {
                $T [req] $T [ack] // interlock-sample.
              }
              ;;[assign_stmt_1370_Update] 
              {
                $T [req] $T [ack] // interlock-update.
              }
              assign_stmt_1370_sample_start_ &-> (assign_stmt_1370_Sample)
              assign_stmt_1370_sample_completed_ <-& (assign_stmt_1370_Sample)
              assign_stmt_1370_sample_completed_ &-> ($null)
              assign_stmt_1370_update_start_ &-> (assign_stmt_1370_Update)
              assign_stmt_1370_update_completed_ <-& (assign_stmt_1370_Update)
              // start: Forward dependencies from I to transition assign_stmt_1370_sample_start_
              assign_stmt_1370_sample_start_ <-& (phi_stmt_1284_update_completed_)
              // done: Forward dependencies from I to transition assign_stmt_1370_sample_start_
              // RAW reenables for I
              phi_stmt_1284_update_start_ o<-& (assign_stmt_1370_sample_completed_ 0)
              // self-release: 
              assign_stmt_1370_sample_start_ o<-& (assign_stmt_1370_sample_completed_ 1)
              $null &-> (assign_stmt_1370_update_start_)
              assign_stmt_1370_update_start_ o<-& (assign_stmt_1370_update_completed_ 0)
              // start: WAR dependencies for I_1457_delayed_4_0
              // done: WAR dependencies for I_1457_delayed_4_0
              // end:  					I_1457_delayed_4_0 := I $buffering 4// bits of buffering = 24. 
              // start:  					J_1458_delayed_4_0 := J $buffering 4// bits of buffering = 20. 
              //  file prog.linked.opt.aa, line 318
              $T[assign_stmt_1373_sample_start_] 
              $T[assign_stmt_1373_sample_completed_] 
              $T[assign_stmt_1373_update_start_] 
              $T[assign_stmt_1373_update_completed_] 
              // Source expression
              // J
              // Target expression
              // (as target) J_1458_delayed_4_0
              // both source and target are implicit: use interlock 
              // Interlock 
              ;;[assign_stmt_1373_Sample] 
              {
                $T [req] $T [ack] // interlock-sample.
              }
              ;;[assign_stmt_1373_Update] 
              {
                $T [req] $T [ack] // interlock-update.
              }
              assign_stmt_1373_sample_start_ &-> (assign_stmt_1373_Sample)
              assign_stmt_1373_sample_completed_ <-& (assign_stmt_1373_Sample)
              assign_stmt_1373_sample_completed_ &-> ($null)
              assign_stmt_1373_update_start_ &-> (assign_stmt_1373_Update)
              assign_stmt_1373_update_completed_ <-& (assign_stmt_1373_Update)
              // start: Forward dependencies from J to transition assign_stmt_1373_sample_start_
              assign_stmt_1373_sample_start_ <-& (phi_stmt_1279_update_completed_)
              // done: Forward dependencies from J to transition assign_stmt_1373_sample_start_
              // RAW reenables for J
              phi_stmt_1279_update_start_ o<-& (assign_stmt_1373_sample_completed_ 0)
              // self-release: 
              assign_stmt_1373_sample_start_ o<-& (assign_stmt_1373_sample_completed_ 1)
              $null &-> (assign_stmt_1373_update_start_)
              assign_stmt_1373_update_start_ o<-& (assign_stmt_1373_update_completed_ 0)
              // start: WAR dependencies for J_1458_delayed_4_0
              // done: WAR dependencies for J_1458_delayed_4_0
              // end:  					J_1458_delayed_4_0 := J $buffering 4// bits of buffering = 20. 
              // start: 					$call accessMem (write_signal I_1457_delayed_4_0 J_1458_delayed_4_0 ofmap_pixel ) (r_data_sum_cal ) 
              //  file prog.linked.opt.aa, line 319
              $T[call_stmt_1379_sample_start_] 
              $T[call_stmt_1379_sample_completed_] 
              $T[call_stmt_1379_update_start_] 
              $T[call_stmt_1379_update_completed_] 
              // Call input argument 0
              // Call input argument 1
              // I_1457_delayed_4_0
              // Call input argument 2
              // J_1458_delayed_4_0
              // Call input argument 3
              // ofmap_pixel
              // start: Forward dependencies from I_1457_delayed_4_0 to transition call_stmt_1379_sample_start_
              call_stmt_1379_sample_start_ <-& (assign_stmt_1370_update_completed_)
              // done: Forward dependencies from I_1457_delayed_4_0 to transition call_stmt_1379_sample_start_
              // RAW reenables for I_1457_delayed_4_0
              assign_stmt_1370_update_start_ o<-& (call_stmt_1379_sample_completed_ 0)
              // start: Forward dependencies from J_1458_delayed_4_0 to transition call_stmt_1379_sample_start_
              call_stmt_1379_sample_start_ <-& (assign_stmt_1373_update_completed_)
              // done: Forward dependencies from J_1458_delayed_4_0 to transition call_stmt_1379_sample_start_
              // RAW reenables for J_1458_delayed_4_0
              assign_stmt_1373_update_start_ o<-& (call_stmt_1379_sample_completed_ 0)
              // start: Forward dependencies from ofmap_pixel to transition call_stmt_1379_sample_start_
              call_stmt_1379_sample_start_ <-& (call_stmt_1347_update_completed_)
              // done: Forward dependencies from ofmap_pixel to transition call_stmt_1379_sample_start_
              // RAW reenables for ofmap_pixel
              call_stmt_1347_update_start_ o<-& (call_stmt_1379_sample_completed_ 0)
              ;;[call_stmt_1379_Sample] 
              {
                $T [crr] $T [cra] 
              }
              ;;[call_stmt_1379_Update] 
              {
                $T [ccr] $T [cca] 
              }
              call_stmt_1379_sample_start_ &-> (call_stmt_1379_Sample)
              call_stmt_1379_sample_completed_ <-& (call_stmt_1379_Sample)
              call_stmt_1379_sample_completed_ &-> ($null)
              call_stmt_1379_update_start_ &-> (call_stmt_1379_Update)
              call_stmt_1379_update_completed_ <-& (call_stmt_1379_Update)
              // Call output argument 0
              // (as target) r_data_sum_cal
              // self-release: 
              call_stmt_1379_sample_start_ o<-& (call_stmt_1379_sample_completed_ 1)
              $null &-> (call_stmt_1379_update_start_)
              call_stmt_1379_update_start_ o<-& (call_stmt_1379_update_completed_ 0)
              // start: WAR dependencies for r_data_sum_cal
              // done: WAR dependencies for r_data_sum_cal
              // end: 					$call accessMem (write_signal I_1457_delayed_4_0 J_1458_delayed_4_0 ofmap_pixel ) (r_data_sum_cal ) 
              // start:  					checkIFour_1462_delayed_4_0 := checkIFour $buffering 4// bits of buffering = 4. 
              //  file prog.linked.opt.aa, line 320
              $T[assign_stmt_1382_sample_start_] 
              $T[assign_stmt_1382_sample_completed_] 
              $T[assign_stmt_1382_update_start_] 
              $T[assign_stmt_1382_update_completed_] 
              // Source expression
              // checkIFour
              // Target expression
              // (as target) checkIFour_1462_delayed_4_0
              // both source and target are implicit: use interlock 
              // Interlock 
              ;;[assign_stmt_1382_Sample] 
              {
                $T [req] $T [ack] // interlock-sample.
              }
              ;;[assign_stmt_1382_Update] 
              {
                $T [req] $T [ack] // interlock-update.
              }
              assign_stmt_1382_sample_start_ &-> (assign_stmt_1382_Sample)
              assign_stmt_1382_sample_completed_ <-& (assign_stmt_1382_Sample)
              assign_stmt_1382_sample_completed_ &-> ($null)
              assign_stmt_1382_update_start_ &-> (assign_stmt_1382_Update)
              assign_stmt_1382_update_completed_ <-& (assign_stmt_1382_Update)
              // start: Forward dependencies from checkIFour to transition assign_stmt_1382_sample_start_
              assign_stmt_1382_sample_start_ <-& (phi_stmt_1284_update_completed_)
              // done: Forward dependencies from checkIFour to transition assign_stmt_1382_sample_start_
              // RAW reenables for checkIFour
              phi_stmt_1284_update_start_ o<-& (assign_stmt_1382_sample_completed_ 0)
              // self-release: 
              assign_stmt_1382_sample_start_ o<-& (assign_stmt_1382_sample_completed_ 1)
              $null &-> (assign_stmt_1382_update_start_)
              assign_stmt_1382_update_start_ o<-& (assign_stmt_1382_update_completed_ 0)
              // start: WAR dependencies for checkIFour_1462_delayed_4_0
              // done: WAR dependencies for checkIFour_1462_delayed_4_0
              // end:  					checkIFour_1462_delayed_4_0 := checkIFour $buffering 4// bits of buffering = 4. 
              // start:  					I_1_1464_delayed_4_0 := I_1 $buffering 4// bits of buffering = 24. 
              //  file prog.linked.opt.aa, line 321
              $T[assign_stmt_1385_sample_start_] 
              $T[assign_stmt_1385_sample_completed_] 
              $T[assign_stmt_1385_update_start_] 
              $T[assign_stmt_1385_update_completed_] 
              // Source expression
              // I_1
              // Target expression
              // (as target) I_1_1464_delayed_4_0
              // both source and target are implicit: use interlock 
              // Interlock 
              ;;[assign_stmt_1385_Sample] 
              {
                $T [req] $T [ack] // interlock-sample.
              }
              ;;[assign_stmt_1385_Update] 
              {
                $T [req] $T [ack] // interlock-update.
              }
              assign_stmt_1385_sample_start_ &-> (assign_stmt_1385_Sample)
              assign_stmt_1385_sample_completed_ <-& (assign_stmt_1385_Sample)
              assign_stmt_1385_sample_completed_ &-> ($null)
              assign_stmt_1385_update_start_ &-> (assign_stmt_1385_Update)
              assign_stmt_1385_update_completed_ <-& (assign_stmt_1385_Update)
              // start: Forward dependencies from I_1 to transition assign_stmt_1385_sample_start_
              assign_stmt_1385_sample_start_ <-& (phi_stmt_1284_update_completed_)
              // done: Forward dependencies from I_1 to transition assign_stmt_1385_sample_start_
              // RAW reenables for I_1
              phi_stmt_1284_update_start_ o<-& (assign_stmt_1385_sample_completed_ 0)
              // self-release: 
              assign_stmt_1385_sample_start_ o<-& (assign_stmt_1385_sample_completed_ 1)
              $null &-> (assign_stmt_1385_update_start_)
              assign_stmt_1385_update_start_ o<-& (assign_stmt_1385_update_completed_ 0)
              // start: WAR dependencies for I_1_1464_delayed_4_0
              // done: WAR dependencies for I_1_1464_delayed_4_0
              // end:  					I_1_1464_delayed_4_0 := I_1 $buffering 4// bits of buffering = 24. 
              // start:  					J_1465_delayed_4_0 := J $buffering 4// bits of buffering = 20. 
              //  file prog.linked.opt.aa, line 322
              $T[assign_stmt_1388_sample_start_] 
              $T[assign_stmt_1388_sample_completed_] 
              $T[assign_stmt_1388_update_start_] 
              $T[assign_stmt_1388_update_completed_] 
              // Source expression
              // J
              // Target expression
              // (as target) J_1465_delayed_4_0
              // both source and target are implicit: use interlock 
              // Interlock 
              ;;[assign_stmt_1388_Sample] 
              {
                $T [req] $T [ack] // interlock-sample.
              }
              ;;[assign_stmt_1388_Update] 
              {
                $T [req] $T [ack] // interlock-update.
              }
              assign_stmt_1388_sample_start_ &-> (assign_stmt_1388_Sample)
              assign_stmt_1388_sample_completed_ <-& (assign_stmt_1388_Sample)
              assign_stmt_1388_sample_completed_ &-> ($null)
              assign_stmt_1388_update_start_ &-> (assign_stmt_1388_Update)
              assign_stmt_1388_update_completed_ <-& (assign_stmt_1388_Update)
              // start: Forward dependencies from J to transition assign_stmt_1388_sample_start_
              assign_stmt_1388_sample_start_ <-& (phi_stmt_1279_update_completed_)
              // done: Forward dependencies from J to transition assign_stmt_1388_sample_start_
              // RAW reenables for J
              phi_stmt_1279_update_start_ o<-& (assign_stmt_1388_sample_completed_ 0)
              // self-release: 
              assign_stmt_1388_sample_start_ o<-& (assign_stmt_1388_sample_completed_ 1)
              $null &-> (assign_stmt_1388_update_start_)
              assign_stmt_1388_update_start_ o<-& (assign_stmt_1388_update_completed_ 0)
              // start: WAR dependencies for J_1465_delayed_4_0
              // done: WAR dependencies for J_1465_delayed_4_0
              // end:  					J_1465_delayed_4_0 := J $buffering 4// bits of buffering = 20. 
              // start: 					$guard (~checkIFour_1462_delayed_4_0) $call accessMem (write_signal I_1_1464_delayed_4_0 J_1465_delayed_4_0 ofmap_pixel2 ) (r_data_sum_cal2 ) 
              //  file prog.linked.opt.aa, line 323
              $T[call_stmt_1395_sample_start_] 
              $T[call_stmt_1395_sample_completed_] 
              $T[call_stmt_1395_update_start_] 
              $T[call_stmt_1395_update_completed_] 
              // Guard expression
              // checkIFour_1462_delayed_4_0
              // start: Forward dependencies from checkIFour_1462_delayed_4_0 to transition call_stmt_1395_sample_start_
              call_stmt_1395_sample_start_ <-& (assign_stmt_1382_update_completed_)
              // done: Forward dependencies from checkIFour_1462_delayed_4_0 to transition call_stmt_1395_sample_start_
              // RAW reenables for checkIFour_1462_delayed_4_0
              assign_stmt_1382_update_start_ o<-& (call_stmt_1395_sample_completed_ 0)
              // Call input argument 0
              // Call input argument 1
              // I_1_1464_delayed_4_0
              // Call input argument 2
              // J_1465_delayed_4_0
              // Call input argument 3
              // ofmap_pixel2
              // start: Forward dependencies from I_1_1464_delayed_4_0 to transition call_stmt_1395_sample_start_
              call_stmt_1395_sample_start_ <-& (assign_stmt_1385_update_completed_)
              // done: Forward dependencies from I_1_1464_delayed_4_0 to transition call_stmt_1395_sample_start_
              // RAW reenables for I_1_1464_delayed_4_0
              assign_stmt_1385_update_start_ o<-& (call_stmt_1395_sample_completed_ 0)
              // start: Forward dependencies from J_1465_delayed_4_0 to transition call_stmt_1395_sample_start_
              call_stmt_1395_sample_start_ <-& (assign_stmt_1388_update_completed_)
              // done: Forward dependencies from J_1465_delayed_4_0 to transition call_stmt_1395_sample_start_
              // RAW reenables for J_1465_delayed_4_0
              assign_stmt_1388_update_start_ o<-& (call_stmt_1395_sample_completed_ 0)
              // start: Forward dependencies from ofmap_pixel2 to transition call_stmt_1395_sample_start_
              call_stmt_1395_sample_start_ <-& (call_stmt_1363_update_completed_)
              // done: Forward dependencies from ofmap_pixel2 to transition call_stmt_1395_sample_start_
              // RAW reenables for ofmap_pixel2
              call_stmt_1363_update_start_ o<-& (call_stmt_1395_sample_completed_ 0)
              ;;[call_stmt_1395_Sample] 
              {
                $T [crr] $T [cra] 
              }
              ;;[call_stmt_1395_Update] 
              {
                $T [ccr] $T [cca] 
              }
              call_stmt_1395_sample_start_ &-> (call_stmt_1395_Sample)
              call_stmt_1395_sample_completed_ <-& (call_stmt_1395_Sample)
              call_stmt_1395_sample_completed_ &-> ($null)
              call_stmt_1395_update_start_ &-> (call_stmt_1395_Update)
              call_stmt_1395_update_completed_ <-& (call_stmt_1395_Update)
              // Call output argument 0
              // (as target) r_data_sum_cal2
              // self-release: 
              call_stmt_1395_sample_start_ o<-& (call_stmt_1395_sample_completed_ 1)
              $null &-> (call_stmt_1395_update_start_)
              call_stmt_1395_update_start_ o<-& (call_stmt_1395_update_completed_ 0)
              // start: WAR dependencies for r_data_sum_cal2
              // done: WAR dependencies for r_data_sum_cal2
              // end: 					$guard (~checkIFour_1462_delayed_4_0) $call accessMem (write_signal I_1_1464_delayed_4_0 J_1465_delayed_4_0 ofmap_pixel2 ) (r_data_sum_cal2 ) 
              // (ele < 14 )
              // ele
              $T [loop_body_delay_to_condition_start] $delay
              loop_body_start &-> (loop_body_delay_to_condition_start)
              loop_body_delay_to_condition_start &-> (condition_evaluated)
              // start: Forward dependencies from (ele < 14 ) to transition condition_evaluated
              condition_evaluated <-& (phi_stmt_1273_update_completed_)
              // done: Forward dependencies from (ele < 14 ) to transition condition_evaluated
              condition_evaluated &-> ($null)
              // load-store dependencies..
              // memory-space  memory_space_2
              //  call_stmt_1307 store
              //  call_stmt_1363 load
              $T [call_stmt_1307_call_stmt_1363_delay] $delay
              // call_stmt_1307(store) -> call_stmt_1363(load)
              call_stmt_1363_sample_start_ <-& (call_stmt_1307_call_stmt_1363_delay)
              call_stmt_1307_call_stmt_1363_delay <-& (call_stmt_1307_update_completed_)
              // reenable across ring for memory space memory_space_2
              $T[ring_reenable_memory_space_2] 
              ring_reenable_memory_space_2 <-& (call_stmt_1307_update_completed_)
              ring_reenable_memory_space_2 <-& (call_stmt_1363_update_completed_)
              call_stmt_1307_sample_start_ o<-& (ring_reenable_memory_space_2 1)
              // memory-space  memory_space_3
              //  call_stmt_1307 store
              //  call_stmt_1379 store
              $T [call_stmt_1307_call_stmt_1379_delay] $delay
              // call_stmt_1307(store) -> call_stmt_1379(store)
              call_stmt_1379_sample_start_ <-& (call_stmt_1307_call_stmt_1379_delay)
              call_stmt_1307_call_stmt_1379_delay <-& (call_stmt_1307_update_completed_)
              //  call_stmt_1395 store
              $T [call_stmt_1379_call_stmt_1395_delay] $delay
              // call_stmt_1379(store) -> call_stmt_1395(store)
              call_stmt_1395_sample_start_ <-& (call_stmt_1379_call_stmt_1395_delay)
              call_stmt_1379_call_stmt_1395_delay <-& (call_stmt_1379_update_completed_)
              // reenable across ring for memory space memory_space_3
              $T[ring_reenable_memory_space_3] 
              ring_reenable_memory_space_3 <-& (call_stmt_1395_update_completed_)
              call_stmt_1307_sample_start_ o<-& (ring_reenable_memory_space_3 1)
              // memory-space  memory_space_0
              //  call_stmt_1347 load
              //  call_stmt_1363 load
              // reenable across ring for memory space memory_space_0
              // leading and trailing sets are the same... no ring dependency
              // memory-space  memory_space_1
              //  call_stmt_1307 store
              //  call_stmt_1347 load
              $T [call_stmt_1307_call_stmt_1347_delay] $delay
              // call_stmt_1307(store) -> call_stmt_1347(load)
              call_stmt_1347_sample_start_ <-& (call_stmt_1307_call_stmt_1347_delay)
              call_stmt_1307_call_stmt_1347_delay <-& (call_stmt_1307_update_completed_)
              //  call_stmt_1363 load
              $T [call_stmt_1307_call_stmt_1363_delay] $delay
              // call_stmt_1307(store) -> call_stmt_1363(load)
              call_stmt_1363_sample_start_ <-& (call_stmt_1307_call_stmt_1363_delay)
              call_stmt_1307_call_stmt_1363_delay <-& (call_stmt_1307_update_completed_)
              // reenable across ring for memory space memory_space_1
              $T[ring_reenable_memory_space_1] 
              ring_reenable_memory_space_1 <-& (call_stmt_1307_update_completed_)
              ring_reenable_memory_space_1 <-& (call_stmt_1347_update_completed_)
              ring_reenable_memory_space_1 <-& (call_stmt_1363_update_completed_)
              call_stmt_1307_sample_start_ o<-& (ring_reenable_memory_space_1 1)
              // pipe read/write dependencies for pipe read_sums
              // read-dependencies for pipe read_sums
              // write-dependencies for pipe read_sums
              // signal dependencies for read_sums
            }
            ( first_time_through_loop_body  back_edge_to_loop_body) 
            ( condition_evaluated )
            ;; [loop_exit] 
            {
              $T [ack] 
            }
            ;; [loop_taken] 
            {
              $T [ack] 
            }
            do_while_stmt_1271__entry__ <-| ($entry)
            loop_body_done <-| ( do_while_stmt_1271_loop_body ) 
            condition_done |-> (loop_exit loop_taken)
            do_while_stmt_1271__exit__ |-> ($exit)
            $bind condition_done <= do_while_stmt_1271_loop_body : condition_evaluated
            $bind do_while_stmt_1271__entry__  => do_while_stmt_1271_loop_body : first_time_through_loop_body 
            $bind loop_back  => do_while_stmt_1271_loop_body : back_edge_to_loop_body 
            $terminate (loop_exit loop_taken loop_body_done) (loop_back do_while_stmt_1271__exit__)
          }
          do_while_stmt_1271__entry__ |-> (do_while_stmt_1271)
          do_while_stmt_1271__exit__ <-| (do_while_stmt_1271)
          do_while_stmt_1271__entry__ <-| (branch_block_stmt_1270__entry__)
          do_while_stmt_1271__exit__ |-> (branch_block_stmt_1270__exit__)
        }
        branch_block_stmt_1270__entry__ |-> (branch_block_stmt_1270)
        branch_block_stmt_1270__exit__ <-| (branch_block_stmt_1270)
        ::[assign_stmt_1404] 
        {
          // start:  				accelerator_done := ($bitcast ($uint<16>) 1  )// bits of buffering = 16. 
          //  file prog.linked.opt.aa, line 326
          // Target expression
          // (as target) accelerator_done
          $T[WPIPE_accelerator_done_1401_sample_start_] 
          $T[WPIPE_accelerator_done_1401_sample_completed_] 
          $T[WPIPE_accelerator_done_1401_update_start_] 
          $T[WPIPE_accelerator_done_1401_update_completed_] 
          ;;[WPIPE_accelerator_done_1401_Sample] 
          {
            // pipe write sample-start accelerator_done
            $T [req] $T [ack] 
          }
          ;;[WPIPE_accelerator_done_1401_Update] 
          {
            // pipe write update (complete) accelerator_done
            $T [req] $T [ack] 
          }
          WPIPE_accelerator_done_1401_sample_start_ &-> (WPIPE_accelerator_done_1401_Sample)
          WPIPE_accelerator_done_1401_sample_completed_ <-& (WPIPE_accelerator_done_1401_Sample)
          WPIPE_accelerator_done_1401_update_start_ <-& (WPIPE_accelerator_done_1401_sample_completed_)
          WPIPE_accelerator_done_1401_update_start_ &-> (WPIPE_accelerator_done_1401_Update)
          WPIPE_accelerator_done_1401_update_completed_ <-& (WPIPE_accelerator_done_1401_Update)
          // end:  				accelerator_done := ($bitcast ($uint<16>) 1  )// bits of buffering = 16. 
          // load-store dependencies..
          // pipe read/write dependencies for pipe accelerator_done
          // read-dependencies for pipe accelerator_done
          // write-dependencies for pipe accelerator_done
          // signal dependencies for accelerator_done
        }
        assign_stmt_1404__entry__ |-> (assign_stmt_1404)
        assign_stmt_1404__exit__ <-| (assign_stmt_1404)
        branch_block_stmt_1270__entry__ <-| (if_stmt_1266_if_link)
        assign_stmt_1404__entry__ <-| (branch_block_stmt_1270__exit__)
        check_for_filter <-| (assign_stmt_1404__exit__)
        if_stmt_1266__exit__ <-| (if_stmt_1266_else_link)
        // control-path for merge  
        //  file prog.linked.opt.aa, line 289
        ;;[merge_stmt_1265_dead_link] 
        {
          $T [dead_transition] $dead 
        }
        merge_stmt_1265__entry__ |-> (merge_stmt_1265_dead_link)
        merge_stmt_1265__exit__ <-| (merge_stmt_1265_dead_link)
        //---------------------   merge statement  file prog.linked.opt.aa, line 289  --------------------------
        ||[merge_stmt_1265__entry___PhiReq] 
        {
          // no phi statements in merge..
        }
        merge_stmt_1265__entry__ |-> (merge_stmt_1265__entry___PhiReq)
        ||[check_for_filter_PhiReq] 
        {
          // no phi statements in merge..
        }
        check_for_filter |-> (check_for_filter_PhiReq)
        $P [merge_stmt_1265_PhiReqMerge] 
        merge_stmt_1265_PhiReqMerge <-| ( merge_stmt_1265__entry___PhiReq  check_for_filter_PhiReq )
        ||[merge_stmt_1265_PhiAck] 
        {
          $T [dummy] 
        }
        merge_stmt_1265_PhiReqMerge |-> (merge_stmt_1265_PhiAck)
        merge_stmt_1265__exit__  <-| (merge_stmt_1265_PhiAck)
        //---------------------  end of merge statement  file prog.linked.opt.aa, line 289  --------------------------
        merge_stmt_1265__entry__ <-| (branch_block_stmt_1264__entry__)
        if_stmt_1266__entry__ <-| (merge_stmt_1265__exit__)
        if_stmt_1266__exit__ |-> (branch_block_stmt_1264__exit__)
      }
      branch_block_stmt_1264__entry__ |-> (branch_block_stmt_1264)
      branch_block_stmt_1264__exit__ <-| (branch_block_stmt_1264)
      assign_stmt_1256_to_assign_stmt_1263__entry__ <-| (if_stmt_1248_if_link)
      branch_block_stmt_1264__entry__ <-| (assign_stmt_1256_to_assign_stmt_1263__exit__)
      check_for_start <-| (branch_block_stmt_1264__exit__)
      if_stmt_1248__exit__ <-| (if_stmt_1248_else_link)
      // control-path for merge  
      //  file prog.linked.opt.aa, line 278
      ;;[merge_stmt_1238_dead_link] 
      {
        $T [dead_transition] $dead 
      }
      merge_stmt_1238__entry__ |-> (merge_stmt_1238_dead_link)
      merge_stmt_1238__exit__ <-| (merge_stmt_1238_dead_link)
      //---------------------   merge statement  file prog.linked.opt.aa, line 278  --------------------------
      ||[merge_stmt_1238__entry___PhiReq] 
      {
        ;;[phi_stmt_1239] 
        {
          ||[phi_stmt_1239_sources] 
          {
            // sources for 			$phi iter := 			  ($bitcast ($uint<16>) 1  ) $on   $entry 			  n_iter $on   check_for_start 
            // type of target is $uint<16>
            // constant source .... delay transition 
            $T [type_cast_1242_konst_delay_trans] $delay
          }
          $T [phi_stmt_1239_req] 
        }
      }
      merge_stmt_1238__entry__ |-> (merge_stmt_1238__entry___PhiReq)
      ||[check_for_start_PhiReq] 
      {
        ;;[phi_stmt_1239] 
        {
          ||[phi_stmt_1239_sources] 
          {
            // sources for 			$phi iter := 			  ($bitcast ($uint<16>) 1  ) $on   $entry 			  n_iter $on   check_for_start 
            // type of target is $uint<16>
            // trivial non-constant source .... interlock-buffer introduced 
            || [Interlock] 
            {
              ;;[Sample] 
              {
                $T [req] $T [ack]
              }
              ;;[Update] 
              {
                $T [req] $T [ack]
              }
            }
          }
          $T [phi_stmt_1239_req] 
        }
      }
      check_for_start |-> (check_for_start_PhiReq)
      $P [merge_stmt_1238_PhiReqMerge] 
      merge_stmt_1238_PhiReqMerge <-| ( merge_stmt_1238__entry___PhiReq  check_for_start_PhiReq )
      ||[merge_stmt_1238_PhiAck] 
      {
        $T [phi_stmt_1239_ack] 
      }
      merge_stmt_1238_PhiReqMerge |-> (merge_stmt_1238_PhiAck)
      merge_stmt_1238__exit__  <-| (merge_stmt_1238_PhiAck)
      //---------------------  end of merge statement  file prog.linked.opt.aa, line 278  --------------------------
      merge_stmt_1238__entry__ <-| (branch_block_stmt_1237__entry__)
      assign_stmt_1247__entry__ <-| (merge_stmt_1238__exit__)
      if_stmt_1248__entry__ <-| (assign_stmt_1247__exit__)
      if_stmt_1248__exit__ |-> (branch_block_stmt_1237__exit__)
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %accelerator%check_start%
    //  file prog.linked.opt.aa, line 278
    // constant-object-declarations for block %accelerator%check_start%check_filter%
    //  file prog.linked.opt.aa, line 289
    // constant-object-declarations for block %accelerator%check_start%check_filter%loop%
    //  file prog.linked.opt.aa, line 296
    // constant-object-declarations for block %accelerator%check_start%check_filter%loop
    //  file prog.linked.opt.aa, line 292
    // constant-object-declarations for block %accelerator%check_start%check_filter
    //  file prog.linked.opt.aa, line 287
    // constant-object-declarations for block %accelerator%check_start
    //  file prog.linked.opt.aa, line 276
    // constant-object-declarations for block %accelerator
    //  file prog.linked.opt.aa, line 271
    // constant-declarations for block %accelerator%check_start
    //  file prog.linked.opt.aa, line 276
    // constant-declarations for block %accelerator%check_start%
    //  file prog.linked.opt.aa, line 278
    // constant-declarations for phi:  			$phi iter := 			  ($bitcast ($uint<16>) 1  ) $on   $entry 			  n_iter $on   check_for_start 
    // type of target is $uint<16>
    //  file prog.linked.opt.aa, line 279
    // ($bitcast ($uint<16>) 1  )
    $constant $W[type_cast_1242_wire_constant] : $int<16> := _b0000000000000001// 1
    // if-statement  
    //  file prog.linked.opt.aa, line 0
    // 1 
    $constant $W[konst_1254_wire_constant] : $int<16> := _b0000000000000001// 1
    // 			$call initFilter (filter_start_addr ) (initialized_filter ) 
    //  file prog.linked.opt.aa, line 285
    // filter_start_addr
    $constant $W[R_filter_start_addr_1257_wire_constant] : $int<6> := _b001000// 8
    // constant-declarations for block %accelerator%check_start%check_filter
    //  file prog.linked.opt.aa, line 287
    // constant-declarations for block %accelerator%check_start%check_filter%
    //  file prog.linked.opt.aa, line 289
    // if-statement  
    //  file prog.linked.opt.aa, line 0
    // 1 
    $constant $W[konst_1268_wire_constant] : $int<2> := _b01// 1
    // constant-declarations for block %accelerator%check_start%check_filter%loop
    //  file prog.linked.opt.aa, line 292
    // do-while statement  
    //  file prog.linked.opt.aa, line 294
    // 14 
    $constant $W[konst_1398_wire_constant] : $int<7> := _b0001110// 14
    // constant-declarations for block %accelerator%check_start%check_filter%loop%
    //  file prog.linked.opt.aa, line 296
    // constant-declarations for phi:  					$phi ele := 					  ($bitcast ($uint<7>) 0  ) $on   $entry 					  n_ele $on   $loopback 
    // type of target is $uint<7>
    //  file prog.linked.opt.aa, line 297
    // ($bitcast ($uint<7>) 0  )
    $constant $W[type_cast_1277_wire_constant] : $int<7> := _b0000000// 0
    // constant-declarations for phi:  					$phi J := 					  ($bitcast ($uint<5>) 0  ) $on   $entry 					  n_J $on   $loopback 
    // type of target is $uint<5>
    //  file prog.linked.opt.aa, line 299
    // ($bitcast ($uint<5>) 0  )
    $constant $W[type_cast_1282_wire_constant] : $int<5> := _b00000// 0
    // constant-declarations for phi:  					$phi I := 					  ($bitcast ($uint<6>) 0  ) $on   $entry 					  n_I $on   $loopback 
    // type of target is $uint<6>
    //  file prog.linked.opt.aa, line 301
    // ($bitcast ($uint<6>) 0  )
    $constant $W[type_cast_1287_wire_constant] : $int<6> := _b000000// 0
    // constant-declarations for phi:  					$phi col_to_be_replaced := 					  ($bitcast ($uint<2>) 3  ) $on   $entry 					  n_col_to_be_replaced $on   $loopback 
    // type of target is $uint<2>
    //  file prog.linked.opt.aa, line 303
    // ($bitcast ($uint<2>) 3  )
    $constant $W[type_cast_1292_wire_constant] : $int<2> := _b11// 3
    // 1 
    $constant $W[konst_1297_wire_constant] : $int<6> := _b000001// 1
    // 					$call initIfMaps (($bitcast ($uint<1>) 1  ) I J col_to_be_replaced ) (initialized_ifmaps ) 
    //  file prog.linked.opt.aa, line 307
    // ($bitcast ($uint<1>) 1  )
    $constant $W[type_cast_1302_wire_constant] : $int<1> := _b1// 1
    // 1 
    $constant $W[konst_1310_wire_constant] : $int<7> := _b0000001// 1
    // ( $mux (J < 4 ) (J + 1 )  ($bitcast ($uint<5>) 0  ) ) 
    // 4 
    $constant $W[konst_1316_wire_constant] : $int<5> := _b00100// 4
    // 1 
    $constant $W[konst_1319_wire_constant] : $int<5> := _b00001// 1
    // ($bitcast ($uint<5>) 0  )
    $constant $W[type_cast_1322_wire_constant] : $int<5> := _b00000// 0
    // ( $mux (J == 4 ) ($bitcast ($uint<6>) (I + 2 ) )  I ) 
    // 4 
    $constant $W[konst_1327_wire_constant] : $int<5> := _b00100// 4
    // 2 
    $constant $W[konst_1330_wire_constant] : $int<6> := _b000010// 2
    // 					$call cal_col_to_be_replaced (J col_to_be_replaced ) (new_col_to_be_replaced )  $buffering 2
    //  file prog.linked.opt.aa, line 311
    // 					$call mainAcc (I J col_to_be_replaced ) (ofmap_pixel ) 
    //  file prog.linked.opt.aa, line 313
    // ( $mux (I == 4 ) ($bitcast ($uint<1>) 1  )  ($bitcast ($uint<1>) 0  ) ) 
    // 4 
    $constant $W[konst_1350_wire_constant] : $int<6> := _b000100// 4
    // ($bitcast ($uint<1>) 1  )
    $constant $W[type_cast_1353_wire_constant] : $int<1> := _b1// 1
    // ($bitcast ($uint<1>) 0  )
    $constant $W[type_cast_1355_wire_constant] : $int<1> := _b0// 0
    // 					$guard (~checkIFour) $call mainAcc2 (I_1 J col_to_be_replaced ) (ofmap_pixel2 ) 
    //  file prog.linked.opt.aa, line 315
    // 					$call accessMem (write_signal I_1457_delayed_4_0 J_1458_delayed_4_0 ofmap_pixel ) (r_data_sum_cal ) 
    //  file prog.linked.opt.aa, line 319
    // write_signal
    $constant $W[R_write_signal_1374_wire_constant] : $int<1> := _b0// 0
    // 					$guard (~checkIFour_1462_delayed_4_0) $call accessMem (write_signal I_1_1464_delayed_4_0 J_1465_delayed_4_0 ofmap_pixel2 ) (r_data_sum_cal2 ) 
    //  file prog.linked.opt.aa, line 323
    // write_signal
    $constant $W[R_write_signal_1390_wire_constant] : $int<1> := _b0// 0
    // ($bitcast ($uint<16>) 1  )
    $constant $W[type_cast_1403_wire_constant] : $int<16> := _b0000000000000001// 1
    // block %accelerator%check_start
    //  file prog.linked.opt.aa, line 276
    // merge-statement  
    //  file prog.linked.opt.aa, line 278
    // 			$phi iter := 			  ($bitcast ($uint<16>) 1  ) $on   $entry 			  n_iter $on   check_for_start 
    // type of target is $uint<16>
    //  file prog.linked.opt.aa, line 279
    $W[n_iter_1256_1243_buffered] : $int<16>
    // iter
    $W[iter_1239] : $int<16>
    // 		$volatile cmd := start_accelerator
    //  file prog.linked.opt.aa, line 282
    // cmd
    $W[cmd_1247] : $int<16>
    // if statement  
    //  file prog.linked.opt.aa, line 0
    // (cmd == iter)
    $intermediate $W[EQ_u16_u1_1251_wire] : $int<1>
    // 			$volatile n_iter := (iter + 1 )
    //  file prog.linked.opt.aa, line 284
    // n_iter
    $W[n_iter_1256] : $int<16>
    // 			$call initFilter (filter_start_addr ) (initialized_filter ) 
    //  file prog.linked.opt.aa, line 285
    // initialized_filter
    $W[initialized_filter_1259] : $int<2>
    // 			$volatile check_both := ($bitcast ($uint<2>) initialized_filter )
    //  file prog.linked.opt.aa, line 286
    // check_both
    $W[check_both_1263] : $int<2>
    // block %accelerator%check_start%check_filter
    //  file prog.linked.opt.aa, line 287
    // if statement  
    //  file prog.linked.opt.aa, line 0
    // (check_both == 1 )
    $intermediate $W[EQ_u2_u1_1269_wire] : $int<1>
    // block %accelerator%check_start%check_filter%loop
    //  file prog.linked.opt.aa, line 292
    // do-while statement  
    //  file prog.linked.opt.aa, line 294
    // (ele < 14 )
    $intermediate $W[ULT_u7_u1_1399_wire] : $int<1>
    // merge-statement  
    //  file prog.linked.opt.aa, line 296
    // 					$phi ele := 					  ($bitcast ($uint<7>) 0  ) $on   $entry 					  n_ele $on   $loopback 
    // type of target is $uint<7>
    //  file prog.linked.opt.aa, line 297
    $W[n_ele_1313_1278_buffered] : $int<7>
    // ele
    $W[ele_1273] : $int<7>
    // 					$phi J := 					  ($bitcast ($uint<5>) 0  ) $on   $entry 					  n_J $on   $loopback 
    // type of target is $uint<5>
    //  file prog.linked.opt.aa, line 299
    $W[n_J_1324_1283_buffered] : $int<5>
    // J
    $W[J_1279] : $int<5>
    // 					$phi I := 					  ($bitcast ($uint<6>) 0  ) $on   $entry 					  n_I $on   $loopback 
    // type of target is $uint<6>
    //  file prog.linked.opt.aa, line 301
    $W[n_I_1335_1288_buffered] : $int<6>
    // I
    $W[I_1284] : $int<6>
    // 					$phi col_to_be_replaced := 					  ($bitcast ($uint<2>) 3  ) $on   $entry 					  n_col_to_be_replaced $on   $loopback 
    // type of target is $uint<2>
    //  file prog.linked.opt.aa, line 303
    $W[n_col_to_be_replaced_1342_1293_buffered] : $int<2>
    // col_to_be_replaced
    $W[col_to_be_replaced_1289] : $int<2>
    // 					$volatile I_1 := ($bitcast ($uint<6>) (I + 1 ) )
    //  file prog.linked.opt.aa, line 306
    // (I + 1 )
    $intermediate $W[ADD_u6_u6_1298_wire] : $int<6>
    // I_1
    $W[I_1_1300] : $int<6>
    // 					$call initIfMaps (($bitcast ($uint<1>) 1  ) I J col_to_be_replaced ) (initialized_ifmaps ) 
    //  file prog.linked.opt.aa, line 307
    // initialized_ifmaps
    $W[initialized_ifmaps_1307] : $int<2>
    // 					$volatile n_ele := ($bitcast ($uint<7>) (ele + 1 ) )
    //  file prog.linked.opt.aa, line 308
    // (ele + 1 )
    $intermediate $W[ADD_u7_u7_1311_wire] : $int<7>
    // n_ele
    $W[n_ele_1313] : $int<7>
    // 					$volatile n_J := ( $mux (J < 4 ) (J + 1 )  ($bitcast ($uint<5>) 0  ) ) 
    //  file prog.linked.opt.aa, line 309
    // (J < 4 )
    $intermediate $W[ULT_u5_u1_1317_wire] : $int<1>
    // (J + 1 )
    $intermediate $W[ADD_u5_u5_1320_wire] : $int<5>
    // n_J
    $W[n_J_1324] : $int<5>
    // 					$volatile n_I := ( $mux (J == 4 ) ($bitcast ($uint<6>) (I + 2 ) )  I ) 
    //  file prog.linked.opt.aa, line 310
    // (J == 4 )
    $intermediate $W[EQ_u5_u1_1328_wire] : $int<1>
    // (I + 2 )
    $intermediate $W[ADD_u6_u6_1331_wire] : $int<6>
    // ($bitcast ($uint<6>) (I + 2 ) )
    $intermediate $W[type_cast_1332_wire] : $int<6>
    // n_I
    $W[n_I_1335] : $int<6>
    // 					$call cal_col_to_be_replaced (J col_to_be_replaced ) (new_col_to_be_replaced )  $buffering 2
    //  file prog.linked.opt.aa, line 311
    // new_col_to_be_replaced
    $W[new_col_to_be_replaced_1339] : $int<2>
    // 					$volatile n_col_to_be_replaced := new_col_to_be_replaced
    //  file prog.linked.opt.aa, line 312
    // n_col_to_be_replaced
    $W[n_col_to_be_replaced_1342] : $int<2>
    // 					$call mainAcc (I J col_to_be_replaced ) (ofmap_pixel ) 
    //  file prog.linked.opt.aa, line 313
    // ofmap_pixel
    $W[ofmap_pixel_1347] : $int<16>
    // 					$volatile checkIFour := ( $mux (I == 4 ) ($bitcast ($uint<1>) 1  )  ($bitcast ($uint<1>) 0  ) ) 
    //  file prog.linked.opt.aa, line 314
    // (I == 4 )
    $intermediate $W[EQ_u6_u1_1351_wire] : $int<1>
    // checkIFour
    $W[checkIFour_1357] : $int<1>
    // 					$guard (~checkIFour) $call mainAcc2 (I_1 J col_to_be_replaced ) (ofmap_pixel2 ) 
    //  file prog.linked.opt.aa, line 315
    // ofmap_pixel2
    $W[ofmap_pixel2_1363] : $int<16>
    // 					read_sums := ($bitcast ($uint<16>) ele )// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 316
    // ($bitcast ($uint<16>) ele )
    $intermediate $W[type_cast_1366_wire] : $int<16>
    // read_sums
    // 					I_1457_delayed_4_0 := I $buffering 4// bits of buffering = 24. 
    //  file prog.linked.opt.aa, line 317
    // I_1457_delayed_4_0
    $W[I_1457_delayed_4_0_1370] : $int<6>
    // 					J_1458_delayed_4_0 := J $buffering 4// bits of buffering = 20. 
    //  file prog.linked.opt.aa, line 318
    // J_1458_delayed_4_0
    $W[J_1458_delayed_4_0_1373] : $int<5>
    // 					$call accessMem (write_signal I_1457_delayed_4_0 J_1458_delayed_4_0 ofmap_pixel ) (r_data_sum_cal ) 
    //  file prog.linked.opt.aa, line 319
    // r_data_sum_cal
    $W[r_data_sum_cal_1379] : $int<16>
    // 					checkIFour_1462_delayed_4_0 := checkIFour $buffering 4// bits of buffering = 4. 
    //  file prog.linked.opt.aa, line 320
    // checkIFour_1462_delayed_4_0
    $W[checkIFour_1462_delayed_4_0_1382] : $int<1>
    // 					I_1_1464_delayed_4_0 := I_1 $buffering 4// bits of buffering = 24. 
    //  file prog.linked.opt.aa, line 321
    // I_1_1464_delayed_4_0
    $W[I_1_1464_delayed_4_0_1385] : $int<6>
    // 					J_1465_delayed_4_0 := J $buffering 4// bits of buffering = 20. 
    //  file prog.linked.opt.aa, line 322
    // J_1465_delayed_4_0
    $W[J_1465_delayed_4_0_1388] : $int<5>
    // 					$guard (~checkIFour_1462_delayed_4_0) $call accessMem (write_signal I_1_1464_delayed_4_0 J_1465_delayed_4_0 ofmap_pixel2 ) (r_data_sum_cal2 ) 
    //  file prog.linked.opt.aa, line 323
    // r_data_sum_cal2
    $W[r_data_sum_cal2_1395] : $int<16>
    // 				accelerator_done := ($bitcast ($uint<16>) 1  )// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 326
    // accelerator_done
    // datapath-instances for block %accelerator%check_start
    //  file prog.linked.opt.aa, line 276
    // data-path instances for merge  
    //  file prog.linked.opt.aa, line 278
    // 			$phi iter := 			  ($bitcast ($uint<16>) 1  ) $on   $entry 			  n_iter $on   check_for_start 
    // type of target is $uint<16>
    //  file prog.linked.opt.aa, line 279
    # := [n_iter_1256_1243_buf] (n_iter_1256) (n_iter_1256_1243_buffered)   
    $phi [phi_stmt_1239] (type_cast_1242_wire_constant n_iter_1256_1243_buffered) ( iter_1239 ) 
    // 		$volatile cmd := start_accelerator
    //  file prog.linked.opt.aa, line 282
    // start_accelerator
    $ioport $in [RPIPE_start_accelerator_1246_inst] (start_accelerator) (cmd_1247) 
    $buffering $out RPIPE_start_accelerator_1246_inst cmd_1247 1
    // datapath-instances for if  
    //  file prog.linked.opt.aa, line 0
    // (cmd == iter)
    ==[EQ_u16_u1_1251_inst] (cmd_1247 iter_1239) (EQ_u16_u1_1251_wire)   $flowthrough 
    $delay EQ_u16_u1_1251_inst 0
    ==0? [if_stmt_1248_branch] (EQ_u16_u1_1251_wire)
    // 			$volatile n_iter := (iter + 1 )
    //  file prog.linked.opt.aa, line 284
    // (iter + 1 )
    +[ADD_u16_u16_1255_inst] (iter_1239 konst_1254_wire_constant) (n_iter_1256)   $flowthrough 
    $delay ADD_u16_u16_1255_inst 0
    // 			$call initFilter (filter_start_addr ) (initialized_filter ) 
    //  file prog.linked.opt.aa, line 285
    $call [call_stmt_1259_call] $module initFilter(R_filter_start_addr_1257_wire_constant) (initialized_filter_1259)  
    $delay call_stmt_1259_call 4
    $buffering  $in call_stmt_1259_call R_filter_start_addr_1257_wire_constant 1
    $buffering  $out call_stmt_1259_call initialized_filter_1259 1
    // 			$volatile check_both := ($bitcast ($uint<2>) initialized_filter )
    //  file prog.linked.opt.aa, line 286
    // ($bitcast ($uint<2>) initialized_filter )
    # := [type_cast_1262_inst] (initialized_filter_1259) (check_both_1263)   $flowthrough
    $delay type_cast_1262_inst 0
    // datapath-instances for block %accelerator%check_start%check_filter
    //  file prog.linked.opt.aa, line 287
    // datapath-instances for if  
    //  file prog.linked.opt.aa, line 0
    // (check_both == 1 )
    ==[EQ_u2_u1_1269_inst] (check_both_1263 konst_1268_wire_constant) (EQ_u2_u1_1269_wire)   $flowthrough 
    $delay EQ_u2_u1_1269_inst 0
    ==0? [if_stmt_1266_branch] (EQ_u2_u1_1269_wire)
    // datapath-instances for block %accelerator%check_start%check_filter%loop
    //  file prog.linked.opt.aa, line 292
    // datapath-instances for do-while  
    //  file prog.linked.opt.aa, line 294
    // (ele < 14 )
    <[ULT_u7_u1_1399_inst] (ele_1273 konst_1398_wire_constant) (ULT_u7_u1_1399_wire)   $flowthrough 
    $delay ULT_u7_u1_1399_inst 0
    ==0? [do_while_stmt_1271_branch] (ULT_u7_u1_1399_wire)
    $flowthrough
    // data-path instances for merge  
    //  file prog.linked.opt.aa, line 296
    // 					$phi ele := 					  ($bitcast ($uint<7>) 0  ) $on   $entry 					  n_ele $on   $loopback 
    // type of target is $uint<7>
    //  file prog.linked.opt.aa, line 297
    # := [n_ele_1313_1278_buf] (n_ele_1313) (n_ele_1313_1278_buffered)    $fullrate
    $buffering $out n_ele_1313_1278_buf n_ele_1313_1278_buffered  1
    # $phi [phi_stmt_1273] (type_cast_1277_wire_constant n_ele_1313_1278_buffered) ( ele_1273 ) $fullrate
    // $buffering  $out phi_stmt_1273 ele_1273 2
    // 					$phi J := 					  ($bitcast ($uint<5>) 0  ) $on   $entry 					  n_J $on   $loopback 
    // type of target is $uint<5>
    //  file prog.linked.opt.aa, line 299
    # := [n_J_1324_1283_buf] (n_J_1324) (n_J_1324_1283_buffered)    $fullrate
    $buffering $out n_J_1324_1283_buf n_J_1324_1283_buffered  1
    # $phi [phi_stmt_1279] (type_cast_1282_wire_constant n_J_1324_1283_buffered) ( J_1279 ) $fullrate
    // $buffering  $out phi_stmt_1279 J_1279 2
    // 					$phi I := 					  ($bitcast ($uint<6>) 0  ) $on   $entry 					  n_I $on   $loopback 
    // type of target is $uint<6>
    //  file prog.linked.opt.aa, line 301
    # := [n_I_1335_1288_buf] (n_I_1335) (n_I_1335_1288_buffered)    $fullrate
    $buffering $out n_I_1335_1288_buf n_I_1335_1288_buffered  1
    # $phi [phi_stmt_1284] (type_cast_1287_wire_constant n_I_1335_1288_buffered) ( I_1284 ) $fullrate
    // $buffering  $out phi_stmt_1284 I_1284 2
    // 					$phi col_to_be_replaced := 					  ($bitcast ($uint<2>) 3  ) $on   $entry 					  n_col_to_be_replaced $on   $loopback 
    // type of target is $uint<2>
    //  file prog.linked.opt.aa, line 303
    # := [n_col_to_be_replaced_1342_1293_buf] (n_col_to_be_replaced_1342) (n_col_to_be_replaced_1342_1293_buffered)    $fullrate
    $buffering $out n_col_to_be_replaced_1342_1293_buf n_col_to_be_replaced_1342_1293_buffered  1
    # $phi [phi_stmt_1289] (type_cast_1292_wire_constant n_col_to_be_replaced_1342_1293_buffered) ( col_to_be_replaced_1289 ) $fullrate
    // $buffering  $out phi_stmt_1289 col_to_be_replaced_1289 2
    // 					$volatile I_1 := ($bitcast ($uint<6>) (I + 1 ) )
    //  file prog.linked.opt.aa, line 306
    // (I + 1 )
    +[ADD_u6_u6_1298_inst] (I_1284 konst_1297_wire_constant) (ADD_u6_u6_1298_wire)   $flowthrough 
    $delay ADD_u6_u6_1298_inst 0
    // ($bitcast ($uint<6>) (I + 1 ) )
    # := [type_cast_1299_inst] (ADD_u6_u6_1298_wire) (I_1_1300)   $flowthrough
    $delay type_cast_1299_inst 0
    // 					$call initIfMaps (($bitcast ($uint<1>) 1  ) I J col_to_be_replaced ) (initialized_ifmaps ) 
    //  file prog.linked.opt.aa, line 307
    $call [call_stmt_1307_call] $module initIfMaps(type_cast_1302_wire_constant I_1284 J_1279 col_to_be_replaced_1289) (initialized_ifmaps_1307)   $fullrate
    $delay call_stmt_1307_call 4
    $buffering  $in call_stmt_1307_call type_cast_1302_wire_constant 1
    $buffering  $in call_stmt_1307_call I_1284 1
    $buffering  $in call_stmt_1307_call J_1279 1
    $buffering  $in call_stmt_1307_call col_to_be_replaced_1289 1
    $buffering  $out call_stmt_1307_call initialized_ifmaps_1307 1
    // 					$volatile n_ele := ($bitcast ($uint<7>) (ele + 1 ) )
    //  file prog.linked.opt.aa, line 308
    // (ele + 1 )
    +[ADD_u7_u7_1311_inst] (ele_1273 konst_1310_wire_constant) (ADD_u7_u7_1311_wire)   $flowthrough 
    $delay ADD_u7_u7_1311_inst 0
    // ($bitcast ($uint<7>) (ele + 1 ) )
    # := [type_cast_1312_inst] (ADD_u7_u7_1311_wire) (n_ele_1313)   $flowthrough
    $delay type_cast_1312_inst 0
    // 					$volatile n_J := ( $mux (J < 4 ) (J + 1 )  ($bitcast ($uint<5>) 0  ) ) 
    //  file prog.linked.opt.aa, line 309
    // (J < 4 )
    <[ULT_u5_u1_1317_inst] (J_1279 konst_1316_wire_constant) (ULT_u5_u1_1317_wire)   $flowthrough 
    $delay ULT_u5_u1_1317_inst 0
    // (J + 1 )
    +[ADD_u5_u5_1320_inst] (J_1279 konst_1319_wire_constant) (ADD_u5_u5_1320_wire)   $flowthrough 
    $delay ADD_u5_u5_1320_inst 0
    // ( $mux (J < 4 ) (J + 1 )  ($bitcast ($uint<5>) 0  ) ) 
    ? [MUX_1323_inst] (ULT_u5_u1_1317_wire ADD_u5_u5_1320_wire type_cast_1322_wire_constant) (n_J_1324)  $flowthrough
    // 					$volatile n_I := ( $mux (J == 4 ) ($bitcast ($uint<6>) (I + 2 ) )  I ) 
    //  file prog.linked.opt.aa, line 310
    // (J == 4 )
    ==[EQ_u5_u1_1328_inst] (J_1279 konst_1327_wire_constant) (EQ_u5_u1_1328_wire)   $flowthrough 
    $delay EQ_u5_u1_1328_inst 0
    // (I + 2 )
    +[ADD_u6_u6_1331_inst] (I_1284 konst_1330_wire_constant) (ADD_u6_u6_1331_wire)   $flowthrough 
    $delay ADD_u6_u6_1331_inst 0
    // ($bitcast ($uint<6>) (I + 2 ) )
    # := [type_cast_1332_inst] (ADD_u6_u6_1331_wire) (type_cast_1332_wire)   $flowthrough
    $delay type_cast_1332_inst 0
    // ( $mux (J == 4 ) ($bitcast ($uint<6>) (I + 2 ) )  I ) 
    ? [MUX_1334_inst] (EQ_u5_u1_1328_wire type_cast_1332_wire I_1284) (n_I_1335)  $flowthrough
    // 					$call cal_col_to_be_replaced (J col_to_be_replaced ) (new_col_to_be_replaced )  $buffering 2
    //  file prog.linked.opt.aa, line 311
    $call [call_stmt_1339_call] $module cal_col_to_be_replaced(J_1279 col_to_be_replaced_1289) (new_col_to_be_replaced_1339)   $fullrate
    $delay call_stmt_1339_call 4
    $buffering  $in call_stmt_1339_call J_1279 2
    $buffering  $in call_stmt_1339_call col_to_be_replaced_1289 2
    $buffering  $out call_stmt_1339_call new_col_to_be_replaced_1339 2
    // 					$volatile n_col_to_be_replaced := new_col_to_be_replaced
    //  file prog.linked.opt.aa, line 312
    # := [W_n_col_to_be_replaced_1340_inst] (new_col_to_be_replaced_1339) (n_col_to_be_replaced_1342)   $flowthrough 
    // 					$call mainAcc (I J col_to_be_replaced ) (ofmap_pixel ) 
    //  file prog.linked.opt.aa, line 313
    $call [call_stmt_1347_call] $module mainAcc(I_1284 J_1279 col_to_be_replaced_1289) (ofmap_pixel_1347)   $fullrate
    $delay call_stmt_1347_call 4
    $buffering  $in call_stmt_1347_call I_1284 1
    $buffering  $in call_stmt_1347_call J_1279 1
    $buffering  $in call_stmt_1347_call col_to_be_replaced_1289 1
    $buffering  $out call_stmt_1347_call ofmap_pixel_1347 1
    // 					$volatile checkIFour := ( $mux (I == 4 ) ($bitcast ($uint<1>) 1  )  ($bitcast ($uint<1>) 0  ) ) 
    //  file prog.linked.opt.aa, line 314
    // (I == 4 )
    ==[EQ_u6_u1_1351_inst] (I_1284 konst_1350_wire_constant) (EQ_u6_u1_1351_wire)   $flowthrough 
    $delay EQ_u6_u1_1351_inst 0
    // ( $mux (I == 4 ) ($bitcast ($uint<1>) 1  )  ($bitcast ($uint<1>) 0  ) ) 
    ? [MUX_1356_inst] (EQ_u6_u1_1351_wire type_cast_1353_wire_constant type_cast_1355_wire_constant) (checkIFour_1357)  $flowthrough
    // 					$guard (~checkIFour) $call mainAcc2 (I_1 J col_to_be_replaced ) (ofmap_pixel2 ) 
    //  file prog.linked.opt.aa, line 315
    $call [call_stmt_1363_call] $module mainAcc2(I_1_1300 J_1279 col_to_be_replaced_1289) (ofmap_pixel2_1363) $guard ( ~ checkIFour_1357 )   $fullrate
    $delay call_stmt_1363_call 4
    $buffering  $in call_stmt_1363_call I_1_1300 1
    $buffering  $in call_stmt_1363_call J_1279 1
    $buffering  $in call_stmt_1363_call col_to_be_replaced_1289 1
    $buffering  $out call_stmt_1363_call ofmap_pixel2_1363 1
    // 					read_sums := ($bitcast ($uint<16>) ele )// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 316
    // ($bitcast ($uint<16>) ele )
    # := [type_cast_1366_inst] (ele_1273) (type_cast_1366_wire)    $fullrate
    $buffering  $out type_cast_1366_inst type_cast_1366_wire 1
    $delay type_cast_1366_inst 1
    // read_sums
    $ioport $out [WPIPE_read_sums_1364_inst]  (type_cast_1366_wire) (read_sums)  $fullrate 
    // 					I_1457_delayed_4_0 := I $buffering 4// bits of buffering = 24. 
    //  file prog.linked.opt.aa, line 317
    # := [W_I_1457_delayed_4_0_1368_inst] (I_1284) (I_1457_delayed_4_0_1370)    $fullrate
    $buffering  $out W_I_1457_delayed_4_0_1368_inst I_1457_delayed_4_0_1370 4
    // 					J_1458_delayed_4_0 := J $buffering 4// bits of buffering = 20. 
    //  file prog.linked.opt.aa, line 318
    # := [W_J_1458_delayed_4_0_1371_inst] (J_1279) (J_1458_delayed_4_0_1373)    $fullrate
    $buffering  $out W_J_1458_delayed_4_0_1371_inst J_1458_delayed_4_0_1373 4
    // 					$call accessMem (write_signal I_1457_delayed_4_0 J_1458_delayed_4_0 ofmap_pixel ) (r_data_sum_cal ) 
    //  file prog.linked.opt.aa, line 319
    $call [call_stmt_1379_call] $module accessMem(R_write_signal_1374_wire_constant I_1457_delayed_4_0_1370 J_1458_delayed_4_0_1373 ofmap_pixel_1347) (r_data_sum_cal_1379)   $fullrate
    $delay call_stmt_1379_call 7
    $buffering  $in call_stmt_1379_call R_write_signal_1374_wire_constant 1
    $buffering  $in call_stmt_1379_call I_1457_delayed_4_0_1370 1
    $buffering  $in call_stmt_1379_call J_1458_delayed_4_0_1373 1
    $buffering  $in call_stmt_1379_call ofmap_pixel_1347 1
    $buffering  $out call_stmt_1379_call r_data_sum_cal_1379 1
    // 					checkIFour_1462_delayed_4_0 := checkIFour $buffering 4// bits of buffering = 4. 
    //  file prog.linked.opt.aa, line 320
    # := [W_checkIFour_1462_delayed_4_0_1380_inst] (checkIFour_1357) (checkIFour_1462_delayed_4_0_1382)    $fullrate
    $buffering  $out W_checkIFour_1462_delayed_4_0_1380_inst checkIFour_1462_delayed_4_0_1382 4
    // 					I_1_1464_delayed_4_0 := I_1 $buffering 4// bits of buffering = 24. 
    //  file prog.linked.opt.aa, line 321
    # := [W_I_1_1464_delayed_4_0_1383_inst] (I_1_1300) (I_1_1464_delayed_4_0_1385)    $fullrate
    $buffering  $out W_I_1_1464_delayed_4_0_1383_inst I_1_1464_delayed_4_0_1385 4
    // 					J_1465_delayed_4_0 := J $buffering 4// bits of buffering = 20. 
    //  file prog.linked.opt.aa, line 322
    # := [W_J_1465_delayed_4_0_1386_inst] (J_1279) (J_1465_delayed_4_0_1388)    $fullrate
    $buffering  $out W_J_1465_delayed_4_0_1386_inst J_1465_delayed_4_0_1388 4
    // 					$guard (~checkIFour_1462_delayed_4_0) $call accessMem (write_signal I_1_1464_delayed_4_0 J_1465_delayed_4_0 ofmap_pixel2 ) (r_data_sum_cal2 ) 
    //  file prog.linked.opt.aa, line 323
    $call [call_stmt_1395_call] $module accessMem(R_write_signal_1390_wire_constant I_1_1464_delayed_4_0_1385 J_1465_delayed_4_0_1388 ofmap_pixel2_1363) (r_data_sum_cal2_1395) $guard ( ~ checkIFour_1462_delayed_4_0_1382 )   $fullrate
    $delay call_stmt_1395_call 7
    $buffering  $in call_stmt_1395_call R_write_signal_1390_wire_constant 1
    $buffering  $in call_stmt_1395_call I_1_1464_delayed_4_0_1385 1
    $buffering  $in call_stmt_1395_call J_1465_delayed_4_0_1388 1
    $buffering  $in call_stmt_1395_call ofmap_pixel2_1363 1
    $buffering  $out call_stmt_1395_call r_data_sum_cal2_1395 1
    // 				accelerator_done := ($bitcast ($uint<16>) 1  )// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 326
    // accelerator_done
    $ioport $out [WPIPE_accelerator_done_1401_inst]  (type_cast_1403_wire_constant) (accelerator_done) 
  }
  // end data-path
  // CP-DP links for merge  
  //  file prog.linked.opt.aa, line 278
  n_iter_1256_1243_buf <=> (branch_block_stmt_1237/check_for_start_PhiReq/phi_stmt_1239/phi_stmt_1239_sources/Interlock/Sample/req branch_block_stmt_1237/check_for_start_PhiReq/phi_stmt_1239/phi_stmt_1239_sources/Interlock/Update/req) (branch_block_stmt_1237/check_for_start_PhiReq/phi_stmt_1239/phi_stmt_1239_sources/Interlock/Sample/ack branch_block_stmt_1237/check_for_start_PhiReq/phi_stmt_1239/phi_stmt_1239_sources/Interlock/Update/ack)
  phi_stmt_1239 <=> (branch_block_stmt_1237/merge_stmt_1238__entry___PhiReq/phi_stmt_1239/phi_stmt_1239_req branch_block_stmt_1237/check_for_start_PhiReq/phi_stmt_1239/phi_stmt_1239_req) (branch_block_stmt_1237/merge_stmt_1238_PhiAck/phi_stmt_1239_ack)
  // 		$volatile cmd := start_accelerator
  //  file prog.linked.opt.aa, line 282
  // start_accelerator
  RPIPE_start_accelerator_1246_inst <=> (branch_block_stmt_1237/assign_stmt_1247/RPIPE_start_accelerator_1246_Sample/rr branch_block_stmt_1237/assign_stmt_1247/RPIPE_start_accelerator_1246_Update/cr) (branch_block_stmt_1237/assign_stmt_1247/RPIPE_start_accelerator_1246_Sample/ra branch_block_stmt_1237/assign_stmt_1247/RPIPE_start_accelerator_1246_Update/ca)
  // CP-DP links for if  
  //  file prog.linked.opt.aa, line 0
  // (cmd == iter)
  if_stmt_1248_branch <=> (branch_block_stmt_1237/if_stmt_1248_eval_test/branch_req) (branch_block_stmt_1237/if_stmt_1248_else_link/else_choice_transition branch_block_stmt_1237/if_stmt_1248_if_link/if_choice_transition)
  // 			$volatile n_iter := (iter + 1 )
  //  file prog.linked.opt.aa, line 284
  // (iter + 1 )
  // iter
  // 			$call initFilter (filter_start_addr ) (initialized_filter ) 
  //  file prog.linked.opt.aa, line 285
  call_stmt_1259_call <=> (branch_block_stmt_1237/assign_stmt_1256_to_assign_stmt_1263/call_stmt_1259_Sample/crr branch_block_stmt_1237/assign_stmt_1256_to_assign_stmt_1263/call_stmt_1259_Update/ccr) (branch_block_stmt_1237/assign_stmt_1256_to_assign_stmt_1263/call_stmt_1259_Sample/cra branch_block_stmt_1237/assign_stmt_1256_to_assign_stmt_1263/call_stmt_1259_Update/cca)
  // 			$volatile check_both := ($bitcast ($uint<2>) initialized_filter )
  //  file prog.linked.opt.aa, line 286
  // initialized_filter
  // CP-DP links for merge  
  //  file prog.linked.opt.aa, line 289
  // CP-DP links for if  
  //  file prog.linked.opt.aa, line 0
  // (check_both == 1 )
  if_stmt_1266_branch <=> (branch_block_stmt_1237/branch_block_stmt_1264/if_stmt_1266_eval_test/branch_req) (branch_block_stmt_1237/branch_block_stmt_1264/if_stmt_1266_else_link/else_choice_transition branch_block_stmt_1237/branch_block_stmt_1264/if_stmt_1266_if_link/if_choice_transition)
  // CP-DP links for do-while  do_while_stmt_1271
  //  file prog.linked.opt.aa, line 294
  phi_stmt_1273 <=> (branch_block_stmt_1237/branch_block_stmt_1264/branch_block_stmt_1270/do_while_stmt_1271/do_while_stmt_1271_loop_body/phi_stmt_1273_entry_sample_req branch_block_stmt_1237/branch_block_stmt_1264/branch_block_stmt_1270/do_while_stmt_1271/do_while_stmt_1271_loop_body/phi_stmt_1273_loopback_sample_req) (branch_block_stmt_1237/branch_block_stmt_1264/branch_block_stmt_1270/do_while_stmt_1271/do_while_stmt_1271_loop_body/phi_stmt_1273_phi_mux_ack)
  n_ele_1313_1278_buf <=> (branch_block_stmt_1237/branch_block_stmt_1264/branch_block_stmt_1270/do_while_stmt_1271/do_while_stmt_1271_loop_body/R_n_ele_1278_Sample/req branch_block_stmt_1237/branch_block_stmt_1264/branch_block_stmt_1270/do_while_stmt_1271/do_while_stmt_1271_loop_body/R_n_ele_1278_Update/req) (branch_block_stmt_1237/branch_block_stmt_1264/branch_block_stmt_1270/do_while_stmt_1271/do_while_stmt_1271_loop_body/R_n_ele_1278_Sample/ack branch_block_stmt_1237/branch_block_stmt_1264/branch_block_stmt_1270/do_while_stmt_1271/do_while_stmt_1271_loop_body/R_n_ele_1278_Update/ack)
  phi_stmt_1279 <=> (branch_block_stmt_1237/branch_block_stmt_1264/branch_block_stmt_1270/do_while_stmt_1271/do_while_stmt_1271_loop_body/phi_stmt_1279_entry_sample_req branch_block_stmt_1237/branch_block_stmt_1264/branch_block_stmt_1270/do_while_stmt_1271/do_while_stmt_1271_loop_body/phi_stmt_1279_loopback_sample_req) (branch_block_stmt_1237/branch_block_stmt_1264/branch_block_stmt_1270/do_while_stmt_1271/do_while_stmt_1271_loop_body/phi_stmt_1279_phi_mux_ack)
  n_J_1324_1283_buf <=> (branch_block_stmt_1237/branch_block_stmt_1264/branch_block_stmt_1270/do_while_stmt_1271/do_while_stmt_1271_loop_body/R_n_J_1283_Sample/req branch_block_stmt_1237/branch_block_stmt_1264/branch_block_stmt_1270/do_while_stmt_1271/do_while_stmt_1271_loop_body/R_n_J_1283_Update/req) (branch_block_stmt_1237/branch_block_stmt_1264/branch_block_stmt_1270/do_while_stmt_1271/do_while_stmt_1271_loop_body/R_n_J_1283_Sample/ack branch_block_stmt_1237/branch_block_stmt_1264/branch_block_stmt_1270/do_while_stmt_1271/do_while_stmt_1271_loop_body/R_n_J_1283_Update/ack)
  phi_stmt_1284 <=> (branch_block_stmt_1237/branch_block_stmt_1264/branch_block_stmt_1270/do_while_stmt_1271/do_while_stmt_1271_loop_body/phi_stmt_1284_entry_sample_req branch_block_stmt_1237/branch_block_stmt_1264/branch_block_stmt_1270/do_while_stmt_1271/do_while_stmt_1271_loop_body/phi_stmt_1284_loopback_sample_req) (branch_block_stmt_1237/branch_block_stmt_1264/branch_block_stmt_1270/do_while_stmt_1271/do_while_stmt_1271_loop_body/phi_stmt_1284_phi_mux_ack)
  n_I_1335_1288_buf <=> (branch_block_stmt_1237/branch_block_stmt_1264/branch_block_stmt_1270/do_while_stmt_1271/do_while_stmt_1271_loop_body/R_n_I_1288_Sample/req branch_block_stmt_1237/branch_block_stmt_1264/branch_block_stmt_1270/do_while_stmt_1271/do_while_stmt_1271_loop_body/R_n_I_1288_Update/req) (branch_block_stmt_1237/branch_block_stmt_1264/branch_block_stmt_1270/do_while_stmt_1271/do_while_stmt_1271_loop_body/R_n_I_1288_Sample/ack branch_block_stmt_1237/branch_block_stmt_1264/branch_block_stmt_1270/do_while_stmt_1271/do_while_stmt_1271_loop_body/R_n_I_1288_Update/ack)
  phi_stmt_1289 <=> (branch_block_stmt_1237/branch_block_stmt_1264/branch_block_stmt_1270/do_while_stmt_1271/do_while_stmt_1271_loop_body/phi_stmt_1289_entry_sample_req branch_block_stmt_1237/branch_block_stmt_1264/branch_block_stmt_1270/do_while_stmt_1271/do_while_stmt_1271_loop_body/phi_stmt_1289_loopback_sample_req) (branch_block_stmt_1237/branch_block_stmt_1264/branch_block_stmt_1270/do_while_stmt_1271/do_while_stmt_1271_loop_body/phi_stmt_1289_phi_mux_ack)
  n_col_to_be_replaced_1342_1293_buf <=> (branch_block_stmt_1237/branch_block_stmt_1264/branch_block_stmt_1270/do_while_stmt_1271/do_while_stmt_1271_loop_body/R_n_col_to_be_replaced_1293_Sample/req branch_block_stmt_1237/branch_block_stmt_1264/branch_block_stmt_1270/do_while_stmt_1271/do_while_stmt_1271_loop_body/R_n_col_to_be_replaced_1293_Update/req) (branch_block_stmt_1237/branch_block_stmt_1264/branch_block_stmt_1270/do_while_stmt_1271/do_while_stmt_1271_loop_body/R_n_col_to_be_replaced_1293_Sample/ack branch_block_stmt_1237/branch_block_stmt_1264/branch_block_stmt_1270/do_while_stmt_1271/do_while_stmt_1271_loop_body/R_n_col_to_be_replaced_1293_Update/ack)
  // 					$volatile I_1 := ($bitcast ($uint<6>) (I + 1 ) )
  //  file prog.linked.opt.aa, line 306
  // (I + 1 )
  // I
  // 					$call initIfMaps (($bitcast ($uint<1>) 1  ) I J col_to_be_replaced ) (initialized_ifmaps ) 
  //  file prog.linked.opt.aa, line 307
  // I
  // J
  // col_to_be_replaced
  call_stmt_1307_call <=> (branch_block_stmt_1237/branch_block_stmt_1264/branch_block_stmt_1270/do_while_stmt_1271/do_while_stmt_1271_loop_body/call_stmt_1307_Sample/crr branch_block_stmt_1237/branch_block_stmt_1264/branch_block_stmt_1270/do_while_stmt_1271/do_while_stmt_1271_loop_body/call_stmt_1307_Update/ccr) (branch_block_stmt_1237/branch_block_stmt_1264/branch_block_stmt_1270/do_while_stmt_1271/do_while_stmt_1271_loop_body/call_stmt_1307_Sample/cra branch_block_stmt_1237/branch_block_stmt_1264/branch_block_stmt_1270/do_while_stmt_1271/do_while_stmt_1271_loop_body/call_stmt_1307_Update/cca)
  // 					$volatile n_ele := ($bitcast ($uint<7>) (ele + 1 ) )
  //  file prog.linked.opt.aa, line 308
  // (ele + 1 )
  // ele
  // 					$volatile n_J := ( $mux (J < 4 ) (J + 1 )  ($bitcast ($uint<5>) 0  ) ) 
  //  file prog.linked.opt.aa, line 309
  // (J < 4 )
  // J
  // (J + 1 )
  // J
  // ( $mux (J < 4 ) (J + 1 )  ($bitcast ($uint<5>) 0  ) ) 
  // 					$volatile n_I := ( $mux (J == 4 ) ($bitcast ($uint<6>) (I + 2 ) )  I ) 
  //  file prog.linked.opt.aa, line 310
  // (J == 4 )
  // J
  // (I + 2 )
  // I
  // I
  // ( $mux (J == 4 ) ($bitcast ($uint<6>) (I + 2 ) )  I ) 
  // 					$call cal_col_to_be_replaced (J col_to_be_replaced ) (new_col_to_be_replaced )  $buffering 2
  //  file prog.linked.opt.aa, line 311
  // J
  // col_to_be_replaced
  call_stmt_1339_call <=> (branch_block_stmt_1237/branch_block_stmt_1264/branch_block_stmt_1270/do_while_stmt_1271/do_while_stmt_1271_loop_body/call_stmt_1339_Sample/crr branch_block_stmt_1237/branch_block_stmt_1264/branch_block_stmt_1270/do_while_stmt_1271/do_while_stmt_1271_loop_body/call_stmt_1339_Update/ccr) (branch_block_stmt_1237/branch_block_stmt_1264/branch_block_stmt_1270/do_while_stmt_1271/do_while_stmt_1271_loop_body/call_stmt_1339_Sample/cra branch_block_stmt_1237/branch_block_stmt_1264/branch_block_stmt_1270/do_while_stmt_1271/do_while_stmt_1271_loop_body/call_stmt_1339_Update/cca)
  // 					$volatile n_col_to_be_replaced := new_col_to_be_replaced
  //  file prog.linked.opt.aa, line 312
  // new_col_to_be_replaced
  // 					$call mainAcc (I J col_to_be_replaced ) (ofmap_pixel ) 
  //  file prog.linked.opt.aa, line 313
  // I
  // J
  // col_to_be_replaced
  call_stmt_1347_call <=> (branch_block_stmt_1237/branch_block_stmt_1264/branch_block_stmt_1270/do_while_stmt_1271/do_while_stmt_1271_loop_body/call_stmt_1347_Sample/crr branch_block_stmt_1237/branch_block_stmt_1264/branch_block_stmt_1270/do_while_stmt_1271/do_while_stmt_1271_loop_body/call_stmt_1347_Update/ccr) (branch_block_stmt_1237/branch_block_stmt_1264/branch_block_stmt_1270/do_while_stmt_1271/do_while_stmt_1271_loop_body/call_stmt_1347_Sample/cra branch_block_stmt_1237/branch_block_stmt_1264/branch_block_stmt_1270/do_while_stmt_1271/do_while_stmt_1271_loop_body/call_stmt_1347_Update/cca)
  // 					$volatile checkIFour := ( $mux (I == 4 ) ($bitcast ($uint<1>) 1  )  ($bitcast ($uint<1>) 0  ) ) 
  //  file prog.linked.opt.aa, line 314
  // (I == 4 )
  // I
  // ( $mux (I == 4 ) ($bitcast ($uint<1>) 1  )  ($bitcast ($uint<1>) 0  ) ) 
  // 					$guard (~checkIFour) $call mainAcc2 (I_1 J col_to_be_replaced ) (ofmap_pixel2 ) 
  //  file prog.linked.opt.aa, line 315
  // I_1
  // J
  // col_to_be_replaced
  call_stmt_1363_call <=> (branch_block_stmt_1237/branch_block_stmt_1264/branch_block_stmt_1270/do_while_stmt_1271/do_while_stmt_1271_loop_body/call_stmt_1363_Sample/crr branch_block_stmt_1237/branch_block_stmt_1264/branch_block_stmt_1270/do_while_stmt_1271/do_while_stmt_1271_loop_body/call_stmt_1363_Update/ccr) (branch_block_stmt_1237/branch_block_stmt_1264/branch_block_stmt_1270/do_while_stmt_1271/do_while_stmt_1271_loop_body/call_stmt_1363_Sample/cra branch_block_stmt_1237/branch_block_stmt_1264/branch_block_stmt_1270/do_while_stmt_1271/do_while_stmt_1271_loop_body/call_stmt_1363_Update/cca)
  // 					read_sums := ($bitcast ($uint<16>) ele )// bits of buffering = 16. 
  //  file prog.linked.opt.aa, line 316
  // ele
  // ($bitcast ($uint<16>) ele )
  type_cast_1366_inst <=> (branch_block_stmt_1237/branch_block_stmt_1264/branch_block_stmt_1270/do_while_stmt_1271/do_while_stmt_1271_loop_body/type_cast_1366_Sample/rr branch_block_stmt_1237/branch_block_stmt_1264/branch_block_stmt_1270/do_while_stmt_1271/do_while_stmt_1271_loop_body/type_cast_1366_Update/cr) (branch_block_stmt_1237/branch_block_stmt_1264/branch_block_stmt_1270/do_while_stmt_1271/do_while_stmt_1271_loop_body/type_cast_1366_Sample/ra branch_block_stmt_1237/branch_block_stmt_1264/branch_block_stmt_1270/do_while_stmt_1271/do_while_stmt_1271_loop_body/type_cast_1366_Update/ca)
  // read_sums
  WPIPE_read_sums_1364_inst <=> (branch_block_stmt_1237/branch_block_stmt_1264/branch_block_stmt_1270/do_while_stmt_1271/do_while_stmt_1271_loop_body/WPIPE_read_sums_1364_Sample/req branch_block_stmt_1237/branch_block_stmt_1264/branch_block_stmt_1270/do_while_stmt_1271/do_while_stmt_1271_loop_body/WPIPE_read_sums_1364_Update/req) (branch_block_stmt_1237/branch_block_stmt_1264/branch_block_stmt_1270/do_while_stmt_1271/do_while_stmt_1271_loop_body/WPIPE_read_sums_1364_Sample/ack branch_block_stmt_1237/branch_block_stmt_1264/branch_block_stmt_1270/do_while_stmt_1271/do_while_stmt_1271_loop_body/WPIPE_read_sums_1364_Update/ack)
  // 					I_1457_delayed_4_0 := I $buffering 4// bits of buffering = 24. 
  //  file prog.linked.opt.aa, line 317
  // I
  W_I_1457_delayed_4_0_1368_inst <=> (branch_block_stmt_1237/branch_block_stmt_1264/branch_block_stmt_1270/do_while_stmt_1271/do_while_stmt_1271_loop_body/assign_stmt_1370_Sample/req branch_block_stmt_1237/branch_block_stmt_1264/branch_block_stmt_1270/do_while_stmt_1271/do_while_stmt_1271_loop_body/assign_stmt_1370_Update/req) (branch_block_stmt_1237/branch_block_stmt_1264/branch_block_stmt_1270/do_while_stmt_1271/do_while_stmt_1271_loop_body/assign_stmt_1370_Sample/ack branch_block_stmt_1237/branch_block_stmt_1264/branch_block_stmt_1270/do_while_stmt_1271/do_while_stmt_1271_loop_body/assign_stmt_1370_Update/ack)
  // 					J_1458_delayed_4_0 := J $buffering 4// bits of buffering = 20. 
  //  file prog.linked.opt.aa, line 318
  // J
  W_J_1458_delayed_4_0_1371_inst <=> (branch_block_stmt_1237/branch_block_stmt_1264/branch_block_stmt_1270/do_while_stmt_1271/do_while_stmt_1271_loop_body/assign_stmt_1373_Sample/req branch_block_stmt_1237/branch_block_stmt_1264/branch_block_stmt_1270/do_while_stmt_1271/do_while_stmt_1271_loop_body/assign_stmt_1373_Update/req) (branch_block_stmt_1237/branch_block_stmt_1264/branch_block_stmt_1270/do_while_stmt_1271/do_while_stmt_1271_loop_body/assign_stmt_1373_Sample/ack branch_block_stmt_1237/branch_block_stmt_1264/branch_block_stmt_1270/do_while_stmt_1271/do_while_stmt_1271_loop_body/assign_stmt_1373_Update/ack)
  // 					$call accessMem (write_signal I_1457_delayed_4_0 J_1458_delayed_4_0 ofmap_pixel ) (r_data_sum_cal ) 
  //  file prog.linked.opt.aa, line 319
  // I_1457_delayed_4_0
  // J_1458_delayed_4_0
  // ofmap_pixel
  call_stmt_1379_call <=> (branch_block_stmt_1237/branch_block_stmt_1264/branch_block_stmt_1270/do_while_stmt_1271/do_while_stmt_1271_loop_body/call_stmt_1379_Sample/crr branch_block_stmt_1237/branch_block_stmt_1264/branch_block_stmt_1270/do_while_stmt_1271/do_while_stmt_1271_loop_body/call_stmt_1379_Update/ccr) (branch_block_stmt_1237/branch_block_stmt_1264/branch_block_stmt_1270/do_while_stmt_1271/do_while_stmt_1271_loop_body/call_stmt_1379_Sample/cra branch_block_stmt_1237/branch_block_stmt_1264/branch_block_stmt_1270/do_while_stmt_1271/do_while_stmt_1271_loop_body/call_stmt_1379_Update/cca)
  // 					checkIFour_1462_delayed_4_0 := checkIFour $buffering 4// bits of buffering = 4. 
  //  file prog.linked.opt.aa, line 320
  // checkIFour
  W_checkIFour_1462_delayed_4_0_1380_inst <=> (branch_block_stmt_1237/branch_block_stmt_1264/branch_block_stmt_1270/do_while_stmt_1271/do_while_stmt_1271_loop_body/assign_stmt_1382_Sample/req branch_block_stmt_1237/branch_block_stmt_1264/branch_block_stmt_1270/do_while_stmt_1271/do_while_stmt_1271_loop_body/assign_stmt_1382_Update/req) (branch_block_stmt_1237/branch_block_stmt_1264/branch_block_stmt_1270/do_while_stmt_1271/do_while_stmt_1271_loop_body/assign_stmt_1382_Sample/ack branch_block_stmt_1237/branch_block_stmt_1264/branch_block_stmt_1270/do_while_stmt_1271/do_while_stmt_1271_loop_body/assign_stmt_1382_Update/ack)
  // 					I_1_1464_delayed_4_0 := I_1 $buffering 4// bits of buffering = 24. 
  //  file prog.linked.opt.aa, line 321
  // I_1
  W_I_1_1464_delayed_4_0_1383_inst <=> (branch_block_stmt_1237/branch_block_stmt_1264/branch_block_stmt_1270/do_while_stmt_1271/do_while_stmt_1271_loop_body/assign_stmt_1385_Sample/req branch_block_stmt_1237/branch_block_stmt_1264/branch_block_stmt_1270/do_while_stmt_1271/do_while_stmt_1271_loop_body/assign_stmt_1385_Update/req) (branch_block_stmt_1237/branch_block_stmt_1264/branch_block_stmt_1270/do_while_stmt_1271/do_while_stmt_1271_loop_body/assign_stmt_1385_Sample/ack branch_block_stmt_1237/branch_block_stmt_1264/branch_block_stmt_1270/do_while_stmt_1271/do_while_stmt_1271_loop_body/assign_stmt_1385_Update/ack)
  // 					J_1465_delayed_4_0 := J $buffering 4// bits of buffering = 20. 
  //  file prog.linked.opt.aa, line 322
  // J
  W_J_1465_delayed_4_0_1386_inst <=> (branch_block_stmt_1237/branch_block_stmt_1264/branch_block_stmt_1270/do_while_stmt_1271/do_while_stmt_1271_loop_body/assign_stmt_1388_Sample/req branch_block_stmt_1237/branch_block_stmt_1264/branch_block_stmt_1270/do_while_stmt_1271/do_while_stmt_1271_loop_body/assign_stmt_1388_Update/req) (branch_block_stmt_1237/branch_block_stmt_1264/branch_block_stmt_1270/do_while_stmt_1271/do_while_stmt_1271_loop_body/assign_stmt_1388_Sample/ack branch_block_stmt_1237/branch_block_stmt_1264/branch_block_stmt_1270/do_while_stmt_1271/do_while_stmt_1271_loop_body/assign_stmt_1388_Update/ack)
  // 					$guard (~checkIFour_1462_delayed_4_0) $call accessMem (write_signal I_1_1464_delayed_4_0 J_1465_delayed_4_0 ofmap_pixel2 ) (r_data_sum_cal2 ) 
  //  file prog.linked.opt.aa, line 323
  // I_1_1464_delayed_4_0
  // J_1465_delayed_4_0
  // ofmap_pixel2
  call_stmt_1395_call <=> (branch_block_stmt_1237/branch_block_stmt_1264/branch_block_stmt_1270/do_while_stmt_1271/do_while_stmt_1271_loop_body/call_stmt_1395_Sample/crr branch_block_stmt_1237/branch_block_stmt_1264/branch_block_stmt_1270/do_while_stmt_1271/do_while_stmt_1271_loop_body/call_stmt_1395_Update/ccr) (branch_block_stmt_1237/branch_block_stmt_1264/branch_block_stmt_1270/do_while_stmt_1271/do_while_stmt_1271_loop_body/call_stmt_1395_Sample/cra branch_block_stmt_1237/branch_block_stmt_1264/branch_block_stmt_1270/do_while_stmt_1271/do_while_stmt_1271_loop_body/call_stmt_1395_Update/cca)
  // (ele < 14 )
  // ele
  do_while_stmt_1271_branch <=> (branch_block_stmt_1237/branch_block_stmt_1264/branch_block_stmt_1270/do_while_stmt_1271/do_while_stmt_1271_loop_body/condition_evaluated) (branch_block_stmt_1237/branch_block_stmt_1264/branch_block_stmt_1270/do_while_stmt_1271/loop_exit/ack branch_block_stmt_1237/branch_block_stmt_1264/branch_block_stmt_1270/do_while_stmt_1271/loop_taken/ack)
  // 				accelerator_done := ($bitcast ($uint<16>) 1  )// bits of buffering = 16. 
  //  file prog.linked.opt.aa, line 326
  // accelerator_done
  WPIPE_accelerator_done_1401_inst <=> (branch_block_stmt_1237/branch_block_stmt_1264/assign_stmt_1404/WPIPE_accelerator_done_1401_Sample/req branch_block_stmt_1237/branch_block_stmt_1264/assign_stmt_1404/WPIPE_accelerator_done_1401_Update/req) (branch_block_stmt_1237/branch_block_stmt_1264/assign_stmt_1404/WPIPE_accelerator_done_1401_Sample/ack branch_block_stmt_1237/branch_block_stmt_1264/assign_stmt_1404/WPIPE_accelerator_done_1401_Update/ack)
}
$module [global_storage_initializer_] 
{
  // pipe-declarations for block %global_storage_initializer_
  //  file prog.linked.opt.aa, line 334
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %global_storage_initializer_
    //  file prog.linked.opt.aa, line 334
  }
  // end data-path
}
$module [memAccessDaemon] 
{
  // pipe-declarations for block %memAccessDaemon
  //  file prog.linked.opt.aa, line 341
  // pipe-declarations for block %memAccessDaemon%loop
  //  file prog.linked.opt.aa, line 346
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    <>[branch_block_stmt_1416] // Branch Block  file prog.linked.opt.aa, line 346
    {
      $P [branch_block_stmt_1416__entry__]
      branch_block_stmt_1416__entry__ <-| ($entry)
      $P [branch_block_stmt_1416__exit__]
      branch_block_stmt_1416__exit__ |-> ($exit)
      $P [do_while_stmt_1417__entry__] 
      $P [do_while_stmt_1417__exit__] 
      // do-while-statement  
      //  file prog.linked.opt.aa, line 348
      <o> [do_while_stmt_1417]  $depth 20 $buffering 2 
      {
        $P[do_while_stmt_1417__entry__] 
        $P[do_while_stmt_1417__exit__] 
        $P[loop_back] 
        $P[condition_done] 
        $P[loop_body_done] 
        $pipeline [do_while_stmt_1417_loop_body] 
        {
          // Pipelined!
          $T[back_edge_to_loop_body] 
          $T[first_time_through_loop_body] 
          $T[loop_body_start] 
          $T[condition_evaluated] 
          $transitionmerge [entry_tmerge] (back_edge_to_loop_body first_time_through_loop_body) (loop_body_start)
          $entry <-& (loop_body_start)
          // start:  			cmd_1 := env_mem_request_1// bits of buffering = 32. 
          //  file prog.linked.opt.aa, line 352
          // Source expression
          // env_mem_request_1
          $T[RPIPE_env_mem_request_1_1420_sample_start_] 
          $T[RPIPE_env_mem_request_1_1420_sample_completed_] 
          $T[RPIPE_env_mem_request_1_1420_update_start_] 
          $T[RPIPE_env_mem_request_1_1420_update_completed_] 
          ;;[RPIPE_env_mem_request_1_1420_Sample] 
          {
            // pipe read sample
            $T [rr] $T [ra] 
          }
          ;;[RPIPE_env_mem_request_1_1420_Update] 
          {
            // pipe read update
            $T [cr] $T [ca] 
          }
          RPIPE_env_mem_request_1_1420_sample_start_ &-> (RPIPE_env_mem_request_1_1420_Sample)
          RPIPE_env_mem_request_1_1420_sample_completed_ <-& (RPIPE_env_mem_request_1_1420_Sample)
          RPIPE_env_mem_request_1_1420_update_start_ <-& (RPIPE_env_mem_request_1_1420_sample_completed_)
          RPIPE_env_mem_request_1_1420_update_start_ &-> (RPIPE_env_mem_request_1_1420_Update)
          RPIPE_env_mem_request_1_1420_update_completed_ <-& (RPIPE_env_mem_request_1_1420_Update)
          RPIPE_env_mem_request_1_1420_sample_start_ o<-& (RPIPE_env_mem_request_1_1420_update_completed_ 0)
          // Target expression
          // (as target) cmd_1
          // start: WAR dependencies for cmd_1
          // done: WAR dependencies for cmd_1
          // end:  			cmd_1 := env_mem_request_1// bits of buffering = 32. 
          // start: WAR dependencies for wdata1
          // done: WAR dependencies for wdata1
          // start:  			$volatile wdata1 := ( $slice cmd_1 31 16 ) 
          //  file prog.linked.opt.aa, line 353
          // volatile! 
          // Source expression
          // ( $slice cmd_1 31 16 ) 
          // cmd_1
          // Target expression
          // (as target) wdata1
          // start: WAR dependencies for wdata1
          // done: WAR dependencies for wdata1
          // end:  			$volatile wdata1 := ( $slice cmd_1 31 16 ) 
          // start: WAR dependencies for row_index1
          // done: WAR dependencies for row_index1
          // start:  			$volatile row_index1 := ( $slice cmd_1 15 10 ) 
          //  file prog.linked.opt.aa, line 354
          // volatile! 
          // Source expression
          // ( $slice cmd_1 15 10 ) 
          // cmd_1
          // Target expression
          // (as target) row_index1
          // start: WAR dependencies for row_index1
          // done: WAR dependencies for row_index1
          // end:  			$volatile row_index1 := ( $slice cmd_1 15 10 ) 
          // start: WAR dependencies for col_index1
          // done: WAR dependencies for col_index1
          // start:  			$volatile col_index1 := ( $slice cmd_1 9 5 ) 
          //  file prog.linked.opt.aa, line 355
          // volatile! 
          // Source expression
          // ( $slice cmd_1 9 5 ) 
          // cmd_1
          // Target expression
          // (as target) col_index1
          // start: WAR dependencies for col_index1
          // done: WAR dependencies for col_index1
          // end:  			$volatile col_index1 := ( $slice cmd_1 9 5 ) 
          // start: WAR dependencies for rwbar1
          // done: WAR dependencies for rwbar1
          // start:  			$volatile rwbar1 := ( $slice cmd_1 0 0 ) 
          //  file prog.linked.opt.aa, line 356
          // volatile! 
          // Source expression
          // ( $slice cmd_1 0 0 ) 
          // cmd_1
          // Target expression
          // (as target) rwbar1
          // start: WAR dependencies for rwbar1
          // done: WAR dependencies for rwbar1
          // end:  			$volatile rwbar1 := ( $slice cmd_1 0 0 ) 
          // start: 			$call accessMem (rwbar1 row_index1 col_index1 wdata1 ) (rdata1 ) 
          //  file prog.linked.opt.aa, line 357
          $T[call_stmt_1443_sample_start_] 
          $T[call_stmt_1443_sample_completed_] 
          $T[call_stmt_1443_update_start_] 
          $T[call_stmt_1443_update_completed_] 
          // Call input argument 0
          // rwbar1
          // Call input argument 1
          // row_index1
          // Call input argument 2
          // col_index1
          // Call input argument 3
          // wdata1
          // start: Forward dependencies from rwbar1 to transition call_stmt_1443_sample_start_
          call_stmt_1443_sample_start_ <-& (RPIPE_env_mem_request_1_1420_update_completed_)
          // done: Forward dependencies from rwbar1 to transition call_stmt_1443_sample_start_
          // RAW reenables for rwbar1
          RPIPE_env_mem_request_1_1420_update_start_ o<-& (call_stmt_1443_sample_completed_ 0)
          // start: Forward dependencies from row_index1 to transition call_stmt_1443_sample_start_
          call_stmt_1443_sample_start_ <-& (RPIPE_env_mem_request_1_1420_update_completed_)
          // done: Forward dependencies from row_index1 to transition call_stmt_1443_sample_start_
          // RAW reenables for row_index1
          RPIPE_env_mem_request_1_1420_update_start_ o<-& (call_stmt_1443_sample_completed_ 0)
          // start: Forward dependencies from col_index1 to transition call_stmt_1443_sample_start_
          call_stmt_1443_sample_start_ <-& (RPIPE_env_mem_request_1_1420_update_completed_)
          // done: Forward dependencies from col_index1 to transition call_stmt_1443_sample_start_
          // RAW reenables for col_index1
          RPIPE_env_mem_request_1_1420_update_start_ o<-& (call_stmt_1443_sample_completed_ 0)
          // start: Forward dependencies from wdata1 to transition call_stmt_1443_sample_start_
          call_stmt_1443_sample_start_ <-& (RPIPE_env_mem_request_1_1420_update_completed_)
          // done: Forward dependencies from wdata1 to transition call_stmt_1443_sample_start_
          // RAW reenables for wdata1
          RPIPE_env_mem_request_1_1420_update_start_ o<-& (call_stmt_1443_sample_completed_ 0)
          ;;[call_stmt_1443_Sample] 
          {
            $T [crr] $T [cra] 
          }
          ;;[call_stmt_1443_Update] 
          {
            $T [ccr] $T [cca] 
          }
          call_stmt_1443_sample_start_ &-> (call_stmt_1443_Sample)
          call_stmt_1443_sample_completed_ <-& (call_stmt_1443_Sample)
          call_stmt_1443_sample_completed_ &-> ($null)
          call_stmt_1443_update_start_ &-> (call_stmt_1443_Update)
          call_stmt_1443_update_completed_ <-& (call_stmt_1443_Update)
          // Call output argument 0
          // (as target) rdata1
          // self-release: 
          call_stmt_1443_sample_start_ o<-& (call_stmt_1443_sample_completed_ 1)
          $null &-> (call_stmt_1443_update_start_)
          call_stmt_1443_update_start_ o<-& (call_stmt_1443_update_completed_ 0)
          // start: WAR dependencies for rdata1
          // done: WAR dependencies for rdata1
          // end: 			$call accessMem (rwbar1 row_index1 col_index1 wdata1 ) (rdata1 ) 
          // start:  			env_mem_response_1 := rdata1// bits of buffering = 16. 
          //  file prog.linked.opt.aa, line 358
          // Source expression
          // rdata1
          // Target expression
          // (as target) env_mem_response_1
          $T[WPIPE_env_mem_response_1_1444_sample_start_] 
          $T[WPIPE_env_mem_response_1_1444_sample_completed_] 
          $T[WPIPE_env_mem_response_1_1444_update_start_] 
          $T[WPIPE_env_mem_response_1_1444_update_completed_] 
          ;;[WPIPE_env_mem_response_1_1444_Sample] 
          {
            // pipe write sample-start env_mem_response_1
            $T [req] $T [ack] 
          }
          ;;[WPIPE_env_mem_response_1_1444_Update] 
          {
            // pipe write update (complete) env_mem_response_1
            $T [req] $T [ack] 
          }
          WPIPE_env_mem_response_1_1444_sample_start_ &-> (WPIPE_env_mem_response_1_1444_Sample)
          WPIPE_env_mem_response_1_1444_sample_completed_ <-& (WPIPE_env_mem_response_1_1444_Sample)
          WPIPE_env_mem_response_1_1444_update_start_ <-& (WPIPE_env_mem_response_1_1444_sample_completed_)
          WPIPE_env_mem_response_1_1444_update_start_ &-> (WPIPE_env_mem_response_1_1444_Update)
          WPIPE_env_mem_response_1_1444_update_completed_ <-& (WPIPE_env_mem_response_1_1444_Update)
          WPIPE_env_mem_response_1_1444_sample_start_ o<-& (WPIPE_env_mem_response_1_1444_update_completed_ 0)
          // start: Forward dependencies from rdata1 to transition WPIPE_env_mem_response_1_1444_sample_start_
          WPIPE_env_mem_response_1_1444_sample_start_ <-& (call_stmt_1443_update_completed_)
          // done: Forward dependencies from rdata1 to transition WPIPE_env_mem_response_1_1444_sample_start_
          // RAW reenables for rdata1
          call_stmt_1443_update_start_ o<-& (WPIPE_env_mem_response_1_1444_sample_completed_ 0)
          // end:  			env_mem_response_1 := rdata1// bits of buffering = 16. 
          $T [loop_body_delay_to_condition_start] $delay
          loop_body_start &-> (loop_body_delay_to_condition_start)
          loop_body_delay_to_condition_start &-> (condition_evaluated)
          condition_evaluated &-> ($null)
          // load-store dependencies..
          // memory-space  memory_space_3
          //  call_stmt_1443 store
          // reenable across ring for memory space memory_space_3
          // leading and trailing sets are the same... no ring dependency
          // pipe read/write dependencies for pipe env_mem_response_1
          // read-dependencies for pipe env_mem_response_1
          // write-dependencies for pipe env_mem_response_1
          // signal dependencies for env_mem_response_1
          // pipe read/write dependencies for pipe env_mem_request_1
          // read-dependencies for pipe env_mem_request_1
          // write-dependencies for pipe env_mem_request_1
          // signal dependencies for env_mem_request_1
        }
        ( first_time_through_loop_body  back_edge_to_loop_body) 
        ( condition_evaluated )
        ;; [loop_exit] 
        {
          $T [ack] 
        }
        ;; [loop_taken] 
        {
          $T [ack] 
        }
        do_while_stmt_1417__entry__ <-| ($entry)
        loop_body_done <-| ( do_while_stmt_1417_loop_body ) 
        condition_done |-> (loop_exit loop_taken)
        do_while_stmt_1417__exit__ |-> ($exit)
        $bind condition_done <= do_while_stmt_1417_loop_body : condition_evaluated
        $bind do_while_stmt_1417__entry__  => do_while_stmt_1417_loop_body : first_time_through_loop_body 
        $bind loop_back  => do_while_stmt_1417_loop_body : back_edge_to_loop_body 
        $terminate (loop_exit loop_taken loop_body_done) (loop_back do_while_stmt_1417__exit__)
      }
      do_while_stmt_1417__entry__ |-> (do_while_stmt_1417)
      do_while_stmt_1417__exit__ <-| (do_while_stmt_1417)
      do_while_stmt_1417__entry__ <-| (branch_block_stmt_1416__entry__)
      do_while_stmt_1417__exit__ |-> (branch_block_stmt_1416__exit__)
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %memAccessDaemon%loop%
    //  file prog.linked.opt.aa, line 350
    // constant-object-declarations for block %memAccessDaemon%loop
    //  file prog.linked.opt.aa, line 346
    // constant-object-declarations for block %memAccessDaemon
    //  file prog.linked.opt.aa, line 341
    // constant-declarations for block %memAccessDaemon%loop
    //  file prog.linked.opt.aa, line 346
    // do-while statement  
    //  file prog.linked.opt.aa, line 348
    // 1 
    $constant $W[konst_1448_wire_constant] : $int<1> := _b1// 1
    // constant-declarations for block %memAccessDaemon%loop%
    //  file prog.linked.opt.aa, line 350
    // 			$call accessMem (rwbar1 row_index1 col_index1 wdata1 ) (rdata1 ) 
    //  file prog.linked.opt.aa, line 357
    // block %memAccessDaemon%loop
    //  file prog.linked.opt.aa, line 346
    // do-while statement  
    //  file prog.linked.opt.aa, line 348
    // 			cmd_1 := env_mem_request_1// bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 352
    // cmd_1
    $W[cmd_1_1421] : $int<32>
    // 			$volatile wdata1 := ( $slice cmd_1 31 16 ) 
    //  file prog.linked.opt.aa, line 353
    // wdata1
    $W[wdata1_1425] : $int<16>
    // 			$volatile row_index1 := ( $slice cmd_1 15 10 ) 
    //  file prog.linked.opt.aa, line 354
    // row_index1
    $W[row_index1_1429] : $int<6>
    // 			$volatile col_index1 := ( $slice cmd_1 9 5 ) 
    //  file prog.linked.opt.aa, line 355
    // col_index1
    $W[col_index1_1433] : $int<5>
    // 			$volatile rwbar1 := ( $slice cmd_1 0 0 ) 
    //  file prog.linked.opt.aa, line 356
    // rwbar1
    $W[rwbar1_1437] : $int<1>
    // 			$call accessMem (rwbar1 row_index1 col_index1 wdata1 ) (rdata1 ) 
    //  file prog.linked.opt.aa, line 357
    // rdata1
    $W[rdata1_1443] : $int<16>
    // 			env_mem_response_1 := rdata1// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 358
    // env_mem_response_1
    // datapath-instances for block %memAccessDaemon%loop
    //  file prog.linked.opt.aa, line 346
    // datapath-instances for do-while  
    //  file prog.linked.opt.aa, line 348
    ==0? [do_while_stmt_1417_branch] (konst_1448_wire_constant)
    $flowthrough
    // 			cmd_1 := env_mem_request_1// bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 352
    // env_mem_request_1
    $ioport $in [RPIPE_env_mem_request_1_1420_inst] (env_mem_request_1) (cmd_1_1421)  $fullrate 
    $buffering $out RPIPE_env_mem_request_1_1420_inst cmd_1_1421 1
    // 			$volatile wdata1 := ( $slice cmd_1 31 16 ) 
    //  file prog.linked.opt.aa, line 353
    // ( $slice cmd_1 31 16 ) 
    [:] [slice_1424_inst] (cmd_1_1421 31 16) (wdata1_1425)  $flowthrough
    $delay slice_1424_inst 0
    // 			$volatile row_index1 := ( $slice cmd_1 15 10 ) 
    //  file prog.linked.opt.aa, line 354
    // ( $slice cmd_1 15 10 ) 
    [:] [slice_1428_inst] (cmd_1_1421 15 10) (row_index1_1429)  $flowthrough
    $delay slice_1428_inst 0
    // 			$volatile col_index1 := ( $slice cmd_1 9 5 ) 
    //  file prog.linked.opt.aa, line 355
    // ( $slice cmd_1 9 5 ) 
    [:] [slice_1432_inst] (cmd_1_1421 9 5) (col_index1_1433)  $flowthrough
    $delay slice_1432_inst 0
    // 			$volatile rwbar1 := ( $slice cmd_1 0 0 ) 
    //  file prog.linked.opt.aa, line 356
    // ( $slice cmd_1 0 0 ) 
    [:] [slice_1436_inst] (cmd_1_1421 0 0) (rwbar1_1437)  $flowthrough
    $delay slice_1436_inst 0
    // 			$call accessMem (rwbar1 row_index1 col_index1 wdata1 ) (rdata1 ) 
    //  file prog.linked.opt.aa, line 357
    $call [call_stmt_1443_call] $module accessMem(rwbar1_1437 row_index1_1429 col_index1_1433 wdata1_1425) (rdata1_1443)   $fullrate
    $delay call_stmt_1443_call 7
    $buffering  $in call_stmt_1443_call rwbar1_1437 1
    $buffering  $in call_stmt_1443_call row_index1_1429 1
    $buffering  $in call_stmt_1443_call col_index1_1433 1
    $buffering  $in call_stmt_1443_call wdata1_1425 1
    $buffering  $out call_stmt_1443_call rdata1_1443 1
    // 			env_mem_response_1 := rdata1// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 358
    // env_mem_response_1
    $ioport $out [WPIPE_env_mem_response_1_1444_inst]  (rdata1_1443) (env_mem_response_1)  $fullrate 
  }
  // end data-path
  // CP-DP links for do-while  do_while_stmt_1417
  //  file prog.linked.opt.aa, line 348
  // 			cmd_1 := env_mem_request_1// bits of buffering = 32. 
  //  file prog.linked.opt.aa, line 352
  // env_mem_request_1
  RPIPE_env_mem_request_1_1420_inst <=> (branch_block_stmt_1416/do_while_stmt_1417/do_while_stmt_1417_loop_body/RPIPE_env_mem_request_1_1420_Sample/rr branch_block_stmt_1416/do_while_stmt_1417/do_while_stmt_1417_loop_body/RPIPE_env_mem_request_1_1420_Update/cr) (branch_block_stmt_1416/do_while_stmt_1417/do_while_stmt_1417_loop_body/RPIPE_env_mem_request_1_1420_Sample/ra branch_block_stmt_1416/do_while_stmt_1417/do_while_stmt_1417_loop_body/RPIPE_env_mem_request_1_1420_Update/ca)
  // 			$volatile wdata1 := ( $slice cmd_1 31 16 ) 
  //  file prog.linked.opt.aa, line 353
  // cmd_1
  // 			$volatile row_index1 := ( $slice cmd_1 15 10 ) 
  //  file prog.linked.opt.aa, line 354
  // cmd_1
  // 			$volatile col_index1 := ( $slice cmd_1 9 5 ) 
  //  file prog.linked.opt.aa, line 355
  // cmd_1
  // 			$volatile rwbar1 := ( $slice cmd_1 0 0 ) 
  //  file prog.linked.opt.aa, line 356
  // cmd_1
  // 			$call accessMem (rwbar1 row_index1 col_index1 wdata1 ) (rdata1 ) 
  //  file prog.linked.opt.aa, line 357
  // rwbar1
  // row_index1
  // col_index1
  // wdata1
  call_stmt_1443_call <=> (branch_block_stmt_1416/do_while_stmt_1417/do_while_stmt_1417_loop_body/call_stmt_1443_Sample/crr branch_block_stmt_1416/do_while_stmt_1417/do_while_stmt_1417_loop_body/call_stmt_1443_Update/ccr) (branch_block_stmt_1416/do_while_stmt_1417/do_while_stmt_1417_loop_body/call_stmt_1443_Sample/cra branch_block_stmt_1416/do_while_stmt_1417/do_while_stmt_1417_loop_body/call_stmt_1443_Update/cca)
  // 			env_mem_response_1 := rdata1// bits of buffering = 16. 
  //  file prog.linked.opt.aa, line 358
  // rdata1
  // env_mem_response_1
  WPIPE_env_mem_response_1_1444_inst <=> (branch_block_stmt_1416/do_while_stmt_1417/do_while_stmt_1417_loop_body/WPIPE_env_mem_response_1_1444_Sample/req branch_block_stmt_1416/do_while_stmt_1417/do_while_stmt_1417_loop_body/WPIPE_env_mem_response_1_1444_Update/req) (branch_block_stmt_1416/do_while_stmt_1417/do_while_stmt_1417_loop_body/WPIPE_env_mem_response_1_1444_Sample/ack branch_block_stmt_1416/do_while_stmt_1417/do_while_stmt_1417_loop_body/WPIPE_env_mem_response_1_1444_Update/ack)
  do_while_stmt_1417_branch <=> (branch_block_stmt_1416/do_while_stmt_1417/do_while_stmt_1417_loop_body/condition_evaluated) (branch_block_stmt_1416/do_while_stmt_1417/loop_exit/ack branch_block_stmt_1416/do_while_stmt_1417/loop_taken/ack)
}
$module [memAccessDaemon2] 
{
  // pipe-declarations for block %memAccessDaemon2
  //  file prog.linked.opt.aa, line 362
  // pipe-declarations for block %memAccessDaemon2%loop
  //  file prog.linked.opt.aa, line 367
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    <>[branch_block_stmt_1452] // Branch Block  file prog.linked.opt.aa, line 367
    {
      $P [branch_block_stmt_1452__entry__]
      branch_block_stmt_1452__entry__ <-| ($entry)
      $P [branch_block_stmt_1452__exit__]
      branch_block_stmt_1452__exit__ |-> ($exit)
      $P [do_while_stmt_1453__entry__] 
      $P [do_while_stmt_1453__exit__] 
      // do-while-statement  
      //  file prog.linked.opt.aa, line 369
      <o> [do_while_stmt_1453]  $depth 20 $buffering 2 
      {
        $P[do_while_stmt_1453__entry__] 
        $P[do_while_stmt_1453__exit__] 
        $P[loop_back] 
        $P[condition_done] 
        $P[loop_body_done] 
        $pipeline [do_while_stmt_1453_loop_body] 
        {
          // Pipelined!
          $T[back_edge_to_loop_body] 
          $T[first_time_through_loop_body] 
          $T[loop_body_start] 
          $T[condition_evaluated] 
          $transitionmerge [entry_tmerge] (back_edge_to_loop_body first_time_through_loop_body) (loop_body_start)
          $entry <-& (loop_body_start)
          // start:  			cmd_2 := env_mem_request_2// bits of buffering = 32. 
          //  file prog.linked.opt.aa, line 373
          // Source expression
          // env_mem_request_2
          $T[RPIPE_env_mem_request_2_1456_sample_start_] 
          $T[RPIPE_env_mem_request_2_1456_sample_completed_] 
          $T[RPIPE_env_mem_request_2_1456_update_start_] 
          $T[RPIPE_env_mem_request_2_1456_update_completed_] 
          ;;[RPIPE_env_mem_request_2_1456_Sample] 
          {
            // pipe read sample
            $T [rr] $T [ra] 
          }
          ;;[RPIPE_env_mem_request_2_1456_Update] 
          {
            // pipe read update
            $T [cr] $T [ca] 
          }
          RPIPE_env_mem_request_2_1456_sample_start_ &-> (RPIPE_env_mem_request_2_1456_Sample)
          RPIPE_env_mem_request_2_1456_sample_completed_ <-& (RPIPE_env_mem_request_2_1456_Sample)
          RPIPE_env_mem_request_2_1456_update_start_ <-& (RPIPE_env_mem_request_2_1456_sample_completed_)
          RPIPE_env_mem_request_2_1456_update_start_ &-> (RPIPE_env_mem_request_2_1456_Update)
          RPIPE_env_mem_request_2_1456_update_completed_ <-& (RPIPE_env_mem_request_2_1456_Update)
          RPIPE_env_mem_request_2_1456_sample_start_ o<-& (RPIPE_env_mem_request_2_1456_update_completed_ 0)
          // Target expression
          // (as target) cmd_2
          // start: WAR dependencies for cmd_2
          // done: WAR dependencies for cmd_2
          // end:  			cmd_2 := env_mem_request_2// bits of buffering = 32. 
          // start: WAR dependencies for wdata2
          // done: WAR dependencies for wdata2
          // start:  			$volatile wdata2 := ( $slice cmd_2 31 16 ) 
          //  file prog.linked.opt.aa, line 374
          // volatile! 
          // Source expression
          // ( $slice cmd_2 31 16 ) 
          // cmd_2
          // Target expression
          // (as target) wdata2
          // start: WAR dependencies for wdata2
          // done: WAR dependencies for wdata2
          // end:  			$volatile wdata2 := ( $slice cmd_2 31 16 ) 
          // start: WAR dependencies for row_index2
          // done: WAR dependencies for row_index2
          // start:  			$volatile row_index2 := ( $slice cmd_2 15 10 ) 
          //  file prog.linked.opt.aa, line 375
          // volatile! 
          // Source expression
          // ( $slice cmd_2 15 10 ) 
          // cmd_2
          // Target expression
          // (as target) row_index2
          // start: WAR dependencies for row_index2
          // done: WAR dependencies for row_index2
          // end:  			$volatile row_index2 := ( $slice cmd_2 15 10 ) 
          // start: WAR dependencies for col_index2
          // done: WAR dependencies for col_index2
          // start:  			$volatile col_index2 := ( $slice cmd_2 9 5 ) 
          //  file prog.linked.opt.aa, line 376
          // volatile! 
          // Source expression
          // ( $slice cmd_2 9 5 ) 
          // cmd_2
          // Target expression
          // (as target) col_index2
          // start: WAR dependencies for col_index2
          // done: WAR dependencies for col_index2
          // end:  			$volatile col_index2 := ( $slice cmd_2 9 5 ) 
          // start: WAR dependencies for rwbar2
          // done: WAR dependencies for rwbar2
          // start:  			$volatile rwbar2 := ( $slice cmd_2 0 0 ) 
          //  file prog.linked.opt.aa, line 377
          // volatile! 
          // Source expression
          // ( $slice cmd_2 0 0 ) 
          // cmd_2
          // Target expression
          // (as target) rwbar2
          // start: WAR dependencies for rwbar2
          // done: WAR dependencies for rwbar2
          // end:  			$volatile rwbar2 := ( $slice cmd_2 0 0 ) 
          // start: 			$call accessMem (rwbar2 row_index2 col_index2 wdata2 ) (rdata2 ) 
          //  file prog.linked.opt.aa, line 378
          $T[call_stmt_1479_sample_start_] 
          $T[call_stmt_1479_sample_completed_] 
          $T[call_stmt_1479_update_start_] 
          $T[call_stmt_1479_update_completed_] 
          // Call input argument 0
          // rwbar2
          // Call input argument 1
          // row_index2
          // Call input argument 2
          // col_index2
          // Call input argument 3
          // wdata2
          // start: Forward dependencies from rwbar2 to transition call_stmt_1479_sample_start_
          call_stmt_1479_sample_start_ <-& (RPIPE_env_mem_request_2_1456_update_completed_)
          // done: Forward dependencies from rwbar2 to transition call_stmt_1479_sample_start_
          // RAW reenables for rwbar2
          RPIPE_env_mem_request_2_1456_update_start_ o<-& (call_stmt_1479_sample_completed_ 0)
          // start: Forward dependencies from row_index2 to transition call_stmt_1479_sample_start_
          call_stmt_1479_sample_start_ <-& (RPIPE_env_mem_request_2_1456_update_completed_)
          // done: Forward dependencies from row_index2 to transition call_stmt_1479_sample_start_
          // RAW reenables for row_index2
          RPIPE_env_mem_request_2_1456_update_start_ o<-& (call_stmt_1479_sample_completed_ 0)
          // start: Forward dependencies from col_index2 to transition call_stmt_1479_sample_start_
          call_stmt_1479_sample_start_ <-& (RPIPE_env_mem_request_2_1456_update_completed_)
          // done: Forward dependencies from col_index2 to transition call_stmt_1479_sample_start_
          // RAW reenables for col_index2
          RPIPE_env_mem_request_2_1456_update_start_ o<-& (call_stmt_1479_sample_completed_ 0)
          // start: Forward dependencies from wdata2 to transition call_stmt_1479_sample_start_
          call_stmt_1479_sample_start_ <-& (RPIPE_env_mem_request_2_1456_update_completed_)
          // done: Forward dependencies from wdata2 to transition call_stmt_1479_sample_start_
          // RAW reenables for wdata2
          RPIPE_env_mem_request_2_1456_update_start_ o<-& (call_stmt_1479_sample_completed_ 0)
          ;;[call_stmt_1479_Sample] 
          {
            $T [crr] $T [cra] 
          }
          ;;[call_stmt_1479_Update] 
          {
            $T [ccr] $T [cca] 
          }
          call_stmt_1479_sample_start_ &-> (call_stmt_1479_Sample)
          call_stmt_1479_sample_completed_ <-& (call_stmt_1479_Sample)
          call_stmt_1479_sample_completed_ &-> ($null)
          call_stmt_1479_update_start_ &-> (call_stmt_1479_Update)
          call_stmt_1479_update_completed_ <-& (call_stmt_1479_Update)
          // Call output argument 0
          // (as target) rdata2
          // self-release: 
          call_stmt_1479_sample_start_ o<-& (call_stmt_1479_sample_completed_ 1)
          $null &-> (call_stmt_1479_update_start_)
          call_stmt_1479_update_start_ o<-& (call_stmt_1479_update_completed_ 0)
          // start: WAR dependencies for rdata2
          // done: WAR dependencies for rdata2
          // end: 			$call accessMem (rwbar2 row_index2 col_index2 wdata2 ) (rdata2 ) 
          // start:  			env_mem_response_2 := rdata2// bits of buffering = 16. 
          //  file prog.linked.opt.aa, line 379
          // Source expression
          // rdata2
          // Target expression
          // (as target) env_mem_response_2
          $T[WPIPE_env_mem_response_2_1480_sample_start_] 
          $T[WPIPE_env_mem_response_2_1480_sample_completed_] 
          $T[WPIPE_env_mem_response_2_1480_update_start_] 
          $T[WPIPE_env_mem_response_2_1480_update_completed_] 
          ;;[WPIPE_env_mem_response_2_1480_Sample] 
          {
            // pipe write sample-start env_mem_response_2
            $T [req] $T [ack] 
          }
          ;;[WPIPE_env_mem_response_2_1480_Update] 
          {
            // pipe write update (complete) env_mem_response_2
            $T [req] $T [ack] 
          }
          WPIPE_env_mem_response_2_1480_sample_start_ &-> (WPIPE_env_mem_response_2_1480_Sample)
          WPIPE_env_mem_response_2_1480_sample_completed_ <-& (WPIPE_env_mem_response_2_1480_Sample)
          WPIPE_env_mem_response_2_1480_update_start_ <-& (WPIPE_env_mem_response_2_1480_sample_completed_)
          WPIPE_env_mem_response_2_1480_update_start_ &-> (WPIPE_env_mem_response_2_1480_Update)
          WPIPE_env_mem_response_2_1480_update_completed_ <-& (WPIPE_env_mem_response_2_1480_Update)
          WPIPE_env_mem_response_2_1480_sample_start_ o<-& (WPIPE_env_mem_response_2_1480_update_completed_ 0)
          // start: Forward dependencies from rdata2 to transition WPIPE_env_mem_response_2_1480_sample_start_
          WPIPE_env_mem_response_2_1480_sample_start_ <-& (call_stmt_1479_update_completed_)
          // done: Forward dependencies from rdata2 to transition WPIPE_env_mem_response_2_1480_sample_start_
          // RAW reenables for rdata2
          call_stmt_1479_update_start_ o<-& (WPIPE_env_mem_response_2_1480_sample_completed_ 0)
          // end:  			env_mem_response_2 := rdata2// bits of buffering = 16. 
          $T [loop_body_delay_to_condition_start] $delay
          loop_body_start &-> (loop_body_delay_to_condition_start)
          loop_body_delay_to_condition_start &-> (condition_evaluated)
          condition_evaluated &-> ($null)
          // load-store dependencies..
          // memory-space  memory_space_3
          //  call_stmt_1479 store
          // reenable across ring for memory space memory_space_3
          // leading and trailing sets are the same... no ring dependency
          // pipe read/write dependencies for pipe env_mem_request_2
          // read-dependencies for pipe env_mem_request_2
          // write-dependencies for pipe env_mem_request_2
          // signal dependencies for env_mem_request_2
          // pipe read/write dependencies for pipe env_mem_response_2
          // read-dependencies for pipe env_mem_response_2
          // write-dependencies for pipe env_mem_response_2
          // signal dependencies for env_mem_response_2
        }
        ( first_time_through_loop_body  back_edge_to_loop_body) 
        ( condition_evaluated )
        ;; [loop_exit] 
        {
          $T [ack] 
        }
        ;; [loop_taken] 
        {
          $T [ack] 
        }
        do_while_stmt_1453__entry__ <-| ($entry)
        loop_body_done <-| ( do_while_stmt_1453_loop_body ) 
        condition_done |-> (loop_exit loop_taken)
        do_while_stmt_1453__exit__ |-> ($exit)
        $bind condition_done <= do_while_stmt_1453_loop_body : condition_evaluated
        $bind do_while_stmt_1453__entry__  => do_while_stmt_1453_loop_body : first_time_through_loop_body 
        $bind loop_back  => do_while_stmt_1453_loop_body : back_edge_to_loop_body 
        $terminate (loop_exit loop_taken loop_body_done) (loop_back do_while_stmt_1453__exit__)
      }
      do_while_stmt_1453__entry__ |-> (do_while_stmt_1453)
      do_while_stmt_1453__exit__ <-| (do_while_stmt_1453)
      do_while_stmt_1453__entry__ <-| (branch_block_stmt_1452__entry__)
      do_while_stmt_1453__exit__ |-> (branch_block_stmt_1452__exit__)
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %memAccessDaemon2%loop%
    //  file prog.linked.opt.aa, line 371
    // constant-object-declarations for block %memAccessDaemon2%loop
    //  file prog.linked.opt.aa, line 367
    // constant-object-declarations for block %memAccessDaemon2
    //  file prog.linked.opt.aa, line 362
    // constant-declarations for block %memAccessDaemon2%loop
    //  file prog.linked.opt.aa, line 367
    // do-while statement  
    //  file prog.linked.opt.aa, line 369
    // 1 
    $constant $W[konst_1484_wire_constant] : $int<1> := _b1// 1
    // constant-declarations for block %memAccessDaemon2%loop%
    //  file prog.linked.opt.aa, line 371
    // 			$call accessMem (rwbar2 row_index2 col_index2 wdata2 ) (rdata2 ) 
    //  file prog.linked.opt.aa, line 378
    // block %memAccessDaemon2%loop
    //  file prog.linked.opt.aa, line 367
    // do-while statement  
    //  file prog.linked.opt.aa, line 369
    // 			cmd_2 := env_mem_request_2// bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 373
    // cmd_2
    $W[cmd_2_1457] : $int<32>
    // 			$volatile wdata2 := ( $slice cmd_2 31 16 ) 
    //  file prog.linked.opt.aa, line 374
    // wdata2
    $W[wdata2_1461] : $int<16>
    // 			$volatile row_index2 := ( $slice cmd_2 15 10 ) 
    //  file prog.linked.opt.aa, line 375
    // row_index2
    $W[row_index2_1465] : $int<6>
    // 			$volatile col_index2 := ( $slice cmd_2 9 5 ) 
    //  file prog.linked.opt.aa, line 376
    // col_index2
    $W[col_index2_1469] : $int<5>
    // 			$volatile rwbar2 := ( $slice cmd_2 0 0 ) 
    //  file prog.linked.opt.aa, line 377
    // rwbar2
    $W[rwbar2_1473] : $int<1>
    // 			$call accessMem (rwbar2 row_index2 col_index2 wdata2 ) (rdata2 ) 
    //  file prog.linked.opt.aa, line 378
    // rdata2
    $W[rdata2_1479] : $int<16>
    // 			env_mem_response_2 := rdata2// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 379
    // env_mem_response_2
    // datapath-instances for block %memAccessDaemon2%loop
    //  file prog.linked.opt.aa, line 367
    // datapath-instances for do-while  
    //  file prog.linked.opt.aa, line 369
    ==0? [do_while_stmt_1453_branch] (konst_1484_wire_constant)
    $flowthrough
    // 			cmd_2 := env_mem_request_2// bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 373
    // env_mem_request_2
    $ioport $in [RPIPE_env_mem_request_2_1456_inst] (env_mem_request_2) (cmd_2_1457)  $fullrate 
    $buffering $out RPIPE_env_mem_request_2_1456_inst cmd_2_1457 1
    // 			$volatile wdata2 := ( $slice cmd_2 31 16 ) 
    //  file prog.linked.opt.aa, line 374
    // ( $slice cmd_2 31 16 ) 
    [:] [slice_1460_inst] (cmd_2_1457 31 16) (wdata2_1461)  $flowthrough
    $delay slice_1460_inst 0
    // 			$volatile row_index2 := ( $slice cmd_2 15 10 ) 
    //  file prog.linked.opt.aa, line 375
    // ( $slice cmd_2 15 10 ) 
    [:] [slice_1464_inst] (cmd_2_1457 15 10) (row_index2_1465)  $flowthrough
    $delay slice_1464_inst 0
    // 			$volatile col_index2 := ( $slice cmd_2 9 5 ) 
    //  file prog.linked.opt.aa, line 376
    // ( $slice cmd_2 9 5 ) 
    [:] [slice_1468_inst] (cmd_2_1457 9 5) (col_index2_1469)  $flowthrough
    $delay slice_1468_inst 0
    // 			$volatile rwbar2 := ( $slice cmd_2 0 0 ) 
    //  file prog.linked.opt.aa, line 377
    // ( $slice cmd_2 0 0 ) 
    [:] [slice_1472_inst] (cmd_2_1457 0 0) (rwbar2_1473)  $flowthrough
    $delay slice_1472_inst 0
    // 			$call accessMem (rwbar2 row_index2 col_index2 wdata2 ) (rdata2 ) 
    //  file prog.linked.opt.aa, line 378
    $call [call_stmt_1479_call] $module accessMem(rwbar2_1473 row_index2_1465 col_index2_1469 wdata2_1461) (rdata2_1479)   $fullrate
    $delay call_stmt_1479_call 7
    $buffering  $in call_stmt_1479_call rwbar2_1473 1
    $buffering  $in call_stmt_1479_call row_index2_1465 1
    $buffering  $in call_stmt_1479_call col_index2_1469 1
    $buffering  $in call_stmt_1479_call wdata2_1461 1
    $buffering  $out call_stmt_1479_call rdata2_1479 1
    // 			env_mem_response_2 := rdata2// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 379
    // env_mem_response_2
    $ioport $out [WPIPE_env_mem_response_2_1480_inst]  (rdata2_1479) (env_mem_response_2)  $fullrate 
  }
  // end data-path
  // CP-DP links for do-while  do_while_stmt_1453
  //  file prog.linked.opt.aa, line 369
  // 			cmd_2 := env_mem_request_2// bits of buffering = 32. 
  //  file prog.linked.opt.aa, line 373
  // env_mem_request_2
  RPIPE_env_mem_request_2_1456_inst <=> (branch_block_stmt_1452/do_while_stmt_1453/do_while_stmt_1453_loop_body/RPIPE_env_mem_request_2_1456_Sample/rr branch_block_stmt_1452/do_while_stmt_1453/do_while_stmt_1453_loop_body/RPIPE_env_mem_request_2_1456_Update/cr) (branch_block_stmt_1452/do_while_stmt_1453/do_while_stmt_1453_loop_body/RPIPE_env_mem_request_2_1456_Sample/ra branch_block_stmt_1452/do_while_stmt_1453/do_while_stmt_1453_loop_body/RPIPE_env_mem_request_2_1456_Update/ca)
  // 			$volatile wdata2 := ( $slice cmd_2 31 16 ) 
  //  file prog.linked.opt.aa, line 374
  // cmd_2
  // 			$volatile row_index2 := ( $slice cmd_2 15 10 ) 
  //  file prog.linked.opt.aa, line 375
  // cmd_2
  // 			$volatile col_index2 := ( $slice cmd_2 9 5 ) 
  //  file prog.linked.opt.aa, line 376
  // cmd_2
  // 			$volatile rwbar2 := ( $slice cmd_2 0 0 ) 
  //  file prog.linked.opt.aa, line 377
  // cmd_2
  // 			$call accessMem (rwbar2 row_index2 col_index2 wdata2 ) (rdata2 ) 
  //  file prog.linked.opt.aa, line 378
  // rwbar2
  // row_index2
  // col_index2
  // wdata2
  call_stmt_1479_call <=> (branch_block_stmt_1452/do_while_stmt_1453/do_while_stmt_1453_loop_body/call_stmt_1479_Sample/crr branch_block_stmt_1452/do_while_stmt_1453/do_while_stmt_1453_loop_body/call_stmt_1479_Update/ccr) (branch_block_stmt_1452/do_while_stmt_1453/do_while_stmt_1453_loop_body/call_stmt_1479_Sample/cra branch_block_stmt_1452/do_while_stmt_1453/do_while_stmt_1453_loop_body/call_stmt_1479_Update/cca)
  // 			env_mem_response_2 := rdata2// bits of buffering = 16. 
  //  file prog.linked.opt.aa, line 379
  // rdata2
  // env_mem_response_2
  WPIPE_env_mem_response_2_1480_inst <=> (branch_block_stmt_1452/do_while_stmt_1453/do_while_stmt_1453_loop_body/WPIPE_env_mem_response_2_1480_Sample/req branch_block_stmt_1452/do_while_stmt_1453/do_while_stmt_1453_loop_body/WPIPE_env_mem_response_2_1480_Update/req) (branch_block_stmt_1452/do_while_stmt_1453/do_while_stmt_1453_loop_body/WPIPE_env_mem_response_2_1480_Sample/ack branch_block_stmt_1452/do_while_stmt_1453/do_while_stmt_1453_loop_body/WPIPE_env_mem_response_2_1480_Update/ack)
  do_while_stmt_1453_branch <=> (branch_block_stmt_1452/do_while_stmt_1453/do_while_stmt_1453_loop_body/condition_evaluated) (branch_block_stmt_1452/do_while_stmt_1453/loop_exit/ack branch_block_stmt_1452/do_while_stmt_1453/loop_taken/ack)
}
